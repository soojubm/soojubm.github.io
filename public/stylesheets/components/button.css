@define-mixin button {
  --button-text: null;
  --button-font-weight: var(--font-weight-bold);
  --button-radius: var(--radius);

  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 6rem;
  height: var(--size-large);
  padding: 1px var(--space-4) 0;
  border-radius: var(--radius);
  box-sizing: border-box;
  font-weight: var(--font-weight-bold);
  position: relative;

  @content;
  &:hover:not(:disabled), &.is-hover:not(:disabled) {
    box-shadow: var(--state-hover);
  }
  &:focus, &.is-focus {
    outline: 0;
    box-shadow: var(--state-focus); // hover override
  }
  /* // &:active {outline:0;an imation:ripple2 0.2s linear forwards;} */
  &:visited {}
  &:disabled {opacity:.5;cursor:not-allowed;}
}

.button {
  @mixin button;
}

/* // ! role=button => spacebar X */

/* // button:not(:active),
// button:not(:focus) {outline:0;} */
/* button:before {content:'';display:block;width:8px;height:8px;background:rgba(0,0,0,.2);position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);opacity:0;} */
/* button:active:before {width:100%;height:100%;animation:ripple .6s;} */

/* // &[aria-pressed=true] {}
// &[aria-pressed=false] {}*/

/* // 믹스인은 버튼-프라이머리를 가져다 쓰기 위해서인데, css 정책을 완전 바꿔야 할 것 같다. utility => componenet.
// ! 커스텀엘리먼트를 쓰는 경우 클래스이름으로 독자적인  */

@define-mixin button-primary {
  @mixin button;
  background: var(--color-primary);
  border:1px solid var(--color-primary);
  color: #fff;
  /* // 다크테마와 동일한 스타일 */
}
@define-mixin button-secondary {
  @mixin button;
  border:1px solid transparent;
  background:var(--green100);color:var(--color-primary);
}
@define-mixin button-tertiary {
  @mixin button;
  border: 1px solid var(--color-background-weak);
  background:var(--color-background-weak);
  color:var(--color-text);
}
@define-mixin button-text {
  @mixin button;
  border:1px solid transparent;color:var(--color-primary);
}

/* // flat */
.button {}
.button[data-variation=primary] {
  background: var(--color-primary);
  border:1px solid var(--color-primary);
  color: #fff;
  /* // 다크테마와 동일한 스타일 */
}
.button[data-variation=secondary] {
  border:1px solid transparent;
  background:var(--green100);color:var(--color-primary);
}
.button[data-variation=tertiary] {
  border: 1px solid var(--color-background-weak);
  background:var(--color-background-weak);
  color:var(--color-text);
}
.button[data-variation=text] {
  border:1px solid transparent;color:var(--color-primary);
}
.button[data-variation=danger] {background:var(--red800);border:1px solid var(--red800);color:var(--gray0);}



close-button {position:absolute;right:var(--space-2);top:var(--sopace-2);}


.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 6rem;
  height: var(--size-large);
  padding: 1px var(--space-4) 0;
  border-radius: var(--radius);
  box-sizing: border-box;
  font-weight: var(--font-weight-bold);
  position: relative;
}

.button[data-variation=primary] {
  background: var(--color-primary);
  border:1px solid var(--color-primary);
  color: #fff;
}
.button[data-variation=secondary] {
  border:1px solid transparent;
  background:var(--green100);color:var(--color-primary);
}
.button[data-variation=tertiary] {
  border: 1px solid var(--color-background-weak);
  background:var(--color-background-weak);
  color:var(--color-text);
}