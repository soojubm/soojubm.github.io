!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=57)}([function(e,t,n){},function(e,t,n){"use strict";var r=n(2),o=n(4),i=n(6),c=n(7),s=n(8),a=n(10),l=Math.max,u=Math.min,d=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(19)("replace",2,(function(e,t,n,v){return[function(r,o){var i=e(this),c=null==r?void 0:r[t];return void 0!==c?c.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=v(n,e,this,t);if(o.done)return o.value;var d=r(e),f=String(this),p="function"==typeof t;p||(t=String(t));var m=d.global;if(m){var g=d.unicode;d.lastIndex=0}for(var h=[];;){var y=a(d,f);if(null===y)break;if(h.push(y),!m)break;""===String(y[0])&&(d.lastIndex=s(f,i(d.lastIndex),g))}for(var b,S="",L=0,w=0;w<h.length;w++){y=h[w];for(var E=String(y[0]),j=l(u(c(y.index),f.length),0),k=[],O=1;O<y.length;O++)k.push(void 0===(b=y[O])?b:String(b));var A=y.groups;if(p){var q=[E].concat(k,j,f);void 0!==A&&q.push(A);var T=String(t.apply(void 0,q))}else T=x(E,f,j,k,A,t);j>=L&&(S+=f.slice(L,j)+T,L=j+E.length)}return S+f.slice(L)}];function x(e,t,r,i,c,s){var a=r+e.length,l=i.length,u=p;return void 0!==c&&(c=o(c),u=f),n.call(s,u,(function(n,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(a);case"<":s=c[o.slice(1,-1)];break;default:var u=+o;if(0===u)return n;if(u>l){var f=d(u/10);return 0===f?n:f<=l?void 0===i[f-1]?o.charAt(1):i[f-1]+o.charAt(1):n}s=i[u-1]}return void 0===s?"":s}))}}))},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(5);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(7),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";var r=n(9)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r=n(7),o=n(5);e.exports=function(e){return function(t,n){var i,c,s=String(o(t)),a=r(n),l=s.length;return a<0||a>=l?e?"":void 0:(i=s.charCodeAt(a))<55296||i>56319||a+1===l||(c=s.charCodeAt(a+1))<56320||c>57343?e?s.charAt(a):i:e?s.slice(a,a+2):c-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(11),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){var r=n(12),o=n(13)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,c;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(c=r(t))&&"function"==typeof t.callee?"Arguments":c}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(14)("wks"),o=n(18),i=n(16).Symbol,c="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=c&&i[e]||(c?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(15),o=n(16),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=!1},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){"use strict";n(20);var r=n(32),o=n(24),i=n(28),c=n(5),s=n(13),a=n(21),l=s("species"),u=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),d=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var f=s(e),p=!i((function(){var t={};return t[f]=function(){return 7},7!=""[e](t)})),v=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[l]=function(){return n}),n[f](""),!t})):void 0;if(!p||!v||"replace"===e&&!u||"split"===e&&!d){var x=/./[f],m=n(c,f,""[e],(function(e,t,n,r,o){return t.exec===a?p&&!o?{done:!0,value:x.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),g=m[0],h=m[1];r(String.prototype,e,g),o(RegExp.prototype,f,2==t?function(e,t){return h.call(e,this,t)}:function(e){return h.call(e,this)})}}},function(e,t,n){"use strict";var r=n(21);n(23)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){"use strict";var r,o,i=n(22),c=RegExp.prototype.exec,s=String.prototype.replace,a=c,l=(r=/a/,o=/b*/g,c.call(r,"a"),c.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),u=void 0!==/()??/.exec("")[1];(l||u)&&(a=function(e){var t,n,r,o,a=this;return u&&(n=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),l&&(t=a.lastIndex),r=c.call(a,e),l&&r&&(a.lastIndex=a.global?r.index+r[0].length:t),u&&r&&r.length>1&&s.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=a},function(e,t,n){"use strict";var r=n(2);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(16),o=n(15),i=n(24),c=n(32),s=n(35),a=function(e,t,n){var l,u,d,f,p=e&a.F,v=e&a.G,x=e&a.S,m=e&a.P,g=e&a.B,h=v?r:x?r[t]||(r[t]={}):(r[t]||{}).prototype,y=v?o:o[t]||(o[t]={}),b=y.prototype||(y.prototype={});for(l in v&&(n=t),n)d=((u=!p&&h&&void 0!==h[l])?h:n)[l],f=g&&u?s(d,r):m&&"function"==typeof d?s(Function.call,d):d,h&&c(h,l,d,e&a.U),y[l]!=d&&i(y,l,f),m&&b[l]!=d&&(b[l]=d)};r.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,e.exports=a},function(e,t,n){var r=n(25),o=n(31);e.exports=n(27)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(2),o=n(26),i=n(30),c=Object.defineProperty;t.f=n(27)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(27)&&!n(28)((function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){e.exports=!n(28)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(3),o=n(16).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(3);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(16),o=n(24),i=n(33),c=n(18)("src"),s=n(34),a=(""+s).split("toString");n(15).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,n,s){var l="function"==typeof n;l&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(l&&(i(n,c)||o(n,c,e[t]?""+e[t]:a.join(String(t)))),e===r?e[t]=n:s?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[c]||s.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){e.exports=n(14)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(36);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){for(var r=n(38),o=n(48),i=n(32),c=n(16),s=n(24),a=n(41),l=n(13),u=l("iterator"),d=l("toStringTag"),f=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(p),x=0;x<v.length;x++){var m,g=v[x],h=p[g],y=c[g],b=y&&y.prototype;if(b&&(b[u]||s(b,u,f),b[d]||s(b,d,g),a[g]=f,h))for(m in r)b[m]||i(b,m,r[m],!0)}},function(e,t,n){"use strict";var r=n(39),o=n(40),i=n(41),c=n(42);e.exports=n(44)(Array,"Array",(function(e,t){this._t=c(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(13)("unscopables"),o=Array.prototype;null==o[r]&&n(24)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports={}},function(e,t,n){var r=n(43),o=n(5);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(12);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(17),o=n(23),i=n(32),c=n(24),s=n(41),a=n(45),l=n(55),u=n(56),d=n(13)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,v,x,m,g){a(n,t,v);var h,y,b,S=function(e){if(!f&&e in j)return j[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},L=t+" Iterator",w="values"==x,E=!1,j=e.prototype,k=j[d]||j["@@iterator"]||x&&j[x],O=k||S(x),A=x?w?S("entries"):O:void 0,q="Array"==t&&j.entries||k;if(q&&(b=u(q.call(new e)))!==Object.prototype&&b.next&&(l(b,L,!0),r||"function"==typeof b[d]||c(b,d,p)),w&&k&&"values"!==k.name&&(E=!0,O=function(){return k.call(this)}),r&&!g||!f&&!E&&j[d]||c(j,d,O),s[t]=O,s[L]=p,x)if(h={values:w?O:S("values"),keys:m?O:S("keys"),entries:A},g)for(y in h)y in j||i(j,y,h[y]);else o(o.P+o.F*(f||E),t,h);return h}},function(e,t,n){"use strict";var r=n(46),o=n(31),i=n(55),c={};n(24)(c,n(13)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(c,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(2),o=n(47),i=n(53),c=n(52)("IE_PROTO"),s=function(){},a=function(){var e,t=n(29)("iframe"),r=i.length;for(t.style.display="none",n(54).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),a=e.F;r--;)delete a.prototype[i[r]];return a()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[c]=e):n=a(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(25),o=n(2),i=n(48);e.exports=n(27)?Object.defineProperties:function(e,t){o(e);for(var n,c=i(t),s=c.length,a=0;s>a;)r.f(e,n=c[a++],t[n]);return e}},function(e,t,n){var r=n(49),o=n(53);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(33),o=n(42),i=n(50)(!1),c=n(52)("IE_PROTO");e.exports=function(e,t){var n,s=o(e),a=0,l=[];for(n in s)n!=c&&r(s,n)&&l.push(n);for(;t.length>a;)r(s,n=t[a++])&&(~i(l,n)||l.push(n));return l}},function(e,t,n){var r=n(42),o=n(6),i=n(51);e.exports=function(e){return function(t,n,c){var s,a=r(t),l=o(a.length),u=i(c,l);if(e&&n!=n){for(;l>u;)if((s=a[u++])!=s)return!0}else for(;l>u;u++)if((e||u in a)&&a[u]===n)return e||u||0;return!e&&-1}}},function(e,t,n){var r=n(7),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(14)("keys"),o=n(18);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(16).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(25).f,o=n(33),i=n(13)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(33),o=n(4),i=n(52)("IE_PROTO"),c=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},function(e,t,n){"use strict";n.r(t);n(0),n(1);"2034399002125581".slice(-4).padStart("2034399002125581".length,"*"),new Date,(new Date).getFullYear(),String((new Date).getMonth()+1).padStart(2,"0"),String((new Date).getDate()).padStart(2,"0"),(new Date).getDay(),(new Date).getHours(),(new Date).getMinutes(),(new Date).getSeconds(),(new Date).getHours(),(new Date).getHours(),(new Date).getHours();const r=Math.floor(157.7/60),o=Math.floor(157.7)-60*r,i=42;r.toString().padStart(2,"0"),o.toString().padStart(2,"0"),i.toString().padStart(2,"0");document.addEventListener("click",e=>{const{target:t}=e;let n;if(t.closest(".js-variation-decrement")){if((n=t.parentNode.querySelector(".js-variation-input")).value<=0)return void t.classList.add("is-disabled");--n.value}if(t.closest(".js-variation-increment")){if((n=t.parentNode.querySelector(".js-variation-input")).value>=10)return void t.classList.add("is-disabled");++n.value}});document.addEventListener("input",e=>{const{target:t}=e;if(!("textarea"===t.nodeName.toLowerCase()))return;const n=document.querySelector(".textfield-byte b"),r=t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length||0;n.innerText=r,r>30?t.parentNode.classList.add("is-invalid"):t.parentNode.classList.remove("is-invalid"),(e=>{e.style.height="inherit";const t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"})(t)});const c=()=>{const{body:e}=document;let t=void 0;const n=document.querySelectorAll(".js-modal");n&&(n.forEach(n=>n.addEventListener("click",r=>{r.stopPropagation(),n.nextElementSibling.classList.add("is-visible"),t=window.pageYOffset,e.classList.add("body-lock"),e.style.top="-".concat(t,"px"),document.addEventListener("click",(function(){if(!n.nextElementSibling.classList.contains("is-visible"))return;n.nextElementSibling.classList.remove("is-visible"),e.classList.remove("body-lock"),window.scrollTo(0,t)}))})),document.querySelectorAll(".modal-dialog").forEach(e=>e.addEventListener("click",e=>e.stopPropagation())))},s=e=>{const{body:t}=document,n=document.querySelector(e);if(!n)return;const r=n===document.querySelector(".navigation li");n.addEventListener("mouseenter",()=>{n.setAttribute("aria-expanded","true"),n.classList.add("is-expanded"),r&&t.classList.add("is-shown"),n.addEventListener("mouseleave",()=>{n.setAttribute("aria-expanded","false"),n.classList.remove("is-expanded"),r&&t.classList.remove("is-shown")})})},a=()=>{const e=document.querySelector(".post-head-progress");if(!e)return;let t;t=window.pageYOffset/(document.body.scrollHeight-window.innerHeight)*100+"%",e.style.width=t};var l=()=>{const e=document.getElementById("view"),t=()=>{let{hash:t}=window.location;const n=t?"/views/".concat(t.substring(1),".html"):"/views/profile.html";fetch(n).then(e=>e.ok?e.text():Promise.reject(e)).then(t=>{e.innerHTML=t;["#design"].includes(window.location.hash)?document.querySelector(".page-head").classList.add("--white"):document.querySelector(".page-head").classList.remove("--white"),window.addEventListener("scroll",(e=>{let{targetElement:t,addClass:n}=e;const{body:r}=document,o=document.querySelector(t);if(!o)return;let i,c=o.offsetHeight;window.addEventListener("resize",()=>{i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame(()=>{c=o.offsetHeight},60)}),window.addEventListener("scroll",()=>{console.log(c),i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame(()=>{window.pageYOffset>o.offsetTop+c?r.classList.add(n):r.classList.remove(n)},60)})})({targetElement:".post-head",addClass:"is-sticky"})),window.addEventListener("scroll",a,!0);(()=>{const e=document.querySelector(".js-comment-write"),t=document.querySelectorAll(".js-comment-textfield");e&&t&&t.forEach(t=>{t.addEventListener("focus",t=>{e.classList.add("is-focused")})})})(),(()=>{const e=document.querySelector(".slider");if(!e)return;const t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),r=e.querySelector(".slider-arrows-prev"),o=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot"),c=t.offsetWidth;let s=0;n.forEach(e=>s+=e.offsetWidth),o.addEventListener("click",(function(){t.scrollLeft+=100})),r.addEventListener("click",(function(){t.scrollLeft-=100})),i.forEach(e=>e.addEventListener("click",()=>{})),t.addEventListener("scroll",()=>{const{scrollLeft:e}=t;console.log("scroll-left",e,"offset-width",c)})})(),(()=>{const e=document.querySelector(".js-darkmode");if(!e)return;e.addEventListener("click",(function(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}));const t=localStorage.getItem("theme");t&&document.body.classList.add(t)})(),(()=>{document.addEventListener("DOMContentLoaded",n),document.addEventListener("mousemove",n),document.addEventListener("click",(function(){e.classList.add("expand"),setTimeout(()=>{e.classList.remove("expand")},500)}));const e=document.querySelector(".loading-object"),t=document.querySelectorAll("button, a");function n(){const t=event.clientX,n=event.clientY;e.style.left="".concat(t,"px"),e.style.top="".concat(n,"px")}e.classList.add("is-default"),t.forEach(t=>t.addEventListener("mouseleave",()=>{e.classList.remove("is-clickable")})),t.forEach(t=>t.addEventListener("mouseenter",()=>{e.classList.add("is-clickable")}))})(),(e=>{let{checkAllElement:t,checkElements:n}=e;const r=document.querySelector(t),o=document.querySelectorAll(n);function i(){const e=Array.from(o),t=e.every(e=>e.checked),n=e.some(e=>e.checked);r.checked=t,r.indeterminate=n&&!t,r.dataset.indeterminate=n&&!t}r&&o&&(r.addEventListener("change",(function(){o.forEach(e=>{e.checked=r.checked,r.indeterminate=!1,r.dataset.indeterminate=!1})})),o.forEach(e=>e.addEventListener("change",i)))})({checkAllElement:".js-checkall",checkElements:".js-check"}),(()=>{const e=document.querySelectorAll(".js-accordion");if(!e)return;let t;e.forEach(e=>{t=e.nextElementSibling,e.addEventListener("click",t=>{e.classList.toggle("is-active"),e.nextElementSibling.classList.toggle("is-visible"),console.log(e)}),t.addEventListener("click",e=>e.stopPropagation())})})(),(()=>{const e=document.querySelector(".js-to-top");e.addEventListener("click",t=>{t.preventDefault(),window.scrollTo(0,0),window.location.hash=e.name||e.href})})(),(()=>{const e=document.querySelectorAll(".js-close");e&&e.forEach(e=>e.addEventListener("click",t=>{e.parentNode.style.display="none"}))})(),(()=>{const e=document.querySelectorAll(".js-scroll-animation");e&&(e.forEach(e=>{e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")}),window.addEventListener("scroll",()=>{e.forEach(e=>{const t=window.pageYOffset;t>t+e.getBoundingClientRect().top-window.innerHeight+50&&e.classList.add("is-scrolled")})}))})(),(()=>{const e=document.querySelector(".js-file-input");if(!e)return;document.querySelector(".js-file-submit");const t=document.querySelector(".js-file-attachment-list"),n=document.querySelector(".js-file-attachment-helper");let r,o;e.addEventListener("change",(function(){const i=(r=e.files).length;if(!i)return;n.style.display=i?"block":"none",console.log("attachedfiles",r),Array.from(r).forEach(e=>{if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("íì¼íì jpeg pjpeg png ì¤ íëê° ìëì¼~");o='\n\t\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t\t<figure class="file-attachment-item-image"><img src='.concat(window.URL.createObjectURL(e)," alt=").concat(e.name,'></figure>\n\t\t\t\t\t<b class="file-attachment-item-name" href="#">').concat(e.name,'</b>\n\t\t\t\t\t<small class="file-attachment-item-size" >').concat(function(e){const t=e>=1024&&e<1048576;return e<1024?e+"bytes":t?(e/1024).toFixed(2)+"KB":(e/1048576).toFixed(2)+"MB"}(e.size),'</small>\n\t\t\t\t\t<button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-close"></i></button>\n\t\t\t\t</a>'),t.innerHTML+=o})}))})(),c(),s(".js-hover-trigger"),s(".header-user-notification"),s(".header-user-account")}).catch(e=>console.warn("router: ",e))};t(),window.addEventListener("hashchange",t),window.addEventListener("hashchange",(function(){const e=document.querySelector(".navigation-toggle");if(!e.classList.contains("is-active"))return;e.classList.remove("is-active"),e.nextElementSibling.classList.remove("is-visible")}))};n(37);const u={isRequired:e=>""==e||null==e||null==e||null!=e&&"object"==typeof e&&!Object.keys(e).length,isEmail:e=>!/^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*(\.\w{2,})+$/.test(e),isLength:(e,t)=>e.length<t,isNumber:e=>/[^0-9]/g.test(e)};document.addEventListener("DOMContentLoaded",()=>{(()=>{const{body:e}=document,t=document.querySelector(".js-loading");window.addEventListener("load",(function(){setTimeout((function(){t.classList.add("is-hidden"),e.classList.remove("body-lock")}),0)})),document.addEventListener("DOMContentLoaded",(function(){e.classList.add("body-lock")}))})(),l(),(()=>{const e=document.querySelector(".js-browser");let t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?e.style.display="block":-1!==t.indexOf("chrome")&&console.log(t,"í¬ë¡¬")})(),(()=>{const e=document.querySelector(".header"),t="fixed"===getComputedStyle(e).position,n=document.querySelector("body");function r(){n.style.marginTop=t?e.clientHeight+"px":"0px"}r(),window.addEventListener("scroll",()=>{requestAnimationFrame(r)}),window.addEventListener("resize",()=>{requestAnimationFrame(r)})})(),document.addEventListener("click",e=>{const t=e.target,n=document.querySelector(".profile-tablist-active"),r=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index");t.closest("[role=tab]")&&(t.setAttribute("aria-selected","true"),n.style.left="".concat(t.offsetLeft,"px"),r.forEach(e=>e.setAttribute("aria-selected","false")),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach(e=>{e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")}))},!0),document.addEventListener("keydown",e=>{const{target:t}=e;t.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){const e=/(^0+)/.test(t.value),n=Number(t.value)>=300,r=t.value.length>0;e&&(t.value=0),r&&(t.value=t.value.slice(0,3)),n&&(t.value=300)})),function(){const{keyCode:t}=e,n=[69,189,187,190].includes(t);n&&e.preventDefault(),console.log(t,n)}())}),(()=>{const e=document.querySelectorAll(".graph-item");if(!e)return;let t,n,r;e.forEach(e=>{n=e.querySelector(".graph-item-bar"),t=e.querySelector(".graph-item-value"),r=parseInt(t.innerHTML),n.style.height=r+"px",t.style.bottom=r+"px"})})(),new Promise((function(e,t){t("Unable to say hi."),setTimeout((function(){e("Hello, World")}),5e3)})).then(e=>{console.log("res",e)}).catch(e=>{console.warn(e)})}),document.addEventListener("input",e=>{document.querySelectorAll(".textfield-helper");const{email:t,password:n}=document.login,{target:r}=e,o=r===n;function i(){r.parentNode.classList.remove("is-invalid"),r.nextElementSibling.innerHTML="",r.nextElementSibling.style.display="none"}function c(e){let{message:t}=e;r.nextElementSibling&&(r.parentNode.classList.add("is-invalid"),r.nextElementSibling.innerText=t,r.nextElementSibling.style.display="block")}r===t&&(u.isRequired(t.value)?c({message:"íìê°ì´ì´ì."}):i()),o&&(u.isLength(n.value,8)?c({message:"ëë¬´ ì§§ìì."}):i())}),document.addEventListener("blur",e=>{},!0),document.addEventListener("submit",e=>e.preventDefault())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvcm91dGVyLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvdmFsaWRhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9sb2FkLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy91aS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFuT2JqZWN0IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsInRvSW50ZWdlciIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCJtYXgiLCJNYXRoIiwibWluIiwiZmxvb3IiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiZGVmaW5lZCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsIm1heWJlQ2FsbE5hdGl2ZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiTyIsInRoaXMiLCJmbiIsInVuZGVmaW5lZCIsIlN0cmluZyIsInJlZ2V4cCIsInJlcyIsImRvbmUiLCJyeCIsIlMiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImdsb2JhbCIsImZ1bGxVbmljb2RlIiwidW5pY29kZSIsImxhc3RJbmRleCIsInJlc3VsdHMiLCJyZXN1bHQiLCJwdXNoIiwiaXQiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsImxlbmd0aCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImluZGV4IiwiY2FwdHVyZXMiLCJqIiwibmFtZWRDYXB0dXJlcyIsImdyb3VwcyIsInJlcGxhY2VyQXJncyIsImNvbmNhdCIsInJlcGxhY2VtZW50IiwiYXBwbHkiLCJnZXRTdWJzdGl0dXRpb24iLCJzbGljZSIsInN0ciIsInRhaWxQb3MiLCJzeW1ib2xzIiwibWF0Y2giLCJjaCIsImNhcHR1cmUiLCJjaGFyQXQiLCJmIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJjZWlsIiwiaXNOYU4iLCJhdCIsIlRPX1NUUklORyIsInRoYXQiLCJwb3MiLCJhIiwiYiIsImNoYXJDb2RlQXQiLCJjbGFzc29mIiwiYnVpbHRpbkV4ZWMiLCJSZWdFeHAiLCJleGVjIiwiUiIsImNvZiIsIlRBRyIsIkFSRyIsImFyZ3VtZW50cyIsIlQiLCJCIiwiZSIsInRyeUdldCIsImNhbGxlZSIsInRvU3RyaW5nIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiY29yZSIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJfX2UiLCJ3aW5kb3ciLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJpZCIsInB4IiwicmFuZG9tIiwicmVkZWZpbmUiLCJoaWRlIiwiZmFpbHMiLCJ3a3MiLCJyZWdleHBFeGVjIiwiU1BFQ0lFUyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJyZXBsYWNlIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwic3BsaXQiLCJLRVkiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwiY29uc3RydWN0b3IiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJzdHJpbmciLCJhcmciLCJ0YXJnZXQiLCJwcm90byIsImZvcmNlZCIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJzb3VyY2UiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJleHBQcm90byIsIlUiLCJXIiwiZFAiLCJjcmVhdGVEZXNjIiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsIkF0dHJpYnV0ZXMiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsInZhbCIsInZhbHVlT2YiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsImluc3BlY3RTb3VyY2UiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJhRnVuY3Rpb24iLCIkaXRlcmF0b3JzIiwiZ2V0S2V5cyIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiQXJyYXkiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiTkFNRSIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsImFkZFRvVW5zY29wYWJsZXMiLCJzdGVwIiwidG9JT2JqZWN0IiwiaXRlcmF0ZWQiLCJraW5kIiwiX3QiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwiSU9iamVjdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTElCUkFSWSIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsInJldHVyblRoaXMiLCJCYXNlIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsImRlc2NyaXB0b3IiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsImRlZmluZVByb3BlcnRpZXMiLCIka2V5cyIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4Iiwic2hhcmVkIiwiZG9jdW1lbnRFbGVtZW50IiwiZGVmIiwidGFnIiwic3RhdCIsIk9iamVjdFByb3RvIiwicGFkU3RhcnQiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXREYXkiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiaG91cnMiLCJ0aW1lc3RhbXAiLCJtaW51dGVzIiwic2Vjb25kcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldElucHV0IiwiY2xvc2VzdCIsInBhcmVudE5vZGUiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiYWRkIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImJ5dGVFbGVtZW50Iiwic3RyaW5nQnl0ZUxlbmd0aCIsImlubmVyVGV4dCIsInJlbW92ZSIsImZpZWxkIiwiaGVpZ2h0IiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwic2Nyb2xsSGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYXV0b0V4cGFuZCIsIm1vZGFsIiwiYm9keSIsInBhZ2VZIiwibW9kYWxzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJzdG9wUHJvcGFnYXRpb24iLCJuZXh0RWxlbWVudFNpYmxpbmciLCJwYWdlWU9mZnNldCIsInRvcCIsImNvbnRhaW5zIiwic2Nyb2xsVG8iLCJlbGVtZW50IiwiZW50ZXJUYXJnZXQiLCJob3ZlckVsZW1lbnQiLCJpc05hdmlnYXRpb24iLCJzZXRBdHRyaWJ1dGUiLCJzY3JvbGxQcm9ncmVzcyIsInBhZ2VQcm9ncmVzc0JhciIsInNjcm9sbFBlcmNlbnQiLCJpbm5lckhlaWdodCIsIndpZHRoIiwicm91dGVyIiwidmlldyIsImdldEVsZW1lbnRCeUlkIiwicm91dGVQYWdlIiwiaGFzaCIsImxvY2F0aW9uIiwicGFnZSIsInN1YnN0cmluZyIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJ0ZXh0IiwiUHJvbWlzZSIsInJlamVjdCIsImh0bWwiLCJpbm5lckhUTUwiLCJpbmNsdWRlcyIsInRhcmdldEVsZW1lbnQiLCJhZGRDbGFzcyIsInN0aWNreUVsZW1lbnQiLCJpc1Njcm9sbGluZyIsInN0aWNreUVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNvbnNvbGUiLCJsb2ciLCJvZmZzZXRUb3AiLCJjb21tZW50V3JpdGUiLCJjb21tZW50VGV4dEZpZWxkIiwiZm9jdXNDb21tZW50IiwiY2F0ZWdvcnkiLCJjYXRlZ29yeUxpc3QiLCJjYXRlZ29yeUxpc3RTbGlkZSIsImNhdGVnb3J5TmF2aWdhdGlvblByZXYiLCJjYXRlZ29yeU5hdmlnYXRpb25OZXh0IiwiY2F0ZWdvcnlEb3RzIiwiY2F0ZWdvcnlDb250YWluZXJXaWR0aCIsIm9mZnNldFdpZHRoIiwic3VtIiwiaXRlbSIsInNjcm9sbExlZnQiLCJjYXJvdXNlbCIsImRhcmttb2RlQnV0dG9uIiwidG9nZ2xlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJsYXN0VGhlbWUiLCJnZXRJdGVtIiwic2V0RGFya21vZGUiLCJzZXRDdXJzb3IiLCJjdXJzb3IiLCJzZXRUaW1lb3V0IiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsImxlZnQiLCJjdXN0b21DdXJzb3IiLCJjaGVja0FsbEVsZW1lbnQiLCJjaGVja0VsZW1lbnRzIiwiY2hlY2tBbGwiLCJjaGVja0l0ZW1zIiwic2V0Q2hlY2tFYWNoIiwiY2hlY2siLCJmcm9tIiwiaXNDaGVja2VkRXZlcnkiLCJldmVyeSIsImNoZWNrSXRlbSIsImNoZWNrZWQiLCJpc0NoZWNrZWRTb21lIiwic29tZSIsImluZGV0ZXJtaW5hdGUiLCJkYXRhc2V0IiwiY2hlY2tBbGxjaGVja2JveCIsInRvZ2dsZUVsZW1lbnRzIiwidG9nZ2xlRWxlbWVudE5leHQiLCJldmVudFRvZ2dsZSIsInRvVG9wRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwiaHJlZiIsImV2ZW50VG9Ub3AiLCJjbG9zZUVsZW1lbnQiLCJldmVudENsb3NlIiwic2Nyb2xsVGFyZ2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwiZXZlbnRTY3JvbGxBbmltYXRpb24iLCJmaWxlSW5wdXQiLCJhdHRhY2htZW50TGlzdCIsImF0dGFjaG1lbnRIZWxwZXIiLCJhdHRhY2hlZGZpbGVzIiwiZmlsZVRlbXBsYXRlIiwiaGFzRmlsZSIsImZpbGVzIiwiZmlsZSIsImluZGV4T2YiLCJ2YWxpZEZpbGVUeXBlIiwiYWxlcnQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzaXplIiwiaXNLaWxvQnl0ZXMiLCJ0b0ZpeGVkIiwicmV0dXJuRmlsZVNpemUiLCJhdHRhY2hGaWxlIiwiY2F0Y2giLCJlcnJvciIsIndhcm4iLCJuYXZpZ2F0aW9uVHJpZ2dlciIsInZhbGlkYXRpb25zIiwiaXNSZXF1aXJlZCIsImlzRW1haWwiLCJ0ZXN0IiwiaXNMZW5ndGgiLCJpc051bWJlciIsImxvYWRlckVsZW1lbnQiLCJsb2FkZXIiLCJCcm93c2VyRWxlbWVudCIsImFnZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY2hlY2tCcm93c2VyIiwiaGVhZGVyRWxlbWVudCIsImlzRml4ZWRIZWFkZXIiLCJtYWluRWxlbWVudCIsImFkZFBhZGRpbmciLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJhZGp1c3RUb3BQYWRkaW5nIiwidGFiQWN0aWNlQmFyIiwidGFicyIsInRhYkluZGV4IiwiZ2V0QXR0cmlidXRlIiwib2Zmc2V0TGVmdCIsInRhYiIsImlzRmlyc3RQbGFjZWRaZXJvIiwiaXNNYXhpbXVtIiwiTnVtYmVyIiwia2V5Q29kZSIsImlzVmFsaWQiLCJzZXRJbnB1dE9ubHlOdW1iZXJzIiwiZ3JhcGhJdGVtcyIsImdyYXBoSXRlbVZhbHVlIiwiZ3JhcGhJdGVtQmFyIiwiZ3JhcGhWYWx1ZSIsInNldEdyYXBoIiwicmVzb2x2ZSIsImVtYWlsIiwicGFzc3dvcmQiLCJsb2dpbiIsImlzUGFzc3dvcmQiLCJzZXRWYWxpZCIsInNldEludmFsaWQiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFC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S0FHQ0QsSUFDQ3pDLEVBQVlJLFNBQVNtQyxFQUFTdmdCLE1BQU8sR0FDdkMyZ0IsRUFBVyxDQUFDQyxRQUFTLFlBRXJCRixPQW9CSHJWLFNBQVMrSSxpQkFBaUIsT0FBUUMsT0FBYSxHQUMvQ2hKLFNBQVMrSSxpQkFBaUIsU0FBVUMsR0FBU0EsRUFBTTRIIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjknIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhOYW1lID0gL15b6rCALe2eo10rJC87XG52YXIgaE5hbWUyID0gIC9eW+qwgC3tnqNhLXpBLVpdKyQvO1xudmFyIG9ubHlOdW1iZXJzID0gL15bMC05XSokLztcblxudmFyIGVuZ2xpc2hOdW1iZXIgPSAvXlthLXpBLVowLTldezQsMTJ9JC87XG52YXIgcGFzc3dvcmQgPSAvXig/PS4qW2EtekEtWl0pKCg/PS4qXFxkKXwoPz0uKlxcVykpLns2LDIwfSQvOyAvLyDsmIHsiKvtirlcblxudmFyIGVtYWlsID0gL15bYS16MC05XysuLV0rQChbYS16MC05LV0rXFwuKStbYS16MC05XXsyLDR9JC87XG52YXIgcGhvbmUgPSAvXlxcZHsyLDN9LVxcZHszLDR9LVxcZHs0fSQvOyAvLyAgZXgpMTIzLTEyMy0xMjM0XG52YXIgcGhvbmUyID0gIC9eMDEoWzB8MXw2fDd8OHw5XT8pLT8oWzAtOV17Myw0fSktPyhbMC05XXs0fSkkLzsgLy8gMDEwLTAwMDAtMDAwMFxuXG52YXIgdXJsID0gL14oZmlsZXxnb3BoZXJ8bmV3c3xubnRwfHRlbG5ldHxodHRwcz98ZnRwcz98c2Z0cCk6XFwvXFwvKFthLXowLTktXStcXC4pK1thLXowLTldezIsNH0uKiQvO1xuXG52YXIgaXNOdW1iZXIgPSAvWzAtOV0vZ2k7XG52YXIgaXNBbHBoYWJldCA9IC9bYS16XS9naTtcbnZhciBpc051bWJlckFuZEFscGhhYmV0ID0gL1thLXowLTldLztcblxudmFyIHN0cmluZ1RvSFRNTCA9IGZ1bmN0aW9uIChzdHIpIHtcblx0dmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblx0dmFyIGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3RyLCAndGV4dC9odG1sJyk7XG5cdHJldHVybiBkb2MuYm9keTtcbn07XG5cbi8vIHRleHQucmVwbGFjZSgvW14wLTldL2dpKVxuLy8gdGV4dC5yZXBsYWNlKC9bXmEtel0vZ2kpXG4vLyB0ZXh0LnJlcGxhY2UoL1teYS16MC05XS8pXG5cbmV4cG9ydCBjb25zdCBhdXRvRXhwYW5kID0gZmllbGQgPT4ge1xuXHRmaWVsZC5zdHlsZS5oZWlnaHQgPSAnaW5oZXJpdCc7XG5cdFxuXHRjb25zdCBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZpZWxkKTtcblx0Y29uc3QgaGVpZ2h0ID0gZmllbGQuc2Nyb2xsSGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcblx0ZmllbGQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4Jztcbn07XG5cblxudmFyIGdldEVsZW1lbnRIZWlnaHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG5cdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdHZhciBoZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodCArICdweCc7XG5cdFxuXHRyZXR1cm4gaGVpZ2h0O1xufTtcblxuLy8gZnVuY3Rpb24gZnJhbWVTaXppbmcoKSB7XG4vLyBcdHZhciAkZnJhbWUgPSAkKCcucGxheWVyIGlmcmFtZScpO1xuLy8gXHR2YXIgZnJhbWVXaWR0aCA9ICRmcmFtZS53aWR0aCgpO1xuLy8gXHR2YXIgZnJhbWVIZWlnaHQgPSBmcmFtZVdpZHRoICogOSAvIDE2O1xuLy8gXHQkZnJhbWUuaGVpZ2h0KGZyYW1lSGVpZ2h0KTtcblxuLy8gXHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XG4vLyBcdFx0XHRmcmFtZVdpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4vLyBcdFx0XHRmcmFtZUhlaWdodCA9IGZyYW1lV2lkdGggKiA5IC8gMTY7XG4vLyBcdFx0XHQkZnJhbWUuaGVpZ2h0KGZyYW1lSGVpZ2h0KTtcbi8vIFx0fSk7XG4vLyB9XG5cblxuY2xhc3MgQ2FsY3VsYXRvciB7XG5cdGFkZCh4LCB5KSB7XG5cdFx0cmV0dXJuIHggKyB5O1xuXHR9XG5cdHN1YnRyYWN0KHgsIHkpIHtcblx0XHRyZXR1cm4geCAtIHk7XG5cdH1cbn1cblxuLy8gZWxlbWVudHMuZmlsdGVyKCh2YWx1ZSwgaW5kZXgsIGFycmF5KSA9PiBhcnJheS5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpIC8vIHVuaXFcblxuXG4vLyBcImphdmFzY3JpcFwiLnJlcGxhY2UoL2EvZ2ksXCJiXCIpXG5jb25zdCBmdWxsTnVtYmVyID0gJzIwMzQzOTkwMDIxMjU1ODEnO1xuY29uc3QgbGFzdDREaWdpdHMgPSBmdWxsTnVtYmVyLnNsaWNlKC00KTtcbmNvbnN0IG1hc2tlZE51bWJlciA9IGxhc3Q0RGlnaXRzLnBhZFN0YXJ0KGZ1bGxOdW1iZXIubGVuZ3RoLCAnKicpO1xuLypcblx0dmFyIGlzRGF0ZVN1cHBvcnRlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ3gnKTtcblx0XHRyZXR1cm4gKGlucHV0LnZhbHVlICE9PSAneCcpO1xuXHR9O1xuXHRpZihpc0RhdGVTdXBwb3J0ZWQoKSkge1xuXHRcdGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgncGF0dGVybicpO1xuXHRcdGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgncGxhY2Vob2xkZXInKTtcblx0XHR2YXIgaGVscGVyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXNjcmlwdGlvbicpO1xuXHRcdGlmKGhlbHBlclRleHQpIHtcblx0XHRcdGhlbHBlclRleHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoZWxwZXJUZXh0KTtcblx0XHR9XG5cdH1cblx0Ki9cblxuZXhwb3J0IGNvbnN0IHRvZGF5RGF0ZSA9IHtcblx0dG9kYXk6IG5ldyBEYXRlKCksXG5cdHllYXI6IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSxcblx0bW9udGg6IFN0cmluZyhuZXcgRGF0ZSgpLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpLFxuXHRkYXRlOiBTdHJpbmcobmV3IERhdGUoKS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyksXG5cdGRheTogbmV3IERhdGUoKS5nZXREYXkoKSwgLy8g7JuUIDogMFxuXHRob3VyczogbmV3IERhdGUoKS5nZXRIb3VycygpLFxuXHRtaW51dGVzOiBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKSxcblx0c2Vjb25kczogbmV3IERhdGUoKS5nZXRTZWNvbmRzKCksXG5cdGFtcG06IG5ldyBEYXRlKCkuZ2V0SG91cnMoKSA8IDEyID8gJ2FtJyA6ICdwbScsXG5cdGlzQW06IG5ldyBEYXRlKCkuZ2V0SG91cnMoKSA8IDEyLFxuXHRpc1BtOiBuZXcgRGF0ZSgpLmdldEhvdXJzKCkgPiAxMixcblxuXHQvKlxuXHRjb25zdCBkYXRlU3RyaW5nID0gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKS5zcGxpdCgnLicpO1xuXHRjb25zdCBbeWVhciwgbW9udGgsIGRheV0gPSBkYXRlU3RyaW5nO1xuXHRjb25zb2xlLmxvZyhkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpKTsgLy8gMTk4MOuFhCAx7JuUIDPsnbwg66qp7JqU7J28XG5cdGNvbnNvbGUubG9nKGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCkpOyAvLyDsmKTsoIQgMToyODozNVxuXHRjb25zb2xlLmxvZyhkYXRlLnRvTG9jYWxlU3RyaW5nKCkpOyAvLyAxOTgw64WEIDHsm5QgM+ydvCDrqqnsmpTsnbwg7Jik7KCEIDE6Mjg6MzVcblx0Ki9cbn07XG5cblxuLy8gZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMSkgLy8gaWYodG9kYXkuZ2V0VGltZSgpIDwgZGF0ZS5nZXRUaW1lKCkpXG5cbmNvbnN0IGZvcm1hdERhdGUgPSB0aW1lc3RhbXAgPT4ge1xuXHRjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcblx0Y29uc3QgbW9udGhzID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJyxcdCdOb3ZlbWJlcicsICdEZWNlbWJlciddO1xuXHRyZXR1cm4gbW9udGhzW2RhdGUuZ2V0TW9udGgoKV0gKyAnICcgKyBkYXRlLmdldERhdGUoKSArICcsICcgKyBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cbn07XG5cbmNvbnN0IHJhbmRvbU51bWJlciA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuXHRyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKTtcbn07XG5cbmNvbnN0IHRpbWVzdGFtcCA9IDk0NjI7XG5jb25zdCBob3VycyA9IE1hdGguZmxvb3IodGltZXN0YW1wIC8gNjAgLyA2MCk7XG5jb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0aW1lc3RhbXAgLyA2MCkgLSAoaG91cnMgKiA2MCk7XG5jb25zdCBzZWNvbmRzID0gdGltZXN0YW1wICUgNjA7XG5jb25zdCBmb3JtYXR0ZWQgPSBob3Vycy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykgKyAnOicgKyBtaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKSArICc6JyArIHNlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpOyIsImltcG9ydCB7IGF1dG9FeHBhbmQgfSBmcm9tICcuL3V0aWxzJztcblxuLy8gVE9ETzog7Jes65+s67KIIOuwmOuzte2VtOyEnCDsmKzroLjsnYQg65WMIGZpbGVsaXN0IOuIhOyggeuQmOuKlOyngD9cbi8vIFRPRE86IOuPmeydvO2VnCDtjIzsnbzsnYQg7JeF66Gc65OcIO2WiOydhCDrlYwg7LK07YGsLCDsgq3soJztlojsnYQg65WMIGZpbGVMaXN07JeQ7IScIOyCreygnCwgZmlsZUlucHV0LmZpbGVz64qUIOyMk+ydtOyngCDslYrsnYwuXG5leHBvcnQgY29uc3QgYXR0YWNoRmlsZSA9ICgpID0+IHtcblx0Y29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtaW5wdXQnKTtcblx0aWYoIWZpbGVJbnB1dCkgcmV0dXJuO1xuXHRcblx0Y29uc3QgZmlsZVN1Ym1pdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLXN1Ym1pdCcpO1xuXHRjb25zdCBhdHRhY2htZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtbGlzdCcpO1xuXHRjb25zdCBhdHRhY2htZW50SGVscGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1oZWxwZXInKTtcblx0bGV0IGF0dGFjaGVkZmlsZXM7XG5cdGxldCBmaWxlVGVtcGxhdGU7XG5cblx0ZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGF0dGFjaCk7XG5cblx0ZnVuY3Rpb24gYXR0YWNoKCkge1xuXHRcdGF0dGFjaGVkZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XG5cdFx0Y29uc3QgaGFzRmlsZSA9IGF0dGFjaGVkZmlsZXMubGVuZ3RoO1xuXHRcdGlmKCFoYXNGaWxlKSByZXR1cm47XG5cdFx0YXR0YWNobWVudEhlbHBlci5zdHlsZS5kaXNwbGF5ID0gaGFzRmlsZSA/ICdibG9jaycgOiAnbm9uZSc7XG5cdFx0Y29uc29sZS5sb2coJ2F0dGFjaGVkZmlsZXMnLCBhdHRhY2hlZGZpbGVzKTtcblx0XHRcblx0XHRBcnJheS5mcm9tKGF0dGFjaGVkZmlsZXMpLmZvckVhY2goZmlsZSA9PiB7XG5cdFx0XHRpZighdmFsaWRGaWxlVHlwZShmaWxlKSkgcmV0dXJuIGFsZXJ0KCftjIzsnbztg4DsnoUganBlZyBwanBlZyBwbmcg7KSRIO2VmOuCmOqwgCDslYTri4jslbx+Jyk7XG5cdFx0XHRmaWxlVGVtcGxhdGUgPSBgXG5cdFx0XHRcdDxhIGNsYXNzPVwiZmlsZS1hdHRhY2htZW50LWl0ZW1cIiBocmVmPVwiXCI+XG5cdFx0XHRcdFx0PGZpZ3VyZSBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLWltYWdlXCI+PGltZyBzcmM9JHt3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKX0gYWx0PSR7ZmlsZS5uYW1lfT48L2ZpZ3VyZT5cblx0XHRcdFx0XHQ8YiBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLW5hbWVcIiBocmVmPVwiI1wiPiR7ZmlsZS5uYW1lfTwvYj5cblx0XHRcdFx0XHQ8c21hbGwgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1zaXplXCIgPiR7cmV0dXJuRmlsZVNpemUoZmlsZS5zaXplKX08L3NtYWxsPlxuXHRcdFx0XHRcdDxidXR0b24gY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1kZWxldGUganMtcmVtb3ZlLXRoaXNcIiB0eXBlPVwiYnV0dG9uXCI+PGkgY2xhc3M9XCJpY29uLWNsb3NlXCI+PC9pPjwvYnV0dG9uPlxuXHRcdFx0XHQ8L2E+YDtcblx0XHRcdGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTCArPSBmaWxlVGVtcGxhdGU7XG5cdFx0XHQvLyBhdHRhY2htZW50TGlzdC5hcHBlbmQoZmlsZVRlbXBsYXRlKTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIGZpbGVTdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XG5cdC8vIFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0Ly8gXHRmaWxlTGlzdC5mb3JFYWNoKGZpbGUgPT4ge1xuXHQvLyBcdFx0c2VuZEZpbGUoZmlsZSk7XG5cdC8vIFx0fSk7XG5cdC8vIH0pO1xuXHRmdW5jdGlvbiB2YWxpZEZpbGVUeXBlKGZpbGUpIHtcblx0XHRjb25zdCBmaWxlVHlwZXMgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJywgJ2ltYWdlL3BuZyddO1xuXHRcdC8vIGNvbnN0IGlzVmFsaWQgPSBmaWxlVHlwZXMuaW5jbHVkZXMoZmlsZS50eXBlKTtcblx0XHRpZihmaWxlVHlwZXMuaW5kZXhPZihmaWxlLnR5cGUpID4gLTEpIHJldHVybiB0cnVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gdmFsaWRGaWxlU2l6ZShmaWxlKSB7XG5cdFx0YXR0YWNoZWRmaWxlcyA9IGZpbGUuZmlsZXM7XG5cdFx0aWYoYXR0YWNoZWRmaWxlcy5sZW5ndGggPT09IDApIHJldHVybjtcblx0XHRcblx0XHRpZihmaWxlc1swXS5zaXplID4gNzUgKiAxMDI0KSB7XG5cdFx0XHRmaWxlSW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1RoZSBzZWxlY3RlZCBmaWxlIG11c3Qgbm90IGJlIGxhcmdlciB0aGFuIDc1IGtCJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZpbGVJbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG5cdH1cblxuXHRmdW5jdGlvbiByZXR1cm5GaWxlU2l6ZShzaXplKSB7XG5cdFx0Y29uc3QgaXNCeXRlcyA9IHNpemUgPCAxMDI0O1xuXHRcdGNvbnN0IGlzS2lsb0J5dGVzID0gc2l6ZSA+PSAxMDI0ICYmIHNpemUgPCAxMDQ4NTc2O1xuXHRcdFxuXHRcdGlmKGlzQnl0ZXMpIHJldHVybiBzaXplICsgJ2J5dGVzJztcblx0XHRlbHNlIGlmKGlzS2lsb0J5dGVzKSByZXR1cm4gKHNpemUgLyAxMDI0KS50b0ZpeGVkKDIpICsgJ0tCJztcblx0XHRlbHNlIHJldHVybiAoc2l6ZSAvIDEwNDg1NzYpLnRvRml4ZWQoMikgKyAnTUInO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VuZEZpbGUoZmlsZSkge1xuXHRcdGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cdFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0Zm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XG5cdFx0cmVxdWVzdC5vcGVuKCdwb3N0JywgJycpO1xuXHRcdHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7XG5cdH1cbn07XG5cbi8vIHBhcnNlSW50IHZzIE51bWJlclxuLy8gVE9ETzogdGFyZ2V0IO2BtOuemOyKpCDthqDquIDsnbQg7JWIIOuQmOuvgOuLiOuLpFxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG5cdGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcblx0Y29uc3QgbWluVmFsdWUgPSAwO1xuXHRjb25zdCBtYXhWYWx1ZSA9IDEwO1xuXHRsZXQgdGFyZ2V0SW5wdXQ7XG5cblx0aWYodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50JykpIHtcblx0XHR0YXJnZXRJbnB1dCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcblx0XHRpZih0YXJnZXRJbnB1dC52YWx1ZSA8PSBtaW5WYWx1ZSkge1xuXHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC0tdGFyZ2V0SW5wdXQudmFsdWU7XG5cdH1cblx0aWYodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24taW5jcmVtZW50JykpIHtcblx0XHR0YXJnZXRJbnB1dCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcblx0XHRpZih0YXJnZXRJbnB1dC52YWx1ZSA+PSBtYXhWYWx1ZSkge1xuXHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdCsrdGFyZ2V0SW5wdXQudmFsdWU7XG5cdH1cbn0pO1xuXG5leHBvcnQgY29uc3QgaW5wdXRUZXh0YXJlYSA9ICgpID0+IHtcbn07XG5cbi8vIHRhZ05hbWXqs7wgbm9kZU5hbWXsnYAg7YWN7Iqk7Yq4IOuFuOuTnOulvCDqsIHqsIEgdW5kZWZpbmVk7JmAICN0ZXh0IOuwmO2ZmO2VnOuLpC5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuXHRjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG5cblx0Y29uc3QgaXNUZXh0YXJlYSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnO1xuXHRpZighaXNUZXh0YXJlYSkgcmV0dXJuO1xuXG5cdGNvbnN0IEJZVEVfTUFYSU1VTSA9IDMwO1xuXG5cdGNvbnN0IGJ5dGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRleHRmaWVsZC1ieXRlIGInKTtcblx0Y29uc3Qgc3RyaW5nQnl0ZUxlbmd0aCA9IHRhcmdldC52YWx1ZS5yZXBsYWNlKC9bXFwwLVxceDdmXXwoWzAtXFx1MDdmZl18KC4pKS9nLCckJiQxJDInKS5sZW5ndGggfHwgMDsgLy8gfHwgMCDsnoTsi5xcblx0Ynl0ZUVsZW1lbnQuaW5uZXJUZXh0ID0gc3RyaW5nQnl0ZUxlbmd0aDtcblxuXHRjb25zdCBpc01heGltdW0gPSBzdHJpbmdCeXRlTGVuZ3RoID4gQllURV9NQVhJTVVNO1xuXHRpZihpc01heGltdW0pIHtcblx0XHR0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtaW52YWxpZCcpO1xuXHR9XG5cblx0YXV0b0V4cGFuZCh0YXJnZXQpO1xufSk7XG5cbmZ1bmN0aW9uIHNldFN0cmluZ0J5dGVzKCkge31cblxuZXhwb3J0IGNvbnN0IGlucHV0TnVtYmVyID0gKCkgPT4ge1xuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd246ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd24gLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcblx0Ly8gfSk7XG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGV2ZW50KSA9PiB7XG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzcyAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuXHQvLyB9KTtcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5dXA6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleXVwIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG5cdC8vIH0pO1xuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcblx0Ly8gXHRjb25zb2xlLmxvZygnY2hhbmdlOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuXHQvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2UgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcblx0Ly8gfSk7XG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB7XG5cdC8vIFx0Y29uc29sZS5sb2coJ2lucHV0OiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuXHQvLyBcdGNvbnNvbGUubG9nKCdpbnB1dCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuXHQvLyB9KTtcblxuXHQvLyDrsKntlqXtgqTroZwg7KGw7KCI7ZWgIOuVjCBtaW4gbWF4IOyhsOqxtOyXkCDqsbjrprDri6QuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudCA9PiB7XG5cdFx0Y29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50O1xuXHRcdGNvbnN0IGlzTnVtYmVySW5wdXQgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLW51bWJlci1pbnB1dCcpO1xuXHRcdGlmICghaXNOdW1iZXJJbnB1dCkgcmV0dXJuO1xuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBzZXRMaW1pdE51bWJlcik7XG5cdFx0c2V0SW5wdXRPbmx5TnVtYmVycygpO1xuXG5cdFx0ZnVuY3Rpb24gc2V0SW5wdXRPbmx5TnVtYmVycygpe1xuXHRcdFx0Y29uc3QgeyBrZXlDb2RlIH0gPSBldmVudDtcblx0XHRcdGNvbnN0IGtleUNvZGVzID0gWzY5LCAxODksIDE4NywgMTkwXTtcblx0XHRcdGNvbnN0IGlzVmFsaWQgPSBrZXlDb2Rlcy5pbmNsdWRlcyhrZXlDb2RlKTtcblx0XHRcdGlmKGlzVmFsaWQpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGNvbnNvbGUubG9nKGtleUNvZGUsIGlzVmFsaWQpO1xuXHRcdFx0Ly8gdGFyZ2V0LnZhbHVlLmxlbmd0aCA9PT0gMCAmJiBrZXlDb2RlID09PSA0OCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8ga2V5Q29kZSA+PSA0OCB8fCBrZXlDb2RlIDw9IDU3IHx8IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQvLyBrZXlDb2RlID09PSA2OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8ga2V5Q29kZSA9PT0gMTg5ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQvLyBrZXlDb2RlID09PSAxODcgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdC8vIGtleUNvZGUgPT09IDE5MCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBzZXRMaW1pdE51bWJlcigpIHtcblx0XHRcdGNvbnN0IE1BWElNVU0gPSAzMDA7XG5cdFx0XHRjb25zdCBNSU5JTVVOID0gMDtcblx0XHRcdGNvbnN0IGlzRmlyc3RQbGFjZWRaZXJvID0gLyheMCspLy50ZXN0KHRhcmdldC52YWx1ZSk7XG5cdFx0XHRjb25zdCBpc01heGltdW0gPSBOdW1iZXIodGFyZ2V0LnZhbHVlKSA+PSBNQVhJTVVNO1xuXHRcdFx0Y29uc3QgaXNMZW5ndGggPSB0YXJnZXQudmFsdWUubGVuZ3RoID4gTUlOSU1VTjtcblxuXHRcdFx0aWYoaXNGaXJzdFBsYWNlZFplcm8pIHRhcmdldC52YWx1ZSA9IE1JTklNVU47XG5cdFx0XHRpZihpc0xlbmd0aCkgdGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnNsaWNlKDAsIDMpO1xuXHRcdFx0aWYoaXNNYXhpbXVtKSB0YXJnZXQudmFsdWUgPSBNQVhJTVVNO1xuXHRcdH1cblx0fSk7XG59O1xuXG5cblxuZXhwb3J0IGNvbnN0IGNoZWNrQWxsY2hlY2tib3ggPSAoe2NoZWNrQWxsRWxlbWVudCwgY2hlY2tFbGVtZW50c30pID0+IHtcblx0Y29uc3QgY2hlY2tBbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsRWxlbWVudCk7XG5cdGNvbnN0IGNoZWNrSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNoZWNrRWxlbWVudHMpO1xuXHRpZighY2hlY2tBbGwgfHwgIWNoZWNrSXRlbXMpIHJldHVybjtcblxuXHRjaGVja0FsbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzZXRDaGVja0FsbCk7XG5cdGNoZWNrSXRlbXMuZm9yRWFjaChjaGVja0l0ZW0gPT4gY2hlY2tJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNldENoZWNrRWFjaCkpO1xuXG5cdGZ1bmN0aW9uIHNldENoZWNrRWFjaCgpIHtcblx0XHRjb25zdCBjaGVjayA9IEFycmF5LmZyb20oY2hlY2tJdGVtcyk7XG5cdFx0Y29uc3QgaXNDaGVja2VkRXZlcnkgPSBjaGVjay5ldmVyeShjaGVja0l0ZW0gPT4gY2hlY2tJdGVtLmNoZWNrZWQpO1xuXHRcdGNvbnN0IGlzQ2hlY2tlZFNvbWUgPSBjaGVjay5zb21lKGNoZWNrSXRlbSA9PiBjaGVja0l0ZW0uY2hlY2tlZCk7XG5cblx0XHRjaGVja0FsbC5jaGVja2VkID0gaXNDaGVja2VkRXZlcnk7XG5cdFx0Y2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xuXHRcdGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRDaGVja0FsbCgpIHtcblx0XHRjaGVja0l0ZW1zLmZvckVhY2goY2hlY2tJdGVtID0+IHtcblx0XHRcdGNoZWNrSXRlbS5jaGVja2VkID0gY2hlY2tBbGwuY2hlY2tlZDtcblx0XHRcdGNoZWNrQWxsLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcblx0XHRcdGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuXHRcdH0pO1xuXHR9XG59O1xuXG5cblxuLy8gcmVhY3Qg7KCV66asXG4vLyBjb25zdCB0ZW1wQXJyYXkgPSBbXCJqYWNrXCIsIFwiamlsbFwiXTtcbi8vIOuPmeydvO2VnCDrhKTsnoTqsJLsnZgg67Cw7Je07J2EIO2Gte2Vqe2VtOuztOq4sC5cbi8vIGNvbnN0IHRlbXAgPSBbXG4vLyBcdHtuYW1lOiAnamFjaycsIGFnZTogJzE2J30sXG4vLyBcdHtuYW1lOiAnamlsbCcsIGFnZTogJzInfSxcbi8vIF07XG4vLyBjb25zdCB0ZW1wMiA9IFtcbi8vIFx0e25hbWU6ICdqaWxsJywgcGhvbmU6ICcwMjU1ODkwOTAnfVxuLy8gXHR7bmFtZTogJ2phY2snLCBwaG9uZTogJzAxMDMxMjExMjIzJ30sXG4vLyBdO1xuXG5cblxuLy8gZXhwb3J0IGNvbnN0IGlucHV0VmFyaWF0aW9uID0gKCkgPT4ge1xuLy8gXHRjb25zdCB2YXJpYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uJyk7XG4vLyBcdGNvbnN0IGlucHV0ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcbi8vIFx0Y29uc3QgZGVjcmVtZW50ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50Jyk7XG4vLyBcdGNvbnN0IGluY3JlbWVudCA9IHZhcmlhdGlvbi5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpO1xuXG4vLyBcdGxldCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuLy8gXHRjb25zdCBNSU5fVkFMVUUgPSAwO1xuLy8gXHRjb25zdCBNQVhfVkFMVUUgPSAxMDtcbi8vIFx0bGV0XHRpc01pbmltdW47XG4vLyBcdGxldCBpc01heGltdW07XG4vLyBcdC8vIGNvbnN0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0Ly8gY29uc3QgaXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XG5cbi8vIFx0Ly8gaWYoaXNNaW5pbXVuKSBzZXREaXNhYmxlRGVjcmVtZW50KCk7XG4vLyBcdC8vIGlmKGlzTWF4aW11bSkgc2V0RGlzYWJsZUllY3JlbWVudCgpO1xuXG4vLyBcdGRlY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0XHRpZihpc01pbmltdW4pIHtcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdFx0cmV0dXJuO1xuLy8gXHRcdH1cbi8vIFx0XHRpZighaXNNYXhpbXVtKSB7XG4vLyBcdFx0XHRpbmNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHR9XG5cdFx0XG4vLyBcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpIC0gMTtcbi8vIFx0fSk7XG4vLyBcdGluY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0XHRjb25zb2xlLmxvZyhpc01pbmltdW4sIGlzTWF4aW11bSwgdmFsdWUpO1xuLy8gXHRcdGlmKGlzTWF4aW11bSkge1xuLy8gXHRcdFx0aW5jcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0XHRyZXR1cm47XG4vLyBcdFx0fVxuLy8gXHRcdGlmKCFpc01pbmltdW4pIHtcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdH1cblxuLy8gXHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKSArIDE7XG4vLyBcdH0pO1xuXG4vLyBcdGZ1bmN0aW9uIHNldERpc2FibGVEZWNyZW1lbnQoKSB7XG4vLyBcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyBcdGZ1bmN0aW9uIHNldERpc2FibGVJZWNyZW1lbnQoKSB7XG4vLyBcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyB9O1xuXG4vLyB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiB2YWx1ZTtcbi8vIHZhbHVlIDwgMSA/IHZhbHVlID0gMSA6ICcnO1xuLy8gdmFsdWUtLTsiLCIvL1RPRE86IOuqqOuLrCDrsJbsnZgg7Luo7YWQ7Lig7JeQIGFyaWEtaGlkZGVuIOuqqOuLrOydmCDsnITsuZjripQg67CU65SUIOyViOyXkD9cbi8vdmFyIGFiYyA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcblxuZXhwb3J0IGNvbnN0IG1vZGFsID0gKCkgPT4ge1xuXHRjb25zdCB7IGJvZHkgfSA9IGRvY3VtZW50O1xuXHRsZXQgcGFnZVkgPSB1bmRlZmluZWQ7XG5cdGNvbnN0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1tb2RhbCcpO1xuXHRpZighbW9kYWxzKSByZXR1cm47XG5cblx0bW9kYWxzLmZvckVhY2gobW9kYWwgPT4gbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG5cdFx0Ly8gZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRtb2RhbC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnaXMtdmlzaWJsZScpO1xuXHRcdHBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdHNldExvY2tCb2R5KCk7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsKTtcblxuXHRcdGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG5cdFx0XHRjb25zdCBpc09wZW5lZCA9IG1vZGFsLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLXZpc2libGUnKTtcblx0XHRcdGlmKCFpc09wZW5lZCkgcmV0dXJuO1xuXG5cdFx0XHRtb2RhbC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuXHRcdFx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKCdib2R5LWxvY2snKTtcblx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCBwYWdlWSk7XG5cdFx0fVxuXHR9KSk7XG5cblx0Y29uc3QgbW9kYWxEaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwtZGlhbG9nJyk7XG5cdG1vZGFsRGlhbG9nLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkpKTtcblx0XG5cdGZ1bmN0aW9uIHNldExvY2tCb2R5KCkge1xuXHRcdGJvZHkuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XG5cdFx0Ym9keS5zdHlsZS50b3AgPSBgLSR7cGFnZVl9cHhgO1xuXHR9XG59O1xuXG5cbmV4cG9ydCBjb25zdCB0YWJNZW51ID0gKCkgPT4ge1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0Y29uc3QgdGFiQWN0aWNlQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtdGFibGlzdC1hY3RpdmUnKTtcblx0XHRjb25zdCB0YWJzID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9dGFiXScpO1xuXHRcdGNvbnN0IHRhYkluZGV4ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xuXG5cdFx0aWYodGFyZ2V0LmNsb3Nlc3QoJ1tyb2xlPXRhYl0nKSkge1xuXHRcdFx0dGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG5cdFx0XHR0YWJBY3RpY2VCYXIuc3R5bGUubGVmdCA9IGAke3RhcmdldC5vZmZzZXRMZWZ0fXB4YDtcblx0XHRcdHRhYnMuZm9yRWFjaCh0YWIgPT4gdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpKTtcblx0XHRcblx0XHRcdHRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9dGFicGFuZWxdJykuZm9yRWFjaChlbGVtZW50ID0+IHtcblx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblx0XHRcdFx0aWYodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jykpe1xuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdoaWRkZW4nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LCB0cnVlKTtcbn07XG5cblxuLy8gdmFyIGlzU2Nyb2xsaW5nO1xuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIChldmVudCkgPT4ge1xuLy8gXHRpZihpc1Njcm9sbGluZykgd2luZG93LmNsZWFyVGltZW91dChpc1Njcm9sbGluZyk7XG4vLyBcdGlzU2Nyb2xsaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuLy8gXHRcdHN0aWNreVRvZ2dsZSgpO1xuLy8gXHR9LCA1MCk7XG4vLyB9KTtcblxuZXhwb3J0IGNvbnN0IHN0aWNreUVsZW1lbnQgPSAoe3RhcmdldEVsZW1lbnQsIGFkZENsYXNzfSkgPT4ge1xuXHRjb25zdCB7IGJvZHkgfSA9IGRvY3VtZW50O1xuXHRjb25zdCBzdGlja3lFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbGVtZW50KTtcblx0aWYoIXN0aWNreUVsZW1lbnQpIHJldHVybjtcblxuXHRsZXQgc3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHRsZXQgaXNTY3JvbGxpbmc7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcblx0XHRpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xuXHRcdGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG5cdFx0XHRzdGlja3lFbGVtZW50SGVpZ2h0ID0gc3RpY2t5RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdFx0fSwgNjApO1xuXHR9KTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKHN0aWNreUVsZW1lbnRIZWlnaHQpOyAvLyAxMzNcblx0XHRpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xuXHRcdGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG5cdFx0XHRpZih3aW5kb3cucGFnZVlPZmZzZXQgPiBzdGlja3lFbGVtZW50Lm9mZnNldFRvcCArIHN0aWNreUVsZW1lbnRIZWlnaHQpe1xuXHRcdFx0XHRib2R5LmNsYXNzTGlzdC5hZGQoYWRkQ2xhc3MpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKGFkZENsYXNzKTtcblx0XHRcdH1cblx0XHR9LCA2MCk7XG5cdH0pO1xufTtcblxuLy8gZXhwb3J0IGNvbnN0IHN0aWNreUhlYWRlckVsZW1lbnQgPSAodGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MpID0+IHtcbi8vIFx0c3RpY2t5RWxlbWVudCh7dGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MsIHRydWV9KTtcbi8vIH07XG5cblxuZXhwb3J0IGNvbnN0IHBhcmFsbGF4ID0gKHRhcmdldEVsZW1lbnQpID0+IHtcblx0Y29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbGVtZW50KTtcblx0aWYoIXRhcmdldCkgcmV0dXJuO1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuXHRcdHRhcmdldC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHdpbmRvdy5wYWdlWU9mZnNldCwgZWxlbWVudC5vZmZzZXRUb3ApO1xuXHRcdFx0bGV0IHJhdGUgPSB3aW5kb3cucGFnZVlPZmZzZXQgKiAtMC4yIC0gNjAwO1xuXHRcdFx0bGV0IGFhYSA9ICh3aW5kb3cucGFnZVlPZmZzZXQgLSBlbGVtZW50Lm9mZnNldFRvcCkgKiAtMS41OyAvLyBzY3JvbGxlZCA9IHdpbmRvdy5wYWdlWU9mZnNldFxuXHRcdFx0Ly9sZXQgYmJiID0gYWFhID4gMCA/IC1hYWEgOiBhYWE7XG5cdFx0XHRlbGVtZW50LnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9ICdjZW50ZXIgJyArIGFhYSArICdweCc7IFxuXHRcdFx0Ly8gZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMHB4LCAnK3JhdGUrJ3B4LCAwcHgpJztcblx0XHRcdC8vIERhdGFUcmFuc2Zlckl0ZW1MaXN0LnJhdGVcblx0XHR9KTtcblx0fSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc3RpY2t5SGVhZGVyID0gKCkgPT4ge1xuXHRjb25zdCBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuXHRsZXQgbGFzdFNjcm9sbFRvcCA9IDA7XG5cdFxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShoYXNTY3JvbGxlZCk7XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGhhc1Njcm9sbGVkKCkge1xuXHRcdGlmKHdpbmRvdy5wYWdlWU9mZnNldCA+IGxhc3RTY3JvbGxUb3ApIHtcblx0XHRcdGhlYWRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmF2LXVwJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhlYWRlckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmF2LXVwJyk7XG5cdFx0fVxuXHRcdGxhc3RTY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdH1cbn07XG5cbmV4cG9ydCBjb25zdCBlbnRlclRhcmdldCA9ICh0YXJnZXQpID0+IHtcblx0Y29uc3QgeyBib2R5IH0gPSBkb2N1bWVudDtcblx0Y29uc3QgaG92ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXHRpZighaG92ZXJFbGVtZW50KSByZXR1cm47XG5cblx0Y29uc3QgaXNOYXZpZ2F0aW9uID0gaG92ZXJFbGVtZW50ID09PSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbiBsaScpO1xuXG5cdGhvdmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuXHRcdGhvdmVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuXHRcdGhvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xuXHRcdGlzTmF2aWdhdGlvbiAmJiBib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLXNob3duJyk7XG5cblx0XHRob3ZlckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcblx0XHRcdGhvdmVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcblx0XHRcdGhvdmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1leHBhbmRlZCcpO1xuXG5cdFx0XHRpc05hdmlnYXRpb24gJiYgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zaG93bicpO1xuXHRcdH0pO1xuXHR9KTtcbn07XG5cblxuZXhwb3J0IGNvbnN0IGV2ZW50VG9nZ2xlID0gKCkgPT4ge1xuXHRjb25zdCB0b2dnbGVFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1hY2NvcmRpb24nKTtcblx0aWYoIXRvZ2dsZUVsZW1lbnRzKSByZXR1cm47XG5cblx0bGV0IHRvZ2dsZUVsZW1lbnROZXh0O1xuXHR0b2dnbGVFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXHRcdHRvZ2dsZUVsZW1lbnROZXh0ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtYWN0aXZlJyk7XG5cdFx0XHRlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QudG9nZ2xlKCdpcy12aXNpYmxlJyk7XG5cdFx0XHRjb25zb2xlLmxvZyhlbGVtZW50KTtcblx0XHRcdC8vIGlmKGV2ZW50LnRhcmdldCAhPT0gZWxlbWVudCkge1xuXHRcdFx0Ly8gXHRhbGVydCgpO1xuXHRcdFx0Ly8gfVxuXHRcdH0pO1xuXHRcdHRvZ2dsZUVsZW1lbnROZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkpO1xuXHR9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBldmVudENsb3NlID0gKCkgPT4ge1xuXHRjb25zdCBjbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtY2xvc2UnKTtcblx0aWYoIWNsb3NlRWxlbWVudCkgcmV0dXJuO1xuXG5cdGNsb3NlRWxlbWVudC5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcblx0XHQoZWxlbWVudC5wYXJlbnROb2RlKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHR9KSk7XG59O1xuXG5cbmV4cG9ydCBjb25zdCBldmVudFRvVG9wID0gKCkgPT4ge1xuXHRjb25zdCB0b1RvcEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG8tdG9wJyk7XG5cdHRvVG9wRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcblxuXHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdG9Ub3BFbGVtZW50Lm5hbWUgfHwgdG9Ub3BFbGVtZW50LmhyZWY7XG5cdH0pO1xufTtcblxuXG5leHBvcnQgY29uc3QgZXZlbnRTY3JvbGxBbmltYXRpb24gPSAoKSA9PiB7XG5cdGNvbnN0IHNjcm9sbFRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zY3JvbGwtYW5pbWF0aW9uJyk7XG5cdGlmKCFzY3JvbGxUYXJnZXQpIHJldHVybjtcblxuXHRzY3JvbGxUYXJnZXQuZm9yRWFjaChlbGVtZW50ID0+IHtcblx0XHRjb25zdCBpc0NvbnRhaW5lZFdpbmRvd0hlaWdodCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0XHRpZighaXNDb250YWluZWRXaW5kb3dIZWlnaHQpIHJldHVybjtcblx0XHRcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNjcm9sbGVkJyk7XG5cdH0pO1xuXHRcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcblx0XHRzY3JvbGxUYXJnZXQuZm9yRWFjaChlbGVtZW50ID0+IHtcblx0XHRcdGNvbnN0IHBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdFx0Y29uc3QgaXNTY3JvbGxlZCA9IHBhZ2VZID4gcGFnZVkgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodCArIDUwO1xuXHRcdFx0aWYoIWlzU2Nyb2xsZWQpIHJldHVybjtcblxuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zY3JvbGxlZCcpO1xuXHRcdH0pO1xuXHR9KTtcbn07XG5cblxuXG5jb25zdCB0b2dnbGVFdmVudCA9IGZ1bmN0aW9uKHRhcmdldCwgdG9nZ2xlKSB7XG5cdGNvbnN0IHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cdGNvbnN0IHRvZ2dsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRvZ2dsZSk7XG5cblx0dGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcblx0XHR0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuXHRcdHRvZ2dsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbGVtZW50KS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG5cdFx0XHRpZihldmVudC50YXJnZXQgIT09IGVsZW1lbnQpIHtcblx0XHRcdFx0ZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59O1xuXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuLy8gXHRjb25zdCB0YXJnZXROZXh0RWxlbWVudCA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG4vLyBcdGNvbnN0IGlzVGFyZ2V0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5qcy1hY2NvcmRpb24nKTtcbi8vIFx0aWYgKCFpc1RhcmdldCkgcmV0dXJuO1xuLy8gXHQvLyBwYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoKSDroZwg7Ya17J28LlxuXG4vLyBcdGlmKGlzVGFyZ2V0KSB7XG4vLyBcdFx0dGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScpO1xuLy8gXHRcdHRhcmdldE5leHRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcbi8vIFx0fVxuLy8gfSk7XG5cbi8vIGNsaWNrIOydtOuypO2KuCDsmbjrtoDsl5Ag64Sj7Jy864uI6rmMIO2MjO2PreyXkOyEnOunjCDsmKTrpZguIGV2ZW50IHVuZGVmaW5lZFxuLy8gVE9ETzog7Yag6riAIOyViOyXkCDthqDquIAg7J2067Kk7Yq4IOyhtOyerCDsi5xcbi8vIFRPRE86IOuPhO2BkOuovO2KuOqwgCDslYTri4jrnbwgZXZlbnQudGFyZ2V0LnBhcmVudCDqsIAg7JWE64uMIOqyg+ydhCDtgbTrpq3tlojsnYQg65WMIOuLpOuLueyVvCDtlZjrgphcblxuXG5cdC8vIGNvbnN0IGZpbmRDbGFzc1JlY3Vyc2l2ZSA9IChlbGVtZW50LCBjbGFzc05hbWUsIGRlcHRoKSA9PiB7XG5cdC8vIC8vIHBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1tb2RhbCcpXG5cdC8vIFx0Y29uc29sZS5sb2coJ2RlcHRoOiAnICsgZGVwdGgsIGVsZW1lbnQpO1xuXHQvLyBcdGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSByZXR1cm4gZWxlbWVudDtcblx0Ly8gXHRlbHNlIHJldHVybiBmaW5kQ2xhc3NSZWN1cnNpdmUoZWxlbWVudC5wYXJlbnROb2RlLCBjbGFzc05hbWUsIGRlcHRoICsgMSk7XG5cdC8vIH07XG5cblx0Ly8gdmFyIGdldENsb3Nlc3QgPSBmdW5jdGlvbihlbGVtLCBzZWxlY3Rvcikge1xuXHQvLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG5cdC8vIFx0XHRpZiAoZWxlbS5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIGVsZW07XG5cdC8vIFx0fVxuXHQvLyBcdHJldHVybiBudWxsO1xuXHQvLyB9O1xuXG5leHBvcnQgY29uc3QgY3VzdG9tQ3Vyc29yID0gKCkgPT4ge1xuXHQvLyBjb25zdCBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3Vyc29yJyk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBzZXRDdXJzb3IpO1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZXRDdXJzb3IpO1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNldFJpcHBsZSk7XG5cblx0Y29uc3QgY3Vyc29yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvYWRpbmctb2JqZWN0Jyk7XG5cdGNvbnN0IGhvdmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgYScpO1xuXG5cdGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1kZWZhdWx0Jyk7XG5cdGhvdmVyRWxlbWVudC5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuXHRcdGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1jbGlja2FibGUnKTtcblx0fSkpO1xuXHRob3ZlckVsZW1lbnQuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcblx0XHRjdXJzb3IuY2xhc3NMaXN0LmFkZCgnaXMtY2xpY2thYmxlJyk7XG5cdH0pKTtcblxuXHRmdW5jdGlvbiBzZXRDdXJzb3IoKSB7XG5cdFx0Y29uc3QgeCA9IGV2ZW50LmNsaWVudFg7XG5cdFx0Y29uc3QgeSA9IGV2ZW50LmNsaWVudFk7XG5cdFx0Y3Vyc29yLnN0eWxlLmxlZnQgPSBgJHt4fXB4YDtcblx0XHRjdXJzb3Iuc3R5bGUudG9wID0gYCR7eX1weGA7XG5cdFx0Ly8gY3Vyc29yLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4IC0gMTV9cHgsICR7eSAtIDE1fXB4YDtcblxuXHR9XG5cdGZ1bmN0aW9uIHNldFJpcHBsZSgpe1xuXHRcdGN1cnNvci5jbGFzc0xpc3QuYWRkKCdleHBhbmQnKTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmQnKTtcblx0XHR9LCA1MDApO1xuXHR9XG59O1xuXG5leHBvcnQgY29uc3Qgc2Nyb2xsUHJvZ3Jlc3MgPSAoKSA9PiB7XG5cdGNvbnN0IHBhZ2VQcm9ncmVzc0JhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0LWhlYWQtcHJvZ3Jlc3MnKTtcblx0aWYoIXBhZ2VQcm9ncmVzc0JhcikgcmV0dXJuO1xuXHRsZXQgc2Nyb2xsUGVyY2VudDtcblx0c2Nyb2xsUGVyY2VudCA9IHdpbmRvdy5wYWdlWU9mZnNldCAvIChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCkgKiAxMDAgKyAnJSc7XG5cdHBhZ2VQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNjcm9sbFBlcmNlbnQ7XG59OyIsImltcG9ydCB7IGNoZWNrQWxsY2hlY2tib3gsIGF0dGFjaEZpbGUsIGlucHV0VmFyaWF0aW9uIH0gZnJvbSAnLi9pbnB1dCc7XG5pbXBvcnQgeyBlbnRlclRhcmdldCwgc3RpY2t5SGVhZGVyLCBtb2RhbCwgZXZlbnRUb2dnbGUsIGV2ZW50VG9Ub3AsIGV2ZW50Q2xvc2UsIGV2ZW50U2Nyb2xsQW5pbWF0aW9uLCBjdXN0b21DdXJzb3IsIHN0aWNreUVsZW1lbnQsIHNjcm9sbFByb2dyZXNzIH0gZnJvbSAnLi9ldmVudCc7XG5pbXBvcnQgeyB0b2RheURhdGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNhcm91c2VsLCBzZXREYXJrbW9kZSB9IGZyb20gJy4vZXZlbnQvaW5kZXguanMnO1xuXG4vLyBoYXNoIOunkOqzoCDtgbTrpq3tlZjripQg7Iic6rCE7JeQIOqwkuydhCDslYzslYTslbwg7ZWoLiBkYXRhIGF0dHIgb3IgaGFzaFxuXG5jb25zdCByb3V0ZXIgPSAoKSA9PiB7XG5cdGNvbnN0IHZpZXcgPSBudWxsIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3Jyk7XG5cblx0Y29uc3Qgcm91dGVQYWdlID0gKCkgPT4ge1xuXHRcdGxldCB7IGhhc2ggfSA9IHdpbmRvdy5sb2NhdGlvbjtcblx0XHRjb25zdCBwYWdlID0gaGFzaCA/IGAvdmlld3MvJHtoYXNoLnN1YnN0cmluZygxKX0uaHRtbGAgOiAnL3ZpZXdzL3Byb2ZpbGUuaHRtbCc7XG5cdFx0ZmV0Y2gocGFnZSlcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0Ly8gNDA0IHx8IDUwMFxuXHRcdFx0XHRpZihyZXNwb25zZS5vaykgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcblx0XHRcdFx0ZWxzZSByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1x0XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oaHRtbCA9PiB7XG5cdFx0XHRcdHZpZXcuaW5uZXJIVE1MID0gaHRtbDtcblx0XHRcdFx0Ly8gd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJ2RkJywgaGFzaC5zdWJzdHJpbmcoMSkpO1xuXG5cdFx0XHRcdGNvbnN0IHdoaXRlID0gWycjZGVzaWduJ107XG5cdFx0XHRcdGNvbnN0IGlzV2hpdGUgPSB3aGl0ZS5pbmNsdWRlcyh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG5cblx0XHRcdFx0aWYoaXNXaGl0ZSkge1xuXHRcdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLWhlYWQnKS5jbGFzc0xpc3QuYWRkKCctLXdoaXRlJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UtaGVhZCcpLmNsYXNzTGlzdC5yZW1vdmUoJy0td2hpdGUnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGlja3lFbGVtZW50KHt0YXJnZXRFbGVtZW50OicucG9zdC1oZWFkJywgYWRkQ2xhc3M6ICdpcy1zdGlja3knfSkpO1xuXHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsUHJvZ3Jlc3MsIHRydWUpO1xuXHRcdFx0XHQvLyB0b2dnbGVFbGVtZW50KCcuanMtb3Blbi1jb21tZW50Jyk7XG5cblxuXHRcdFx0XHRjb25zdCBmb2N1c0NvbW1lbnQgPSAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgY29tbWVudFdyaXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNvbW1lbnQtd3JpdGUnKTtcblx0XHRcdFx0XHRjb25zdCBjb21tZW50VGV4dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWNvbW1lbnQtdGV4dGZpZWxkJyk7XG5cdFx0XHRcdFx0aWYoIWNvbW1lbnRXcml0ZSB8fCAhY29tbWVudFRleHRGaWVsZCkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0Y29tbWVudFRleHRGaWVsZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjb21tZW50V3JpdGUuY2xhc3NMaXN0LmFkZCgnaXMtZm9jdXNlZCcpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdFxuXHRcdFx0XHRmb2N1c0NvbW1lbnQoKTtcblx0XHRcdFx0Y2Fyb3VzZWwoKTtcblxuXHRcdFx0XHRzZXREYXJrbW9kZSgpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y3VzdG9tQ3Vyc29yKCk7XG5cdFx0XHRcdGNoZWNrQWxsY2hlY2tib3goe2NoZWNrQWxsRWxlbWVudDogJy5qcy1jaGVja2FsbCcsIGNoZWNrRWxlbWVudHM6ICcuanMtY2hlY2snfSk7XG5cblx0XHRcdFx0Ly8gc3RpY2t5SGVhZGVyKCk7XG5cdFx0XHRcdGV2ZW50VG9nZ2xlKCk7XG5cdFx0XHRcdGV2ZW50VG9Ub3AoKTtcblx0XHRcdFx0ZXZlbnRDbG9zZSgpO1xuXHRcdFx0XHRldmVudFNjcm9sbEFuaW1hdGlvbigpO1xuXG5cdFx0XHRcdGF0dGFjaEZpbGUoKTtcblx0XHRcdFx0bW9kYWwoKTtcblx0XHRcdFx0Ly8gaW5wdXRWYXJpYXRpb24oKTtcblxuXHRcdFx0XHRlbnRlclRhcmdldCgnLmpzLWhvdmVyLXRyaWdnZXInKTtcblx0XHRcdFx0ZW50ZXJUYXJnZXQoJy5oZWFkZXItdXNlci1ub3RpZmljYXRpb24nKTtcblx0XHRcdFx0ZW50ZXJUYXJnZXQoJy5oZWFkZXItdXNlci1hY2NvdW50Jyk7XG5cdFx0XHRcdC8vIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGV4dGFyZWEnKTtcblx0XHRcdFx0Ly8gdGV4dGFyZWEuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBhdXRvRXhwYW5kKGVsZW1lbnQpKSk7XG5cdFx0XHRcdFxuXG5cdFx0XHRcdFx0Ly8gdmFyIGkgPTA7XG5cdFx0XHRcdFx0Ly8gdmFyIGltYWdlcyA9IFsnY292ZXIxLmpwZycsJ2NvdmVyMi5qcGcnXTtcblx0XHRcdFx0XHQvLyB2YXIgaW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY292ZXJfaW1hZ2UnKTtcblx0XHRcdFx0XHQvLyAvLyBpbWFnZS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKC9pbWcvY292ZXIxLmpwZyknKTtcblx0XHRcdFx0XHQvLyBzZXRJbnRlcnZhbChmdW5jdGlvbigpeyBcblx0XHRcdFx0XHQvLyBcdGltYWdlLmZhZGVPdXQoMTAwMCwgKCkgPT4ge1xuXHRcdFx0XHRcdC8vIFx0XHRpbWFnZS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKCcgKyBpbWFnZXMgW2krK10gKycpJyk7XG5cdFx0XHRcdFx0Ly8gXHRcdGltYWdlLmZhZGVJbigxMDAwKTtcblx0XHRcdFx0XHQvLyBcdH0pO1xuXHRcdFx0XHRcdC8vIFx0aWYoaSA9PSBpbWFnZXMubGVuZ3RoKSBpID0gMDtcblx0XHRcdFx0XHQvLyB9LCA1MDAwKTsgXG5cdFx0XHRcdFx0XG5cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZXJyb3IgPT4gY29uc29sZS53YXJuKCdyb3V0ZXI6ICcsIGVycm9yKSk7XG5cdH07XG5cblx0cm91dGVQYWdlKCk7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgcm91dGVQYWdlKTtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBpbml0YWlsaXplUGFnZSk7XG5cblx0ZnVuY3Rpb24gaW5pdGFpbGl6ZVBhZ2UoKSB7XG5cdFx0Y29uc3QgbmF2aWdhdGlvblRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbi10b2dnbGUnKTtcblx0XHRjb25zdCBpc09wZW5lZE5hdmlnYXRpb24gPSBuYXZpZ2F0aW9uVHJpZ2dlci5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZScpO1xuXHRcdGlmKCFpc09wZW5lZE5hdmlnYXRpb24pIHJldHVybjtcblx0XHRcblx0XHRuYXZpZ2F0aW9uVHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcblx0XHRuYXZpZ2F0aW9uVHJpZ2dlci5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuXHR9XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcblxuXG4vLyB7XG4vLyBcdG1ldGhvZDogJ1BPU1QnLFxuLy8gXHRib2R5OiAndGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnTXkgYXdlc29tZSBuZXcgYXJ0aWNsZScpICsgJyZib2R5PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1RoaXMgaXMgdGhlIHRleHQgb2YgbXkgYXJ0aWNsZScpLFxuLy8gXHRoZWFkZXI6IHtcbi8vIFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4vLyBcdH0sXG4vLyBcdHJlZmVycmVyOiAnbm8tcmVmZXJyZXInXG4vLyB9XG4vLyBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4vLyBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKTtcbi8vIHZpZXcuaW5uZXJIVE1MID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xuLy8gcmVzcG9uc2UudGV4dCgpIC8vIHJlc3BvbnNlLmpzb24oKVxuLy8gdG9Mb3dlckNhc2UoKSDtlbTso7zquLBcblxuXG4vKlxuXHRjb25zdCBSb3V0ZXIgPSAobmFtZSwgcm91dGVzKSA9PiB7XG5cdFx0cmV0dXJuIHsgbmFtZTogbmFtZSwgcm91dGVzOiByb3V0ZXMgfVxuXHR9O1xuXHR2YXIgYWN0aXZlUm91dGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaHJlZl0nKSk7XG5cdGFjdGl2ZVJvdXRlcy5mb3JFYWNoKChyb3V0ZSkge1xuXHRcdHJvdXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmF2aWdhdGUpO1xuXHR9KTtcblx0Y29uc3QgbXlGaXJzdFJvdXRlciA9IG5ldyBSb3V0ZXIoJ215Rmlyc3RSb3V0ZXInLCBbXG5cdFx0eyBwYXRoOiAnLycsIG5hbWU6ICdpbmRleCcgfSxcblx0XSk7XG5cdGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Y29uc3Qgcm91dGUgPSBmaW5kQ3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzBdLnZhbHVlO1xuXHRcdGNvbnN0IHJvdXRlSW5mbyA9IG15Rmlyc3RSb3V0ZXIucm91dGVzLmZpbmQociA9PiByLnBhdGggPT09IHJvdXRlKTtcblx0XHRpZighcm91dGVJbmZvKSB7XG5cdFx0XHQvL3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsICdlcnJvcicpO1xuXHRcdFx0dmlldy5pbm5lckhUTUwgPSAnTm8gcm91dGUgZXhpc3RzIHdpdGggdGhpcyBwYXRoJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJycsIHJvdXRlSW5mby5wYXRoKTtcblx0XHRcdGZldGNoKGAvdmlld3MvJHtyb3V0ZUluZm8ubmFtZX0uaHRtbGApXG5cdFx0XHRcdC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuXHRcdFx0XHQudGhlbihodG1sID0+IHZpZXcuaW5uZXJIVE1MID0gaHRtbClcblx0XHRcdFx0LmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gZmV0Y2ggcGFnZTogJywgZXJyb3IpKTtcblx0XHR9XG5cdH1cbiovIiwiZXhwb3J0IGNvbnN0IGNhcm91c2VsID0gKCkgPT4ge1xuICBjb25zdCBjYXRlZ29yeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXInKTtcbiAgaWYoIWNhdGVnb3J5KSByZXR1cm47XG4gIGNvbnN0IGNhdGVnb3J5TGlzdCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdmlld2VyJyk7XG4gIGNvbnN0IGNhdGVnb3J5TGlzdFNsaWRlID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci12aWV3ZXIgPiBidXR0b24nKTtcbiAgY29uc3QgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLXByZXYnKTtcbiAgY29uc3QgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLW5leHQnKTtcbiAgY29uc3QgY2F0ZWdvcnlEb3RzID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1kb3RzLWRvdCcpO1xuXG4gIGNvbnN0IGNhdGVnb3J5Q29udGFpbmVyV2lkdGggPSBjYXRlZ29yeUxpc3Qub2Zmc2V0V2lkdGg7XG4gIGxldCBzdW0gPSAwO1xuICBcbiAgY2F0ZWdvcnlMaXN0U2xpZGUuZm9yRWFjaChpdGVtID0+IHN1bSArPSBpdGVtLm9mZnNldFdpZHRoKTtcbiAgXG4gIGNhdGVnb3J5TmF2aWdhdGlvbk5leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b05leHQpO1xuICBjYXRlZ29yeU5hdmlnYXRpb25QcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9QcmV2KTtcbiAgY2F0ZWdvcnlEb3RzLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge30pKTtcblxuICBjYXRlZ29yeUxpc3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgc2Nyb2xsTGVmdCB9ID0gY2F0ZWdvcnlMaXN0O1xuICAgIGNvbnNvbGUubG9nKCdzY3JvbGwtbGVmdCcsIHNjcm9sbExlZnQsICdvZmZzZXQtd2lkdGgnLCBjYXRlZ29yeUNvbnRhaW5lcldpZHRoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdG9QcmV2KCkge1xuICAgIGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0IC09IDEwMDtcbiAgfVxuICBmdW5jdGlvbiB0b05leHQoKSB7XG4gICAgY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgKz0gMTAwO1xuICAgIC8vIGlmKHN1bSA+IGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpIHt9XG4gICAgLy8gY29uc3QgdHR0ID0gMTAwICsgJ3B4JztcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXZpZXdlcicpLnN0eWxlLnRyYW5zZm9ybSArPSAndHJhbnNsYXRlWCgnK3R0dCsnKSc7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzZXREYXJrbW9kZSA9ICgpID0+IHtcbiAgY29uc3QgZGFya21vZGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGFya21vZGUnKTtcbiAgaWYoIWRhcmttb2RlQnV0dG9uKSByZXR1cm47XG4gIGRhcmttb2RlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0RGFya21vZGUpO1xuXG4gIGZ1bmN0aW9uIHNldERhcmttb2RlKCkge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFya21vZGUnKTtcbiAgICBcbiAgICBjb25zdCBpc0Rhcmttb2RlID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rhcmttb2RlJyk7XG4gICAgaWYoaXNEYXJrbW9kZSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgJ2Rhcmttb2RlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0aGVtZScpO1xuICAgICAgLy8gbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGxhc3RUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpO1xuICBpZighbGFzdFRoZW1lKSByZXR1cm47XG4gIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChsYXN0VGhlbWUpO1xufTsiLCJleHBvcnQgY29uc3QgdmFsaWRhdGlvbnMgPSB7XG5cdGlzUmVxdWlyZWQodmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgPT0gJycgfHwgdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQgfHwgKCB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiAhT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCk7XG5cdH0sXG5cdGlzRW1haWwodmFsdWUpe1xuXHRcdHJldHVybiAhL14oW15cXHgwMC1cXHgyMFxceDIyXFx4MjhcXHgyOVxceDJjXFx4MmVcXHgzYS1cXHgzY1xceDNlXFx4NDBcXHg1Yi1cXHg1ZFxceDdmLVxceGZmXSt8XFx4MjIoW15cXHgwZFxceDIyXFx4NWNcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHgyMikoXFx4MmUoW15cXHgwMC1cXHgyMFxceDIyXFx4MjhcXHgyOVxceDJjXFx4MmVcXHgzYS1cXHgzY1xceDNlXFx4NDBcXHg1Yi1cXHg1ZFxceDdmLVxceGZmXSt8XFx4MjIoW15cXHgwZFxceDIyXFx4NWNcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHgyMikpKlxceDQwKFteXFx4MDAtXFx4MjBcXHgyMlxceDI4XFx4MjlcXHgyY1xceDJlXFx4M2EtXFx4M2NcXHgzZVxceDQwXFx4NWItXFx4NWRcXHg3Zi1cXHhmZl0rfFxceDViKFteXFx4MGRcXHg1Yi1cXHg1ZFxceDgwLVxceGZmXXxcXHg1Y1tcXHgwMC1cXHg3Zl0pKlxceDVkKShcXHgyZShbXlxceDAwLVxceDIwXFx4MjJcXHgyOFxceDI5XFx4MmNcXHgyZVxceDNhLVxceDNjXFx4M2VcXHg0MFxceDViLVxceDVkXFx4N2YtXFx4ZmZdK3xcXHg1YihbXlxceDBkXFx4NWItXFx4NWRcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHg1ZCkpKihcXC5cXHd7Mix9KSskLy50ZXN0KHZhbHVlKTtcblx0fSxcblx0aXNMZW5ndGgodmFsdWUsIGxlbmd0aCl7XG5cdFx0cmV0dXJuIHZhbHVlLmxlbmd0aCA8IGxlbmd0aDtcblx0fSxcblx0aXNOdW1iZXIodmFsdWUpIHtcblx0XHRyZXR1cm4gL1teMC05XS9nLnRlc3QodmFsdWUpO1xuXHR9XG59O1xuXG5leHBvcnQgY29uc3QgaW5wdXRIZWxwZXIgPSB7XG5cdGlzU2hvcnQ6ICcnLFxufTtcblxuLy8gdXNlck5hbWUgJiYgbG9nSW4gKHVzZXJOYW1lKSB8fCBzaWduVXAgKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJy4vc3R5bGVzaGVldHMvc3R5bGUuc2Nzcyc7XG5pbXBvcnQgcm91dGVyIGZyb20gJy4vamF2YXNjcmlwdHMvcm91dGVyJztcbmltcG9ydCB7IHRhYk1lbnUgfSBmcm9tICcuL2phdmFzY3JpcHRzL2V2ZW50JztcbmltcG9ydCB7IHNldEdyYXBoIH0gZnJvbSAnLi9qYXZhc2NyaXB0cy91aSc7XG5pbXBvcnQgeyBpbnB1dE51bWJlciB9IGZyb20gJy4vamF2YXNjcmlwdHMvaW5wdXQnO1xuaW1wb3J0IHsgbG9hZGVyLCBjaGVja0Jyb3dzZXIsIGFkanVzdFRvcFBhZGRpbmcgfSBmcm9tICcuL2phdmFzY3JpcHRzL2xvYWQnO1xuaW1wb3J0IHsgdmFsaWRhdGlvbnMgfSBmcm9tICcuL2phdmFzY3JpcHRzL3ZhbGlkYXRpb25zJztcbi8vZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIHN1cHBvcnRzLWRhdGUnO1xuLy8gaWYod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6ODAwcHgpJykubWF0Y2hlcykge31cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcdFxuXHRsb2FkZXIoKTtcblx0cm91dGVyKCk7XG5cblx0Y2hlY2tCcm93c2VyKCk7XG5cdGFkanVzdFRvcFBhZGRpbmcoKTtcblxuXHR0YWJNZW51KCk7XG5cdGlucHV0TnVtYmVyKCk7XG5cblx0c2V0R3JhcGgoKTtcblxuXHRjb25zdCBzYXlIZWxsbyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdHJlamVjdCgnVW5hYmxlIHRvIHNheSBoaS4nKTtcblxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVzb2x2ZSgnSGVsbG8sIFdvcmxkJyk7XG5cdFx0fSwgNTAwMCk7XG5cdH0pO1xuXHRzYXlIZWxsby50aGVuKHJlc29sdmUgPT4ge1xuXHRcdGNvbnNvbGUubG9nKCdyZXMnLCByZXNvbHZlKTtcblx0fSkuY2F0Y2goZXJyb3IgPT4ge1xuXHRcdGNvbnNvbGUud2FybihlcnJvcik7XG5cdH0pO1xuXG5cdC8vIFByb21pc2UuYWxsKFtcblx0Ly8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJyksXG5cdC8vIFx0ZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2VycycpXG5cdC8vIF0pXG5cdC8vIC50aGVuKHJlc3BvbnNlcyA9PiB7XG5cdC8vIFx0cmV0dXJuIHJlc3BvbnNlcy5tYXAocmVzcG9uc2UgPT4ge1xuXHQvLyBcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0Ly8gXHR9KTtcbn0pO1xuXG5cdC8vIGxldCBsb2dpbkRhdGEgPSB7ZW1haWw6ICcnLCBwYXNzd29yZDogJyd9O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcblx0Y29uc3QgaGVscGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZXh0ZmllbGQtaGVscGVyJyk7IC8vIGhlbHBlcnMuZm9yRWFjaChoZWxwZXIgPT4gaGVscGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpO1xuXHRjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gZG9jdW1lbnQubG9naW47XG5cdGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcblx0Y29uc3QgaXNFbWFpbCA9IHRhcmdldCA9PT0gZW1haWw7XG5cdGNvbnN0IGlzUGFzc3dvcmQgPSB0YXJnZXQgPT09IHBhc3N3b3JkO1xuXG5cdC8vIOygleq3nO2RnO2YhOyLneycvOuhnCDsnKDtmqjshLEg6rKA7IKs66W8IOuqqOuRkCDtlaAg7IiYIOyeiOycvOuptCDrjZQg6rCE64uo7ZWY6rKg64ukLlxuXHRpZihpc0VtYWlsKSB7XG5cdFx0aWYodmFsaWRhdGlvbnMuaXNSZXF1aXJlZChlbWFpbC52YWx1ZSkpIHtcblx0XHRcdHNldEludmFsaWQoe21lc3NhZ2U6ICftlYTsiJjqsJLsnbTslrTsmpQuJ30pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZXRWYWxpZCgpO1xuXHRcdH1cblx0fVxuXHRpZihpc1Bhc3N3b3JkKSB7XG5cdFx0aWYodmFsaWRhdGlvbnMuaXNMZW5ndGgocGFzc3dvcmQudmFsdWUsIDgpKSB7XG5cdFx0XHRzZXRJbnZhbGlkKHttZXNzYWdlOiAn64SI66y0IOynp+yVhOyalC4nfSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNldFZhbGlkKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gdmFsaWRhdGUgPyBhIDogYlxuXHRmdW5jdGlvbiBzZXRWYWxpZCgpIHtcblx0XHR0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJyk7XG5cdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5pbm5lckhUTUwgPSAnJztcblx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdH1cblx0ZnVuY3Rpb24gc2V0SW52YWxpZCh7bWVzc2FnZX0pIHtcblx0XHRpZighdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZykgcmV0dXJuO1xuXHRcdC8vIGNvbnN0IGlkID0gdGFyZ2V0LmlkIHx8IHRhcmdldC5uYW1lO1xuXHRcdC8vIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnZXJyb3ItJyArIGlkKTtcblx0XHR0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XG5cdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5pbm5lclRleHQgPSBtZXNzYWdlO1xuXHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdH1cbn0pO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnQgPT4ge30sIHRydWUpOyAvLyBibHVyIGlzIG5vdCBidWJibGVcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGV2ZW50ID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCkpO1xuXG5cblxuLy8gdmFyIGhhc0Vycm9yID0gZnVuY3Rpb24oZmllbGQpIHtcbi8vIFx0aWYgKGZpZWxkLmRpc2FibGVkIHx8IGZpZWxkLnR5cGUgPT09ICdmaWxlJyB8fCBmaWVsZC50eXBlID09PSAncmVzZXQnIHx8IGZpZWxkLnR5cGUgPT09ICdzdWJtaXQnIHx8IGZpZWxkLnR5cGUgPT09ICdidXR0b24nKSByZXR1cm47XG5cbi8vIFx0dmFyIHZhbGlkaXR5ID0gZmllbGQudmFsaWRpdHk7XG4vLyBcdGlmICh2YWxpZGl0eS52YWxpZCkgcmV0dXJuO1xuXG4vLyBcdGlmICh2YWxpZGl0eS52YWx1ZU1pc3NpbmcpIHJldHVybiAnUGxlYXNlIGZpbGwgb3V0IHRoaXMgZmllbGQuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnR5cGVNaXNtYXRjaCkgcmV0dXJuICdQbGVhc2UgdXNlIHRoZSBjb3JyZWN0IGlucHV0IHR5cGUuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnRvb1Nob3J0KSByZXR1cm4gJ1BsZWFzZSBsZW5ndGhlbiB0aGlzIHRleHQuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnRvb0xvbmcpIHJldHVybiAnUGxlYXNlIHNob3J0ZW4gdGhpcyB0ZXh0Lic7XG4vLyBcdGlmICh2YWxpZGl0eS5iYWRJbnB1dCkgcmV0dXJuICdQbGVhc2UgZW50ZXIgYSBudW1iZXIuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnN0ZXBNaXNtYXRjaCkgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgdmFsdWUuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpIHJldHVybiAnUGxlYXNlIHNlbGVjdCBhIHNtYWxsZXIgdmFsdWUuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnJhbmdlVW5kZXJmbG93KSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSBsYXJnZXIgdmFsdWUuJztcbi8vIFx0aWYgKHZhbGlkaXR5LnBhdHRlcm5NaXNtYXRjaCkgcmV0dXJuICdQbGVhc2UgbWF0Y2ggdGhlIHJlcXVlc3RlZCBmb3JtYXQuJztcblxuLy8gXHRyZXR1cm4gJ1RoZSB2YWx1ZSB5b3UgZW50ZXJlZCBmb3IgdGhpcyBmaWVsZCBpcyBpbnZhbGlkLic7XG4vLyB9OyIsImV4cG9ydCBjb25zdCBsb2FkZXIgPSAoKSA9PiB7XG5cdGNvbnN0IHsgYm9keSB9ID0gZG9jdW1lbnQ7XG5cdGNvbnN0IGxvYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbG9hZGluZycpO1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRsb2FkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWhpZGRlbicpO1xuXHRcdFx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKCdib2R5LWxvY2snKTtcblx0XHR9LCAwKTtcblx0fSk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcblx0XHRib2R5LmNsYXNzTGlzdC5hZGQoJ2JvZHktbG9jaycpO1xuXHR9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGVja0Jyb3dzZXIgPSAoKSA9PiB7XG5cdGNvbnN0IEJyb3dzZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJyb3dzZXInKTtcblx0bGV0IGFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXHRpZiAoYWdlbnQuaW5kZXhPZignbXNpZScpID4gLTEgfHwgYWdlbnQuaW5kZXhPZigndHJpZGVudCcpID4gLTEpIHtcblx0XHRCcm93c2VyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0fSBlbHNlIGlmIChhZ2VudC5pbmRleE9mKCdjaHJvbWUnKSAhPT0gLTEpIHtcblx0XHRjb25zb2xlLmxvZyhhZ2VudCwgJ+2BrOuhrCcpO1xuXHR9XG59O1xuXG5cbmV4cG9ydCBjb25zdCBnb29nbGVBbmFseXRpY3MgPSAoKSA9PiB7XG5cdC8vIDxzY3JpcHQgYXN5bmMgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS04MzUzMTIzOS0xXCI+PC9zY3JpcHQ+XG5cdC8vIHdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdO1xuXHQvLyBmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9XG5cdC8vIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7XG5cdC8vIGd0YWcoJ2NvbmZpZycsICdVQS04MzUzMTIzOS0xJyk7XG59O1xuXG5cbmV4cG9ydCBjb25zdCBhZGp1c3RUb3BQYWRkaW5nID0gKCkgPT4ge1xuXHRjb25zdCBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuXHRjb25zdCBpc0ZpeGVkSGVhZGVyID0gZ2V0Q29tcHV0ZWRTdHlsZShoZWFkZXJFbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcblx0Y29uc3QgbWFpbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cblx0YWRkUGFkZGluZygpO1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShhZGRQYWRkaW5nKTtcblx0fSk7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFkZFBhZGRpbmcpO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBhZGRQYWRkaW5nKCkge1xuXHRcdGlmIChpc0ZpeGVkSGVhZGVyKSB7XG5cdFx0XHRtYWluRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSBoZWFkZXJFbGVtZW50LmNsaWVudEhlaWdodCArICdweCc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1haW5FbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IDAgKyAncHgnO1xuXHRcdH1cblx0fVxufTsiLCJleHBvcnQgY29uc3Qgc2V0R3JhcGggPSAoKSA9PiB7XG5cdGNvbnN0IGdyYXBoSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ3JhcGgtaXRlbScpO1xuXHRpZighZ3JhcGhJdGVtcykgcmV0dXJuO1xuXG5cdGxldCBncmFwaEl0ZW1WYWx1ZTtcblx0bGV0IGdyYXBoSXRlbUJhcjtcblx0bGV0IGdyYXBoVmFsdWU7XG5cblx0Z3JhcGhJdGVtcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG5cdFx0Z3JhcGhJdGVtQmFyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS1iYXInKTtcblx0XHRncmFwaEl0ZW1WYWx1ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tdmFsdWUnKTtcblx0XHRncmFwaFZhbHVlID0gcGFyc2VJbnQoZ3JhcGhJdGVtVmFsdWUuaW5uZXJIVE1MKTtcblxuXHRcdChmdW5jdGlvbiBzZXRHcmFwaCgpIHtcblx0XHRcdGdyYXBoSXRlbUJhci5zdHlsZS5oZWlnaHQgPSBncmFwaFZhbHVlICsgJ3B4Jztcblx0XHRcdGdyYXBoSXRlbVZhbHVlLnN0eWxlLmJvdHRvbSA9IGdyYXBoVmFsdWUgKyAncHgnO1xuXHRcdH0pKCk7XG5cdH0pO1xufTsiXSwic291cmNlUm9vdCI6IiJ9