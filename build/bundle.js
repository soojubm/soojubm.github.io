!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=37)}([function(e,t,n){},function(e,t,n){"use strict";var o=n(2),r=n(4),i=n(6),c=n(7),a=n(8),l=n(10),s=Math.max,u=Math.min,d=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(19)("replace",2,(function(e,t,n,g){return[function(o,r){var i=e(this),c=null==o?void 0:o[t];return void 0!==c?c.call(o,i,r):n.call(String(i),o,r)},function(e,t){var r=g(n,e,this,t);if(r.done)return r.value;var d=o(e),f=String(this),p="function"==typeof t;p||(t=String(t));var m=d.global;if(m){var h=d.unicode;d.lastIndex=0}for(var y=[];;){var b=l(d,f);if(null===b)break;if(y.push(b),!m)break;""===String(b[0])&&(d.lastIndex=a(f,i(d.lastIndex),h))}for(var x,w="",S=0,E=0;E<y.length;E++){b=y[E];for(var L=String(b[0]),j=s(u(c(b.index),f.length),0),k=[],q=1;q<b.length;q++)k.push(void 0===(x=b[q])?x:String(x));var A=b.groups;if(p){var O=[L].concat(k,j,f);void 0!==A&&O.push(A);var M=String(t.apply(void 0,O))}else M=v(L,f,j,k,A,t);j>=S&&(w+=f.slice(S,j)+M,S=j+L.length)}return w+f.slice(S)}];function v(e,t,o,i,c,a){var l=o+e.length,s=i.length,u=p;return void 0!==c&&(c=r(c),u=f),n.call(a,u,(function(n,r){var a;switch(r.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,o);case"'":return t.slice(l);case"<":a=c[r.slice(1,-1)];break;default:var u=+r;if(0===u)return n;if(u>s){var f=d(u/10);return 0===f?n:f<=s?void 0===i[f-1]?r.charAt(1):i[f-1]+r.charAt(1):n}a=i[u-1]}return void 0===a?"":a}))}}))},function(e,t,n){var o=n(3);e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var o=n(5);e.exports=function(e){return Object(o(e))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var o=n(7),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},function(e,t){var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},function(e,t,n){"use strict";var o=n(9)(!0);e.exports=function(e,t,n){return t+(n?o(e,t).length:1)}},function(e,t,n){var o=n(7),r=n(5);e.exports=function(e){return function(t,n){var i,c,a=String(r(t)),l=o(n),s=a.length;return l<0||l>=s?e?"":void 0:(i=a.charCodeAt(l))<55296||i>56319||l+1===s||(c=a.charCodeAt(l+1))<56320||c>57343?e?a.charAt(l):i:e?a.slice(l,l+2):c-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var o=n(11),r=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==o(e))throw new TypeError("RegExp#exec called on incompatible receiver");return r.call(e,t)}},function(e,t,n){var o=n(12),r=n(13)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=function(e){var t,n,c;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),r))?n:i?o(t):"Object"==(c=o(t))&&"function"==typeof t.callee?"Arguments":c}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var o=n(14)("wks"),r=n(18),i=n(16).Symbol,c="function"==typeof i;(e.exports=function(e){return o[e]||(o[e]=c&&i[e]||(c?i:r)("Symbol."+e))}).store=o},function(e,t,n){var o=n(15),r=n(16),i=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:o.version,mode:n(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=!1},function(e,t){var n=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},function(e,t,n){"use strict";n(20);var o=n(32),r=n(24),i=n(28),c=n(5),a=n(13),l=n(21),s=a("species"),u=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),d=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var f=a(e),p=!i((function(){var t={};return t[f]=function(){return 7},7!=""[e](t)})),g=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[s]=function(){return n}),n[f](""),!t})):void 0;if(!p||!g||"replace"===e&&!u||"split"===e&&!d){var v=/./[f],m=n(c,f,""[e],(function(e,t,n,o,r){return t.exec===l?p&&!r?{done:!0,value:v.call(t,n,o)}:{done:!0,value:e.call(n,t,o)}:{done:!1}})),h=m[0],y=m[1];o(String.prototype,e,h),r(RegExp.prototype,f,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){"use strict";var o=n(21);n(23)({target:"RegExp",proto:!0,forced:o!==/./.exec},{exec:o})},function(e,t,n){"use strict";var o,r,i=n(22),c=RegExp.prototype.exec,a=String.prototype.replace,l=c,s=(o=/a/,r=/b*/g,c.call(o,"a"),c.call(r,"a"),0!==o.lastIndex||0!==r.lastIndex),u=void 0!==/()??/.exec("")[1];(s||u)&&(l=function(e){var t,n,o,r,l=this;return u&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),s&&(t=l.lastIndex),o=c.call(l,e),s&&o&&(l.lastIndex=l.global?o.index+o[0].length:t),u&&o&&o.length>1&&a.call(o[0],n,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(o[r]=void 0)})),o}),e.exports=l},function(e,t,n){"use strict";var o=n(2);e.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var o=n(16),r=n(15),i=n(24),c=n(32),a=n(35),l=function(e,t,n){var s,u,d,f,p=e&l.F,g=e&l.G,v=e&l.S,m=e&l.P,h=e&l.B,y=g?o:v?o[t]||(o[t]={}):(o[t]||{}).prototype,b=g?r:r[t]||(r[t]={}),x=b.prototype||(b.prototype={});for(s in g&&(n=t),n)d=((u=!p&&y&&void 0!==y[s])?y:n)[s],f=h&&u?a(d,o):m&&"function"==typeof d?a(Function.call,d):d,y&&c(y,s,d,e&l.U),b[s]!=d&&i(b,s,f),m&&x[s]!=d&&(x[s]=d)};o.core=r,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){var o=n(25),r=n(31);e.exports=n(27)?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var o=n(2),r=n(26),i=n(30),c=Object.defineProperty;t.f=n(27)?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(27)&&!n(28)((function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){e.exports=!n(28)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var o=n(3),r=n(16).document,i=o(r)&&o(r.createElement);e.exports=function(e){return i?r.createElement(e):{}}},function(e,t,n){var o=n(3);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var o=n(16),r=n(24),i=n(33),c=n(18)("src"),a=n(34),l=(""+a).split("toString");n(15).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var s="function"==typeof n;s&&(i(n,"name")||r(n,"name",t)),e[t]!==n&&(s&&(i(n,c)||r(n,c,e[t]?""+e[t]:l.join(String(t)))),e===o?e[t]=n:a?e[t]?e[t]=n:r(e,t,n):(delete e[t],r(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[c]||a.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){e.exports=n(14)("native-function-to-string",Function.toString)},function(e,t,n){var o=n(36);e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";n.r(t);n(0),n(1);"2034399002125581".slice(-4).padStart("2034399002125581".length,"*");document.addEventListener("input",e=>{const t=e.target;"textarea"===t.nodeName.toLowerCase()&&(e=>{console.log(e.scrollHeight),e.style.height="inherit";const t=window.getComputedStyle(e);let n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"})(t);const n=document.querySelector(".textfield-byte b");for(var o=0;o<1e4;o++)"This is ìë¬´ìë¯¸ìë ë¬¸ìì´";var r=0;"textarea"===t.nodeName.toLowerCase()&&(r=t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length,(t.value.length>30||t.value.length>45)&&(console.log("30byteì í"),t.value=t.value.slice(0,t.value.length)),n.innerHTML=r)});const o=()=>{document.addEventListener("click",t=>{const{target:n}=t;if(!n.closest(".js-modal"))return;const o=document.body,r=n.parentNode;let i,c=null;t.stopPropagation(),c=r.classList.contains("js-modal")?r:r.parentNode,e(t.target,"js-modal",0),i=window.pageYOffset,c.nextElementSibling.classList.add("is-visible"),o.classList.add("body-lock"),o.style.top=-i+"px";document.addEventListener("click",()=>{c.nextElementSibling.classList.contains("is-visible")&&(c.nextElementSibling.classList.remove("is-visible"),o.classList.remove("body-lock"),window.scrollTo(0,i))}),document.querySelectorAll(".modal-dialog").forEach(e=>{e.addEventListener("click",e=>{e.stopPropagation()})})},!0);const e=(t,n,o)=>(console.log("depth: "+o,t),t.classList.contains(n)?t:e(t.parentNode,n,o+1))},r=e=>{const t=document.querySelector(e),n=document.body;if(!t)return;const o=t===document.querySelector(".navigation li");t.addEventListener("mouseenter",()=>{t.setAttribute("aria-expanded","true"),t.classList.add("is-expanded"),o&&n.classList.add("is-shown"),t.addEventListener("mouseleave",()=>{t.setAttribute("aria-expanded","false"),t.classList.remove("is-expanded"),o&&n.classList.remove("is-shown")})})};var i=function(){const e=document.getElementById("view"),t=()=>{let{hash:t}=window.location;const n=t?"/views/".concat(t.substring(1),".html"):"/views/home.html";fetch(n).then(e=>e.ok?e.text():Promise.reject(e)).then(t=>{e.innerHTML=t,(e=>{let{checkAllElement:t,checkElements:n}=e;const o=document.querySelector(t),r=document.querySelectorAll(n);let i=0;o&&r&&(r.forEach(e=>{e.addEventListener("change",()=>{e.checked?i++:i--,i===r.length?o.checked=!0:o.checked=!1,o.indeterminate=i>0&&i<r.length,console.log(o.indeterminate)})}),o.addEventListener("change",()=>{r.forEach(e=>{o.checked?e.checked=!0:e.checked=!1})}))})({checkAllElement:".js-check-all",checkElements:".js-check"});let n=0;const o=document.querySelector(".header");window.addEventListener("scroll",()=>{requestAnimationFrame(i)});const i=()=>{window.pageYOffset>n?o.classList.add("nav-up"):o.classList.remove("nav-up"),n=window.pageYOffset};r(".js-hover-trigger"),r(".header-user-notification"),r(".header-user-account")}).catch(e=>console.warn("router: ",e));const o="/".concat(t.substring(1));console.log(o,window.location.pathname,window.location.history)};t(),window.addEventListener("hashchange",t),window.addEventListener("hashchange",()=>{document.querySelector(".navigation-toggle").classList.contains("is-active")&&(document.querySelector(".navigation-toggle").classList.remove("is-active"),document.querySelector(".navigation-toggle").nextElementSibling.classList.remove("is-visible"))})};n.d(t,"getTodayDate",(function(){return a}));document.addEventListener("DOMContentLoaded",()=>{"/"===window.location.pathname&&console.log("this is home page."),i(),(()=>{const e=document.body,t=document.querySelector(".js-loading");window.addEventListener("load",(function(){setTimeout((function(){t.classList.add("is-hidden"),e.classList.remove("body-lock")}),0)})),document.addEventListener("DOMContentLoaded",(function(){e.classList.add("body-lock")}))})(),(()=>{const e=document.querySelector(".js-browser");let t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?e.style.display="block":-1!==t.indexOf("chrome")&&console.log(t,"í¬ë¡¬")})(),document.addEventListener("change",e=>{const t=e.target;if(!t.closest(".js-file-input"))return;document.querySelector(".js-file-input"),document.querySelector(".js-file-submit");const n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");let r;const i=e=>{const t=["image/jpeg","image/gif","image/png"];if(console.log(t.indexOf(e.type)),t.indexOf(e.type)>-1)return!0},c=e=>e<1024?e+"bytes":e>=1024&&e<1048576?(e/1024).toFixed(2)+"KB":(e/1048576).toFixed(2)+"MB";if(r=t.files,console.log("attachedfiles",r),0===r.length)o.style.display="block";else{o.style.display="none";for(var a=0;a<r.length;a++)if(console.log("attachedfiles[i]",r[a]),i(r[a])){const e='\n            <figure class="file-attachment-item">\n              <img class="file-attachment-item-image" src='.concat(window.URL.createObjectURL(r[a]),' alt="">\n              <b class="file-attachment-item-name" href="#">').concat(r[a].name,'</b>\n              <small class="file-attachment-item-size" >').concat(c(r[a].size),'</small>\n              <button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-x"></i></button>\n            </figure>');n.innerHTML=e+n.innerHTML}else alert("íì¼íì jpeg pjpeg png ì¤ íëê° ìëì¼~")}}),document.addEventListener("click",e=>{const t=document.querySelector(".profile-tablist-active");if(e.target.closest("[role=tab]")){t.style.left=e.target.offsetLeft+"px",e.target.parentNode.querySelectorAll("[role=tab]").forEach(e=>{e.setAttribute("aria-selected","false")});const n=e.target.getAttribute("data-index");e.target.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach(e=>{e.setAttribute("aria-hidden","true"),n===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")}),e.target.setAttribute("aria-selected","true")}},!0),o(),(()=>{document.querySelector(".js-number-input");document.addEventListener("keydown",e=>{if(!e.target.closest(".js-number-input"))return;const t=e.keyCode;t>=48||t<=57||e.preventDefault(),69===t&&e.preventDefault(),189===t&&e.preventDefault(),187===t&&e.preventDefault(),190===t&&e.preventDefault(),document.addEventListener("keyup",()=>{const t=/(^0+)/.test(e.target.value),n=Number(e.target.value)>=300,o=e.target.value.length>3;t&&(e.target.value="0"),o&&(e.target.value=e.target.value.slice(0,3)),n&&(e.target.value="300")})}),document.addEventListener("click",e=>{const t=e.target;let n;if(t.closest(".js-variation-decrement")){if((n=t.parentNode.querySelector(".js-variation-input")).value<=0)return void t.classList.add("is-disabled");--n.value,console.log("target",t)}if(t.closest(".js-variation-increment")){if((n=t.parentNode.querySelector(".js-variation-input")).value>=10)return void t.classList.add("is-disabled");++n.value}})})(),document.addEventListener("click",e=>{const t=e.target;t.closest(".js-to-top")&&(e.preventDefault(),window.scrollTo(0,0),window.location.hash=t.name)}),c(),(()=>{const e=document.querySelector(".header"),t="fixed"===getComputedStyle(e).position,n=document.querySelector("body");function o(){n.style.marginTop=t?e.clientHeight+"px":"0px"}o(),window.addEventListener("scroll",()=>{requestAnimationFrame(o)}),window.addEventListener("resize",()=>{requestAnimationFrame(o)})})(),document.addEventListener("focus",e=>{e.target.closest(".js-searchbar")&&(e.target.parentNode.nextElementSibling.style.display="block")},!0),document.addEventListener("blur",e=>{e.target.closest(".js-searchbar")&&(e.target.parentNode.nextElementSibling.style.display="none")},!0),window.addEventListener("load",()=>{document.querySelectorAll(".js-scroll-animation").forEach(e=>{e.getBoundingClientRect().top<window.innerHeight&&e.classList.add("is-scrolled")})}),window.addEventListener("scroll",()=>{document.querySelectorAll(".js-scroll-animation").forEach(e=>{window.pageYOffset>window.pageYOffset+e.getBoundingClientRect().top-window.innerHeight+50&&e.classList.add("is-scrolled")})}),new Promise((function(e,t){t("Unable to say hi."),setTimeout((function(){e("Hello, World")}),5e3)})).then(e=>{console.log("res",e)}).catch(e=>{console.warn(e)}),window.addEventListener("scroll",()=>{document.querySelector(".post-head")&&(e=>{let{targetElement:t,addClass:n,isHeader:o}=e;const r=document.body,i=document.querySelector("main"),c=i.querySelector(t);let a,l=c.offsetHeight;c&&(window.addEventListener("resize",()=>{a&&window.cancelAnimationFrame(a),a=window.requestAnimationFrame(()=>{l=c.offsetHeight},60)}),window.addEventListener("scroll",()=>{a&&window.cancelAnimationFrame(a),a=window.requestAnimationFrame(()=>{window.pageYOffset>c.offsetTop+l?(r.classList.add(n),o&&(i.style.paddingTop=l+"px")):r.classList.remove(n)},60)}))})(".post-head")});document.addEventListener("click",e=>{const t=e.target,n=t.nextElementSibling,o=t.closest(".js-accordion");o&&o&&(t.classList.toggle("is-active"),n.classList.toggle("is-visible"))}),document.querySelectorAll(".js-close").forEach(e=>{e.addEventListener("click",t=>{t.target.parentNode.classList.contains("notice")?document.body.classList.add("is-closed-topbanner"):e.parentNode.style.display="none"})})});const c=()=>{const e=document.querySelectorAll(".graph-item");if(!e)return;let t,n,o;e.forEach(e=>{n=e.querySelector(".graph-item-bar"),t=e.querySelector(".graph-item-value"),o=parseInt(t.innerHTML),n.style.height=o+"px",t.style.bottom=o+"px"})};document.addEventListener("submit",e=>{e.target===document.login&&(e.preventDefault(),document.querySelectorAll(".textfield-helper").forEach(e=>{e.style.display="none"}),document.addEventListener("input",e=>{const t=e.target,n=document.login.email,o=document.login.password,r=t===o,i=null===n.value||""===n.value;return r&&console.log(o,o.value.length),i?(console.log("empty"),console.log(t.nextElementSibling),t.nextElementSibling.style.display="block",!1):!(o.value.length<8&&(console.log("at least 8 length"),1))}))});const a=()=>{const e=new Date;e.getFullYear(),String(e.getMonth()+1).padStart(2,"0"),String(e.getDate()).padStart(2,"0"),e.getDay(),e.getHours(),e.getMinutes()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJhbk9iamVjdCIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJ0b0ludGVnZXIiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwibWF4IiwiTWF0aCIsIm1pbiIsImZsb29yIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsImRlZmluZWQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJtYXliZUNhbGxOYXRpdmUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIk8iLCJ0aGlzIiwiZm4iLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJyZWdleHAiLCJyZXMiLCJkb25lIiwicngiLCJTIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJnbG9iYWwiLCJmdWxsVW5pY29kZSIsInVuaWNvZGUiLCJsYXN0SW5kZXgiLCJyZXN1bHRzIiwicmVzdWx0IiwicHVzaCIsIml0IiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJsZW5ndGgiLCJtYXRjaGVkIiwicG9zaXRpb24iLCJpbmRleCIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJjb25jYXQiLCJyZXBsYWNlbWVudCIsImFwcGx5IiwiZ2V0U3Vic3RpdHV0aW9uIiwic2xpY2UiLCJzdHIiLCJ0YWlsUG9zIiwic3ltYm9scyIsIm1hdGNoIiwiY2giLCJjYXB0dXJlIiwiY2hhckF0IiwiZiIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiY2VpbCIsImlzTmFOIiwiYXQiLCJUT19TVFJJTkciLCJ0aGF0IiwicG9zIiwiYSIsImIiLCJjaGFyQ29kZUF0IiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwiUmVnRXhwIiwiZXhlYyIsIlIiLCJjb2YiLCJUQUciLCJBUkciLCJhcmd1bWVudHMiLCJUIiwiQiIsImUiLCJ0cnlHZXQiLCJjYWxsZWUiLCJ0b1N0cmluZyIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsImNvcmUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiX19lIiwid2luZG93Iiwic2VsZiIsIkZ1bmN0aW9uIiwiX19nIiwiaWQiLCJweCIsInJhbmRvbSIsInJlZGVmaW5lIiwiaGlkZSIsImZhaWxzIiwid2tzIiwicmVnZXhwRXhlYyIsIlNQRUNJRVMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwicmVwbGFjZSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsInNwbGl0IiwiS0VZIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImNvbnN0cnVjdG9yIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwic3RyaW5nIiwiYXJnIiwidGFyZ2V0IiwicHJvdG8iLCJmb3JjZWQiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5Iiwic291cmNlIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiZXhwUHJvdG8iLCJVIiwiVyIsImRQIiwiY3JlYXRlRGVzYyIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJBdHRyaWJ1dGVzIiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ2YWwiLCJ2YWx1ZU9mIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiYUZ1bmN0aW9uIiwicGFkU3RhcnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiZmllbGQiLCJjb25zb2xlIiwibG9nIiwic2Nyb2xsSGVpZ2h0Iiwic3R5bGUiLCJoZWlnaHQiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJwYXJzZUludCIsImdldFByb3BlcnR5VmFsdWUiLCJhdXRvRXhwYW5kIiwiYnl0ZUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3RyaW5nQnl0ZUxlbmd0aCIsImlubmVySFRNTCIsIm1vZGFsIiwiY2xvc2VzdCIsImJvZHlFbGVtZW50IiwiYm9keSIsInRhcmdldFBhcmVudCIsInBhcmVudE5vZGUiLCJnZXRTY3JvbGxUb3AiLCJmaW5kQ3VycmVudFRhcmdldCIsInN0b3BQcm9wYWdhdGlvbiIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZmluZENsYXNzUmVjdXJzaXZlIiwicGFnZVlPZmZzZXQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJhZGQiLCJ0b3AiLCJyZW1vdmUiLCJzY3JvbGxUbyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWxlbWVudCIsImNsYXNzTmFtZSIsImRlcHRoIiwiZW50ZXJUYXJnZXQiLCJob3ZlckVsZW1lbnQiLCJpc05hdmlnYXRpb24iLCJzZXRBdHRyaWJ1dGUiLCJyb3V0ZXIiLCJ2aWV3IiwiZ2V0RWxlbWVudEJ5SWQiLCJyb3V0ZVBhZ2UiLCJoYXNoIiwibG9jYXRpb24iLCJwYWdlIiwic3Vic3RyaW5nIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsInRleHQiLCJQcm9taXNlIiwicmVqZWN0IiwiaHRtbCIsImNoZWNrQWxsRWxlbWVudCIsImNoZWNrRWxlbWVudHMiLCJjaGVja0FsbCIsImNoZWNrSXRlbXMiLCJjaGVja2VkQ291bnQiLCJjaGVja0l0ZW0iLCJjaGVja2VkIiwiaW5kZXRlcm1pbmF0ZSIsImNoZWNrQWxsY2hlY2tib3giLCJsYXN0U2Nyb2xsVG9wIiwiaGVhZGVyRWxlbWVudCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhhc1Njcm9sbGVkIiwiY2F0Y2giLCJlcnJvciIsIndhcm4iLCJzbGFzaGVkSGFzaCIsInBhdGhuYW1lIiwiaGlzdG9yeSIsImxvYWRlckVsZW1lbnQiLCJzZXRUaW1lb3V0IiwibG9hZGVyIiwiQnJvd3NlckVsZW1lbnQiLCJhZ2VudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJkaXNwbGF5IiwiY2hlY2tCcm93c2VyIiwiYXR0YWNobWVudExpc3QiLCJhdHRhY2htZW50SGVscGVyIiwiYXR0YWNoZWRmaWxlcyIsInZhbGlkRmlsZVR5cGUiLCJmaWxlIiwiZmlsZVR5cGVzIiwicmV0dXJuRmlsZVNpemUiLCJzaXplIiwidG9GaXhlZCIsImZpbGVzIiwidGVtcGxhdGUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJhbGVydCIsInRhYkFjdGljZUJhciIsImxlZnQiLCJvZmZzZXRMZWZ0IiwidGFiIiwidGFiSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJldmVudEtleUNvZGUiLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJpc0ZpcnN0UGxhY2VkWmVybyIsInRlc3QiLCJpc01heGltdW0iLCJOdW1iZXIiLCJpc0xlbmd0aCIsInRhcmdldElucHV0IiwiaW5wdXROdW1iZXIiLCJzZXRHcmFwaCIsImlzRml4ZWRIZWFkZXIiLCJtYWluRWxlbWVudCIsImFkZFBhZGRpbmciLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJhZGp1c3RUb3BQYWRkaW5nIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaW5uZXJIZWlnaHQiLCJyZXNvbHZlIiwidGFyZ2V0RWxlbWVudCIsImFkZENsYXNzIiwiaXNIZWFkZXIiLCJzdGlja3lFbGVtZW50IiwiaXNTY3JvbGxpbmciLCJzdGlja3lFbGVtZW50SGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvZmZzZXRUb3AiLCJwYWRkaW5nVG9wIiwidGFyZ2V0TmV4dEVsZW1lbnQiLCJpc1RhcmdldCIsInRvZ2dsZSIsImdyYXBoSXRlbXMiLCJncmFwaEl0ZW1WYWx1ZSIsImdyYXBoSXRlbUJhciIsImdyYXBoVmFsdWUiLCJib3R0b20iLCJsb2dpbiIsImhlbHBlciIsImxvZ2luRW1haWwiLCJlbWFpbCIsImxvZ2luUGFzc3dvcmQiLCJwYXNzd29yZCIsImlzUGFzc3dvcmQiLCJpc0VtcHR5RW1haWwiLCJnZXRUb2RheURhdGUiLCJ0b2RheSIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldERheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFB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bkssU0FBUyxFQUFHLEtBQ3JDK0osRUFBTUssU0FFSkwsRUFBTU0sV0FDSk4sRUFBTU8iLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuOScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBoTmFtZSA9IC9eW+qwgC3tnqNdKyQvO1xyXG52YXIgaE5hbWUyID0gIC9eW+qwgC3tnqNhLXpBLVpdKyQvO1xyXG52YXIgb25seU51bWJlcnMgPSAvXlswLTldKiQvO1xyXG5cclxudmFyIGVuZ2xpc2hOdW1iZXIgPSAvXlthLXpBLVowLTldezQsMTJ9JC87XHJcbnZhciBwYXNzd29yZCA9IC9eKD89LipbYS16QS1aXSkoKD89LipcXGQpfCg/PS4qXFxXKSkuezYsMjB9JC87IC8vIOyYgeyIq+2KuVxyXG5cclxudmFyIGVtYWlsID0gL15bYS16MC05XysuLV0rQChbYS16MC05LV0rXFwuKStbYS16MC05XXsyLDR9JC87XHJcbnZhciBwaG9uZSA9IC9eXFxkezIsM30tXFxkezMsNH0tXFxkezR9JC87IC8vICBleCkxMjMtMTIzLTEyMzRcclxudmFyIHBob25lMiA9ICAvXjAxKFswfDF8Nnw3fDh8OV0/KS0/KFswLTldezMsNH0pLT8oWzAtOV17NH0pJC87IC8vIDAxMC0wMDAwLTAwMDBcclxuXHJcbnZhciB1cmwgPSAvXihmaWxlfGdvcGhlcnxuZXdzfG5udHB8dGVsbmV0fGh0dHBzP3xmdHBzP3xzZnRwKTpcXC9cXC8oW2EtejAtOS1dK1xcLikrW2EtejAtOV17Miw0fS4qJC87XHJcblxyXG52YXIgaXNOdW1iZXIgPSAvWzAtOV0vZ2k7XHJcbnZhciBpc0FscGhhYmV0ID0gL1thLXpdL2dpO1xyXG52YXIgaXNOdW1iZXJBbmRBbHBoYWJldCA9IC9bYS16MC05XS87XHJcblxyXG52YXIgc3RyaW5nVG9IVE1MID0gZnVuY3Rpb24gKHN0cikge1xyXG5cdHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcblx0dmFyIGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3RyLCAndGV4dC9odG1sJyk7XHJcblx0cmV0dXJuIGRvYy5ib2R5O1xyXG59O1xyXG5cclxuLy8gdGV4dC5yZXBsYWNlKC9bXjAtOV0vZ2kpXHJcbi8vIHRleHQucmVwbGFjZSgvW15hLXpdL2dpKVxyXG4vLyB0ZXh0LnJlcGxhY2UoL1teYS16MC05XS8pXHJcblxyXG5leHBvcnQgY29uc3QgYXV0b0V4cGFuZCA9IGZpZWxkID0+IHtcclxuXHRjb25zb2xlLmxvZyhmaWVsZC5zY3JvbGxIZWlnaHQpO1xyXG5cdFxyXG5cdGZpZWxkLnN0eWxlLmhlaWdodCA9ICdpbmhlcml0JztcclxuXHRjb25zdCBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZpZWxkKTtcclxuXHRsZXQgaGVpZ2h0ID0gZmllbGQuc2Nyb2xsSGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcclxuXHRmaWVsZC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xyXG59O1xyXG5cclxuXHJcbnZhciBhZGQgPSBmdW5jdGlvbihudW0xLCBudW0yKSB7XHJcblx0bnVtMSA9IG51bTEgfHwgMDsgLy8gY29uZGl0aW9uYWwgb3BlcmF0b3JcclxuXHRudW0yID0gbnVtMiA/IG51bTIgOiAwOyAvLyB0ZXJuYXJ5IG9wZXJhdG9yXHJcblxyXG5cdHJldHVybiBudW0xICsgbnVtMjtcclxufTtcclxuXHJcbnZhciBnZXRFbGVtZW50SGVpZ2h0ID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG5cdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0dmFyIGhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcclxuXHRcclxuXHRyZXR1cm4gaGVpZ2h0O1xyXG59O1xyXG5cclxuY29uc3QgaGFzSXRlbSA9IChhcnIsIGl0ZW0pID0+IGFyci5pbmNsdWRlcyhpdGVtKTtcclxuXHJcbi8vIGZ1bmN0aW9uIGZyYW1lU2l6aW5nKCkge1xyXG4vLyBcdHZhciAkZnJhbWUgPSAkKCcucGxheWVyIGlmcmFtZScpO1xyXG4vLyBcdHZhciBmcmFtZVdpZHRoID0gJGZyYW1lLndpZHRoKCk7XHJcbi8vIFx0dmFyIGZyYW1lSGVpZ2h0ID0gZnJhbWVXaWR0aCAqIDkgLyAxNjtcclxuLy8gXHQkZnJhbWUuaGVpZ2h0KGZyYW1lSGVpZ2h0KTtcclxuXHJcbi8vIFx0JCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpe1xyXG4vLyBcdFx0XHRmcmFtZVdpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XHJcbi8vIFx0XHRcdGZyYW1lSGVpZ2h0ID0gZnJhbWVXaWR0aCAqIDkgLyAxNjtcclxuLy8gXHRcdFx0JGZyYW1lLmhlaWdodChmcmFtZUhlaWdodCk7XHJcbi8vIFx0fSk7XHJcbi8vIH1cclxuXHJcblxyXG5jbGFzcyBDYWxjdWxhdG9yIHtcclxuXHRhZGQoeCwgeSkge1xyXG5cdFx0cmV0dXJuIHggKyB5O1xyXG5cdH1cclxuXHRzdWJ0cmFjdCh4LCB5KSB7XHJcblx0XHRyZXR1cm4geCAtIHk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBlbGVtZW50cy5maWx0ZXIoKHZhbHVlLCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2YodmFsdWUpID09PSBpbmRleCkgLy8gdW5pcVxyXG5cclxuXHJcbi8vIFwiamF2YXNjcmlwXCIucmVwbGFjZSgvYS9naSxcImJcIilcclxuY29uc3QgZnVsbE51bWJlciA9ICcyMDM0Mzk5MDAyMTI1NTgxJztcclxuY29uc3QgbGFzdDREaWdpdHMgPSBmdWxsTnVtYmVyLnNsaWNlKC00KTtcclxuY29uc3QgbWFza2VkTnVtYmVyID0gbGFzdDREaWdpdHMucGFkU3RhcnQoZnVsbE51bWJlci5sZW5ndGgsICcqJyk7XHJcbi8qXHJcblx0dmFyIGlzRGF0ZVN1cHBvcnRlZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdkYXRlJyk7XHJcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ3gnKTtcclxuXHRcdHJldHVybiAoaW5wdXQudmFsdWUgIT09ICd4Jyk7XHJcblx0fTtcclxuXHRpZihpc0RhdGVTdXBwb3J0ZWQoKSkge1xyXG5cdFx0ZmllbGQucmVtb3ZlQXR0cmlidXRlKCdwYXR0ZXJuJyk7XHJcblx0XHRmaWVsZC5yZW1vdmVBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJyk7XHJcblx0XHR2YXIgaGVscGVyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXNjcmlwdGlvbicpO1xyXG5cdFx0aWYoaGVscGVyVGV4dCkge1xyXG5cdFx0XHRoZWxwZXJUZXh0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaGVscGVyVGV4dCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdCovIiwiaW1wb3J0IHsgYXV0b0V4cGFuZCB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF0dGFjaEZpbGUgPSAoKSA9PiB7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xyXG5cdFx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuXHRcdGlmICghdGFyZ2V0LmNsb3Nlc3QoJy5qcy1maWxlLWlucHV0JykpIHJldHVybjtcclxuXHRcdGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWlucHV0Jyk7XHJcblx0XHRjb25zdCBmaWxlU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtc3VibWl0Jyk7XHJcblx0XHRjb25zdCBhdHRhY2htZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtbGlzdCcpO1xyXG5cdFx0Y29uc3QgYXR0YWNobWVudEhlbHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtaGVscGVyJyk7XHJcblx0XHRsZXQgYXR0YWNoZWRmaWxlcztcclxuXHRcdGxldCBmaWxlTGlzdCA9IFtdO1xyXG5cclxuXHRcdC8vIFRPRE86IOyXrOufrOuyiCDrsJjrs7XtlbTshJwg7Jis66C47J2EIOuVjCBmaWxlbGlzdCDriITsoIHrkJjripTsp4A/XHJcblx0XHQvLyBUT0RPOiDrj5nsnbztlZwg7YyM7J287J2EIOyXheuhnOuTnCDtlojsnYQg65WMIOyytO2BrFxyXG5cdFx0Ly8gVE9ETzog7IKt7KCc7ZaI7J2EIOuVjCBmaWxlTGlzdOyXkOyEnCDsgq3soJxcclxuXHRcdC8vIGZpbGVJbnB1dC5maWxlc+uKlCDsjJPsnbTsp4Ag7JWK7J2MLlxyXG5cclxuXHRcdGNvbnN0IHZhbGlkRmlsZVR5cGUgPSBmaWxlID0+IHtcclxuXHRcdFx0Y29uc3QgZmlsZVR5cGVzID0gWydpbWFnZS9qcGVnJywgJ2ltYWdlL2dpZicsICdpbWFnZS9wbmcnXTtcclxuXHRcdFx0Y29uc29sZS5sb2coZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSk7XHJcblxyXG5cdFx0XHRpZiAoZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSA+IC0xKSByZXR1cm4gdHJ1ZTtcclxuXHRcdH07XHJcblx0XHRjb25zdCByZXR1cm5GaWxlU2l6ZSA9IHNpemUgPT4ge1xyXG5cdFx0XHRpZiAoc2l6ZSA8IDEwMjQpIHJldHVybiBzaXplICsgJ2J5dGVzJztcclxuXHRcdFx0ZWxzZSBpZiAoc2l6ZSA+PSAxMDI0ICYmIHNpemUgPCAxMDQ4NTc2KSByZXR1cm4gKHNpemUgLyAxMDI0KS50b0ZpeGVkKDIpICsgJ0tCJztcclxuXHRcdFx0ZWxzZSByZXR1cm4gKHNpemUgLyAxMDQ4NTc2KS50b0ZpeGVkKDIpICsgJ01CJztcclxuXHRcdH07XHJcblxyXG5cdFx0YXR0YWNoZWRmaWxlcyA9IHRhcmdldC5maWxlcztcclxuXHRcdC8vIGF0dGFjaGVkZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XHJcblx0XHRjb25zb2xlLmxvZygnYXR0YWNoZWRmaWxlcycsIGF0dGFjaGVkZmlsZXMpO1xyXG5cclxuXHRcdGlmIChhdHRhY2hlZGZpbGVzLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRhdHRhY2htZW50SGVscGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YXR0YWNobWVudEhlbHBlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGF0dGFjaGVkZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnYXR0YWNoZWRmaWxlc1tpXScsIGF0dGFjaGVkZmlsZXNbaV0pO1xyXG5cclxuXHRcdFx0XHQvLyAxOTA0MjggdGVzdCBmaWxlbGlzdCBhcnJheVxyXG5cclxuXHRcdFx0XHRpZiAodmFsaWRGaWxlVHlwZShhdHRhY2hlZGZpbGVzW2ldKSkge1xyXG5cdFx0XHRcdFx0Y29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbVwiPlxyXG4gICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1pbWFnZVwiIHNyYz0ke3dpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGF0dGFjaGVkZmlsZXNbaV0pfSBhbHQ9XCJcIj5cclxuICAgICAgICAgICAgICA8YiBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLW5hbWVcIiBocmVmPVwiI1wiPiR7YXR0YWNoZWRmaWxlc1tpXS5uYW1lfTwvYj5cclxuICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1zaXplXCIgPiR7cmV0dXJuRmlsZVNpemUoYXR0YWNoZWRmaWxlc1tpXS5zaXplKX08L3NtYWxsPlxyXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1kZWxldGUganMtcmVtb3ZlLXRoaXNcIiB0eXBlPVwiYnV0dG9uXCI+PGkgY2xhc3M9XCJpY29uLXhcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZmlndXJlPmA7XHJcblx0XHRcdFx0XHRhdHRhY2htZW50TGlzdC5pbm5lckhUTUwgPSB0ZW1wbGF0ZSArIGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTDtcclxuXHRcdFx0XHRcdC8vYXR0YWNobWVudExpc3QuYXBwZW5kQ2hpbGQodGVtcGxhdGUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRhbGVydCgn7YyM7J287YOA7J6FIGpwZWcgcGpwZWcgcG5nIOykkSDtlZjrgpjqsIAg7JWE64uI7JW8ficpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0LypcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmKGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuanMtcmVtb3ZlLXRoaXMnKSl7IC8vIO2VqOyImOuhnFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuanMtcmVtb3ZlLXRoaXMnKS5wYXJlbnROb2RlLnJlbW92ZSgpO1xyXG4gICAgICAgIGlmKGF0dGFjaGVkZmlsZXMubGVuZ3RoID09PSAxKSBhdHRhY2htZW50SGVscGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICB9XHJcbiAgICB9LCB0cnVlKTtcclxuICAgICovXHJcblx0XHQvKlxyXG4gICAgLy8gMTkwNDI4IGZpbGUgYWpheFxyXG4gICAgZmlsZVN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbihmaWxlKXtcclxuICAgICAgICBzZW5kRmlsZShmaWxlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhmaWxlTGlzdCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYXR0YWNoZWRmaWxlcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBzZW5kRmlsZSA9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdmb3JtRGF0YScsIGZvcm1EYXRhKTtcclxuICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgIGZvcm1EYXRhLnNldCgnZmlsZScsIGZpbGUpO1xyXG4gICAgICByZXF1ZXN0Lm9wZW4oJ3Bvc3QnLCAnJyk7XHJcbiAgICAgIHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7XHJcbiAgICB9O1xyXG4gICAgKi9cclxuXHR9KTtcclxufTtcclxuXHJcblxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XHJcblx0Ly8gdGFnTmFtZeqzvCBub2RlTmFtZeydgCDthY3siqTtirgg64W465Oc66W8IOqwgeqwgSB1bmRlZmluZWTsmYAgI3RleHQg67CY7ZmY7ZWc64ukLlxyXG5cdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHR0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJyAmJiBhdXRvRXhwYW5kKHRhcmdldCk7XHJcblxyXG5cdGNvbnN0IGJ5dGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRleHRmaWVsZC1ieXRlIGInKTtcclxuXHJcblx0dmFyIHN0cmluZyA9IHVuZGVmaW5lZDtcclxuXHRmb3IodmFyIGo9MDsgajwxMDAwMDsgaisrKSB7XHJcblx0XHRzdHJpbmcgKz0gJ1RoaXMgaXMg7JWE66y07J2Y66+47JeG64qUIOusuOyekOyXtCc7XHJcblx0fVxyXG5cdHZhciBzdHJpbmdCeXRlTGVuZ3RoID0gMDtcclxuXHRpZih0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykge1xyXG5cdFx0c3RyaW5nID0gdGFyZ2V0LnZhbHVlO1xyXG5cdFx0c3RyaW5nQnl0ZUxlbmd0aCA9IHN0cmluZy5yZXBsYWNlKC9bXFwwLVxceDdmXXwoWzAtXFx1MDdmZl18KC4pKS9nLCckJiQxJDInKS5sZW5ndGg7XHJcblx0XHRpZih0YXJnZXQudmFsdWUubGVuZ3RoID4gMzAgfHwgdGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDQ1KSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKCczMGJ5dGXsoJztlZwnKTtcclxuXHRcdFx0dGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnNsaWNlKDAsIHRhcmdldC52YWx1ZS5sZW5ndGgpO1xyXG5cdFx0fVxyXG5cdFx0Ynl0ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3RyaW5nQnl0ZUxlbmd0aDtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBpbnB1dE51bWJlciA9ICgpID0+IHtcclxuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5ZG93bjogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XHJcblx0Ly8gfSk7XHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzczogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzcyAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG5cdC8vIH0pO1xyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5dXA6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5dXAgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuXHQvLyB9KTtcclxuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2U6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygnY2hhbmdlIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XHJcblx0Ly8gfSk7XHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdpbnB1dDogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdpbnB1dCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG5cdC8vIH0pO1xyXG5cclxuXHRjb25zdCBpbmNyZWFzZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbnVtYmVyLWlucHV0Jyk7XHJcblxyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudCA9PiB7XHJcblx0XHRpZiAoIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcuanMtbnVtYmVyLWlucHV0JykpIHJldHVybjtcclxuXHRcdGNvbnN0IGV2ZW50S2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XHJcblx0XHRldmVudEtleUNvZGUgPj0gNDggfHwgZXZlbnRLZXlDb2RlIDw9IDU3IHx8IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRldmVudEtleUNvZGUgPT09IDY5ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRldmVudEtleUNvZGUgPT09IDE4OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0ZXZlbnRLZXlDb2RlID09PSAxODcgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGV2ZW50S2V5Q29kZSA9PT0gMTkwICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHQvL2V2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggPT09IDAgJiYgZXZlbnQua2V5Q29kZSA9PT0gNDggJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsICgpID0+IHtcclxuXHRcdFx0Ly8gY2xpY2sg7J2067Kk7Yq47JeQ7ISc64+EIO2VqOyImOuhnCDrp4zrk6TslrTshJwg7KCB7JqpXHJcblx0XHRcdGNvbnN0IGlzRmlyc3RQbGFjZWRaZXJvID0gLyheMCspLy50ZXN0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0XHRcdGNvbnN0IGlzTWF4aW11bSA9IE51bWJlcihldmVudC50YXJnZXQudmFsdWUpID49IDMwMDtcclxuXHRcdFx0Y29uc3QgaXNMZW5ndGggPSBldmVudC50YXJnZXQudmFsdWUubGVuZ3RoID4gMztcclxuXHJcblx0XHRcdGlmIChpc0ZpcnN0UGxhY2VkWmVybykgZXZlbnQudGFyZ2V0LnZhbHVlID0gJzAnO1xyXG5cdFx0XHRpZiAoaXNMZW5ndGgpIGV2ZW50LnRhcmdldC52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZS5zbGljZSgwLCAzKTtcclxuXHRcdFx0aWYgKGlzTWF4aW11bSkgZXZlbnQudGFyZ2V0LnZhbHVlID0gJzMwMCc7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0XHRjb25zdCBtaW5WYWx1ZSA9IDA7XHJcblx0XHRjb25zdCBtYXhWYWx1ZSA9IDEwO1xyXG5cdFx0bGV0IHRhcmdldElucHV0O1xyXG5cdFx0aWYgKHRhcmdldC5jbG9zZXN0KCcuanMtdmFyaWF0aW9uLWRlY3JlbWVudCcpKSB7XHJcblx0XHRcdHRhcmdldElucHV0ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xyXG5cdFx0XHRpZiAodGFyZ2V0SW5wdXQudmFsdWUgPD0gbWluVmFsdWUpIHtcclxuXHRcdFx0XHR0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0LS10YXJnZXRJbnB1dC52YWx1ZTtcclxuXHRcdFx0Ly8gVE9ETzogdGFyZ2V0IO2BtOuemOyKpCDthqDquIDsnbQg7JWIIOuQmOuvgOuLiOuLpFxyXG5cdFx0XHRjb25zb2xlLmxvZygndGFyZ2V0JywgdGFyZ2V0KTtcclxuXHRcdH1cclxuXHRcdGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKSkge1xyXG5cdFx0XHR0YXJnZXRJbnB1dCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcclxuXHRcdFx0aWYgKHRhcmdldElucHV0LnZhbHVlID49IG1heFZhbHVlKSB7XHJcblx0XHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdCsrdGFyZ2V0SW5wdXQudmFsdWU7XHJcblxyXG5cdFx0XHQvLyB0YXJnZXRJbnB1dC52YWx1ZSA8IG1heFZhbHVlICsgMSAmJiB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcclxuXHRcdFx0LypcclxuXHRcdFx0bGV0IHRhcmdldElucHV0VmFsdWUgPSBwYXJzZUludChldmVudFRhcmdldElucHV0LnZhbHVlKTtcclxuXHRcdFx0dGFyZ2V0SW5wdXRWYWx1ZSA+IG1pblZhbHVlICYmIGV2ZW50VGFyZ2V0SW5wdXQudmFsdWUtLTtcclxuXHRcdFx0dGFyZ2V0SW5wdXRWYWx1ZSA9PT0gbWluVmFsdWUgKyAxICYmIGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcblx0XHRcdHRhcmdldElucHV0VmFsdWUgPCBtYXhWYWx1ZSArIDEgJiYgZXZlbnRUYXJnZXRJbmNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcclxuXHRcdFx0Ki9cclxuXHRcdFx0LypcclxuXHRcdFx0Y29uc3QgZXZlbnRUYXJnZXRQYXJlbnRFbGVtZW50ID0gZXZlbnRUYXJnZXQucGFyZW50Tm9kZTtcclxuXHRcdFx0Y29uc3QgZXZlbnRUYXJnZXRJbnB1dCA9IGV2ZW50VGFyZ2V0UGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XHJcblx0XHRcdGNvbnN0IGV2ZW50VGFyZ2V0RGVjcmVtZW50ID0gZXZlbnRUYXJnZXRQYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50Jyk7XHJcblx0XHRcdGNvbnN0IGV2ZW50VGFyZ2V0SW5jcmVtZW50ID0gZXZlbnRUYXJnZXRQYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5jcmVtZW50Jyk7XHJcblx0XHRcdGxldCB0YXJnZXRJbnB1dFZhbHVlID0gcGFyc2VJbnQoZXZlbnRUYXJnZXRJbnB1dC52YWx1ZSk7XHJcblx0XHRcdHRhcmdldElucHV0VmFsdWUgPCBtYXhWYWx1ZSA/IGV2ZW50VGFyZ2V0SW5wdXQudmFsdWUrKyA6IHRhcmdldElucHV0VmFsdWU7XHJcblx0XHRcdHRhcmdldElucHV0VmFsdWUgPT09IG1heFZhbHVlIC0gMSAmJiBldmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG5cdFx0XHR0YXJnZXRJbnB1dFZhbHVlID4gbWluVmFsdWUgLSAxID8gZXZlbnRUYXJnZXREZWNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKSA6IHRhcmdldElucHV0VmFsdWU7XHJcblx0XHRcdCovXHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGNoZWNrQWxsY2hlY2tib3ggPSAoe2NoZWNrQWxsRWxlbWVudCwgY2hlY2tFbGVtZW50c30pID0+IHtcclxuXHRjb25zdCBjaGVja0FsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2hlY2tBbGxFbGVtZW50KTtcclxuXHRjb25zdCBjaGVja0l0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjaGVja0VsZW1lbnRzKTtcclxuXHRsZXQgY2hlY2tlZENvdW50ID0gMDtcclxuXHJcblx0aWYoIWNoZWNrQWxsIHx8ICFjaGVja0l0ZW1zKSByZXR1cm47XHJcblxyXG5cdGNoZWNrSXRlbXMuZm9yRWFjaChjaGVja0l0ZW0gPT4ge1xyXG5cdFx0Y2hlY2tJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuXHRcdFx0Y2hlY2tJdGVtLmNoZWNrZWQgPyBjaGVja2VkQ291bnQrKyA6IGNoZWNrZWRDb3VudC0tO1xyXG5cdFx0XHRjaGVja2VkQ291bnQgPT09IGNoZWNrSXRlbXMubGVuZ3RoID8gY2hlY2tBbGwuY2hlY2tlZCA9IHRydWUgOiBjaGVja0FsbC5jaGVja2VkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRjaGVja0FsbC5pbmRldGVybWluYXRlID0gY2hlY2tlZENvdW50ID4gMCAmJiBjaGVja2VkQ291bnQgPCBjaGVja0l0ZW1zLmxlbmd0aDtcclxuXHRcdFx0Y29uc29sZS5sb2coY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0Y2hlY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG5cdFx0Y2hlY2tJdGVtcy5mb3JFYWNoKGNoZWNrSXRlbSA9PiB7XHJcblx0XHRcdGNoZWNrQWxsLmNoZWNrZWQgPyBjaGVja0l0ZW0uY2hlY2tlZCA9IHRydWUgOiBjaGVja0l0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyB2YXIgb3RoZXJDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3ZhbHVlPVwib3RoZXJcIl0nKTtcclxuLy8gdmFyIG90aGVyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W2lkPVwib3RoZXJWYWx1ZVwiXScpO1xyXG4vLyBvdGhlclRleHQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cclxuLy8gb3RoZXJDaGVja2JveC5vbmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4vLyBcdGlmIChvdGhlckNoZWNrYm94LmNoZWNrZWQpIHtcclxuLy8gXHRcdG90aGVyVGV4dC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4vLyBcdFx0b3RoZXJUZXh0LnZhbHVlID0gJyc7XHJcbi8vIFx0fSBlbHNlIHtcclxuLy8gXHRcdG90aGVyVGV4dC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbi8vIFx0fVxyXG4vLyB9OyIsIi8vVE9ETzog66qo64usIOuwluydmCDsu6jthZDsuKDsl5AgYXJpYS1oaWRkZW4g66qo64us7J2YIOychOy5mOuKlCDrsJTrlJQg7JWI7JeQP1xyXG4vL2lmKCFtb2RhbFRyaWdnZXIpIHJldHVybjtcclxuLy92YXIgYWJjID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xyXG5leHBvcnQgY29uc3QgbW9kYWwgPSAoKSA9PiB7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHQvLyBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0XHRjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XHJcblx0XHRpZiAoIXRhcmdldC5jbG9zZXN0KCcuanMtbW9kYWwnKSkgcmV0dXJuO1xyXG5cclxuXHRcdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHRcdGNvbnN0IHRhcmdldFBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG5cdFx0bGV0IGdldFNjcm9sbFRvcDtcclxuXHRcdGxldCBmaW5kQ3VycmVudFRhcmdldCA9IG51bGw7XHJcblx0XHQvLyBwb2ludGVyLWV2ZW50czogbm9uZTsg7Jy866GcIOuMgOyytOqwgOuKpSBpZiA+IGllMTFcclxuXHJcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdGlmICh0YXJnZXRQYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1tb2RhbCcpKSB7XHJcblx0XHRcdGZpbmRDdXJyZW50VGFyZ2V0ID0gdGFyZ2V0UGFyZW50O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZmluZEN1cnJlbnRUYXJnZXQgPSB0YXJnZXRQYXJlbnQucGFyZW50Tm9kZTtcclxuXHRcdH1cclxuXHJcblx0XHRmaW5kQ2xhc3NSZWN1cnNpdmUoZXZlbnQudGFyZ2V0LCAnanMtbW9kYWwnLCAwKTtcclxuXHJcblx0XHRnZXRTY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcblxyXG5cdFx0ZmluZEN1cnJlbnRUYXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5hZGQoJ2lzLXZpc2libGUnKTtcclxuXHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2JvZHktbG9jaycpO1xyXG5cdFx0Ym9keUVsZW1lbnQuc3R5bGUudG9wID0gLWdldFNjcm9sbFRvcCArICdweCc7XHJcblxyXG5cdFx0Y29uc3QgY2xvc2VNb2RhbCA9ICgpID0+IHtcclxuXHRcdFx0aWYgKCFmaW5kQ3VycmVudFRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy12aXNpYmxlJykpIHJldHVybjtcclxuXHRcdFx0ZmluZEN1cnJlbnRUYXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcclxuXHRcdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XHJcblx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCBnZXRTY3JvbGxUb3ApO1xyXG5cdFx0fTtcclxuXHJcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0Y2xvc2VNb2RhbCgpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsLWRpYWxvZycpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHR0cnVlLFxyXG5cdCk7XHJcblxyXG5cdGNvbnN0IGZpbmRDbGFzc1JlY3Vyc2l2ZSA9IChlbGVtZW50LCBjbGFzc05hbWUsIGRlcHRoKSA9PiB7XHJcblx0Ly8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcclxuXHRcdGNvbnNvbGUubG9nKCdkZXB0aDogJyArIGRlcHRoLCBlbGVtZW50KTtcclxuXHRcdGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSByZXR1cm4gZWxlbWVudDtcclxuXHRcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcclxuXHR9O1xyXG5cclxuXHR2YXIgZ2V0Q2xvc2VzdCA9IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7XHJcblx0XHRmb3IgKDsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkge1xyXG5cdFx0XHRpZiAoZWxlbS5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIGVsZW07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9O1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB0YWJNZW51ID0gKCkgPT4ge1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblx0XHRjb25zdCB0YWJBY3RpY2VCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS10YWJsaXN0LWFjdGl2ZScpO1xyXG5cdFx0aWYoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ1tyb2xlPXRhYl0nKSkge1xyXG5cdFx0XHQvLyDtg60g7JWh7Yuw67iM67CUIOyVoOuLiOuplOydtOyFmFxyXG5cdFx0XHR0YWJBY3RpY2VCYXIuc3R5bGUubGVmdCA9IGV2ZW50LnRhcmdldC5vZmZzZXRMZWZ0ICsgJ3B4JztcclxuXHJcblx0XHRcdC8vIOyghOyytCDtg63snZgg7ISg7YOd7J2EIO2VtOygnO2VnOuLpC5cclxuXHRcdFx0Y29uc3QgdGFicyA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYl0nKTtcclxuXHRcdFx0dGFicy5mb3JFYWNoKCh0YWIpID0+IHtcclxuXHRcdFx0XHR0YWIuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKEFycmF5LmZyb20oY2hlY2tzKS5pbmRleE9mKGV2ZW50LnRhcmdldCkpO1xyXG5cdFx0XHJcblx0XHRcdGNvbnN0IHRhYkluZGV4ID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xyXG5cdFx0XHRldmVudC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYnBhbmVsXScpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuXHRcdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG5cdFx0XHRcdGlmKHRhYkluZGV4ID09PSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKXtcclxuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdoaWRkZW4nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyDtgbTrpq3tlZwg7YOt7J20IOyEoO2DneuQnOuLpC5cclxuXHRcdFx0ZXZlbnQudGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XHJcblx0XHR9XHJcblx0fSwgdHJ1ZSk7XHJcbn07XHJcblxyXG5cclxuXHJcbi8vIHZhciBpc1Njcm9sbGluZztcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIChldmVudCkgPT4ge1xyXG4vLyBcdGlmKGlzU2Nyb2xsaW5nKSB3aW5kb3cuY2xlYXJUaW1lb3V0KGlzU2Nyb2xsaW5nKTtcclxuLy8gXHRpc1Njcm9sbGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuLy8gXHRcdHN0aWNreVRvZ2dsZSgpO1xyXG4vLyBcdH0sIDUwKTtcclxuLy8gfSk7XHJcblxyXG5cclxuLy8gVE9ETzogcG9zdC1oZWFk7J2YIG9mZnNldC10b3DquYzsp4Ag642U7ZW07IScIOuniOynhOqwkuydhCDso7zslrTslbxcclxuZXhwb3J0IGNvbnN0IHN0aWNreUVsZW1lbnQgPSAoe1xyXG5cdHRhcmdldEVsZW1lbnQsIGFkZENsYXNzLCBpc0hlYWRlcn1cclxuKSA9PiB7XHJcblx0Y29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG5cdGNvbnN0IG1haW5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpO1xyXG5cdGNvbnN0IHN0aWNreUVsZW1lbnQgPSBtYWluRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldEVsZW1lbnQpO1xyXG5cdGxldCBzdGlja3lFbGVtZW50SGVpZ2h0ID0gc3RpY2t5RWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcblx0bGV0IGlzU2Nyb2xsaW5nO1xyXG5cdFxyXG5cdGlmKCFzdGlja3lFbGVtZW50KSByZXR1cm47XHJcblxyXG5cdC8vaWYoIWlzT3Zlcikgc3RpY2t5RWxlbWVudEhlaWdodCA9IDA7XHJcblxyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcblx0XHRpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xyXG5cdFx0aXNTY3JvbGxpbmcgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuXHRcdFx0c3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0fSwgNjApO1xyXG5cdH0pO1xyXG5cclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0aXNTY3JvbGxpbmcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlzU2Nyb2xsaW5nKTtcclxuXHRcdGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdGlmKHdpbmRvdy5wYWdlWU9mZnNldCA+IHN0aWNreUVsZW1lbnQub2Zmc2V0VG9wICsgc3RpY2t5RWxlbWVudEhlaWdodCl7XHJcblx0XHRcdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XHJcblx0XHRcdFx0aXNIZWFkZXIgJiYgKG1haW5FbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBzdGlja3lFbGVtZW50SGVpZ2h0ICsgJ3B4Jyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShhZGRDbGFzcyk7XHJcblx0XHRcdFx0Ly8gaXNIZWFkZXIgJiYgKG1haW5FbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSAnMHB4Jyk7XHJcblx0XHRcdH1cclxuXHRcdH0sIDYwKTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8vIGV4cG9ydCBjb25zdCBzdGlja3lIZWFkZXJFbGVtZW50ID0gKHRhcmdldEVsZW1lbnQsIGFkZENsYXNzKSA9PiB7XHJcbi8vIFx0c3RpY2t5RWxlbWVudCh7dGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MsIHRydWV9KTtcclxuLy8gfTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgcGFyYWxsYXggPSAodGFyZ2V0RWxlbWVudCkgPT4ge1xyXG5cdGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0RWxlbWVudCk7XHJcblx0aWYoIXRhcmdldCkgcmV0dXJuO1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcblx0XHR0YXJnZXQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHdpbmRvdy5wYWdlWU9mZnNldCwgZWxlbWVudC5vZmZzZXRUb3ApO1xyXG5cdFx0XHRsZXQgYWFhID0gd2luZG93LnBhZ2VZT2Zmc2V0ICogLTAuMiAtIDYwMDsgLy8gc2Nyb2xsZWQgPSB3aW5kb3cucGFnZVlPZmZzZXRcclxuXHRcdFx0Ly9sZXQgYWFhID0gKHdpbmRvdy5wYWdlWU9mZnNldCAtIGVsZW1lbnQub2Zmc2V0VG9wKSAqIC0xLjU7IC8vIHNjcm9sbGVkID0gd2luZG93LnBhZ2VZT2Zmc2V0XHJcblx0XHRcdC8vbGV0IGJiYiA9IGFhYSA+IDAgPyAtYWFhIDogYWFhO1xyXG5cdFx0XHRlbGVtZW50LnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9ICdjZW50ZXIgJyArIGFhYSArICdweCc7IFxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyAkKCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe3Njcm9sbFRvcDokKCcuc2Nyb2xsLXBpbicpLmVxKGluZGV4KS5vZmZzZXQoKS50b3B9LCAxMDAwLCdlYXNlT3V0Q3ViaWMnKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZW50ZXJUYXJnZXQgPSAodGFyZ2V0KSA9PiB7XHJcblx0Y29uc3QgaG92ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xyXG5cdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHRpZighaG92ZXJFbGVtZW50KSByZXR1cm47XHJcblxyXG5cdGNvbnN0IGlzTmF2aWdhdGlvbiA9IGhvdmVyRWxlbWVudCA9PT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24gbGknKTtcclxuXHJcblx0aG92ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcblx0XHRob3ZlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuXHRcdGhvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xyXG5cdFx0aXNOYXZpZ2F0aW9uICYmIGJvZHlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNob3duJyk7XHJcblxyXG5cdFx0aG92ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcblx0XHRcdGhvdmVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuXHRcdFx0aG92ZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWV4cGFuZGVkJyk7XHJcblxyXG5cdFx0XHRpc05hdmlnYXRpb24gJiYgYm9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2hvd24nKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59OyIsImltcG9ydCB7IGNoZWNrQWxsY2hlY2tib3ggfSBmcm9tICcuL2lucHV0JztcbmltcG9ydCB7IGVudGVyVGFyZ2V0IH0gZnJvbSAnLi9ldmVudCc7XG5cbmNvbnN0IHJvdXRlciA9IGZ1bmN0aW9uKCkge1xuXHRjb25zdCB2aWV3ID0gbnVsbCB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlldycpO1xuXG5cdGNvbnN0IHJvdXRlUGFnZSA9ICgpID0+IHtcblxuXHRcdGxldCB7IGhhc2ggfSA9IHdpbmRvdy5sb2NhdGlvbjtcblx0XHRjb25zdCBwYWdlID0gaGFzaCA/IGAvdmlld3MvJHtoYXNoLnN1YnN0cmluZygxKX0uaHRtbGAgOiAnL3ZpZXdzL2hvbWUuaHRtbCc7XG5cdFx0ZmV0Y2gocGFnZSlcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0Ly8gNDA0IHx8IDUwMFxuXHRcdFx0XHRpZihyZXNwb25zZS5vaykgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcblx0XHRcdFx0ZWxzZSByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1x0XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oaHRtbCA9PiB7XG5cdFx0XHRcdHZpZXcuaW5uZXJIVE1MID0gaHRtbDtcblxuXHRcdFx0XHRjaGVja0FsbGNoZWNrYm94KHtcblx0XHRcdFx0XHRjaGVja0FsbEVsZW1lbnQ6ICcuanMtY2hlY2stYWxsJywgXG5cdFx0XHRcdFx0Y2hlY2tFbGVtZW50czogJy5qcy1jaGVjaydcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0bGV0IGxhc3RTY3JvbGxUb3AgPSAwO1xuXHRcdFx0XHRjb25zdCBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuXHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuXHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShoYXNTY3JvbGxlZCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGNvbnN0IGhhc1Njcm9sbGVkID0gKCkgPT4ge1xuXHRcdFx0XHRcdHdpbmRvdy5wYWdlWU9mZnNldCA+IGxhc3RTY3JvbGxUb3AgPyBoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdi11cCcpIDogaGVhZGVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduYXYtdXAnKTtcblx0XHRcdFx0XHRsYXN0U2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGVudGVyVGFyZ2V0KCcuanMtaG92ZXItdHJpZ2dlcicpO1xuXHRcdFx0XHRlbnRlclRhcmdldCgnLmhlYWRlci11c2VyLW5vdGlmaWNhdGlvbicpO1xuXHRcdFx0XHRlbnRlclRhcmdldCgnLmhlYWRlci11c2VyLWFjY291bnQnKTtcblxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChlcnJvciA9PiBjb25zb2xlLndhcm4oJ3JvdXRlcjogJywgZXJyb3IpKTtcblxuXHRcdC8vIGdvZ29cblx0XHRjb25zdCBzbGFzaGVkSGFzaCA9IGAvJHtoYXNoLnN1YnN0cmluZygxKX1gO1xuXHRcdGNvbnNvbGUubG9nKHNsYXNoZWRIYXNoLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIHdpbmRvdy5sb2NhdGlvbi5oaXN0b3J5KTtcblx0XHQvLyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPSBzbGFzaGVkSGFzaDtcblxuXHR9O1xuXG5cdHJvdXRlUGFnZSgpO1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHJvdXRlUGFnZSk7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgKCkgPT4ge1xuXHRcdGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uLXRvZ2dsZScpLmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJykpIHtcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uLXRvZ2dsZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24tdG9nZ2xlJykubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcblx0XHR9XG5cdH0pO1xufTtcblxuLy8ge1xuLy8gXHRtZXRob2Q6ICdQT1NUJyxcbi8vIFx0Ym9keTogJ3RpdGxlPScgKyBlbmNvZGVVUklDb21wb25lbnQoJ015IGF3ZXNvbWUgbmV3IGFydGljbGUnKSArICcmYm9keT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdUaGlzIGlzIHRoZSB0ZXh0IG9mIG15IGFydGljbGUnKSxcbi8vIFx0aGVhZGVyOiB7XG4vLyBcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuLy8gXHR9LFxuLy8gXHRyZWZlcnJlcjogJ25vLXJlZmVycmVyJ1xuLy8gfVxuLy8gY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuLy8gY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XG4vLyB2aWV3LmlubmVySFRNTCA9IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoZG9jKTtcbi8vIHJlc3BvbnNlLnRleHQoKSAvLyByZXNwb25zZS5qc29uKClcbi8vIHRvTG93ZXJDYXNlKCkg7ZW07KO86riwXG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcblxuLypcblx0Y29uc3QgUm91dGVyID0gKG5hbWUsIHJvdXRlcykgPT4ge1xuXHRcdHJldHVybiB7IG5hbWU6IG5hbWUsIHJvdXRlczogcm91dGVzIH1cblx0fTtcblx0dmFyIGFjdGl2ZVJvdXRlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2hyZWZdJykpO1xuXHRhY3RpdmVSb3V0ZXMuZm9yRWFjaCgocm91dGUpIHtcblx0XHRyb3V0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5hdmlnYXRlKTtcblx0fSk7XG5cdGNvbnN0IG15Rmlyc3RSb3V0ZXIgPSBuZXcgUm91dGVyKCdteUZpcnN0Um91dGVyJywgW1xuXHRcdHsgcGF0aDogJy8nLCBuYW1lOiAnaW5kZXgnIH0sXG5cdF0pO1xuXHRjb25zdCBuYXZpZ2F0ZSA9IChldmVudCkgPT4ge1xuXHRcdGNvbnN0IHJvdXRlID0gZmluZEN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1swXS52YWx1ZTtcblx0XHRjb25zdCByb3V0ZUluZm8gPSBteUZpcnN0Um91dGVyLnJvdXRlcy5maW5kKHIgPT4gci5wYXRoID09PSByb3V0ZSk7XG5cdFx0aWYoIXJvdXRlSW5mbykge1xuXHRcdFx0Ly93aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCAnZXJyb3InKTtcblx0XHRcdHZpZXcuaW5uZXJIVE1MID0gJ05vIHJvdXRlIGV4aXN0cyB3aXRoIHRoaXMgcGF0aCc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IG5hbWU6ICd0ZXN0ZXInIH0sICcnLCByb3V0ZUluZm8ucGF0aCk7XG5cdFx0XHRmZXRjaChgL3ZpZXdzLyR7cm91dGVJbmZvLm5hbWV9Lmh0bWxgKVxuXHRcdFx0XHQudGhlbihyZXMgPT4gcmVzLnRleHQoKSlcblx0XHRcdFx0LnRoZW4oaHRtbCA9PiB2aWV3LmlubmVySFRNTCA9IGh0bWwpXG5cdFx0XHRcdC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGZldGNoIHBhZ2U6ICcsIGVycm9yKSk7XG5cdFx0fVxuXHR9XG4qLyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCAnLi9zdHlsZXNoZWV0cy9zdHlsZS5zY3NzJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuL2phdmFzY3JpcHRzL3JvdXRlcic7XHJcbmltcG9ydCB7IG1vZGFsLCB0YWJNZW51LCBzdGlja3lFbGVtZW50LCBwYXJhbGxheCB9IGZyb20gJy4vamF2YXNjcmlwdHMvZXZlbnQuanMnO1xyXG5pbXBvcnQgeyBhdHRhY2hGaWxlLCBpbnB1dE51bWJlciB9IGZyb20gJy4vamF2YXNjcmlwdHMvaW5wdXQnO1xyXG5pbXBvcnQgeyBsb2FkZXIsIGNoZWNrQnJvd3NlciwgYWRqdXN0VG9wUGFkZGluZyB9IGZyb20gJy4vamF2YXNjcmlwdHMvbG9hZCc7IC8vIGxvYWRTcGlubmVyXHJcblxyXG5jb25zdCBldmVudFRvVG9wID0gKCkgPT4ge1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG5cdFx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cdFx0aWYgKHRhcmdldC5jbG9zZXN0KCcuanMtdG8tdG9wJykpIHtcclxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0d2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG5cclxuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSB0YXJnZXQubmFtZTtcclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuXHJcbi8vIGlmKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOjgwMHB4KScpLm1hdGNoZXMpIHt9XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG5cdGlmKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gXCIvXCIpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwidGhpcyBpcyBob21lIHBhZ2UuXCIpO1xyXG5cdH1cclxuXHQvLyBjb25zdCB0b2RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8nKTtcclxuXHQvLyBjb25zdCB0b2RvTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b2RvLWxpc3QnKTtcclxuXHQvLyBjb25zdCB0b2RvTGlzdElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8taW5wdXQnKTtcclxuXHQvLyBjb25zdCB0b2RvU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8tc3VibWl0Jyk7XHJcblx0Ly8gY29uc3QgdG9kb0NsZWFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8tY2xlYXInKTtcclxuXHQvLyBsZXQgdG9kb0l0ZW1zID0gIFtdO1xyXG5cclxuXHQvLyBmdW5jdGlvbiByZW5kZXJUb2RvKHRleHQpIHtcclxuXHQvLyBcdGNvbnN0IGl0ZW0gPSB7IGlkOiB0b2RvSXRlbXMubGVuZ3RoICsgMSwgdGV4dDogdGV4dCB9O1xyXG5cclxuXHQvLyBcdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHQvLyBcdGNvbnN0IHRvZG9EZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHQvLyBcdC8vIHRvZG9EZWxldGUuY2xhc3NMaXN0LmFkZCgnZ2hvc3QtYnV0dG9uJyk7XHJcblx0Ly8gXHR0b2RvRGVsZXRlLnNldEF0dHJpYnV0ZSgndHlwZScsJ2J1dHRvbicpO1xyXG5cdC8vIFx0dG9kb0RlbGV0ZS5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJpY29uLWNsb3NlXCIgLz4nO1xyXG5cclxuXHQvLyBcdGNvbnN0IHRvZG9DaGVjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcblx0Ly8gXHRjb25zdCB0b2RvQ2hlY2tMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcblx0Ly8gXHR0b2RvQ2hlY2suc2V0QXR0cmlidXRlKCd0eXBlJywgJ2NoZWNrYm94Jyk7XHJcblx0Ly8gXHR0b2RvQ2hlY2suc2V0QXR0cmlidXRlKCdpZCcsIGl0ZW0uaWQpO1xyXG5cdC8vIFx0dG9kb0NoZWNrTGFiZWwuaW5uZXJUZXh0ID0gYCR7aXRlbS5pZH0gOjogJHt0ZXh0fWA7XHJcblx0Ly8gXHR0b2RvQ2hlY2tMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGl0ZW0uaWQpO1xyXG5cclxuXHQvLyBcdGxpLmFwcGVuZENoaWxkKHRvZG9EZWxldGUpO1xyXG5cdC8vIFx0bGkuYXBwZW5kQ2hpbGQodG9kb0NoZWNrKTtcclxuXHQvLyBcdGxpLmFwcGVuZENoaWxkKHRvZG9DaGVja0xhYmVsKTtcclxuXHJcblx0Ly8gXHR0b2RvTGlzdC5hcHBlbmRDaGlsZChsaSk7XHJcblx0Ly8gXHR0b2RvSXRlbXMucHVzaChpdGVtKTtcclxuXHQvLyBcdC8vIOyytO2BrOuwleyKpCDsg4Htg5wg7KCA7J6l7JWI65CoXHJcblxyXG5cdC8vIFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RvZG9JdGVtcycsIEpTT04uc3RyaW5naWZ5KHRvZG9JdGVtcykpO1xyXG5cdC8vIFx0dG9kb0xpc3RJbnB1dC52YWx1ZSA9ICcnO1xyXG5cclxuXHQvLyBcdHRvZG9EZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkZWxldGVUb2RvKTtcclxuXHJcblx0Ly8gXHRmdW5jdGlvbiBkZWxldGVUb2RvKCkge1xyXG5cdC8vIFx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0Ly8gXHRcdHRhcmdldC5wYXJlbnROb2RlLnJlbW92ZSgpO1xyXG5cdC8vIFx0XHRjb25zdCBkZWxldGVkSXRlbXMgPSB0b2RvSXRlbXMuZmlsdGVyKGl0ZW0gPT4ge1xyXG5cdC8vIFx0XHRcdHJldHVybiBwYXJzZUludCh0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmlkKSAhPT0gaXRlbS5pZDtcclxuXHQvLyBcdFx0fSk7XHJcblx0Ly8gXHRcdHRvZG9JdGVtcyA9IGRlbGV0ZWRJdGVtcztcclxuXHRcdFx0XHJcblx0Ly8gXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvSXRlbXMnLCBKU09OLnN0cmluZ2lmeSh0b2RvSXRlbXMpKTtcclxuXHQvLyBcdH1cclxuXHQvLyB9XHJcblxyXG5cdC8vIHRvZG9DbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHQvLyBcdHRvZG9MaXN0LmlubmVySFRNTCA9ICcnO1xyXG5cdC8vIFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3RvZG9JdGVtcycpO1xyXG5cdC8vIH0pO1xyXG5cclxuXHJcblx0Ly8gdG9kby5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldmVudCA9PiB7XHJcblx0Ly8gXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdC8vIFx0aWYodG9kb0xpc3RJbnB1dC52YWx1ZS5sZW5ndGggPCAxKSByZXR1cm4gYWxlcnQoJ+yeheugpe2VtOyjvOyEuOyaqScpO1xyXG5cdC8vIFx0cmVuZGVyVG9kbyh0b2RvTGlzdElucHV0LnZhbHVlKTtcclxuXHQvLyBcdC8vIHRvZG9MaXN0LmlubmVySFRNTCArPSBgPGxpPjxpbnB1dCBpZD1hYiB0eXBlPWNoZWNrYm94PjxsYWJlbCBmb3I9YWI+JHt0b2RvTGlzdElucHV0LnZhbHVlfTwvbGFiZWw+PC9saT5gO1xyXG5cdC8vIH0pO1xyXG5cclxuXHQvLyBjb25zdCBnZXRMb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0xpc3RJdGVtcycpO1xyXG5cdC8vIGlmKGdldExvY2FsU3RvcmFnZSl7XHJcblx0Ly8gXHRjb25zdCBhYmMgPSBKU09OLnBhcnNlKGdldExvY2FsU3RvcmFnZSk7XHJcblx0Ly8gXHRhYmMuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcclxuXHQvLyBcdFx0cmVuZGVyVG9kbyhpdGVtLnRleHQpO1xyXG5cdC8vIFx0fSk7XHJcblx0Ly8gfVxyXG5cclxuXHRyb3V0ZXIoKTtcclxuXHJcblx0bG9hZGVyKCk7XHJcblx0Y2hlY2tCcm93c2VyKCk7XHJcblxyXG5cdGF0dGFjaEZpbGUoKTtcclxuXHJcblx0dGFiTWVudSgpO1xyXG5cdG1vZGFsKCk7XHJcblx0aW5wdXROdW1iZXIoKTtcclxuXHJcblx0ZXZlbnRUb1RvcCgpO1xyXG5cclxuXHRzZXRHcmFwaCgpO1xyXG5cclxuXHRhZGp1c3RUb3BQYWRkaW5nKCk7XHJcblxyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKGV2ZW50KSA9PiB7XHJcblx0XHRpZihldmVudC50YXJnZXQuY2xvc2VzdCgnLmpzLXNlYXJjaGJhcicpKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHRcdH1cclxuXHR9LCB0cnVlKTtcclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKGV2ZW50KSA9PiB7XHJcblx0XHRpZihldmVudC50YXJnZXQuY2xvc2VzdCgnLmpzLXNlYXJjaGJhcicpKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUpO1xyXG5cclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuXHRcdGNvbnN0IHNjcm9sbFRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zY3JvbGwtYW5pbWF0aW9uJyk7XHJcblx0XHRzY3JvbGxUYXJnZXQuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuXHRcdFx0aWYgKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XHJcblx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zY3JvbGxlZCcpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0Y29uc3Qgc2Nyb2xsVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcclxuXHRcdHNjcm9sbFRhcmdldC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHdpbmRvdy5wYWdlWU9mZnNldCwgd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgICsgNTApO1xyXG5cdFx0XHRpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgKyA1MCkge1xyXG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2Nyb2xsZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGNvbnN0IHNheUhlbGxvID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblx0XHRyZWplY3QoJ1VuYWJsZSB0byBzYXkgaGkuJyk7XHJcblxyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJlc29sdmUoJ0hlbGxvLCBXb3JsZCcpO1xyXG5cdFx0fSwgNTAwMCk7XHJcblx0fSk7XHJcblx0c2F5SGVsbG8udGhlbihyZXNvbHZlID0+IHtcclxuXHRcdGNvbnNvbGUubG9nKCdyZXMnLCByZXNvbHZlKTtcclxuXHR9KS5jYXRjaChlcnJvciA9PiB7XHJcblx0XHRjb25zb2xlLndhcm4oZXJyb3IpO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBQcm9taXNlLmFsbChbXHJcblx0Ly8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJyksXHJcblx0Ly8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzJylcclxuXHQvLyBdKVxyXG5cdC8vIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZXMpIHtcclxuXHQvLyBcdHJldHVybiByZXNwb25zZXMubWFwKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdC8vIFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG5cdC8vIFx0fSk7XHJcblxyXG5cclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0aWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1oZWFkJykpIHJldHVybjtcclxuXHRcdHN0aWNreUVsZW1lbnQoJy5wb3N0LWhlYWQnLCAnaXMtc3RpY2t5JywgdHJ1ZSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHQvLyBcdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHQvLyBcdGNvbnN0IGhhc0hvdmVyQ2xhc3MgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLWhvdmVyLXRyaWdnZXInKTtcclxuXHQvLyBcdGlmKCFoYXNIb3ZlckNsYXNzKSByZXR1cm47XHJcblxyXG5cdC8vIFx0Y29uc3QgaXNOYXZpZ2F0aW9uID0gdGFyZ2V0LmNsb3Nlc3QoJy5uYXZpZ2F0aW9uIGxpJyk7XHJcblxyXG5cdC8vIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcblx0Ly8gXHR0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZXhwYW5kZWQnKTtcclxuXHJcblx0Ly8gXHRpc05hdmlnYXRpb24gJiYgYm9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2hvd24nKTtcclxuXHJcblx0Ly8gXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG5cdC8vIFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcblx0Ly8gXHRcdHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1leHBhbmRlZCcpO1xyXG5cclxuXHQvLyBcdFx0aXNOYXZpZ2F0aW9uICYmIGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNob3duJyk7XHJcblx0Ly8gXHR9LCB0cnVlKTtcclxuXHJcblx0Ly8gfSwgdHJ1ZSk7XHJcblxyXG5cdGNvbnN0IHRvZ2dsZUV2ZW50ID0gZnVuY3Rpb24odGFyZ2V0LCB0b2dnbGUpIHtcclxuXHRcdGNvbnN0IHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XHJcblx0XHRjb25zdCB0b2dnbGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0b2dnbGUpO1xyXG5cclxuXHRcdHRhcmdldEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHRcdHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcblx0XHRcdHRvZ2dsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0RWxlbWVudCkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG5cdFx0XHRcdGlmKGV2ZW50LnRhcmdldCAhPT0gZWxlbWVudCkge1xyXG5cdFx0XHRcdFx0ZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0Ly8gY29uc3QgdG9nZ2xlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtYWNjb3JkaW9uJyk7XHJcblx0Ly8gdG9nZ2xlRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuXHQvLyBcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblx0Ly8gXHRcdGlmKHRhcmdldCAhPT0gZWxlbWVudCkge1xyXG5cdC8vIFx0XHRcdHRhcmdldE5leHRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcclxuXHQvLyBcdFx0fVxyXG5cdC8vIFx0fSk7XHJcblx0Ly8gXHRlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG5cdC8vIFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHQvLyBcdH0pO1xyXG5cdC8vIH0pO1xyXG5cclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHRcdGNvbnN0IHRhcmdldE5leHRFbGVtZW50ID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcclxuXHRcdGNvbnN0IGlzVGFyZ2V0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5qcy1hY2NvcmRpb24nKTtcclxuXHRcdGlmICghaXNUYXJnZXQpIHJldHVybjtcclxuXHRcdC8vIHBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgpIOuhnCDthrXsnbwuXHJcblxyXG5cdFx0aWYoaXNUYXJnZXQpIHtcclxuXHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0XHR0YXJnZXROZXh0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy12aXNpYmxlJyk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdC8vIGNsaWNrIOydtOuypO2KuCDsmbjrtoDsl5Ag64Sj7Jy864uI6rmMIO2MjO2PreyXkOyEnOunjCDsmKTrpZguIGV2ZW50IHVuZGVmaW5lZFxyXG5cdC8vIFRPRE86IO2GoOq4gCDslYjsl5Ag7Yag6riAIOydtOuypO2KuCDsobTsnqwg7IucXHJcblx0Ly8gVE9ETzog64+E7YGQ66i87Yq46rCAIOyVhOuLiOudvCBldmVudC50YXJnZXQucGFyZW50IOqwgCDslYTri4wg6rKD7J2EIO2BtOumre2WiOydhCDrlYwg64uk64u57JW8IO2VmOuCmFxyXG5cdC8vIC8vIOuqqOuToCDthqDquIAg7J2067Kk7Yq464qUIO2VmOuCmOydmCDqs7XthrXrkJwg7YG0656Y7IqkIOyEoO2DneyekOulvCDsgqzsmqntlZzri6QuXHJcblx0Ly8gLy8g7IaN64+EIOydtOyKiOulvCDqs6Drr7ztlbTrs7TsnpAuXHJcblxyXG5cdGNvbnN0IGNsb3NlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1jbG9zZScpO1xyXG5cdGNsb3NlRWxlbWVudC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdFx0aWYgKGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygnbm90aWNlJykpIHtcclxuXHRcdFx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLWNsb3NlZC10b3BiYW5uZXInKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtZW50LnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn0pO1xyXG5cclxuY29uc3Qgc2V0R3JhcGggPSAoKSA9PiB7XHJcblx0Y29uc3QgZ3JhcGhJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ncmFwaC1pdGVtJyk7XHJcblx0aWYoIWdyYXBoSXRlbXMpIHJldHVybjtcclxuXHJcblx0bGV0IGdyYXBoSXRlbVZhbHVlO1xyXG5cdGxldCBncmFwaEl0ZW1CYXI7XHJcblx0bGV0IGdyYXBoVmFsdWU7XHJcblxyXG5cdGdyYXBoSXRlbXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG5cdFx0Z3JhcGhJdGVtQmFyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS1iYXInKTtcclxuXHRcdGdyYXBoSXRlbVZhbHVlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS12YWx1ZScpO1xyXG5cclxuXHRcdGdyYXBoVmFsdWUgPSBwYXJzZUludChncmFwaEl0ZW1WYWx1ZS5pbm5lckhUTUwpO1xyXG5cclxuXHRcdChmdW5jdGlvbiBzZXRHcmFwaCgpIHtcclxuXHRcdFx0Z3JhcGhJdGVtQmFyLnN0eWxlLmhlaWdodCA9IGdyYXBoVmFsdWUgKyAncHgnO1xyXG5cdFx0XHRncmFwaEl0ZW1WYWx1ZS5zdHlsZS5ib3R0b20gPSBncmFwaFZhbHVlICsgJ3B4JztcclxuXHRcdH0pKCk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBkb2N1bWVudC5mb3Jtcy5pZFxyXG5mdW5jdGlvbiBsb2dpbkZvcm1WYWxpZGF0aW9uKCkge1xyXG5cdGNvbnN0IGhlbHBlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGV4dGZpZWxkLWhlbHBlcicpO1xyXG5cdGhlbHBlcnMuZm9yRWFjaChoZWxwZXIgPT4ge1xyXG5cdFx0aGVscGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0fSk7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XHJcblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0XHRjb25zdCBsb2dpbkVtYWlsID0gZG9jdW1lbnQubG9naW4uZW1haWw7XHJcblx0XHRjb25zdCBsb2dpblBhc3N3b3JkID0gZG9jdW1lbnQubG9naW4ucGFzc3dvcmQ7XHJcblx0XHRjb25zdCBpc1Bhc3N3b3JkID0gdGFyZ2V0ID09PSBsb2dpblBhc3N3b3JkO1xyXG5cdFx0Y29uc3QgaXNFbXB0eUVtYWlsID0gbG9naW5FbWFpbC52YWx1ZSA9PT0gbnVsbCB8fCBsb2dpbkVtYWlsLnZhbHVlID09PSAnJztcclxuXHJcblx0XHQvLyDsnbTrqZTsnbzsnbQgaW52YWxpZCDsnbwg65WMIGhlbHBlciDrs7Tsl6zso7zquLBcclxuXHRcdC8vIOu5hOuwgOuyiO2YuSBpbnZhbGlkIOydvCDrlYwgaGVscGVyIOuztOyXrOyjvOq4sFxyXG5cdFx0Ly8g66qo65GQIHZhbGlkIOydvCDrlYwgc3VibWl0XHJcblx0XHRpZiAoaXNQYXNzd29yZCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhsb2dpblBhc3N3b3JkLCBsb2dpblBhc3N3b3JkLnZhbHVlLmxlbmd0aCk7XHJcblx0XHR9XHJcblx0XHRpZiAoaXNFbXB0eUVtYWlsKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdlbXB0eScpO1xyXG5cdFx0XHQvLyBGSVhNRTogdGFzcmdldFxyXG5cdFx0XHRjb25zb2xlLmxvZyh0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuXHRcdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGxvZ2luUGFzc3dvcmQudmFsdWUubGVuZ3RoIDwgOCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnYXQgbGVhc3QgOCBsZW5ndGgnKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSk7XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGV2ZW50ID0+IHtcclxuXHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0Y29uc3QgaXNTdWJtaXRMb2dpbiA9IHRhcmdldCA9PT0gZG9jdW1lbnQubG9naW47XHJcblx0aWYgKGlzU3VibWl0TG9naW4pIHtcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRsb2dpbkZvcm1WYWxpZGF0aW9uKCk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG4vKlxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG5cdGlmKGV2ZW50LnRhcmdldC5jbG9zZXN0KCcudG9kby1jb250cm9sLXJlbW92ZScpKXtcclxuXHRcdHRvZG9MaXN0LmlubmVySFRNTCA9ICcnO1xyXG5cdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3RvZG9MaXN0SXRlbXMxJyk7XHJcblx0fVxyXG5cdGNvbnN0IGl0ZW0gPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmpzLXRvZG8gaW5wdXQnKTtcclxuXHRpZihpdGVtKSB7XHJcblx0XHRpZihpdGVtLmNoZWNrZWQpIHtcclxuXHRcdFx0aXRlbS5wYXJlbnROb2RlLmNsYXNzTmFtZSA9ICdjb21wbGV0ZWQnO1xyXG5cdFx0XHRpdGVtLmNoZWNrZWQgPSB0cnVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aXRlbS5wYXJlbnROb2RlLmNsYXNzTmFtZSA9ICcnO1xyXG5cdFx0XHRpdGVtLmNoZWNrZWQgPSBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvTGlzdEl0ZW1zMScsIHRvZG9MaXN0LmlubmVySFRNTCk7XHJcblx0fVxyXG59KTtcclxuKi9cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VG9kYXlEYXRlID0gKCkgPT4ge1xyXG5cdGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuXHRjb25zdCB5ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTsgLy8gdG9TdHJpbmcoKS5wYWRTdGFydFxyXG5cdGNvbnN0IG1vbnRoID0gU3RyaW5nKHRvZGF5LmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xyXG5cdGNvbnN0IGRhdGUgPSBTdHJpbmcodG9kYXkuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xyXG5cdGNvbnN0IGRheSA9IHRvZGF5LmdldERheSgpOyAvLyDsm5QgOiAwXHJcblxyXG5cdGNvbnN0IGhvdXJzID0gdG9kYXkuZ2V0SG91cnMoKTtcclxuXHRjb25zdCBtaW51dGVzID0gdG9kYXkuZ2V0TWludXRlcygpO1xyXG5cdC8vIGNvbnN0IHNlY29uZHMgPSB0b2RheS5nZXRTZWNvbmRzKCk7XHJcblx0Y29uc3QgYW1wbSA9IGhvdXJzIDwgMTIgPyAnYW0nIDogJ3BtJztcclxuXHJcblx0Ly8gbGV0IHRoZUJpZ0RheSA9IG5ldyBEYXRlKFwiSnVseSAxLCAxOTk5XCIpO1xyXG5cdC8vIGxldCBzYW1lQXNCaWdEYXkgPSBuZXcgRGF0ZSgpO1xyXG5cdC8vIHNhbWVBc0JpZ0RheS5zZXRUaW1lKHRoZUJpZ0RheS5nZXRUaW1lKCkpO1xyXG5cclxuXHQvKlxyXG5cdGNvbnN0IGRhdGVTdHJpbmcgPSBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpLnNwbGl0KCcuJyk7XHJcblx0Y29uc3QgW3llYXIsIG1vbnRoLCBkYXldID0gZGF0ZVN0cmluZztcclxuXHRjb25zb2xlLmxvZyhkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpKTsgLy8gMTk4MOuFhCAx7JuUIDPsnbwg66qp7JqU7J28XHJcblx0Y29uc29sZS5sb2coZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKSk7IC8vIOyYpOyghCAxOjI4OjM1XHJcblx0Y29uc29sZS5sb2coZGF0ZS50b0xvY2FsZVN0cmluZygpKTsgLy8gMTk4MOuFhCAx7JuUIDPsnbwg66qp7JqU7J28IOyYpOyghCAxOjI4OjM1XHJcblx0Ki9cclxufTsiLCJleHBvcnQgY29uc3QgbG9hZGVyID0gKCkgPT4ge1xyXG5cdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHRjb25zdCBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRpbmcnKTtcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0bG9hZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4nKTtcclxuXHRcdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XHJcblx0XHR9LCAwKTtcclxuXHR9KTtcclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcblx0XHRib2R5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTtcclxuXHR9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0Jyb3dzZXIgPSAoKSA9PiB7XHJcblx0Y29uc3QgQnJvd3NlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtYnJvd3NlcicpO1xyXG5cdGxldCBhZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcclxuXHRpZiAoYWdlbnQuaW5kZXhPZignbXNpZScpID4gLTEgfHwgYWdlbnQuaW5kZXhPZigndHJpZGVudCcpID4gLTEpIHtcclxuXHRcdEJyb3dzZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cdH0gZWxzZSBpZiAoYWdlbnQuaW5kZXhPZignY2hyb21lJykgIT09IC0xKSB7XHJcblx0XHRjb25zb2xlLmxvZyhhZ2VudCwgJ+2BrOuhrCcpO1xyXG5cdH1cclxufTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgZ29vZ2xlQW5hbHl0aWNzID0gKCkgPT4ge1xyXG5cdC8vIDxzY3JpcHQgYXN5bmMgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS04MzUzMTIzOS0xXCI+PC9zY3JpcHQ+XHJcblx0Ly8gd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107XHJcblx0Ly8gZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fVxyXG5cdC8vIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7XHJcblx0Ly8gZ3RhZygnY29uZmlnJywgJ1VBLTgzNTMxMjM5LTEnKTtcclxufTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgYWRqdXN0VG9wUGFkZGluZyA9ICgpID0+IHtcclxuXHRjb25zdCBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xyXG5cdGNvbnN0IGlzRml4ZWRIZWFkZXIgPSBnZXRDb21wdXRlZFN0eWxlKGhlYWRlckVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnO1xyXG5cdGNvbnN0IG1haW5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG5cclxuXHRmdW5jdGlvbiBhZGRQYWRkaW5nKCkge1xyXG5cdFx0aWYgKGlzRml4ZWRIZWFkZXIpIHtcclxuXHRcdFx0bWFpbkVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gaGVhZGVyRWxlbWVudC5jbGllbnRIZWlnaHQgKyAncHgnO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWFpbkVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gMCArICdweCc7XHJcblx0XHR9XHJcblx0fVxyXG5cdGFkZFBhZGRpbmcoKTtcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFkZFBhZGRpbmcpO1xyXG5cdH0pO1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYWRkUGFkZGluZyk7XHJcblx0fSk7XHJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==