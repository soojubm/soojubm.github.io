(()=>{var e=[function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,c){function r(e){try{l(o.next(e))}catch(e){c(e)}}function i(e){try{l(o.throw(e))}catch(e){c(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,i)}l((o=o.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);const c=s(n(2)),r=n(3),i=n(4),l=s(n(5)),a=s(n(6)),d=s(n(20)),u=s(n(25)),f=s(n(27)),m=n(28);document.addEventListener("DOMContentLoaded",i.lockBodyElement),document.addEventListener("DOMContentLoaded",()=>{"customElements"in window&&window.customElements.define("close-button",y)}),window.addEventListener("load",i.detectLoad),document.addEventListener("DOMContentLoaded",v),window.removeEventListener("hashchange",v),window.addEventListener("hashchange",v),document.addEventListener("click",f.default),document.addEventListener("click",m.toggleNavbarMenu),document.addEventListener("DOMContentLoaded",()=>{r.stopAnimation()});function v(){var e;return o(this,void 0,void 0,(function*(){const t=document.querySelectorAll(".navbar-menu a"),n=window.location.hash.substring(1);document.title="이경수 "+n;["dictionary","home","entity","","messaging","search","filter","tokens","subscribe","components","changelog","dummies","texts","signifier","presentations"].includes(n)||m.initializeNavbar();const o=!n;null==t||t.forEach(e=>{var t;e.classList.remove("is-current");(null===(t=e.getAttribute("href"))||void 0===t?void 0:t.includes(n))&&!o&&e.classList.add("is-current")}),o&&t[0].classList.add("is-current");const s=window.matchMedia("(max-width: 1080px)"),r=function(e){e.matches&&m.initializeNavbar()};s.addListener(r),r(s),u.default(),function(){!("IntersectionObserver"in window)||!("IntersectionObserverEntry"in window)||window.IntersectionObserverEntry.prototype;const e=[].slice.call(document.querySelectorAll(".footer"));let t=new IntersectionObserver((function(e,t){e.forEach(e=>{e.isIntersecting&&t.unobserve(e.target)})}),{root:null,rootMargin:"0px 0px 0px 0px",threshold:.25});e.forEach(e=>t.observe(e))}(),yield c.default();const i=document.querySelector("#ta-example-one"),f=document.querySelector("#ta-example-two");i&&f&&(i.addEventListener("mouseup",p,!1),f.addEventListener("mouseup",p,!1)),null===(e=document.querySelector(".js-default-font"))||void 0===e||e.addEventListener("click",()=>document.body.classList.toggle("font-default"));const v=document.querySelector(".js-sheet"),h=null==v?void 0:v.querySelector(".js-sheet-close");window.addEventListener("load",()=>{null==v||v.classList.add("is-visible")}),null==h||h.addEventListener("click",()=>{var e;null===(e=h.parentElement)||void 0===e||e.classList.remove("is-visible")}),d.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}),d.default.file(),d.default.quantity(),a.default.toggleElement({selector:".js-toggle"}),a.default.tab(),a.default.modal({selector:".js-modal"}),a.default.positionSticky({selector:".js-post-head",addClass:"is-sticky-post-head",isPassed:!0}),a.default.scrollAnimation({selector:".js-observer"}),a.default.scrollspy({menusSelector:".js-scrollspy-trigger",sectionsSelector:".js-scrollspy-section"}),a.default.parallax(".js-parallax"),l.default(),function(){const e=document.querySelector(".js-comment-write"),t=document.querySelectorAll(".js-comment-textfield");if(!e||!t)return;t.forEach(t=>t.addEventListener("focus",()=>e.classList.add("is-focused")))}(),document.addEventListener("click",e=>{const t=e.target;if(!t.closest(".js-test-toggle"))return;const n=t.closest(".profile-body"),o=[...t.parentElement.children];n.classList.toggle("list","list"===t.name),o.forEach(e=>e.classList.remove("is-selected")),t.classList.add("is-selected")})}))}window.addEventListener("orientationChange",()=>console.log("orientatoinChange")),window.addEventListener("load",()=>console.log("loaded!")),window.addEventListener("beforeunload",()=>"저장되지 않은 변경사항이 있습니다. 정말 페이지를 떠나실 건 가요?"),document.addEventListener("readystatechange",()=>console.log(document.readyState)),document.addEventListener("click",(function(e){if(!e.target.closest(".js-to-top"))return;e.preventDefault(),window.scrollTo(0,0)})),document.addEventListener("click",(function(e){var t;if(!e.target.closest(".js-accordion"))return;const n=e.target.closest(".js-accordion");null===(t=n.querySelector(".accordion-panel"))||void 0===t||t.addEventListener("click",e=>e.stopPropagation());let o=Boolean(n.getAttribute("aria-expanded"));n.setAttribute("aria-expanded",String(!o)),n.classList.toggle("is-active")})),document.addEventListener("click",(function(e){const t=e.target.closest(".js-view-password");if(!t)return;const n=t.parentNode.querySelector("input"),o="password"===n.getAttribute("type");n.setAttribute("type",o?"text":"password")})),document.addEventListener("click",(function(e){const t=e.target.closest(".js-close");if(!t)return;t.parentNode.hidden=!0})),document.addEventListener("mouseover",(function(e){const t=e.target.closest(".js-hover-trigger");if(t)t.setAttribute("aria-expanded","true"),document.body.classList.add("is-active");else{if(!document.body.classList.contains("is-active"))return;document.body.classList.remove("is-active")}})),document.addEventListener("DOMContentLoaded",()=>{l.default()});function p(e){const t=document.activeElement,{id:n,value:o,selectionStart:s,selectionEnd:c}=t,r=o.substring(s,c),i=document.querySelector("#output-element"),l=document.querySelector("#output-text");i.innerHTML=n,l.innerHTML=r,console.log(t.tabIndex)}const h=new class{constructor(e){this.bodyElement=document.querySelector(e)}getElement(){console.log(this.bodyElement)}toggleClass(e){var t;null===(t=this.bodyElement)||void 0===t||t.classList.toggle(e)}}("body");console.log("@@@@@",h.getElement()),h.toggleClass("fuck");class y extends HTMLElement{constructor(){super(),this.innerHTML='\n      <button class="chip">\n        <span class="material-symbols-outlined">close</span>\n      </butt>\n    ',this.addEventListener("click",()=>console.log("test"))}connectedCallback(){console.log("connected!",this)}disconnectedCallback(){console.log("disconnected",this)}}},()=>{},function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,c){function r(e){try{l(o.next(e))}catch(e){c(e)}}function i(e){try{l(o.throw(e))}catch(e){c(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,i)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.routes=void 0,t.routes=[{name:"디자인시스템",path:"/"},{name:"홈",path:"/home"},{name:"소개",path:"/about"},{name:"디자인시스템",path:"/design"},{name:"컴포넌트",path:"/components"},{name:"사용자프로필",path:"/profile"},{name:"포스트",path:"/post"},{name:"영화",path:"/cake"},{name:"상품명",path:"/product"},{name:"주문서",path:"/checkout"},{name:"로그인",path:"/login"},{name:"회원가입",path:"/signup"},{name:"비밀번호찾기",path:"/forgot"},{name:"설정",path:"/setting"}];window.location.pathname;t.default=()=>n(void 0,void 0,void 0,(function*(){let e=window.location.hash.substring(1),t=e?`/views/${e}.html`:"/views/design.html";try{!function(e){const t=document.querySelector("#view");if(!t)return;t.innerHTML=e,window.scrollTo(0,0)}(yield function(e){return n(this,void 0,void 0,(function*(){const t=yield fetch(e);if(!t.ok)throw"Something went wrong.";return yield t.text()}))}(t))}catch(e){console.warn("router: ",e)}}))},(e,t)=>{"use strict";function n(e){let t;return function(){t&&window.cancelAnimationFrame(t),t=window.requestAnimationFrame(()=>e())}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadLazyImages=t.stopAnimation=t.throttle=void 0,t.throttle=n,t.stopAnimation=function(){let e;window.addEventListener("resize",n(()=>{document.body.classList.add("resize-animation-stopper"),clearTimeout(e),e=setTimeout(()=>{document.body.classList.remove("resize-animation-stopper")},400)}))},t.loadLazyImages=function(){if(!("IntersectionObserver"in window))return;const e=new IntersectionObserver((t,n)=>{t.forEach(t=>{if(!t.isIntersecting)return;const n=t.target;n.src=n.dataset.src||"",console.log(n),e.unobserve(n)})});document.querySelectorAll("[data-src]").forEach(t=>e.observe(t))}},(e,t)=>{"use strict";function n(){document.body.classList.remove("lock-scroll")}Object.defineProperty(t,"__esModule",{value:!0}),t.detectLoad=t.unlockBodyElement=t.lockBodyElement=void 0,t.lockBodyElement=function(){document.body.classList.add("lock-scroll")},t.unlockBodyElement=n,t.detectLoad=function(){document.body.classList.remove("is-loading");const e=document.querySelector(".js-loader");e&&(n(),e.hidden=!0)}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{const e=document.querySelector(".carousel");if(!e)return;const t=e.querySelector(".carousel-viewer"),n=e.querySelectorAll(".carousel-viewer > button"),o=e.querySelector(".carousel-arrows-prev"),s=e.querySelector(".carousel-arrows-next"),c=e.querySelectorAll(".carousel-dots-dot");if(!(t&&n&&o&&s&&c))return;const r=t.offsetWidth;let i=0;0===t.scrollLeft&&(o.style.display="none"),n.forEach(e=>i+=e.offsetWidth),s.addEventListener("click",(function(){t.scrollLeft+=100})),o.addEventListener("click",(function(){t.scrollLeft-=100})),c.forEach(e=>e.addEventListener("click",()=>{})),t.addEventListener("scroll",()=>{const{scrollLeft:e}=t;console.log("scroll-left",e,"offset-width",r);const n=0===e;o.style.display=n?"none":"flex"})}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(n(7)),c=o(n(8)),r=o(n(9)),i=o(n(11)),l=o(n(13)),a=o(n(14)),d=o(n(15)),u=o(n(16)),f=o(n(17)),m=o(n(18)),v=o(n(19));t.default={toggleElement:s.default,enterTarget:c.default,modal:i.default,tab:r.default,toTop:l.default,positionSticky:a.default,scrollAnimation:d.default,scrollspy:m.default,closeParentElement:u.default,customCursor:f.default,parallax:v.default}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});function n(e){e.classList.remove("is-active"),e.setAttribute("aria-expanded","true")}t.default=function({selector:e}){const t=document.querySelectorAll(e);t.forEach(e=>e.addEventListener("click",o=>{o.preventDefault(),o.stopPropagation();const s=o.target;t.forEach(e=>{s!==e&&n(e)}),function(e){e.classList.toggle("is-active"),e.setAttribute("aria-expanded",""+e.classList.contains("is-active")),null==e||e.nextElementSibling.addEventListener("click",e=>e.stopPropagation())}(e)})),document.addEventListener("click",()=>t.forEach(e=>n(e)))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=document.querySelectorAll(e);null==t||t.forEach(e=>{e.addEventListener("mouseenter",()=>function e(t){t.setAttribute("aria-expanded","true"),document.body.classList.add("is-shown"),t.removeEventListener("mouseenter",()=>e(t))}(e)),e.addEventListener("mouseleave",()=>function e(t){t.setAttribute("aria-expanded","false"),document.body.classList.remove("is-shown"),t.removeEventListener("mouseleave",()=>e(t))}(e))})}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3),s=n(10);t.default=function(){const e=document.querySelector(".js-tab");if(!e)return;const t=e.querySelectorAll("[role=tab]"),n=e.querySelectorAll("[role=tabpanel]");let c=t[0];function r(e){c=e.target,i(),t.forEach(e=>e.setAttribute("aria-selected","false")),c.setAttribute("aria-selected","true"),n.forEach(t=>t.setAttribute("aria-hidden",String(e.target.dataset.index!==t.dataset.index)))}function i(){if(!e)return;const t=e.querySelector(".profile-tablist-indicator");t&&(t.style.left=c.offsetLeft+"px",t.style.width=s.getElementWidth(c))}i(),t.forEach(e=>e.addEventListener("click",r)),window.addEventListener("resize",o.throttle(i),!0)}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getElementWidth=t.getWindowScrollTop=t.getElementOffsetTop=t.addClassname=t.removeClassname=void 0,t.removeClassname=(e,t)=>e.classList.remove(t),t.addClassname=(e,t)=>e.classList.add(t),t.getElementOffsetTop=function(e){let t=e.offsetTop;return e.offsetParent&&(t+=e.offsetParent.offsetTop),t},t.getWindowScrollTop=function(){return window.scrollY||window.pageYOffset},t.getElementWidth=function(e){return getComputedStyle(e).width}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,c){function r(e){try{l(o.next(e))}catch(e){c(e)}}function i(e){try{l(o.throw(e))}catch(e){c(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,i)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(12);t.default=function({selector:e}){const t=document.querySelectorAll(e),n=document.querySelector("#modal");let c,r;function i(e){const t=e.target;(t.classList.contains("modal")||t.classList.contains("js-modal-close"))&&(document.body.classList.remove("is-modal-visible","lock-scroll"),n.innerHTML="",window.scrollTo(0,r),c.focus(),document.removeEventListener("keydown",l),null==n||n.removeEventListener("click",i))}function l(e){27===e.keyCode&&s.backHistory()}document.body.classList.contains("is-modal-visible"),t.forEach(e=>e.addEventListener("click",t=>{t.preventDefault();!function(e){o(this,void 0,void 0,(function*(){try{const t=`/views/${e}.html`,o=yield fetch(t);if(!o.ok)throw"Something went wrong.";const s=yield o.text();n.innerHTML=s,c=document.activeElement}catch(e){}}))}(e.dataset.modal),r=window.pageYOffset,document.body.classList.add("is-modal-visible","lock-scroll"),document.body.style.top=`-${r}px`,document.addEventListener("keydown",l),n.addEventListener("click",i)}))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backHistory=t.pushBrowserHistory=void 0,t.pushBrowserHistory=function(e={},t="",n=""){history.pushState(e,t,n)},t.backHistory=function(){history.back()}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=document.querySelector(e);t&&t.addEventListener("click",e=>{e.preventDefault(),window.scrollTo(0,0)})}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3),s=n(10);t.default=({selector:e,addClass:t,isPassed:n})=>{const c=document.querySelector(e);if(!c)return;let r=s.getElementOffsetTop(c);const i=c.offsetHeight;let l=n?r+i:r;window.addEventListener("scroll",o.throttle((function(){const n=s.getWindowScrollTop()+i>l;document.body.classList.toggle(t,n),document.body.style.paddingTop=n?i+"px":"0",".hero"===e&&(document.body.style.paddingTop="0")})),!1),window.addEventListener("resize",o.throttle((function(){r=s.getElementOffsetTop(c)})),!1)}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=Array.from(document.querySelectorAll(e));let n=new IntersectionObserver((function(e,t){e.forEach(e=>{e.isIntersecting?e.target.classList.add("is-observed"):e.target.classList.remove("is-observed")})}),{root:null,rootMargin:"-100px 0px -100px 0px",threshold:0});t.forEach(e=>n.observe(e))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=document.querySelectorAll(e);0!==t.length&&t.forEach(e=>e.addEventListener("click",()=>{e.parentNode.hidden=!0}))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{const e=document.querySelector(".js-loader-spinner"),t=document.querySelectorAll("button, a");function n(e,{cursorElement:t}){const n=e.clientX,o=e.clientY;t.style.left=n+"px",t.style.top=o+"px"}e&&t&&(document.addEventListener("DOMContentLoaded",t=>n(t,{cursorElement:e})),document.addEventListener("mousemove",t=>n(t,{cursorElement:e})),document.addEventListener("click",()=>function({cursorElement:e}){e.classList.add("expand"),setTimeout(()=>{e.classList.remove("expand")},500)}({cursorElement:e})),e.classList.add("is-default"),t.forEach(t=>t.addEventListener("mouseleave",()=>{e.classList.remove("is-clickable")})),t.forEach(t=>t.addEventListener("mouseenter",()=>{e.classList.add("is-clickable")})))}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3);t.default=({menusSelector:e,sectionsSelector:t})=>{const n=document.querySelectorAll(t),s=document.querySelectorAll(e);n&&s&&(s.forEach((e,t)=>{e.addEventListener("click",e=>{e.preventDefault();const o=n[t].offsetTop-64;window.scrollTo(0,o)})}),window.addEventListener("scroll",o.throttle((function(){var e;let t;n.forEach((e,n)=>{if(!(e.offsetTop<=window.pageYOffset+100))return;const o=s[n];o&&(s.forEach(e=>e.classList.remove("is-active")),o.classList.add("is-active"),t=o.offsetLeft+o.clientWidth/2)});const o=null===(e=s[0])||void 0===e?void 0:e.parentElement;if(!o)return;o.scroll({left:t-o.offsetWidth/2,top:0,behavior:"smooth"})})),!1))}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(10);t.default=e=>{console.log("parallax",e);const t=document.querySelectorAll(e);t&&window.addEventListener("scroll",(function(){t.forEach(e=>{let t=o.getWindowScrollTop()+window.innerHeight-o.getElementOffsetTop(e);.002*t>=1.5||(e.style.transform=`scale(${.0015*t})`)})}))}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(n(21)),c=o(n(22)),r=o(n(23)),i=o(n(24));t.default={checkbox:s.default,textarea:c.default,file:r.default,quantity:i.default}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function({checkAllSelector:e,checkSelector:t}){const n=document.querySelector(e),o=document.querySelectorAll(t);n&&o&&(n.addEventListener("change",()=>function(e,t){e.forEach(e=>{e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1})}(o,n)),o.forEach(e=>{e.addEventListener("change",()=>function(e,t){const n=Array.from(e);let o=n.every(e=>e.checked),s=n.some(e=>e.checked)&&!o;t.checked=o,t.indeterminate=s,t.dataset.indeterminate=s}(o,n))}))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{document.addEventListener("input",e=>{const{target:t}=e;if(t)return;if(!("textarea"===t.nodeName.toLowerCase()))return;const n=document.querySelector(".textfield-byte b");if(!n)return;const o=(null==t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;n.innerText=o;const s=o>30;t.parentNode.classList.toggle("is-invalid",s)})}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{const e=document.querySelector(".js-file-input");e&&e.addEventListener("change",()=>function(e){const{files:t}=e,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach(e=>{if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");const t=`\n\t\t\t<div class="file-attachment-item">\n\t\t\t\t<figure class="file-attachment-item-image"><img src=${window.URL.createObjectURL(e)} alt=${e.name}></figure>\n\t\t\t\t<b class="file-attachment-item-name">${e.name}</b>\n\t\t\t\t<small class="file-attachment-item-size" >${function(e){const t=e>=1024&&e<1048576;return e<1024?e+"bytes":t?(e/1024).toFixed(2)+"KB":(e/1048576).toFixed(2)+"MB"}(e.size)}</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><span class="material-symbols-outlined">close</span></button>\n\t\t\t</div>`;n.innerHTML+=t})}(e))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{document.addEventListener("keydown",e=>{const{target:t}=e;t.closest(".js-number-input")&&document.addEventListener("keyup",(function(){const e=/(^0+)/.test(t.value),n=Number(t.value)>=300,o=t.value.length>0;e&&(t.value=0);o&&(t.value=t.value.slice(0,3));n&&(t.value=300)}))})};const n=document.querySelector(".js-input-test");if(n){n.addEventListener("keypress",e=>{const t=e.which||e.keyCode;!(32===t)&&(t<48||t>57)&&e.preventDefault()});let e=n.value||"";n.addEventListener("input",t=>{const n=t.target;/^[0-9\s]*$/.test(n.value)?e=n.value:n.value=e})}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(26);t.default=function(){if(!localStorage.getItem("theme"))return;document.body.classList.add(o.DARK_THEME_CLASS);const e=document.querySelectorAll(o.DARKTHEME_SELECTOR);null==e||e.forEach(e=>{e.querySelector("input").checked=!0})}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isDarkTheme=t.DARKTHEME_SELECTOR=t.LIGHT_THEME_CLASS=t.DARK_THEME_CLASS=void 0,t.DARK_THEME_CLASS="theme-dark",t.LIGHT_THEME_CLASS="",t.DARKTHEME_SELECTOR=".js-darkmode",t.isDarkTheme=()=>document.body.classList.contains(t.DARK_THEME_CLASS)},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleDarkTheme=void 0;const o=n(26);function s(e){if(!e.target.closest(o.DARKTHEME_SELECTOR))return;document.body.classList.toggle(o.DARK_THEME_CLASS);const t=document.querySelectorAll(o.DARKTHEME_SELECTOR);null==t||t.forEach(e=>{e.querySelector("input").checked=o.isDarkTheme()}),localStorage.setItem("theme",o.isDarkTheme()?o.DARK_THEME_CLASS:o.LIGHT_THEME_CLASS)}t.toggleDarkTheme=s,t.default=s},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleNavbarMenu=t.initializeNavbar=void 0;const n=()=>document.body.classList.contains("is-opened-menu");t.initializeNavbar=function(){const e=document.querySelector(".js-navbar-toggle");null==e||e.classList.remove("is-active"),document.body.classList.remove("is-opened-menu")},t.toggleNavbarMenu=function(e){const t=e.target.closest(".js-navbar-toggle");if(!t)return;const o=t.nextElementSibling;document.body.classList.toggle("is-opened-menu",!n()),null==t||t.setAttribute("aria-expanded",String(n())),null==o||o.setAttribute("aria-hidden",String(!n()));const s=String(n()?"0":"-1");null==o||o.querySelectorAll("a").forEach(e=>{e.setAttribute("tabindex",s)})}}],t={};(function n(o){var s=t[o];if(void 0!==s)return s.exports;var c=t[o]={exports:{}};return e[o].call(c.exports,c,c.exports,n),c.exports})(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvcm91dGVyLnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvdXRpbHMvb3B0aW1pemF0aW9uVXRpbHMudHMiLCJ3ZWJwYWNrOi8vc29vanVibS8uL3B1YmxpYy9qYXZhc2NyaXB0cy9sb2FkLnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2Fyb3VzZWwudHMiLCJ3ZWJwYWNrOi8vc29vanVibS8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3RvZ2dsZUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vc29vanVibS8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9lbnRlclRhcmdldC50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3RhYi50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL3V0aWxzL2VsZW1lbnRVdGlscy50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L21vZGFsLnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvdXRpbHMvYnJvd3NlclV0aWxzLnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vc29vanVibS8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9wb3NpdGlvblN0aWNreS50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2Nsb3NlUGFyZW50RWxlbWVudC50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2N1c3RvbUN1cnNvci50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbHNweS50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3BhcmFsbGF4LnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vc29vanVibS8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9jaGVja2JveC50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L3RleHRhcmVhLnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvZmlsZS50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L251bWJlci50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL3RoZW1lL2RlY3RlY3RUaGVtZS50cyIsIndlYnBhY2s6Ly9zb29qdWJtLy4vcHVibGljL2phdmFzY3JpcHRzL3RoZW1lL2NvbnN0LnRzIiwid2VicGFjazovL3Nvb2p1Ym0vLi9wdWJsaWMvamF2YXNjcmlwdHMvdGhlbWUvdG9nZ2xlVGhlbWUudHMiLCJ3ZWJwYWNrOi8vc29vanVibS8uL3B1YmxpYy9qYXZhc2NyaXB0cy9jb21tb24vbmF2YmFyLnRzIiwid2VicGFjazovL3Nvb2p1Ym0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc29vanVibS93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicm91dGVyXzEiLCJvcHRpbWl6YXRpb25VdGlsc18xIiwibG9hZF8xIiwiY2Fyb3VzZWxfMSIsImluZGV4XzEiLCJpbmRleF8yIiwiZGVjdGVjdFRoZW1lXzEiLCJ0b2dnbGVUaGVtZV8xIiwibmF2YmFyXzEiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2NrQm9keUVsZW1lbnQiLCJ3aW5kb3ciLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsIkNsb3NlQnV0dG9uIiwiZGV0ZWN0TG9hZCIsImRvbUV2ZW50cyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWZhdWx0IiwidG9nZ2xlTmF2YmFyTWVudSIsInN0b3BBbmltYXRpb24iLCJfYSIsIm5hdkl0ZW1FbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYXNoIiwibG9jYXRpb24iLCJzdWJzdHJpbmciLCJ0aXRsZSIsImluY2x1ZGVzIiwiaW5pdGlhbGl6ZU5hdmJhciIsImlzSG9tZVBhZ2UiLCJmb3JFYWNoIiwiZWxlbWVudCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImdldEF0dHJpYnV0ZSIsImFkZCIsIm1lZGlhU2l6ZTc2MCIsIm1hdGNoTWVkaWEiLCJjaGFuZ2VNZWRpYSIsIm1hdGNoZXMiLCJhZGRMaXN0ZW5lciIsIkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkiLCJwcm90b3R5cGUiLCJsYXp5QmFja2dyb3VuZHMiLCJzbGljZSIsImNhbGwiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJ1bm9ic2VydmUiLCJ0YXJnZXQiLCJyb290Iiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsIm9ic2VydmUiLCJsYXp5TG9hZGluZyIsInRleHRhcmVhMSIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0YXJlYTIiLCJvbk1vdXNlVXAiLCJib2R5IiwidG9nZ2xlIiwic2hlZXRFbGVtZW50Iiwic2hlZXRDbG9zZUVsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwiY2hlY2tib3giLCJjaGVja0FsbFNlbGVjdG9yIiwiY2hlY2tTZWxlY3RvciIsImZpbGUiLCJxdWFudGl0eSIsInRvZ2dsZUVsZW1lbnQiLCJzZWxlY3RvciIsInRhYiIsIm1vZGFsIiwicG9zaXRpb25TdGlja3kiLCJhZGRDbGFzcyIsImlzUGFzc2VkIiwic2Nyb2xsQW5pbWF0aW9uIiwic2Nyb2xsc3B5IiwibWVudXNTZWxlY3RvciIsInNlY3Rpb25zU2VsZWN0b3IiLCJwYXJhbGxheCIsImNvbW1lbnRXcml0ZSIsImNvbW1lbnRUZXh0ZmllbGQiLCJmb2N1c0NvbW1lbnQiLCJldmVudCIsImNsb3Nlc3QiLCJjb250YWluZXJFbGVtZW50Iiwic2libGluZ0VsZW1lbnRzIiwiY2hpbGRyZW4iLCJuYW1lIiwic2libGluZ0VsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwicmVhZHlTdGF0ZSIsInByZXZlbnREZWZhdWx0Iiwic2Nyb2xsVG8iLCJ0YXJnZXRFbGVtZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiaXNFeHBhbmRlZCIsIkJvb2xlYW4iLCJzZXRBdHRyaWJ1dGUiLCJTdHJpbmciLCJpbnB1dEVsZW1lbnQiLCJwYXJlbnROb2RlIiwiaXNQYXNzd29yZFR5cGUiLCJoaWRkZW4iLCJjb250YWlucyIsImFjdGl2ZVRleHRhcmVhIiwiYWN0aXZlRWxlbWVudCIsImlkIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJzZWxlY3Rpb24iLCJvdXRwdXRFbGVtZW50Iiwib3V0cHV0VGV4dCIsImlubmVySFRNTCIsInRhYkluZGV4IiwidGVzdDEiLCJib2R5RWxlbWVudCIsImNsYXNzTmFtZXMiLCJnZXRFbGVtZW50IiwidG9nZ2xlQ2xhc3MiLCJIVE1MRWxlbWVudCIsInN1cGVyIiwicm91dGVzIiwicGF0aCIsInBhdGhuYW1lIiwiY3VycmVudFBhdGgiLCJ1cmkiLCJjb250ZW50IiwidmlldyIsInJlbmRlclBhZ2UiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJ0ZXh0IiwiZmV0Y2hQYWdlIiwiZXJyb3IiLCJ3YXJuIiwidGhyb3R0bGUiLCJjYWxsYmFjayIsInRpbWVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJsb2FkTGF6eUltYWdlcyIsInJlc2l6ZVRpbWVyIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImltYWdlT2JzZXJ2ZXIiLCJzcmMiLCJkYXRhc2V0IiwiaW1hZ2UiLCJ1bmxvY2tCb2R5RWxlbWVudCIsImxvYWRlckVsZW1lbnQiLCJjYXRlZ29yeSIsImNhdGVnb3J5TGlzdCIsImNhdGVnb3J5TGlzdFNsaWRlIiwiY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiIsImNhdGVnb3J5TmF2aWdhdGlvbk5leHQiLCJjYXRlZ29yeURvdHMiLCJjYXRlZ29yeUNvbnRhaW5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJzdW0iLCJzY3JvbGxMZWZ0Iiwic3R5bGUiLCJkaXNwbGF5IiwiaXRlbSIsImlzRmlyc3QiLCJ0b2dnbGVFbGVtZW50XzEiLCJlbnRlclRhcmdldF8xIiwidGFiXzEiLCJtb2RhbF8xIiwidG9Ub3BfMSIsInBvc2l0aW9uU3RpY2t5XzEiLCJzY3JvbGxBbmltYXRpb25fMSIsImNsb3NlUGFyZW50RWxlbWVudF8xIiwiY3VzdG9tQ3Vyc29yXzEiLCJzY3JvbGxzcHlfMSIsInBhcmFsbGF4XzEiLCJlbnRlclRhcmdldCIsInRvVG9wIiwiY2xvc2VQYXJlbnRFbGVtZW50IiwiY3VzdG9tQ3Vyc29yIiwicmVtb3ZlQ2xhc3NuYW1lIiwidHJpZ2dlciIsInRyaWdnZXJzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidG9nZ2xlQ2xhc3NuYW1lIiwiaG92ZXJFbGVtZW50cyIsImVudGVyRXZlbnQiLCJsZWF2ZUV2ZW50IiwiZWxlbWVudFV0aWxzXzEiLCJ0YWJFbGVtZW50IiwidGFicyIsInBhbmVscyIsInNlbGVjdGVkVGFiIiwiY2hhbmdlVGFiIiwiaW5pdGlhbGl6ZUluZGljYXRvciIsInBhbmVsIiwiaW5kZXgiLCJpbmRpY2F0b3JFbGVtZW50IiwibGVmdCIsIm9mZnNldExlZnQiLCJ3aWR0aCIsImdldEVsZW1lbnRXaWR0aCIsImdldFdpbmRvd1Njcm9sbFRvcCIsImdldEVsZW1lbnRPZmZzZXRUb3AiLCJhZGRDbGFzc25hbWUiLCJjbGFzc25hbWUiLCJvZmZzZXRUb3AiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJnZXRDb21wdXRlZFN0eWxlIiwiYnJvd3NlclV0aWxzXzEiLCJtb2RhbFRyaWdnZXJzIiwibW9kYWxDb250YWluZXIiLCJwcmV2aW91c0FjdGl2ZUVsZW1lbnQiLCJwcmV2aW91c1BhZ2VZT2Zmc2V0IiwiY2xvc2VNb2RhbFRlbXAiLCJmb2N1cyIsImNoZWNrQ2xvc2VEaWFsb2ciLCJrZXlDb2RlIiwiYmFja0hpc3RvcnkiLCJtb2RhbElkIiwiZW5kcG9pbnQiLCJodG1sIiwiZmV0Y2hEYXRhIiwidG9wIiwicHVzaEJyb3dzZXJIaXN0b3J5Iiwic3RhdGUiLCJ1cmwiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiYmFjayIsInRvVG9wRWxlbWVudCIsImVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJwcmV2aW91c1Njcm9sbFRvcCIsImlzU3R1Y2siLCJwYWRkaW5nVG9wIiwiZWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJjbG9zZUVsZW1lbnRzIiwibGVuZ3RoIiwiY3Vyc29yIiwiaG92ZXJFbGVtZW50Iiwic2V0Q3Vyc29yIiwiY3Vyc29yRWxlbWVudCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJzZXRSaXBwbGUiLCJtZW51c0NsYXNzIiwic2VjdGlvbnNDbGFzcyIsInNlY3Rpb25zIiwibWVudXMiLCJ0YXJnZXRPZmZzZXRZIiwiYWN0aXZlT2Zmc2V0TGVmdCIsInNlY3Rpb24iLCJ0YXJnZXRNZW51IiwibWVudSIsImNsaWVudFdpZHRoIiwiYnV0dG9uQ29udGFpbmVyIiwic2Nyb2xsIiwiYmVoYXZpb3IiLCJyYXRlIiwiaW5uZXJIZWlnaHQiLCJ0cmFuc2Zvcm0iLCJjaGVja2JveF8xIiwidGV4dGFyZWFfMSIsImZpbGVfMSIsIm51bWJlcl8xIiwidGV4dGFyZWEiLCJjaGVja0FsbEVsZW1lbnQiLCJjaGVja0VsZW1lbnRzIiwiY2hlY2tJdGVtcyIsImNoZWNrQWxsIiwiY2hlY2tJdGVtIiwiY2hlY2tlZCIsImluZGV0ZXJtaW5hdGUiLCJjaGVja0VsZW1lbnQiLCJjaGVja2JveEVsZW1lbnRzIiwiaXNDaGVja2VkQWxsIiwiZXZlcnkiLCJpc0luZGV0ZXJtaW5hdGUiLCJzb21lIiwiY2hlY2tUYXJnZXQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiYnl0ZUVsZW1lbnQiLCJzdHJpbmdCeXRlTGVuZ3RoIiwicmVwbGFjZSIsImlubmVyVGV4dCIsImlzTWF4aW11bSIsImZpbGVJbnB1dCIsImZpbGVzIiwiYXR0YWNobWVudExpc3QiLCJhdHRhY2htZW50SGVscGVyIiwiaW5kZXhPZiIsInR5cGUiLCJ2YWxpZEZpbGVUeXBlIiwiYWxlcnQiLCJmaWxlVGVtcGxhdGUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzaXplIiwiaXNLaWxvQnl0ZXMiLCJ0b0ZpeGVkIiwicmV0dXJuRmlsZVNpemUiLCJhdHRhY2giLCJpc0ZpcnN0UGxhY2VkWmVybyIsInRlc3QiLCJOdW1iZXIiLCJpc0xlbmd0aCIsImlucHV0VGVzdCIsImtleSIsIndoaWNoIiwiY3VycmVudFZhbHVlIiwiY29uc3RfMSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJEQVJLX1RIRU1FX0NMQVNTIiwiZGFya1RoZW1lVHJpZ2dlcnMiLCJEQVJLVEhFTUVfU0VMRUNUT1IiLCJpc0RhcmtUaGVtZSIsIkxJR0hUX1RIRU1FX0NMQVNTIiwidG9nZ2xlRGFya1RoZW1lIiwic2V0SXRlbSIsImlzT3BlbmROYXZiYXJNZW51IiwibmF2aWdhdGlvblRyaWdnZXIiLCJtZW51RWxlbWVudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwibWFwcGluZ3MiOiIwQ0FDQSxJQUFJQSxFQUFhQyxNQUFRQSxLQUFLRCxXQUFjLFNBQVVFLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTFFLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVQyxHQUFTLElBQU1DLEVBQUtOLEVBQVVPLEtBQUtGLElBQVcsTUFBT0csR0FBS0wsRUFBT0ssSUFDcEYsU0FBU0MsRUFBU0osR0FBUyxJQUFNQyxFQUFLTixFQUFpQixNQUFFSyxJQUFXLE1BQU9HLEdBQUtMLEVBQU9LLElBQ3ZGLFNBQVNGLEVBQUtJLEdBSmxCLElBQWVMLEVBSWFLLEVBQU9DLEtBQU9ULEVBQVFRLEVBQU9MLFFBSjFDQSxFQUl5REssRUFBT0wsTUFKaERBLGFBQWlCTixFQUFJTSxFQUFRLElBQUlOLEdBQUUsU0FBVUcsR0FBV0EsRUFBUUcsT0FJVE8sS0FBS1IsRUFBV0ssR0FDbEdILEdBQU1OLEVBQVlBLEVBQVVhLE1BQU1oQixFQUFTQyxHQUFjLEtBQUtTLFlBR2xFTyxFQUFtQmxCLE1BQVFBLEtBQUtrQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSUMsV0FBY0QsRUFBTSxDQUFFLFFBQVdBLElBRXhERSxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRWQsT0FBTyxJQUd0RCxFQUFRLEdBQ1IsTUFBTWUsRUFBV04sRUFBZ0IsRUFBUSxJQUNuQ08sRUFBc0IsRUFBUSxHQUM5QkMsRUFBUyxFQUFRLEdB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LEVBQVFBLEVBQU96VixRQUFTcVYsR0FHcEVJLEVBQU96VixTQ2xCV3FWLENBQW9CLEkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gaW1wb3J0IHsgdmFsaWRpdHkgfSBmcm9tICcuL2phdmFzY3JpcHRzL3V0aWxzL3ZhbGlkYXRpb25zJ1xyXG4vLyBpbXBvcnQgeyBjb3B5Q2xpcGJvYXJkIH0gZnJvbSAnLi9qYXZhc2NyaXB0cy91dGlscy9mb3JtYXRVdGlscy5qcydcclxucmVxdWlyZShcIi4vc3R5bGVzaGVldHMvc3R5bGUuc2Nzc1wiKTtcclxuY29uc3Qgcm91dGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvcm91dGVyXCIpKTtcclxuY29uc3Qgb3B0aW1pemF0aW9uVXRpbHNfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3V0aWxzL29wdGltaXphdGlvblV0aWxzXCIpO1xyXG5jb25zdCBsb2FkXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9sb2FkXCIpO1xyXG5jb25zdCBjYXJvdXNlbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2V2ZW50L2Nhcm91c2VsXCIpKTtcclxuY29uc3QgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9ldmVudC9pbmRleFwiKSk7XHJcbmNvbnN0IGluZGV4XzIgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvaW5wdXQvaW5kZXhcIikpO1xyXG5jb25zdCBkZWN0ZWN0VGhlbWVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy90aGVtZS9kZWN0ZWN0VGhlbWVcIikpO1xyXG5jb25zdCB0b2dnbGVUaGVtZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3RoZW1lL3RvZ2dsZVRoZW1lXCIpKTtcclxuY29uc3QgbmF2YmFyXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9jb21tb24vbmF2YmFyXCIpO1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbG9hZF8xLmxvY2tCb2R5RWxlbWVudCk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICAvLyBEZWZpbmUgdGhlIG5ldyB3ZWIgY29tcG9uZW50XHJcbiAgICBpZiAoJ2N1c3RvbUVsZW1lbnRzJyBpbiB3aW5kb3cpIHtcclxuICAgICAgICAvLyBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2NoaXAnLCBDaGlwKVxyXG4gICAgICAgIC8vIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZmFuY3ktYnV0dG9uJywgRmFuY3lCdXR0b24sIHsgZXh0ZW5kczogJ2J1dHRvbicgfSlcclxuICAgICAgICAvLyBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ3NqYi1lbnRpdHknLCBFbnRpdHkpXHJcbiAgICAgICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnY2xvc2UtYnV0dG9uJywgQ2xvc2VCdXR0b24pO1xyXG4gICAgfVxyXG59KTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBsb2FkXzEuZGV0ZWN0TG9hZCk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkb21FdmVudHMpO1xyXG53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGRvbUV2ZW50cyk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgZG9tRXZlbnRzKTtcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVUaGVtZV8xLmRlZmF1bHQpO1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5hdmJhcl8xLnRvZ2dsZU5hdmJhck1lbnUpO1xyXG4vLyAhIOyXrOq4sOq5jOyngCDrpqztjKnthqDrp4EgMeywqOuhnCDtlbQg67SELi5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICAgIG9wdGltaXphdGlvblV0aWxzXzEuc3RvcEFuaW1hdGlvbigpO1xyXG4gICAgLy8gbG9ja2JvZHlcclxuICAgIC8vIOyXrOufrCDqsJwg66y27JesIOyeiOydjC5cclxuICAgIC8vIGV2ZW50LnBvc2l0aW9uU3RpY2t5KHsgc2VsZWN0b3I6ICcuanMtdGl0bGViYXInLCBhZGRDbGFzczogJ2lzLXN0aWNreS10aXRsZWJhcicsIGlzUGFzc2VkOiBmYWxzZSB9KVxyXG59KTtcclxuY29uc3QgZGVib3VuY2UgPSAoY2FsbGJhY2ssIGRlbGF5KSA9PiB7XHJcbiAgICBsZXQgdGltZXJJZDtcclxuICAgIHJldHVybiBldmVudCA9PiB7XHJcbiAgICAgICAgLy8gZGVsYXnqsIAg6rK96rO87ZWY6riwIOydtOyghOyXkCDsnbTrsqTtirjqsIAg67Cc7IOd7ZWY66m0IOydtOyghCDtg4DsnbTrqLjrpbwg7Leo7IaM7ZWY6rOgIOyDiOuhnOyatCDtg4DsnbTrqLjrpbwg7J6s7ISk7KCVXHJcbiAgICAgICAgLy8gZGVsYXnrs7Tri6Qg7Ken7J2AIOqwhOqyqeycvOuhnCDsnbTrsqTtirjqsIAg67Cc7IOd7ZWY66m0IGNhbGxiYWNr7J2AIO2YuOy2nOuQmOyngCDslYrripTri6QuXHJcbiAgICAgICAgaWYgKHRpbWVySWQpXHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcclxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXksIGV2ZW50KTtcclxuICAgIH07XHJcbn07XHJcbi8vICEgc2Nyb2xsIHJBRlxyXG5jb25zdCB0aHJvdHRsZTIgPSAoY2FsbGJhY2ssIGRlbGF5KSA9PiB7XHJcbiAgICBsZXQgdGltZXJJZDtcclxuICAgIHJldHVybiBldmVudCA9PiB7XHJcbiAgICAgICAgLy8gZGVsYXnqsIAg6rK96rO87ZWY6riwIOyghOyXkCDsnbTrsqTtirjqsIAg67Cc7IOd7ZWY66m0IOyVhOustOuPmeyekeuPhCDtlZjsp4Ag7JWK64qU64ukLlxyXG4gICAgICAgIC8vIGRlbGF56rCAIOqyveqzvO2WiOydhCDrlYwg7J2067Kk7Yq46rCAIOuwnOyDne2VmOuptOyEnCDsg4jroZzsmrQg7YOA7J2066i466W8IOyerOyEpOygle2VnOuLpC5cclxuICAgICAgICAvLyDrlLDrnbzshJwgZGVsYXkg6rCE6rKp7Jy866GcIGNhbGxiYWNr7J20IO2YuOy2nOuQnOuLpC5cclxuICAgICAgICBpZiAodGltZXJJZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICAgICAgICB0aW1lcklkID0gbnVsbDtcclxuICAgICAgICB9LCBkZWxheSwgZXZlbnQpO1xyXG4gICAgfTtcclxufTtcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlMihzY3JvbGxQcm9ncmVzcywgNTApLCB0cnVlKVxyXG5mdW5jdGlvbiBzY3JvbGxQcm9ncmVzcygpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdCcpO1xyXG4gICAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1oZWFkLXByb2dyZXNzJyk7XHJcbiAgICBpZiAoIWNvbnRhaW5lckVsZW1lbnQgfHwgIXByb2dyZXNzQmFyKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IHNjcm9sbFBlcmNlbnQgPSBgJHsod2luZG93LnBhZ2VZT2Zmc2V0IC8gKGNvbnRhaW5lckVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0KSkgKiAxMDB9JWA7XHJcbiAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNjcm9sbFBlcmNlbnQ7XHJcbn1cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uQ2hhbmdlJywgKCkgPT4gY29uc29sZS5sb2coJ29yaWVudGF0b2luQ2hhbmdlJykpO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IGNvbnNvbGUubG9nKCdsb2FkZWQhJykpO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4gJ+yggOyepeuQmOyngCDslYrsnYAg67OA6rK97IKs7ZWt7J20IOyeiOyKteuLiOuLpC4g7KCV66eQIO2OmOydtOyngOulvCDrlqDrgpjsi6Qg6rG0IOqwgOyalD8nKTtcclxuLy8gYHVubG9hZGAg7J2067Kk7Yq464qUIOyViOygleyggeycvOuhnCDsi6TtlonrkJjsp4Ag7JWK7Jy866mwIOydtCDsnbTrsqTtirjrpbwg66as7Iqk64ud7ZWY66m0IOuSpOuhnC3slZ7snLzroZwg7LqQ7Iuc7JmAIOqwmeydgCDruIzrnbzsmrDsoIAg7LWc7KCB7ZmUIOq4sOuKpeydhCDsgqzsmqntlZjsp4Ag66q77ZWgIOyImCDsnojsirXri4jri6QuIGBwYWdlaGlkZWAg65iQ64qUIGB2aXNpYmlsaXR5Y2hhbmdlYCDsnbTrsqTtirjrpbwg64yA7IugIOyCrOyaqe2VmOyEuOyalC4g7J6Q7IS47Z6IIOyVjOyVhOuztOq4sFxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgKCkgPT4gY29uc29sZS5sb2coJ3VubG9hZCBldmVudCcpKVxyXG4vLyBodHRwczovL3dlYi5kZXYvYmZjYWNoZS8/dXRtX3NvdXJjZT1saWdodGhvdXNlJnV0bV9tZWRpdW09ZGV2dG9vbHMjbmV2ZXItdXNlLXRoZS11bmxvYWQtZXZlbnRcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsICgpID0+IGNvbnNvbGUubG9nKGRvY3VtZW50LnJlYWR5U3RhdGUpKTtcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzY3JvbGxUb1RvcCk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlRGV0YWlscyk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmV2ZWFsUGFzc3dvcmQpO1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlUGFyZW50RWxlbWVudCk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIG1vdXNlZW50ZXJFbGVtZW50KTtcclxuLy8gY29tbW9uIOyalOyGjOuKlCAx67KIIOydtOuypO2KuC4uXHJcbi8vICEgaGFzaGNoYW5nZSDrp4jri6QgY24g7IOd7ISx7ZWY64qUIOqyg+ydtCDrrLjsoJwuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBjYXJvdXNlbF8xLmRlZmF1bHQoKTtcclxufSk7XHJcbmZ1bmN0aW9uIGRvbUV2ZW50cygpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgbmF2SXRlbUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5hdmJhci1tZW51IGEnKTtcclxuICAgICAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gYOydtOqyveyImCAke2hhc2h9YDtcclxuICAgICAgICBjb25zdCB0ZW1wcyA9IFtcclxuICAgICAgICAgICAgJ2RpY3Rpb25hcnknLFxyXG4gICAgICAgICAgICAnaG9tZScsXHJcbiAgICAgICAgICAgICdlbnRpdHknLFxyXG4gICAgICAgICAgICAnJyxcclxuICAgICAgICAgICAgJ21lc3NhZ2luZycsXHJcbiAgICAgICAgICAgICdzZWFyY2gnLFxyXG4gICAgICAgICAgICAnZmlsdGVyJyxcclxuICAgICAgICAgICAgJ3Rva2VucycsXHJcbiAgICAgICAgICAgICdzdWJzY3JpYmUnLFxyXG4gICAgICAgICAgICAnY29tcG9uZW50cycsXHJcbiAgICAgICAgICAgICdjaGFuZ2Vsb2cnLFxyXG4gICAgICAgICAgICAnZHVtbWllcycsXHJcbiAgICAgICAgICAgICd0ZXh0cycsXHJcbiAgICAgICAgICAgICdzaWduaWZpZXInLFxyXG4gICAgICAgICAgICAncHJlc2VudGF0aW9ucycsXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAoIXRlbXBzLmluY2x1ZGVzKGhhc2gpKSB7XHJcbiAgICAgICAgICAgIG5hdmJhcl8xLmluaXRpYWxpemVOYXZiYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaXNIb21lUGFnZSA9ICFoYXNoO1xyXG4gICAgICAgIG5hdkl0ZW1FbGVtZW50cyA9PT0gbnVsbCB8fCBuYXZJdGVtRWxlbWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdkl0ZW1FbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY3VycmVudCcpO1xyXG4gICAgICAgICAgICBjb25zdCBpc0N1cnJlbnRQYWdlID0gKF9hID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluY2x1ZGVzKGhhc2gpO1xyXG4gICAgICAgICAgICBpZiAoIWlzQ3VycmVudFBhZ2UgfHwgaXNIb21lUGFnZSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1jdXJyZW50Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGlzSG9tZVBhZ2UpXHJcbiAgICAgICAgICAgIG5hdkl0ZW1FbGVtZW50c1swXS5jbGFzc0xpc3QuYWRkKCdpcy1jdXJyZW50Jyk7XHJcbiAgICAgICAgLy8gdG9kb1xyXG4gICAgICAgIGNvbnN0IG1lZGlhU2l6ZTc2MCA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiAxMDgwcHgpJyk7XHJcbiAgICAgICAgY29uc3QgY2hhbmdlTWVkaWEgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpc01vYmlsZSA9IGUubWF0Y2hlcztcclxuICAgICAgICAgICAgaWYgKGlzTW9iaWxlKVxyXG4gICAgICAgICAgICAgICAgbmF2YmFyXzEuaW5pdGlhbGl6ZU5hdmJhcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbWVkaWFTaXplNzYwLmFkZExpc3RlbmVyKGNoYW5nZU1lZGlhKTtcclxuICAgICAgICBjaGFuZ2VNZWRpYShtZWRpYVNpemU3NjApO1xyXG4gICAgICAgIGRlY3RlY3RUaGVtZV8xLmRlZmF1bHQoKTtcclxuICAgICAgICBsYXp5TG9hZGluZygpO1xyXG4gICAgICAgIHlpZWxkIHJvdXRlcl8xLmRlZmF1bHQoKTtcclxuICAgICAgICAvLyBjb25zdCBwYWdlID0gcm91dGVzLmZpbmQocm91dGUgPT4gcm91dGUucGF0aC5zdWJzdHJpbmcoMSkgPT09IGhhc2gpXHJcbiAgICAgICAgLy8gY29uc3QgcGFnZVRpdGxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wYWdlLXRpdGxlJylcclxuICAgICAgICAvLyBwYWdlVGl0bGVFbGVtZW50Py50ZXh0Q29udGVudCA9IHBhZ2U/Lm5hbWUgfHwgJ+2OmOydtOyngO2DgOydtO2LgCdcclxuICAgICAgICAvLyBsb2FkTGF6eUltYWdlcygpXHJcbiAgICAgICAgY29uc3QgdGV4dGFyZWExID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhLWV4YW1wbGUtb25lJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dGFyZWEyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhLWV4YW1wbGUtdHdvJyk7XHJcbiAgICAgICAgaWYgKHRleHRhcmVhMSAmJiB0ZXh0YXJlYTIpIHtcclxuICAgICAgICAgICAgdGV4dGFyZWExLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGV4dGFyZWEyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gLy8gISDrlJTsnpDsnbjsi5zsiqTthZzsl5Ag7LaU6rCA7ZWcIOqxsCDsnoTsi5xcclxuICAgICAgICAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGVmYXVsdC1mb250JykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZm9udC1kZWZhdWx0JykpO1xyXG4gICAgICAgIC8vIHRvZG9cclxuICAgICAgICBjb25zdCBzaGVldEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2hlZXQnKTtcclxuICAgICAgICBjb25zdCBzaGVldENsb3NlRWxlbWVudCA9IHNoZWV0RWxlbWVudCA9PT0gbnVsbCB8fCBzaGVldEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNoZWV0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2hlZXQtY2xvc2UnKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgICAgICAgICAgc2hlZXRFbGVtZW50ID09PSBudWxsIHx8IHNoZWV0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2hlZXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXZpc2libGUnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzaGVldENsb3NlRWxlbWVudCA9PT0gbnVsbCB8fCBzaGVldENsb3NlRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2hlZXRDbG9zZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgKF9hID0gc2hlZXRDbG9zZUVsZW1lbnQucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBmdW5jdGlvbiBmb3JtYXQoY29tbWFuZCwgdmFsdWUpIHtcclxuICAgICAgICAvLyAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKGNvbW1hbmQsIGZhbHNlLCB2YWx1ZSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIGluZGV4XzIuZGVmYXVsdC5jaGVja2JveCh7IGNoZWNrQWxsU2VsZWN0b3I6ICcuanMtY2hlY2thbGwnLCBjaGVja1NlbGVjdG9yOiAnLmpzLWNoZWNrJyB9KTtcclxuICAgICAgICBpbmRleF8yLmRlZmF1bHQuZmlsZSgpO1xyXG4gICAgICAgIC8vIGlucHV0LnRleHRhcmVhKClcclxuICAgICAgICBpbmRleF8yLmRlZmF1bHQucXVhbnRpdHkoKTtcclxuICAgICAgICBpbmRleF8xLmRlZmF1bHQudG9nZ2xlRWxlbWVudCh7IHNlbGVjdG9yOiAnLmpzLXRvZ2dsZScgfSk7XHJcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnRhYigpO1xyXG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5tb2RhbCh7IHNlbGVjdG9yOiAnLmpzLW1vZGFsJyB9KTtcclxuICAgICAgICBpbmRleF8xLmRlZmF1bHQucG9zaXRpb25TdGlja3koeyBzZWxlY3RvcjogJy5qcy1wb3N0LWhlYWQnLCBhZGRDbGFzczogJ2lzLXN0aWNreS1wb3N0LWhlYWQnLCBpc1Bhc3NlZDogdHJ1ZSB9KTtcclxuICAgICAgICBpbmRleF8xLmRlZmF1bHQuc2Nyb2xsQW5pbWF0aW9uKHsgc2VsZWN0b3I6ICcuanMtb2JzZXJ2ZXInIH0pO1xyXG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5zY3JvbGxzcHkoeyBtZW51c1NlbGVjdG9yOiAnLmpzLXNjcm9sbHNweS10cmlnZ2VyJywgc2VjdGlvbnNTZWxlY3RvcjogJy5qcy1zY3JvbGxzcHktc2VjdGlvbicgfSk7XHJcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnBhcmFsbGF4KCcuanMtcGFyYWxsYXgnKTtcclxuICAgICAgICAvLyB2YXIgbGFzdFNjcm9sbFRvcCA9IDBcclxuICAgICAgICAvLyBjb25zdCBoZXJvRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvJylcclxuICAgICAgICAvLyBlbGVtZW50IHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHRoZSBhY3R1YWwgdGFyZ2V0IGVsZW1lbnQgb24gd2hpY2ggeW91IGhhdmUgYXBwbGllZCBzY3JvbGwsIHVzZSB3aW5kb3cgaW4gY2FzZSBvZiBubyB0YXJnZXQgZWxlbWVudC5cclxuICAgICAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZSh0ZXN0KSlcclxuICAgICAgICAvLyAvLyB0b2RvXHJcbiAgICAgICAgLy8gZnVuY3Rpb24gdGVzdCgpIHtcclxuICAgICAgICAvLyAgIGlmICghaGVyb0VsZW1lbnQpIHJldHVyblxyXG4gICAgICAgIC8vICAgdmFyIHN0ID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcclxuICAgICAgICAvLyAgIGlmIChzdCA+IGxhc3RTY3JvbGxUb3AgJiYgd2luZG93LnNjcm9sbFkgPiAxMDApIHtcclxuICAgICAgICAvLyAgICAgaGVyb0VsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoJ2lzLWZpeGVkJylcclxuICAgICAgICAvLyAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nVG9wID0gJzE0MHB4J1xyXG4gICAgICAgIC8vICAgfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgaGVyb0VsZW1lbnQ/LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWZpeGVkJylcclxuICAgICAgICAvLyAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nVG9wID0gJzAnXHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgLy8gICBsYXN0U2Nyb2xsVG9wID0gc3QgPD0gMCA/IDAgOiBzdCAvLyBGb3IgTW9iaWxlIG9yIG5lZ2F0aXZlIHNjcm9sbGluZ1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBjYXJvdXNlbF8xLmRlZmF1bHQoKTtcclxuICAgICAgICBmb2N1c0NvbW1lbnQoKTtcclxuICAgICAgICAvLyBjb3VudERvd25DbG9jaygyMCwgJ2RheXMnKVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0LmNsb3Nlc3QoJy5qcy10ZXN0LXRvZ2dsZScpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5wcm9maWxlLWJvZHknKTtcclxuICAgICAgICAgICAgY29uc3Qgc2libGluZ0VsZW1lbnRzID0gWy4uLnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuXTtcclxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdsaXN0JywgdGFyZ2V0Lm5hbWUgPT09ICdsaXN0Jyk7XHJcbiAgICAgICAgICAgIHNpYmxpbmdFbGVtZW50cy5mb3JFYWNoKHNpYmxpbmdFbGVtZW50ID0+IHNpYmxpbmdFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJykpO1xyXG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGZvY3VzQ29tbWVudCgpIHtcclxuICAgIGNvbnN0IGNvbW1lbnRXcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb21tZW50LXdyaXRlJyk7XHJcbiAgICBjb25zdCBjb21tZW50VGV4dGZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWNvbW1lbnQtdGV4dGZpZWxkJyk7XHJcbiAgICBpZiAoIWNvbW1lbnRXcml0ZSB8fCAhY29tbWVudFRleHRmaWVsZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjb21tZW50VGV4dGZpZWxkLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4gY29tbWVudFdyaXRlLmNsYXNzTGlzdC5hZGQoJ2lzLWZvY3VzZWQnKSkpO1xyXG59XHJcbi8vIGxldCBjb21wYW55ID0ge1xyXG4vLyAgIG5hbWU6ICdHaXRodWInLFxyXG4vLyAgIHJldmVudWU6IDIwMDAsXHJcbi8vICAgdXNlcnM6IFtcclxuLy8gICAgIHsgbmFtZTogJ0pvaG4nLCBoYW5kbGU6ICdAam9obicgfSxcclxuLy8gICAgIHsgbmFtZTogJ2RvZScsIGhhbmRsZTogJ0Bkb2UnIH0sXHJcbi8vICAgXSxcclxuLy8gICBnZXRVc2VyTmFtZXMoKSB7XHJcbi8vICAgICByZXR1cm4gdXNlcnMubWFwKHVzZXIgPT4gdXNlci5uYW1lKVxyXG4vLyAgIH0sXHJcbi8vIH1cclxuLy8gY29uc3QgdmFsdWUgPSBjb21wYW55Py5uYW1lID8/ICdkZWZhdWx0IG5hbWUnXHJcbi8vIGNvbnN0IGNvbXBhbnlOYW1lID0gY29tcGFueT8uWyduYW1lJ10gPz8gJ2RlZmF1bHQgdmFsdWUnXHJcbi8vICEgY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXHJcbi8vIFRPRE86IOuPhO2BkOuovO2KuOqwgCDslYTri4jrnbwgZXZlbnQudGFyZ2V0LnBhcmVudCDqsIAg7JWE64uMIOqyg+ydhCDtgbTrpq3tlojsnYQg65WMIOuLpOuLueyVvCDtlZjrgphcclxuLy8gY29uc3QgZmluZENsYXNzUmVjdXJzaXZlID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZGVwdGgpID0+IHtcclxuLy8gLy8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcclxuLy8gXHRjb25zb2xlLmxvZygnZGVwdGg6ICcgKyBkZXB0aCwgZWxlbWVudCk7XHJcbi8vIFx0aWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHJldHVybiBlbGVtZW50O1xyXG4vLyBcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcclxuLy8gfTtcclxuLy8gdmFyIGdldENsb3Nlc3QgPSAoZWxlbSwgc2VsZWN0b3IpID0+IHtcclxuLy8gXHRmb3IgKDsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkge1xyXG4vLyBcdFx0aWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHJldHVybiBlbGVtO1xyXG4vLyBcdH1cclxuLy8gXHRyZXR1cm4gbnVsbDtcclxuLy8gfTtcclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XHJcbi8vIGNvbnN0IGhlbHBlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGV4dGZpZWxkLWhlbHBlcicpO1xyXG4vLyBoZWxwZXJzLmZvckVhY2goaGVscGVyID0+IGhlbHBlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnKTtcclxuLy8gbGV0IGxvZ2luRGF0YSA9IHtlbWFpbDogJycsIHBhc3N3b3JkOiAnJ307XHJcbi8vICBjb25zdCBpc0VtYWlsID0gZXZlbnQudGFyZ2V0ID09PSBlbWFpbDtcclxuLy8gXHRjb25zdCBpc1Bhc3N3b3JkID0gZXZlbnQudGFyZ2V0ID09PSBwYXNzd29yZDtcclxuLy8gXHRjb25zdCBoYW5kbGVWYWxpZGF0ZSA9ICh7IHRhcmdldDogYW55LCB2YWxpZGF0ZTogdm9pZCwgbWVzc2FnZTogYW55IH0pID0+IHtcclxuLy8gXHRcdGlmKHZhbGlkYXRlKSB7XHJcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcclxuLy8gXHRcdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5pbm5lclRleHQgPSAnJztcclxuLy8gXHRcdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4vLyBcdFx0fSBlbHNlIHtcclxuLy8gXHRcdFx0aWYoIXRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybjtcclxuLy8gXHRcdFx0Ly8gY29uc3QgaWQgPSB0YXJnZXQuaWQgfHwgdGFyZ2V0Lm5hbWU7XHJcbi8vIFx0XHRcdC8vIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnZXJyb3ItJyArIGlkKTtcclxuLy8gXHRcdFx0dGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnaXMtaW52YWxpZCcpO1xyXG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmlubmVyVGV4dCA9IG1lc3NhZ2U7XHJcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbi8vIFx0XHR9XHJcbi8vIFx0fTtcclxuLy8gXHRpZihpc1Bhc3N3b3JkKSB7XHJcbi8vIFx0XHRoYW5kbGVWYWxpZGF0ZSh7XHJcbi8vIFx0XHRcdHRhcmdldDogcGFzc3dvcmQsXHJcbi8vIFx0XHRcdHZhbGlkYXRlOiBpc1Bhc3N3b3JkICYmICEodmFsaWRpdHkuaXNMZW5ndGgocGFzc3dvcmQudmFsdWUsIDgpKSxcclxuLy8gXHRcdFx0bWVzc2FnZTogJ+u5hOuwgOuyiO2YuOulvCDrmJHrsJTroZwg7J6F66Cl7ZW06528LidcclxuLy8gXHRcdH0pO1xyXG4vLyBcdH1cclxuLy8gfSk7XHJcbi8vIGV2ZW50LnRhcmdldC5yZXNldCgpO1xyXG4vLyB2YXIgZm9ybSA9IHVzZXJuYW1lLmZvcm07XHJcbi8vIHZhciBlbGVtZW50cyA9IGZvcm0uZWxlbWVudHM7XHJcbi8vIHZhciBoYXNFcnJvciA9IGZ1bmN0aW9uKGZpZWxkKSB7XHJcbi8vIFx0aWYgKGZpZWxkLmRpc2FibGVkIHx8IGZpZWxkLnR5cGUgPT09ICdmaWxlJyB8fCBmaWVsZC50eXBlID09PSAncmVzZXQnIHx8IGZpZWxkLnR5cGUgPT09ICdzdWJtaXQnIHx8IGZpZWxkLnR5cGUgPT09ICdidXR0b24nKSByZXR1cm47XHJcbi8vIFx0dmFyIHZhbGlkaXR5ID0gZmllbGQudmFsaWRpdHk7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnZhbGlkKSByZXR1cm47XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnZhbHVlTWlzc2luZykgcmV0dXJuICdQbGVhc2UgZmlsbCBvdXQgdGhpcyBmaWVsZC4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS50eXBlTWlzbWF0Y2gpIHJldHVybiAnUGxlYXNlIHVzZSB0aGUgY29ycmVjdCBpbnB1dCB0eXBlLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnRvb1Nob3J0KSByZXR1cm4gJ1BsZWFzZSBsZW5ndGhlbiB0aGlzIHRleHQuJztcclxuLy8gXHRpZiAodmFsaWRpdHkudG9vTG9uZykgcmV0dXJuICdQbGVhc2Ugc2hvcnRlbiB0aGlzIHRleHQuJztcclxuLy8gXHRpZiAodmFsaWRpdHkuYmFkSW5wdXQpIHJldHVybiAnUGxlYXNlIGVudGVyIGEgbnVtYmVyLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnN0ZXBNaXNtYXRjaCkgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgdmFsdWUuJztcclxuLy8gXHRpZiAodmFsaWRpdHkucmFuZ2VPdmVyZmxvdykgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgc21hbGxlciB2YWx1ZS4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgbGFyZ2VyIHZhbHVlLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnBhdHRlcm5NaXNtYXRjaCkgcmV0dXJuICdQbGVhc2UgbWF0Y2ggdGhlIHJlcXVlc3RlZCBmb3JtYXQuJztcclxuLy8gXHRyZXR1cm4gJ1RoZSB2YWx1ZSB5b3UgZW50ZXJlZCBmb3IgdGhpcyBmaWVsZCBpcyBpbnZhbGlkLic7XHJcbi8vIH07XHJcbi8vIGNvbnN0IHR0dCA9IGl0ZW0udGFncy5tYXAoaSA9PiBgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke2l9PC9zcGFuPmApLmpvaW4oJycpXHJcbi8vIHZhciBpID0gMDtcclxuLy8gdmFyIGltYWdlcyA9IFsnY292ZXIxLmpwZycsJ2NvdmVyMi5qcGcnXTtcclxuLy8gdmFyIGltYWdlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb3Zlcl9pbWFnZScpO1xyXG4vLyAvLyBpbWFnZS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKC9pbWcvY292ZXIxLmpwZyknKTtcclxuLy8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4vLyBcdGltYWdlRWxlbWVudC5mYWRlT3V0KDEwMDAsICgpID0+IHtcclxuLy8gXHRcdGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKCR7aW1hZ2VzW2krK119KWApO1xyXG4vLyBcdFx0aW1hZ2VFbGVtZW50LmZhZGVJbigxMDAwKTtcclxuLy8gXHR9KTtcclxuLy8gXHRpZihpID09PSBpbWFnZXMubGVuZ3RoKSBpID0gMDtcclxuLy8gfSwgNTAwMCk7XHJcbi8vIGZ1bmN0aW9uIGJ1c3RDYWNoZSgpIHtcclxuLy8gICBjb25zdCBsaW5rRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJylcclxuLy8gICBsaW5rRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuLy8gICAgIGNvbnN0IGlzU3R5bGVzaGVldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyZWwnKSA9PT0gJ3N0eWxlc2hlZXQnXHJcbi8vICAgICBpZiAoIWlzU3R5bGVzaGVldCkgcmV0dXJuXHJcbi8vICAgICBjb25zdCBocmVmID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxyXG4vLyAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuLy8gICAgIGNvbnN0IGNhY2hlQnVzdGVyID0gYCR7aHJlZn0/Y2FjaGVCdXN0ZXI9JHt0aW1lc3RhbXB9YFxyXG4vLyAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBjYWNoZUJ1c3RlcilcclxuLy8gICB9KVxyXG4vLyB9XHJcbi8vIGZ1bmN0aW9uIGFkZFRvUGVuZGluZ1dvcmsocHJvbWlzZSkge1xyXG4vLyAgIGJ1c3lzcGlubmVyLmhpZGRlbiA9IGZhbHNlXHJcbi8vICAgcGVuZGluZ09wcy5hZGQocHJvbWlzZSlcclxuLy8gICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xyXG4vLyAgICAgcGVuZGluZ09wcy5kZWxldGUocHJvbWlzZSlcclxuLy8gICAgIGJ1c3lzcGlubmVyLmhpZGRlbiA9IHBlbmRpbmdPcHMuc2l6ZSA9PT0gMFxyXG4vLyAgIH1cclxuLy8gICBwcm9taXNlLnRoZW4oY2xlYW51cCkuY2F0Y2goY2xlYW51cClcclxuLy8gfVxyXG4vLyAhIHJlZnJlc2gg7J6F66ClIOykkeydvCDrloRcclxuLy8gbGV0IGZvcm1DaGFuZ2VkID0gZmFsc2VcclxuLy8gc2lnbnVwRm9ybT8uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4vLyAgIGZvcm1DaGFuZ2VkID0gdHJ1ZVxyXG4vLyB9KVxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZXZlbnQgPT4ge1xyXG4vLyAgIGlmICghZm9ybUNoYW5nZWQpIHJldHVyblxyXG4vLyAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgLy8g66qo65OgIOu4jOudvOyasOyggOyXkOyEnCDsp4Dsm5DtlZjripQg6rKD7J2AIOyVhOuLmC5cclxuLy8gICBldmVudC5yZXR1cm5WYWx1ZSA9ICfthYzsiqTtirgnXHJcbi8vIH0pXHJcbmxldCBjdXJyZW50UGFnZSA9IDE7XHJcbmNvbnN0IERBVEFfUEVSX1BBR0UgPSAxMDtcclxuY29uc3QgbGFzdFBhZ2UgPSAxMDtcclxuZnVuY3Rpb24gZmV0Y2hEYXRhKGN1cnJlbnRQYWdlKSB7XHJcbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvb3RlcicpO1xyXG4gICAgaWYgKCFsaXN0KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGZvciAobGV0IGkgPSAoY3VycmVudFBhZ2UgLSAxKSAqIERBVEFfUEVSX1BBR0UgKyAxOyBpIDw9IGN1cnJlbnRQYWdlICogREFUQV9QRVJfUEFHRTsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgIGxpLnRleHRDb250ZW50ID0gYCR7Y3VycmVudFBhZ2V97Y6Y7J207KeAIDogJHtpfeuyiOynuCDrjbDsnbTthLBgO1xyXG4gICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobGkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG9ic2VydmVMYXN0Q2hpbGQoaW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcclxuICAgIGNvbnN0IGxpc3RJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb290ZXIgbGknKTtcclxuICAgIGxpc3RJdGVtcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmIChjdXJyZW50UGFnZSA+PSBsYXN0UGFnZSkge1xyXG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVsZW1lbnQubmV4dFNpYmxpbmcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpOyAvLyBlbOyXkCDrjIDtlZjsl6wg6rSA7LihIOyLnOyekVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2Nyb2xsVG9Ub3AoZXZlbnQpIHtcclxuICAgIGlmICghZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy10by10b3AnKSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG59XHJcbmZ1bmN0aW9uIHRvZ2dsZURldGFpbHMoZXZlbnQpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGlmICghZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy1hY2NvcmRpb24nKSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy1hY2NvcmRpb24nKTtcclxuICAgIChfYSA9IHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmFjY29yZGlvbi1wYW5lbCcpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSk7XHJcbiAgICBsZXQgaXNFeHBhbmRlZCA9IEJvb2xlYW4odGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSk7XHJcbiAgICB0YXJnZXRFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFN0cmluZyghaXNFeHBhbmRlZCkpO1xyXG4gICAgdGFyZ2V0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuICAgIC8vIDEuIO2BtOumre2VnCDtjKjrhJDsnYQg7Yag6riA7ZWc64ukLlxyXG4gICAgLy8gMi4g64uk66W4IGFjY29yZGlvbi1pdGVt7J2EIO2BtOumre2WiOydhCDrlYwg64ur7J2EIOqyg+yduOyngD9cclxuICAgIC8vIDMuIOuPhO2BkOuovO2KuOulvCDtgbTrpq3tlZjrqbQg64ur7J2EIOqyg+yduOyngD9cclxuICAgIC8vIDQuIHBhbmVs7J2EIO2BtOumre2VmOuptCDri6vsnYQg6rKD7J247KeAP1xyXG59XHJcbmZ1bmN0aW9uIHJldmVhbFBhc3N3b3JkKGV2ZW50KSB7XHJcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy12aWV3LXBhc3N3b3JkJyk7XHJcbiAgICBpZiAoIXRhcmdldEVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID0gdGFyZ2V0RWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XHJcbiAgICBjb25zdCBpc1Bhc3N3b3JkVHlwZSA9IGlucHV0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gJ3Bhc3N3b3JkJztcclxuICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBpc1Bhc3N3b3JkVHlwZSA/ICd0ZXh0JyA6ICdwYXNzd29yZCcpO1xyXG59XHJcbmZ1bmN0aW9uIGxhenlMb2FkaW5nKCkge1xyXG4gICAgaWYgKCEoJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHx8XHJcbiAgICAgICAgISgnSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeScgaW4gd2luZG93KSB8fFxyXG4gICAgICAgICEoJ2ludGVyc2VjdGlvblJhdGlvJyBpbiB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGUpKSB7XHJcbiAgICAgICAgLy8gbG9hZCBwb2x5ZmlsbCBub3dcclxuICAgIH1cclxuICAgIGNvbnN0IGxhenlCYWNrZ3JvdW5kcyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvb3RlcicpKTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgcm9vdDogbnVsbCxcclxuICAgICAgICByb290TWFyZ2luOiAnMHB4IDBweCAwcHggMHB4JyxcclxuICAgICAgICB0aHJlc2hvbGQ6IDAuMjUsXHJcbiAgICB9O1xyXG4gICAgbGV0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRpb25zKTtcclxuICAgIGxhenlCYWNrZ3JvdW5kcy5mb3JFYWNoKGVsZW1lbnQgPT4gb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KSk7XHJcbiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbnRyaWVzLCBvYnNlcnZlcikge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZW50cnkuaXNJbnRlcnNlY3RpbmcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAvLyAhIGluZmluaXRlIHNjcm9sbFxyXG4gICAgICAgICAgICAvLyBmZXRjaERhdGEoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc3QgZmV0Y2hQb3N0czogKCkgPT4gUHJvbWlzZTxIVFRQUmVzcG9uc2U8eyBwb3N0czogYW55W10gfT4+ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgZnVuY3Rpb24gZmV0Y2hEYXRhKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBVUkwgPSAnaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9wcm9mM3Nzb3JTdDN2My8xOTQ0ZTdiYTdmZmI2MmZlNzcxYzUxNzY0Zjc5NzdhNC9yYXcvYzU4YTM0MmFiMTQ5ZmJiYjliYjE5Yzk0ZTI3OGQ2NDcwMjgzMzI3MC9pbmZpbml0ZS5qc29uJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2goVVJMKTtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1NvbWV0aGluZyB3ZW50IHdyb25nLic7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgIGRhdGEuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdG9kbyBmcmFnbWVudEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpZXcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxkaXYgc3R5bGU9XCJoZWlnaHQ6MTIwcHg7bGluZS1oZWlnaHQ6MTIwcHg7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1hY2NlbnQpO3RleHQtYWxpZ246Y2VudGVyO1wiPuustO2VnOyKpO2BrOuhpCAke2l0ZW0ubmFtZX08L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gb25Nb3VzZVVwKGUpIHtcclxuICAgIGNvbnN0IGFjdGl2ZVRleHRhcmVhID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuICAgIGNvbnN0IHsgaWQsIHZhbHVlLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kIH0gPSBhY3RpdmVUZXh0YXJlYTtcclxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKTtcclxuICAgIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb3V0cHV0LWVsZW1lbnQnKTtcclxuICAgIGNvbnN0IG91dHB1dFRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb3V0cHV0LXRleHQnKTtcclxuICAgIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gaWQ7XHJcbiAgICBvdXRwdXRUZXh0LmlubmVySFRNTCA9IHNlbGVjdGlvbjtcclxuICAgIGNvbnNvbGUubG9nKGFjdGl2ZVRleHRhcmVhLnRhYkluZGV4KTtcclxufVxyXG5mdW5jdGlvbiBjbG9zZVBhcmVudEVsZW1lbnQoZXZlbnQpIHtcclxuICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmpzLWNsb3NlJyk7XHJcbiAgICBpZiAoIXRhcmdldEVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdGFyZ2V0RWxlbWVudC5wYXJlbnROb2RlLmhpZGRlbiA9IHRydWU7XHJcbn1cclxuLy8gY29uc3QgdGFyZ2V0RWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PignLmpzLXBhcmFsbGF4LXRlc3QnKVxyXG4vLyBjb25zdCB0dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KCcuanMtcGFyYWxsYXgtcGFyZW50JylcclxuLy8gLy8gaW5pdGlhbGl6ZVxyXG4vLyB0YXJnZXRFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4vLyAgIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IGAwYFxyXG4vLyB9KVxyXG4vLyBpZih0dCkge1xyXG4vLyAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZSgoKSA9PiB7XHJcbi8vICAgICBsZXQgcmF0ZTIgPSBNYXRoLmFicyh3aW5kb3cucGFnZVlPZmZzZXQpICogMC4xXHJcbi8vICAgICBsZXQgb2Zmc2V0Qm90dG9tID0gdHQub2Zmc2V0VG9wICsgdHQub2Zmc2V0SGVpZ2h0XHJcbi8vICAgICBsZXQgaXNTY3JvbGxlZCA9IHdpbmRvdy5wYWdlWU9mZnNldCA+IG9mZnNldEJvdHRvbSAvIDEuNVxyXG4vLyAgICAgaWYoaXNTY3JvbGxlZCkge1xyXG4vLyAgICAgICBjb25zb2xlLmxvZyhTdHJpbmcoKHJhdGUyIC8gMTAwKS50b0ZpeGVkKDEpKSlcclxuLy8gICAgICAgdHQuc3R5bGUub3BhY2l0eSA9IFN0cmluZygoLXJhdGUyIC8gMTAwKS50b0ZpeGVkKDEpKVxyXG4vLyAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgdHQuc3R5bGUub3BhY2l0eSA9IFN0cmluZygocmF0ZTIgLyAxMDApLnRvRml4ZWQoMSkpXHJcbi8vICAgICB9XHJcbi8vICAgfSkpXHJcbi8vIH1cclxuLy8gMjIyMi4wMi4wMiBtZW517JeQ7IScIOygnOqxsCBuYXZiYXItbWVudS1pdGVtIGhhcy1zdWJtZW51IGpzLWhvdmVyLXRyaWdnZXJcclxuZnVuY3Rpb24gbW91c2VlbnRlckVsZW1lbnQoZXZlbnQpIHtcclxuICAgIC8vIG1vdXNlb3ZlciDrsoTruJTrp4EuY2xvc2VzdC7sl6zrn6zrsojsi6TtlokgLyBtb3VzZWVudGVyIO2VnOuyiOyLpO2WiS5jbG9zZXN0ZGtzZWhsYVxyXG4gICAgY29uc3QgQUNUSVZFX0NMQVNTTkFNRSA9ICdpcy1hY3RpdmUnO1xyXG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuanMtaG92ZXItdHJpZ2dlcicpO1xyXG4gICAgLy8gdG9kbyBob3ZlcmVsZW1lbnRcclxuICAgIC8vIHRvZG8gbW91c2VvdXQgdnMgZWxzZVxyXG4gICAgaWYgKHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICB0YXJnZXRFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKEFDVElWRV9DTEFTU05BTUUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhBQ1RJVkVfQ0xBU1NOQU1FKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIGhvdmVyRWxlbWVudD8uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkVfQ0xBU1NOQU1FKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBCb2R5IHtcclxuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5ib2R5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gICAgfVxyXG4gICAgZ2V0RWxlbWVudCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmJvZHlFbGVtZW50KTtcclxuICAgIH1cclxuICAgIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZXMpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5ib2R5RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lcyk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgdGVzdDEgPSBuZXcgQm9keSgnYm9keScpO1xyXG5jb25zb2xlLmxvZygnQEBAQEAnLCB0ZXN0MS5nZXRFbGVtZW50KCkpO1xyXG50ZXN0MS50b2dnbGVDbGFzcygnZnVjaycpO1xyXG5jbGFzcyBDbG9zZUJ1dHRvbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXHJcbiAgICAgIDxidXR0b24gY2xhc3M9XCJjaGlwXCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkXCI+Y2xvc2U8L3NwYW4+XHJcbiAgICAgIDwvYnV0dD5cclxuICAgIGA7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGNvbnNvbGUubG9nKCd0ZXN0JykpO1xyXG4gICAgfVxyXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCEnLCB0aGlzKTtcclxuICAgIH1cclxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0ZWQnLCB0aGlzKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4WlFVRlpMRU5CUVVFN096czdPenM3T3pzN096czdPMEZCUlZvc05rUkJRVFpFTzBGQlF6ZEVMSEZGUVVGeFJUdEJRVVZ5UlN4dlEwRkJhVU03UVVGRmFrTXNhMFZCUVRSRE8wRkJRelZETERaRlFVRXJSVHRCUVVVdlJTdzJRMEZCYlVZN1FVRkRia1lzTkVWQlFXMUVPMEZCUTI1RUxITkZRVUUyUXp0QlFVTTNReXh6UlVGQk5rTTdRVUZGTjBNc2IwWkJRVEJFTzBGQlF6RkVMR3RHUVVGNVJEdEJRVVY2UkN4M1JFRkJaMFk3UVVGRmFFWXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxITkNRVUZsTEVOQlFVTXNRMEZCUVR0QlFVTTVSQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNSMEZCUnl4RlFVRkZPMGxCUTJwRUxDdENRVUVyUWp0SlFVTXZRaXhKUVVGSkxHZENRVUZuUWl4SlFVRkpMRTFCUVUwc1JVRkJSVHRSUVVNNVFpeHpRMEZCYzBNN1VVRkRkRU1zTkVWQlFUUkZPMUZCUXpWRkxEaERRVUU0UXp0UlFVTTVReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNRMEZCUXl4alFVRmpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVUU3UzBGRE1VUTdRVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVWR0xFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzYVVKQlFWVXNRMEZCUXl4RFFVRkJPMEZCUlRORExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRVHRCUVVONFJDeE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkJPMEZCUTI1RUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVRTdRVUZGYUVRc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3h4UWtGQlZ5eERRVUZETEVOQlFVRTdRVUZGTDBNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3g1UWtGQlowSXNRMEZCUXl4RFFVRkJPMEZCUlhCRUxIZENRVUYzUWp0QlFVVjRRaXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNSMEZCUnl4RlFVRkZPMGxCUTJwRUxHbERRVUZoTEVWQlFVVXNRMEZCUVR0SlFVTm1MRmRCUVZjN1NVRkRXQ3hqUVVGak8wbEJRMlFzYzBkQlFYTkhPMEZCUTNoSExFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlJVWXNUVUZCVFN4UlFVRlJMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVTdTVUZEYmtNc1NVRkJTU3hQUVVGUExFTkJRVUU3U1VGRFdDeFBRVUZQTEV0QlFVc3NRMEZCUXl4RlFVRkZPMUZCUTJJc2MwUkJRWE5FTzFGQlEzUkVMR2RFUVVGblJEdFJRVU5vUkN4SlFVRkpMRTlCUVU4N1dVRkJSU3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdVVUZEYkVNc1QwRkJUeXhIUVVGSExGVkJRVlVzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGQk8wbEJRemxETEVOQlFVTXNRMEZCUVR0QlFVTklMRU5CUVVNc1EwRkJRVHRCUVVWRUxHVkJRV1U3UVVGRFppeE5RVUZOTEZOQlFWTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJUdEpRVU53UXl4SlFVRkpMRTlCUVU4c1EwRkJRVHRKUVVOWUxFOUJRVThzUzBGQlN5eERRVUZETEVWQlFVVTdVVUZEWWl4NVEwRkJlVU03VVVGRGVrTXNNa05CUVRKRE8xRkJRek5ETEdsRFFVRnBRenRSUVVOcVF5eEpRVUZKTEU5QlFVODdXVUZCUlN4UFFVRk5PMUZCUTI1Q0xFOUJRVThzUjBGQlJ5eFZRVUZWTEVOQlEyeENMRWRCUVVjc1JVRkJSVHRaUVVOSUxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0WlFVTm1MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVUU3VVVGRGFFSXNRMEZCUXl4RlFVTkVMRXRCUVVzc1JVRkRUQ3hMUVVGTExFTkJRMDRzUTBGQlFUdEpRVU5JTEVOQlFVTXNRMEZCUVR0QlFVTklMRU5CUVVNc1EwRkJRVHRCUVVORUxIbEZRVUY1UlR0QlFVVjZSU3hUUVVGVExHTkJRV003U1VGRGNrSXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRTlCUVU4c1EwRkJReXhEUVVGQk8wbEJRM0pGTEUxQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zY1VKQlFYRkNMRU5CUVVNc1EwRkJRVHRKUVVNNVJTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTzFGQlFVVXNUMEZCVFR0SlFVVTNReXhOUVVGTkxHRkJRV0VzUjBGQlJ5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJRVHRKUVVNM1J5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhoUVVGaExFTkJRVUU3UVVGRGVrTXNRMEZCUXp0QlFVVkVMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOd1JpeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTTNSQ3hOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1kwRkJZeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEhWRFFVRjFReXhEUVVGRExFTkJRVUU3UVVGRmRFWXNaMHBCUVdkS08wRkJRMmhLTEhWRlFVRjFSVHRCUVVOMlJTeG5SMEZCWjBjN1FVRkZhRWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRmNrWXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRVHRCUVVNdlF5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkJPMEZCUTJwRUxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVRTdRVUZEYkVRc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4RFFVRkJPMEZCUlhSRUxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhYUVVGWExFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1EwRkJRVHRCUVVWNlJDeHpRa0ZCYzBJN1FVRkRkRUlzYVVOQlFXbERPMEZCUTJwRExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4SFFVRkhMRVZCUVVVN1NVRkRha1FzYTBKQlFWRXNSVUZCUlN4RFFVRkJPMEZCUTFvc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFJpeFRRVUZsTEZOQlFWTTdPenRSUVVOMFFpeE5RVUZOTEdWQlFXVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlFUdFJRVU51UlN4TlFVRk5MRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRk9VTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1IwRkJSeXhQUVVGUExFbEJRVWtzUlVGQlJTeERRVUZCTzFGQlJUbENMRTFCUVUwc1MwRkJTeXhIUVVGSE8xbEJRMW9zV1VGQldUdFpRVU5hTEUxQlFVMDdXVUZEVGl4UlFVRlJPMWxCUTFJc1JVRkJSVHRaUVVOR0xGZEJRVmM3V1VGRFdDeFJRVUZSTzFsQlExSXNVVUZCVVR0WlFVTlNMRkZCUVZFN1dVRkRVaXhYUVVGWE8xbEJRMWdzV1VGQldUdFpRVU5hTEZkQlFWYzdXVUZEV0N4VFFVRlRPMWxCUTFRc1QwRkJUenRaUVVOUUxGZEJRVmM3V1VGRFdDeGxRVUZsTzFOQlEyaENMRU5CUVVFN1VVRkZSQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVONlFpeDVRa0ZCWjBJc1JVRkJSU3hEUVVGQk8xTkJRMjVDTzFGQlEwUXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVUU3VVVGRmVFSXNaVUZCWlN4aFFVRm1MR1ZCUVdVc2RVSkJRV1lzWlVGQlpTeERRVUZGTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHM3V1VGRGFrTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVRTdXVUZGZEVNc1RVRkJUU3hoUVVGaExGTkJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc01FTkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMWxCUTJ4RkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVsQlFVa3NWVUZCVlR0blFrRkJSU3hQUVVGTk8xbEJRM2hETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFGQlEzSkRMRU5CUVVNc1JVRkJRenRSUVVWR0xFbEJRVWtzVlVGQlZUdFpRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMUZCUlRsRUxFOUJRVTg3VVVGRFVDeE5RVUZOTEZsQlFWa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVFN1VVRkROMFFzVFVGQlRTeFhRVUZYTEVkQlFVY3NWVUZCVXl4RFFVRkRPMWxCUXpWQ0xFMUJRVTBzVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVFN1dVRkZNVUlzU1VGQlNTeFJRVUZSTzJkQ1FVRkZMSGxDUVVGblFpeEZRVUZGTEVOQlFVRTdVVUZEYkVNc1EwRkJReXhEUVVGQk8xRkJRMFFzV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRSUVVOeVF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1VVRkZla0lzYzBKQlFWY3NSVUZCUlN4RFFVRkJPMUZCUTJJc1YwRkJWeXhGUVVGRkxFTkJRVUU3VVVGRFlpeE5RVUZOTEdkQ1FVRlRMRVZCUVVVc1EwRkJRVHRSUVVWcVFpeHpSVUZCYzBVN1VVRkRkRVVzYjBWQlFXOUZPMUZCUTNCRkxIbEVRVUY1UkR0UlFVVjZSQ3h0UWtGQmJVSTdVVUZGYmtJc1RVRkJUU3hUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZCTzFGQlF6TkVMRTFCUVUwc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlFUdFJRVVV6UkN4SlFVRkpMRk5CUVZNc1NVRkJTU3hUUVVGVExFVkJRVVU3V1VGRE1VSXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3V1VGRGRrUXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3VTBGRGVFUTdVVUZGUkN4M1FrRkJkMEk3VVVGRGVFSXNUVUZCUVN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMREJEUVVGRkxHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVWQlFVTTdVVUZGTTBnc1QwRkJUenRSUVVOUUxFMUJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRGVFUXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFpRVUZaTEdGQlFWb3NXVUZCV1N4MVFrRkJXaXhaUVVGWkxFTkJRVVVzWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVUU3VVVGRmVFVXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVN1dVRkRia01zV1VGQldTeGhRVUZhTEZsQlFWa3NkVUpCUVZvc1dVRkJXU3hEUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RlFVRkRPMUZCUXpORExFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEwWXNhVUpCUVdsQ0xHRkJRV3BDTEdsQ1FVRnBRaXgxUWtGQmFrSXNhVUpCUVdsQ0xFTkJRVVVzWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJUczdXVUZEYUVRc1RVRkJRU3hwUWtGQmFVSXNRMEZCUXl4aFFVRmhMREJEUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkRPMUZCUTJwRkxFTkJRVU1zUlVGQlF6dFJRVVZHTEc5RFFVRnZRenRSUVVOd1F5eHBSRUZCYVVRN1VVRkRha1FzU1VGQlNUdFJRVVZLTEdWQlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4alFVRmpMRVZCUVVVc1lVRkJZU3hGUVVGRkxGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVRTdVVUZEYUVZc1pVRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZCTzFGQlExb3NiVUpCUVcxQ08xRkJRMjVDTEdWQlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRVHRSUVVWb1FpeGxRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVRTdVVUZGTDBNc1pVRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZCTzFGQlExZ3NaVUZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxGRkJRVkVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkJPMUZCUlhSRExHVkJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1pVRkJaU3hGUVVGRkxGRkJRVkVzUlVGQlJTeHhRa0ZCY1VJc1JVRkJSU3hSUVVGUkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUVR0UlFVVndSeXhsUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMR05CUVdNc1JVRkJSU3hEUVVGRExFTkJRVUU3VVVGRmJrUXNaVUZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxHRkJRV0VzUlVGQlJTeDFRa0ZCZFVJc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4MVFrRkJkVUlzUlVGQlJTeERRVUZETEVOQlFVRTdVVUZGZEVjc1pVRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUVR0UlFVVTVRaXgzUWtGQmQwSTdVVUZEZUVJc2MwUkJRWE5FTzFGQlEzUkVMSFZKUVVGMVNUdFJRVU4yU1N4elJFRkJjMFE3VVVGRmRFUXNWVUZCVlR0UlFVTldMRzlDUVVGdlFqdFJRVU53UWl3MlFrRkJOa0k3VVVGRk4wSXNjMFZCUVhORk8xRkJRM1JGTEhORVFVRnpSRHRSUVVOMFJDdzJRMEZCTmtNN1VVRkROME1zSzBOQlFTdERPMUZCUXk5RExHRkJRV0U3VVVGRFlpeG5SRUZCWjBRN1VVRkRhRVFzTWtOQlFUSkRPMUZCUXpORExFMUJRVTA3VVVGRlRpeDVSVUZCZVVVN1VVRkRla1VzU1VGQlNUdFJRVVZLTEd0Q1FVRlJMRVZCUVVVc1EwRkJRVHRSUVVOV0xGbEJRVmtzUlVGQlJTeERRVUZCTzFGQlEyUXNOa0pCUVRaQ08xRkJSVGRDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkRla01zVFVGQlRTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVdFc1EwRkJRVHRaUVVOc1F5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0blFrRkJSU3hQUVVGTk8xbEJSVGxETEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRVHRaUVVONFJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0WlFVVXhSQ3huUWtGQlowSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4TFFVRkxMRTFCUVUwc1EwRkJReXhEUVVGQk8xbEJSV3BGTEdWQlFXVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEzcEdMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMUZCUTNKRExFTkJRVU1zUTBGQlF5eERRVUZCT3p0RFFVTklPMEZCUlVRc1UwRkJVeXhaUVVGWk8wbEJRMjVDTEUxQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zYlVKQlFXMUNMRU5CUVVNc1EwRkJRVHRKUVVNM1JTeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJZeXgxUWtGQmRVSXNRMEZCUXl4RFFVRkJPMGxCUTNoR0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VVVGQlJTeFBRVUZOTzBsQlJUbERMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTNoSUxFTkJRVU03UVVGRlJDeHJRa0ZCYTBJN1FVRkRiRUlzYjBKQlFXOUNPMEZCUTNCQ0xHMUNRVUZ0UWp0QlFVTnVRaXhoUVVGaE8wRkJRMklzZVVOQlFYbERPMEZCUTNwRExIVkRRVUYxUXp0QlFVTjJReXhQUVVGUE8wRkJRMUFzY1VKQlFYRkNPMEZCUTNKQ0xEQkRRVUV3UXp0QlFVTXhReXhQUVVGUE8wRkJRMUFzU1VGQlNUdEJRVU5LTEdkRVFVRm5SRHRCUVVOb1JDd3lSRUZCTWtRN1FVRkZNMFFzYVVSQlFXbEVPMEZCUTJwRUxEUkVRVUUwUkR0QlFVTTFSQ3c0UkVGQk9FUTdRVUZET1VRc0swTkJRU3RETzBGQlF5OURMRFJEUVVFMFF6dEJRVU0xUXl3NFJFRkJPRVE3UVVGRE9VUXNOa1ZCUVRaRk8wRkJRemRGTEV0QlFVczdRVUZGVEN4NVEwRkJlVU03UVVGRGVrTXNLMFJCUVN0RU8wRkJReTlFTERaRFFVRTJRenRCUVVNM1F5eExRVUZMTzBGQlEwd3NaMEpCUVdkQ08wRkJRMmhDTEV0QlFVczdRVUZGVEN4blJFRkJaMFE3UVVGRGFFUXNhMFZCUVd0Rk8wRkJRMnhGTERSRVFVRTBSRHRCUVVNMVJDdzJRMEZCTmtNN1FVRkZOME1zTWtOQlFUSkRPMEZCUXpORExHbEVRVUZwUkR0QlFVVnFSQ3dyUlVGQkswVTdRVUZETDBVc2JVSkJRVzFDTzBGQlEyNUNMSFZFUVVGMVJEdEJRVU4yUkN3clEwRkJLME03UVVGREwwTXNkVVJCUVhWRU8wRkJRM1pFTEdGQlFXRTdRVUZEWWl3MFEwRkJORU03UVVGRE5VTXNOa05CUVRaRE8wRkJRemRETEdkRlFVRm5SVHRCUVVOb1JTeHZSRUZCYjBRN1FVRkRjRVFzYjBSQlFXOUVPMEZCUTNCRUxIZEVRVUYzUkR0QlFVTjRSQ3hOUVVGTk8wRkJRMDRzVFVGQlRUdEJRVVZPTEc5Q1FVRnZRanRCUVVOd1FpeHhRa0ZCY1VJN1FVRkRja0lzZFVKQlFYVkNPMEZCUTNaQ0xITkZRVUZ6UlR0QlFVTjBSU3huUTBGQlowTTdRVUZEYUVNc1VVRkJVVHRCUVVOU0xFdEJRVXM3UVVGRlRDeE5RVUZOTzBGQlJVNHNkMEpCUVhkQ08wRkJSWGhDTERSQ1FVRTBRanRCUVVNMVFpeG5RMEZCWjBNN1FVRkZhRU1zYlVOQlFXMURPMEZCUTI1RExIZEpRVUYzU1R0QlFVVjRTU3hyUTBGQmEwTTdRVUZEYkVNc0swSkJRU3RDTzBGQlJTOUNMRzlGUVVGdlJUdEJRVU53UlN3eVJVRkJNa1U3UVVGRE0wVXNLMFJCUVN0RU8wRkJReTlFTERaRVFVRTJSRHRCUVVNM1JDd3lSRUZCTWtRN1FVRkRNMFFzY1VWQlFYRkZPMEZCUTNKRkxIZEZRVUYzUlR0QlFVTjRSU3gzUlVGQmQwVTdRVUZEZUVVc09FVkJRVGhGTzBGQlJUbEZMRGhFUVVFNFJEdEJRVU01UkN4TFFVRkxPMEZCUlV3c01rVkJRVEpGTzBGQlJUTkZMR0ZCUVdFN1FVRkRZaXcwUTBGQk5FTTdRVUZETlVNc05rUkJRVFpFTzBGQlF6ZEVMRFJFUVVFMFJEdEJRVU0xUkN4elFrRkJjMEk3UVVGRGRFSXNjME5CUVhORE8wRkJRM1JETEdsRlFVRnBSVHRCUVVOcVJTd3JRa0ZCSzBJN1FVRkRMMElzVDBGQlR6dEJRVU5RTEd0RFFVRnJRenRCUVVOc1F5eFpRVUZaTzBGQlJWb3NlVUpCUVhsQ08wRkJRM3BDTERKRVFVRXlSRHRCUVVNelJDeHpRMEZCYzBNN1FVRkRkRU1zZDBWQlFYZEZPMEZCUTNoRkxHZERRVUZuUXp0QlFVVm9ReXhuUkVGQlowUTdRVUZEYUVRc05rTkJRVFpETzBGQlF6ZERMRFpFUVVFMlJEdEJRVU0zUkN4blJFRkJaMFE3UVVGRGFFUXNUMEZCVHp0QlFVTlFMRWxCUVVrN1FVRkZTaXgxUTBGQmRVTTdRVUZEZGtNc0swSkJRU3RDTzBGQlF5OUNMRFJDUVVFMFFqdEJRVU0xUWl3MFFrRkJORUk3UVVGRE5VSXNhVU5CUVdsRE8wRkJRMnBETEdsRVFVRnBSRHRCUVVOcVJDeE5RVUZOTzBGQlEwNHNlVU5CUVhsRE8wRkJRM3BETEVsQlFVazdRVUZGU2l4dlFrRkJiMEk3UVVGRGNFSXNNRUpCUVRCQ08wRkJRekZDTEdsRVFVRnBSRHRCUVVOcVJDeDFRa0ZCZFVJN1FVRkRka0lzUzBGQlN6dEJRVU5NTEhGRVFVRnhSRHRCUVVOeVJDdzJRa0ZCTmtJN1FVRkROMElzYjBSQlFXOUVPMEZCUTNCRUxEaENRVUU0UWp0QlFVTTVRaXhMUVVGTE8wRkJSVXdzU1VGQlNTeFhRVUZYTEVkQlFVY3NRMEZCUXl4RFFVRkJPMEZCUTI1Q0xFMUJRVTBzWVVGQllTeEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVTjRRaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVRTdRVUZGYmtJc1UwRkJVeXhUUVVGVExFTkJRVU1zVjBGQlZ6dEpRVU0xUWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMGxCUXpsRExFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlFVVXNUMEZCVFR0SlFVVnFRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExHRkJRV0VzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRmRCUVZjc1IwRkJSeXhoUVVGaExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdVVUZEZWtZc1RVRkJUU3hGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRSUVVOMlF5eEZRVUZGTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWRCUVVjc1YwRkJWeXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZCTzFGQlEycEVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVRTdTMEZEY2tJN1FVRkRTQ3hEUVVGRE8wRkJSVVFzVTBGQlV5eG5Ra0ZCWjBJc1EwRkJReXh2UWtGQmIwSTdTVUZETlVNc1RVRkJUU3hUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlEzcEVMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdVVUZETVVJc1NVRkJTU3hYUVVGWExFbEJRVWtzVVVGQlVTeEZRVUZGTzFsQlF6TkNMRzlDUVVGdlFpeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkJPMWxCUTJwRExFOUJRVTA3VTBGRFVEdFJRVU5FTEVsQlFVa3NUMEZCVHl4RFFVRkRMRmRCUVZjN1dVRkJSU3hQUVVGTk8xRkJSUzlDTEc5Q1FVRnZRaXhEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVN4RFFVRkRMR2RDUVVGblFqdEpRVU40UkN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZUTEZkQlFWY3NRMEZCUXl4TFFVRkxPMGxCUTNoQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU03VVVGQlJTeFBRVUZOTzBsQlJTOURMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdEpRVU4wUWl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTjJRaXhEUVVGRE8wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlFVTXNTMEZCU3pzN1NVRkRNVUlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF6dFJRVUZGTEU5QlFVMDdTVUZGYkVRc1RVRkJUU3hoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVUU3U1VGRk0wUXNUVUZCUVN4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMREJEUVVGRkxHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4bFFVRmxMRVZCUVVVc1JVRkJRenRKUVVVMVJ5eEpRVUZKTEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTNKRkxHRkJRV0VzUTBGQlF5eFpRVUZaTEVOQlFVTXNaVUZCWlN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEYUVVc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1NVRkZNME1zYlVKQlFXMUNPMGxCUTI1Q0xIVkRRVUYxUXp0SlFVTjJReXgzUWtGQmQwSTdTVUZEZUVJc2VVSkJRWGxDTzBGQlF6TkNMRU5CUVVNN1FVRkZSQ3hUUVVGVExHTkJRV01zUTBGQlF5eExRVUZMTzBsQlF6TkNMRTFCUVUwc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRzFDUVVGdFFpeERRVUZSTEVOQlFVRTdTVUZEZEVVc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJURkNMRTFCUVUwc1dVRkJXU3hIUVVGSExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wbEJRM0JGTEUxQlFVMHNZMEZCWXl4SFFVRkhMRmxCUVZrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NWVUZCVlN4RFFVRkJPMGxCUlhaRkxGbEJRVmtzUTBGQlF5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RlFVRkZMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRCUVVONlJTeERRVUZETzBGQlJVUXNVMEZCVXl4WFFVRlhPMGxCUTJ4Q0xFbEJRMFVzUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhKUVVGSkxFMUJRVTBzUTBGQlF6dFJRVU51UXl4RFFVRkRMRU5CUVVNc01rSkJRVEpDTEVsQlFVa3NUVUZCVFN4RFFVRkRPMUZCUTNoRExFTkJRVU1zUTBGQlF5eHRRa0ZCYlVJc1NVRkJTU3hOUVVGTkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRM0JGTzFGQlEwRXNiMEpCUVc5Q08wdEJRM0pDTzBsQlEwUXNUVUZCVFN4bFFVRmxMRWRCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRNMFVzVFVGQlRTeFBRVUZQTEVkQlFVYzdVVUZEWkN4SlFVRkpMRVZCUVVVc1NVRkJTVHRSUVVOV0xGVkJRVlVzUlVGQlJTeHBRa0ZCYVVJN1VVRkROMElzVTBGQlV5eEZRVUZGTEVsQlFVazdTMEZEYUVJc1EwRkJRVHRKUVVORUxFbEJRVWtzVVVGQlVTeEhRVUZITEVsQlFVa3NiMEpCUVc5Q0xFTkJRVU1zVVVGQlVTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkJPMGxCUlRGRUxHVkJRV1VzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkZOMFFzVTBGQlV5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFN1VVRkRha01zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHRaUVVOMFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR05CUVdNN1owSkJRVVVzVDBGQlRUdFpRVVZxUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUVR0WlFVTm9ReXh2UWtGQmIwSTdXVUZEY0VJc1kwRkJZenRSUVVOb1FpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNN1NVRkRSQ3hyUmtGQmEwWTdTVUZEYkVZc1UwRkJaU3hUUVVGVE96dFpRVU4wUWl4SlFVRkpPMmRDUVVOR0xFMUJRVTBzUjBGQlJ5eEhRVU5RTEN0SlFVRXJTU3hEUVVGQk8yZENRVU5xU2l4TlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0blFrRkRha01zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMjlDUVVGRkxFMUJRVTBzZFVKQlFYVkNMRU5CUVVFN1owSkJSUzlETEVsQlFVa3NTVUZCU1N4SFFVRkhMRTFCUVUwc1VVRkJVU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZCTzJkQ1FVVm9ReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHR2UWtGRGVFSXNUVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUVR0dlFrRkRNME1zYzBKQlFYTkNPMjlDUVVOMFFpeEpRVUZKTEVOQlFVTXNTVUZCU1R0M1FrRkJSU3hQUVVGTk8yOUNRVVZxUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlEzSkNMRmRCUVZjc1JVRkRXQ3gxUjBGQmRVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1VVRkJVU3hEUVVONlNDeERRVUZCTzJkQ1FVTklMRU5CUVVNc1EwRkJReXhEUVVGQk8yRkJRMGc3V1VGQlF5eFBRVUZQTEV0QlFVc3NSVUZCUlN4SFFVRkZPMUZCUTNCQ0xFTkJRVU03UzBGQlFUdEJRVU5JTEVOQlFVTTdRVUZGUkN4VFFVRlRMRk5CUVZNc1EwRkJReXhEUVVGRE8wbEJRMnhDTEUxQlFVMHNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGdlF5eERRVUZCTzBsQlJYQkZMRTFCUVUwc1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEdOQlFXTXNSVUZCUlN4WlFVRlpMRVZCUVVVc1IwRkJSeXhqUVVGakxFTkJRVUU3U1VGRGJFVXNUVUZCVFN4VFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eGpRVUZqTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVFN1NVRkZMMFFzVFVGQlRTeGhRVUZoTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhwUWtGQmFVSXNRMEZCWjBJc1EwRkJRVHRKUVVNNVJTeE5RVUZOTEZWQlFWVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHTkJRV01zUTBGQlowSXNRMEZCUVR0SlFVVjRSU3hoUVVGaExFTkJRVU1zVTBGQlV5eEhRVUZITEVWQlFVVXNRMEZCUVR0SlFVTTFRaXhWUVVGVkxFTkJRVU1zVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUVR0SlFVTm9ReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRCUVVOMFF5eERRVUZETzBGQlJVUXNVMEZCVXl4clFrRkJhMElzUTBGQlF5eExRVUZMTzBsQlF5OUNMRTFCUVUwc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8wbEJRM1pFTEVsQlFVa3NRMEZCUXl4aFFVRmhPMUZCUVVVc1QwRkJUVHRKUVVVeFFpeGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVUU3UVVGRGVFTXNRMEZCUXp0QlFVVkVMSEZHUVVGeFJqdEJRVU55Uml4M1JVRkJkMFU3UVVGRGVFVXNaMEpCUVdkQ08wRkJRMmhDTEhORFFVRnpRenRCUVVOMFF5eG5RMEZCWjBNN1FVRkRhRU1zUzBGQlN6dEJRVVZNTEZkQlFWYzdRVUZEV0N4MVJFRkJkVVE3UVVGRGRrUXNjVVJCUVhGRU8wRkJRM0pFTEhkRVFVRjNSRHRCUVVONFJDd3JSRUZCSzBRN1FVRkRMMFFzZFVKQlFYVkNPMEZCUTNaQ0xITkVRVUZ6UkR0QlFVTjBSQ3cyUkVGQk5rUTdRVUZETjBRc1pVRkJaVHRCUVVObUxEUkVRVUUwUkR0QlFVTTFSQ3hSUVVGUk8wRkJRMUlzVVVGQlVUdEJRVU5TTEVsQlFVazdRVUZGU2l4eFJVRkJjVVU3UVVGRGNrVXNVMEZCVXl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTzBsQlF6bENMQ3RFUVVFclJEdEpRVU12UkN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEZkQlFWY3NRMEZCUVR0SlFVTndReXhOUVVGTkxHRkJRV0VzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkJPMGxCUlM5RUxHOUNRVUZ2UWp0SlFVTndRaXgzUWtGQmQwSTdTVUZEZUVJc1NVRkJTU3hoUVVGaExFVkJRVVU3VVVGRGFrSXNZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdVVUZEYmtRc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVRTdTMEZET1VNN1UwRkJUVHRSUVVOTUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1dVRkJSU3hQUVVGTk8xRkJReTlFTEhORVFVRnpSRHRSUVVOMFJDeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRVHRMUVVOcVJEdEJRVU5JTEVOQlFVTTdRVUZGUkN4TlFVRk5MRWxCUVVrN1NVRkhVaXhaUVVGWkxGRkJRVkU3VVVGRGJFSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMGxCUTNKRUxFTkJRVU03U1VGRlJDeFZRVUZWTzFGQlExSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdTVUZETDBJc1EwRkJRenRKUVVWRUxGZEJRVmNzUTBGQlF5eFZRVUZWT3p0UlFVTndRaXhOUVVGQkxFbEJRVWtzUTBGQlF5eFhRVUZYTERCRFFVRkZMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeEZRVUZETzBsQlEyaEVMRU5CUVVNN1EwRkRSanRCUVVWRUxFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wRkJRemxDTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkJPMEZCUlhoRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1FVRkZla0lzVFVGQlRTeFhRVUZaTEZOQlFWRXNWMEZCVnp0SlFVTnVRenRSUVVORkxFdEJRVXNzUlVGQlJTeERRVUZCTzFGQlExQXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSenM3T3p0TFFVbG9RaXhEUVVGQk8xRkJRMFFzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZETTBRc1EwRkJRenRKUVVWRUxHbENRVUZwUWp0UlFVTm1MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUTJwRExFTkJRVU03U1VGRlJDeHZRa0ZCYjBJN1VVRkRiRUlzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3U1VGRGJrTXNRMEZCUXp0RFFVTkdJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJvdXRlcyA9IHZvaWQgMDtcclxuZXhwb3J0cy5yb3V0ZXMgPSBbXHJcbiAgICB7IG5hbWU6ICfrlJTsnpDsnbjsi5zsiqTthZwnLCBwYXRoOiAnLycgfSxcclxuICAgIHsgbmFtZTogJ+2ZiCcsIHBhdGg6ICcvaG9tZScgfSxcclxuICAgIHsgbmFtZTogJ+yGjOqwnCcsIHBhdGg6ICcvYWJvdXQnIH0sXHJcbiAgICB7IG5hbWU6ICfrlJTsnpDsnbjsi5zsiqTthZwnLCBwYXRoOiAnL2Rlc2lnbicgfSxcclxuICAgIHsgbmFtZTogJ+y7tO2PrOuEjO2KuCcsIHBhdGg6ICcvY29tcG9uZW50cycgfSxcclxuICAgIHsgbmFtZTogJ+yCrOyaqeyekO2UhOuhnO2VhCcsIHBhdGg6ICcvcHJvZmlsZScgfSxcclxuICAgIHsgbmFtZTogJ+2PrOyKpO2KuCcsIHBhdGg6ICcvcG9zdCcgfSxcclxuICAgIHsgbmFtZTogJ+yYge2ZlCcsIHBhdGg6ICcvY2FrZScgfSxcclxuICAgIHsgbmFtZTogJ+yDge2SiOuqhScsIHBhdGg6ICcvcHJvZHVjdCcgfSxcclxuICAgIHsgbmFtZTogJ+yjvOusuOyEnCcsIHBhdGg6ICcvY2hlY2tvdXQnIH0sXHJcbiAgICB7IG5hbWU6ICfroZzqt7jsnbgnLCBwYXRoOiAnL2xvZ2luJyB9LFxyXG4gICAgeyBuYW1lOiAn7ZqM7JuQ6rCA7J6FJywgcGF0aDogJy9zaWdudXAnIH0sXHJcbiAgICB7IG5hbWU6ICfruYTrsIDrsojtmLjssL7quLAnLCBwYXRoOiAnL2ZvcmdvdCcgfSxcclxuICAgIHsgbmFtZTogJ+yEpOyglScsIHBhdGg6ICcvc2V0dGluZycgfSxcclxuXTtcclxuY29uc3QgY3VycmVudFBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XHJcbmNvbnN0IHJvdXRlUGFnZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgbGV0IGN1cnJlbnRQYXRoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpOyAvLyBmYXN0IHRoYW4gLnJlcGxhY2UoJyMnLCAnJylcclxuICAgIGxldCB1cmkgPSBjdXJyZW50UGF0aCA/IGAvdmlld3MvJHtjdXJyZW50UGF0aH0uaHRtbGAgOiAnL3ZpZXdzL2Rlc2lnbi5odG1sJztcclxuICAgIC8vIGNvbnN0IG5hdmlnYXRvcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2YmFyLW1lbnUgYScpXHJcbiAgICAvLyBuYXZpZ2F0b3JzLmZvckVhY2gobmF2aWdhdG9yID0+IHtcclxuICAgIC8vICAgbmF2aWdhdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgLy8gICAgIGxldCBjdXJyZW50UGF0aFxyXG4gICAgLy8gICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgIC8vICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQpIHtcclxuICAgIC8vICAgICAgIGNvbnNvbGUubG9nKCduYXZpZ2F0b3InLCBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdocmVmJykhLnN1YnN0cmluZygxKSwgdXJpKVxyXG4gICAgLy8gICAgICAgY3VycmVudFBhdGggPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdocmVmJykhLnN1YnN0cmluZygxKVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUodW5kZWZpbmVkLCAn7YOA7J207YuAJywgYC8ke2N1cnJlbnRQYXRofWApXHJcbiAgICAvLyAgIH0pXHJcbiAgICAvLyB9KVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwYWdlID0geWllbGQgZmV0Y2hQYWdlKHVyaSk7XHJcbiAgICAgICAgcmVuZGVyUGFnZShwYWdlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUud2Fybigncm91dGVyOiAnLCBlcnJvcik7XHJcbiAgICB9XHJcbn0pO1xyXG5mdW5jdGlvbiBmZXRjaFBhZ2UodXJpKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2godXJpKTtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKVxyXG4gICAgICAgICAgICB0aHJvdyAnU29tZXRoaW5nIHdlbnQgd3JvbmcuJztcclxuICAgICAgICBjb25zdCBodG1sID0geWllbGQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gcmVuZGVyUGFnZShjb250ZW50KSB7XHJcbiAgICBjb25zdCB2aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ZpZXcnKTtcclxuICAgIGlmICghdmlldylcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2aWV3LmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcbiAgICAvLyB2aWV3Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGh0bWwpO1xyXG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHJvdXRlUGFnZTtcclxuLy8gcG9wc3RhdGUgLyBwdXNoU3RhdGUoKSAtIOqwmeydgCDtjpjsnbTsp4DrnbzrqbQg7Iuk7ZaJ7ZWY7KeAIOyViuydjC5cclxuLy8gY29uc3QgYWN0aXZlUm91dGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3JvdXRlXScpXHJcbi8vIGFjdGl2ZVJvdXRlcy5mb3JFYWNoKHJvdXRlID0+IHJvdXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmF2aWdhdGUsIGZhbHNlKSlcclxuLy8gY29uc3Qgcm91dGUgPSByb3V0ZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5wYXRoID09PSBjdXJyZW50UGF0aClcclxuLy8gaWYgKCFyb3V0ZSkge1xyXG4vLyAgIHB1c2hCcm93c2VySGlzdG9yeSh7fSwgJycsICdlcnJvcicpXHJcbi8vICAgdmlldy5pbm5lckhUTUwgPSAnbm8gcm91dGUgZXhpc3RzJ1xyXG4vLyB9XHJcbi8vIHB1c2hCcm93c2VySGlzdG9yeSh7fSwgJycsIHJvdXRlSW5mby5wYXRoKVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbTkxZEdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpY205MWRHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3p0QlFVdGhMRkZCUVVFc1RVRkJUU3hIUVVGSE8wbEJRM0JDTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eEZRVUZGTzBsQlF6ZENMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPMGxCUXpWQ0xFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRk8wbEJRemxDTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTzBsQlEyNURMRVZCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNZVUZCWVN4RlFVRkZPMGxCUlhKRExFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4SlFVRkpMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wbEJRM0JETEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBsQlF6bENMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPMGxCUXpkQ0xFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wbEJRMnBETEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZGTzBsQlJXeERMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZPMGxCUXk5Q0xFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1UwRkJVeXhGUVVGRk8wbEJRMnBETEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTzBsQlEyNURMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNWVUZCVlN4RlFVRkZPME5CUTJwRExFTkJRVUU3UVVGRlJDeE5RVUZOTEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlFUdEJRVVUxUXl4TlFVRk5MRk5CUVZNc1IwRkJSeXhIUVVGVExFVkJRVVU3U1VGRE0wSXNTVUZCU1N4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQkxFTkJRVU1zT0VKQlFUaENPMGxCUTJ4R0xFbEJRVWtzUjBGQlJ5eEhRVUZITEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hYUVVGWExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNiMEpCUVc5Q0xFTkJRVUU3U1VGRk0wVXNhVVZCUVdsRk8wbEJRMnBGTEc5RFFVRnZRenRKUVVOd1F5eHRSRUZCYlVRN1NVRkRia1FzYzBKQlFYTkNPMGxCUTNSQ0xHZERRVUZuUXp0SlFVTm9ReXgxUkVGQmRVUTdTVUZEZGtRc2RVWkJRWFZHTzBsQlEzWkdMSE5GUVVGelJUdEpRVU4wUlN4UlFVRlJPMGxCUlZJc2IwVkJRVzlGTzBsQlEzQkZMRTlCUVU4N1NVRkRVQ3hMUVVGTE8wbEJSVXdzU1VGQlNUdFJRVU5HTEUxQlFVMHNTVUZCU1N4SFFVRkhMRTFCUVUwc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzFGQlEycERMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdExRVU5xUWp0SlFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8xRkJRMlFzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3UzBGRGFFTTdRVUZEU0N4RFFVRkRMRU5CUVVFc1EwRkJRVHRCUVVWRUxGTkJRV1VzVTBGQlV5eERRVUZETEVkQlFVYzdPMUZCUXpGQ0xFMUJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8xRkJRMnBETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRaUVVGRkxFMUJRVTBzZFVKQlFYVkNMRU5CUVVFN1VVRkZMME1zVFVGQlRTeEpRVUZKTEVkQlFVY3NUVUZCVFN4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVUU3VVVGRGJFTXNUMEZCVHl4SlFVRkpMRU5CUVVFN1NVRkRZaXhEUVVGRE8wTkJRVUU3UVVGRlJDeFRRVUZUTEZWQlFWVXNRMEZCUXl4UFFVRlBPMGxCUTNwQ0xFMUJRVTBzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRE5VTXNTVUZCU1N4RFFVRkRMRWxCUVVrN1VVRkJSU3hQUVVGTk8wbEJSV3BDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1QwRkJUeXhEUVVGQk8wbEJRM2hDTEN0RFFVRXJRenRKUVVVdlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU4yUWl4RFFVRkRPMEZCUlVRc2EwSkJRV1VzVTBGQlV5eERRVUZCTzBGQlJYaENMRFpEUVVFMlF6dEJRVVUzUXl3MFJFRkJORVE3UVVGRE5VUXNhMFpCUVd0R08wRkJRMnhHTEdsRlFVRnBSVHRCUVVOcVJTeG5Ra0ZCWjBJN1FVRkRhRUlzZDBOQlFYZERPMEZCUTNoRExIVkRRVUYxUXp0QlFVTjJReXhKUVVGSk8wRkJRMG9zTmtOQlFUWkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5sb2FkTGF6eUltYWdlcyA9IGV4cG9ydHMuc3RvcEFuaW1hdGlvbiA9IGV4cG9ydHMudGhyb3R0bGUgPSB2b2lkIDA7XHJcbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrKSB7XHJcbiAgICBsZXQgdGltZXI7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aW1lcilcclxuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVyKTtcclxuICAgICAgICB0aW1lciA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gY2FsbGJhY2soKSk7XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcclxuZnVuY3Rpb24gc3RvcEFuaW1hdGlvbigpIHtcclxuICAgIGxldCByZXNpemVUaW1lcjtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZSgoKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdyZXNpemUtYW5pbWF0aW9uLXN0b3BwZXInKTtcclxuICAgICAgICBjbGVhclRpbWVvdXQocmVzaXplVGltZXIpO1xyXG4gICAgICAgIHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncmVzaXplLWFuaW1hdGlvbi1zdG9wcGVyJyk7XHJcbiAgICAgICAgfSwgNDAwKTtcclxuICAgIH0pKTtcclxufVxyXG5leHBvcnRzLnN0b3BBbmltYXRpb24gPSBzdG9wQW5pbWF0aW9uO1xyXG4vLyAhIGhlcm8g7JiB7JetIOydtOuvuOyngOuTpCDslYgg65CoLi4g7JmcXHJcbmZ1bmN0aW9uIGxvYWRMYXp5SW1hZ2VzKCkge1xyXG4gICAgaWYgKCEoJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGltYWdlT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcclxuICAgICAgICAgICAgaWYgKCFlbnRyeS5pc0ludGVyc2VjdGluZylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZW50cnkudGFyZ2V0O1xyXG4gICAgICAgICAgICB0YXJnZXQuc3JjID0gdGFyZ2V0LmRhdGFzZXQuc3JjIHx8ICcnO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0YXJnZXQpO1xyXG4gICAgICAgICAgICBpbWFnZU9ic2VydmVyLnVub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCB0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3JjXScpO1xyXG4gICAgdGFyZ2V0cy5mb3JFYWNoKGltYWdlID0+IGltYWdlT2JzZXJ2ZXIub2JzZXJ2ZShpbWFnZSkpO1xyXG59XHJcbmV4cG9ydHMubG9hZExhenlJbWFnZXMgPSBsb2FkTGF6eUltYWdlcztcclxuLy8gbGV0IHN0YXJ0ID0gbnVsbFxyXG4vLyBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW5hdmJhcicpXHJcbi8vIGZ1bmN0aW9uIHN0ZXAodGltZXN0YW1wKSB7XHJcbi8vICAgaWYgKCFzdGFydCkgc3RhcnQgPSB0aW1lc3RhbXBcclxuLy8gICBjb25zdCBwcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHN0YXJ0XHJcbi8vICAgZWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gTWF0aC5taW4ocHJvZ3Jlc3MgLyAxMCwgMjAwKSArICdweCdcclxuLy8gICBpZiAocHJvZ3Jlc3MgPj0gNTAwMCkgcmV0dXJuXHJcbi8vICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKVxyXG4vLyB9XHJcbi8vIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcClcclxuLy8gaWYgKG5hdmlnYXRvci5jb25uZWN0aW9uICYmIG5hdmlnYXRvci5jb25uZWN0aW9uLmVmZmVjdGl2ZVR5cGUpIHtcclxuLy8gICBpZiAobmF2aWdhdG9yLmNvbm5lY3Rpb24uZWZmZWN0aXZlVHlwZSA9PT0gJzRnJykge1xyXG4vLyAgICAgLy8gTG9hZCB2aWRlb1xyXG4vLyAgIH0gZWxzZSB7XHJcbi8vICAgICAvLyBMb2FkIGltYWdlXHJcbi8vICAgfVxyXG4vLyB9XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWIzQjBhVzFwZW1GMGFXOXVWWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp2Y0hScGJXbDZZWFJwYjI1VmRHbHNjeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3hUUVVGblFpeFJRVUZSTEVOQlFVTXNVVUZCVVR0SlFVTXZRaXhKUVVGSkxFdEJRWGxDTEVOQlFVRTdTVUZGTjBJc1QwRkJUenRSUVVOTUxFbEJRVWtzUzBGQlN6dFpRVUZGTEUxQlFVMHNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0UlFVTTNReXhMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVFN1NVRkRlRVFzUTBGQlF5eERRVUZCTzBGQlEwZ3NRMEZCUXp0QlFWQkVMRFJDUVU5RE8wRkJSVVFzVTBGQlowSXNZVUZCWVR0SlFVTXpRaXhKUVVGSkxGZEJRVmNzUTBGQlFUdEpRVVZtTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGRGNrSXNVVUZCVVN4RlFVTlNMRkZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVU3VVVGRFdpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkJRVHRSUVVOMlJDeFpRVUZaTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1VVRkZla0lzVjBGQlZ5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRVZCUVVVN1dVRkROVUlzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMRU5CUVVFN1VVRkROVVFzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUTFRc1EwRkJReXhEUVVGRExFTkJRMGdzUTBGQlFUdEJRVU5JTEVOQlFVTTdRVUZrUkN4elEwRmpRenRCUVVWRUxIbENRVUY1UWp0QlFVTjZRaXhUUVVGblFpeGpRVUZqTzBsQlF6VkNMRWxCUVVrc1EwRkJReXhEUVVGRExITkNRVUZ6UWl4SlFVRkpMRTFCUVUwc1EwRkJRenRSUVVGRkxFOUJRVTA3U1VGRkwwTXNUVUZCVFN4aFFVRmhMRWRCUVVjc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzUlVGQlJUdFJRVU51UlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzFsQlEzUkNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll6dG5Ra0ZCUlN4UFFVRk5PMWxCUldwRExFMUJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRXdRaXhEUVVGQk8xbEJReTlETEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVsQlFVa3NSVUZCUlN4RFFVRkJPMWxCUlhKRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1dVRkZia0lzWVVGQllTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHRSUVVOcVF5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJSVVlzVFVGQlRTeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMGxCUTNaRUxFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRlRVFzUTBGQlF6dEJRV3hDUkN4M1EwRnJRa003UVVGRlJDeHRRa0ZCYlVJN1FVRkRia0lzZFVSQlFYVkVPMEZCUlhaRUxEWkNRVUUyUWp0QlFVTTNRaXhyUTBGQmEwTTdRVUZEYkVNc2RVTkJRWFZETzBGQlEzWkRMRzFGUVVGdFJUdEJRVVZ1UlN4cFEwRkJhVU03UVVGRGFrTXNkVU5CUVhWRE8wRkJRM1pETEVsQlFVazdRVUZGU2l4eFEwRkJjVU03UVVGRmNrTXNiMFZCUVc5Rk8wRkJRM0JGTEhWRVFVRjFSRHRCUVVOMlJDeHZRa0ZCYjBJN1FVRkRjRUlzWVVGQllUdEJRVU5pTEc5Q1FVRnZRanRCUVVOd1FpeE5RVUZOTzBGQlEwNHNTVUZCU1NKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZGV0ZWN0TG9hZCA9IGV4cG9ydHMudW5sb2NrQm9keUVsZW1lbnQgPSBleHBvcnRzLmxvY2tCb2R5RWxlbWVudCA9IHZvaWQgMDtcclxuLy8gdG9kbyBmdW5jdGlvblxyXG5mdW5jdGlvbiBsb2NrQm9keUVsZW1lbnQoKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2xvY2stc2Nyb2xsJyk7XHJcbn1cclxuZXhwb3J0cy5sb2NrQm9keUVsZW1lbnQgPSBsb2NrQm9keUVsZW1lbnQ7XHJcbmZ1bmN0aW9uIHVubG9ja0JvZHlFbGVtZW50KCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdsb2NrLXNjcm9sbCcpO1xyXG59XHJcbmV4cG9ydHMudW5sb2NrQm9keUVsZW1lbnQgPSB1bmxvY2tCb2R5RWxlbWVudDtcclxuZnVuY3Rpb24gZGV0ZWN0TG9hZCgpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbG9hZGluZycpO1xyXG4gICAgY29uc3QgbG9hZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sb2FkZXInKTtcclxuICAgIGlmICghbG9hZGVyRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB1bmxvY2tCb2R5RWxlbWVudCgpO1xyXG4gICAgbG9hZGVyRWxlbWVudC5oaWRkZW4gPSB0cnVlO1xyXG59XHJcbmV4cG9ydHMuZGV0ZWN0TG9hZCA9IGRldGVjdExvYWQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHOWhaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklteHZZV1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzWjBKQlFXZENPMEZCUTJoQ0xGTkJRV2RDTEdWQlFXVTdTVUZETjBJc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8wRkJRelZETEVOQlFVTTdRVUZHUkN3d1EwRkZRenRCUVVWRUxGTkJRV2RDTEdsQ1FVRnBRanRKUVVNdlFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdRVUZETDBNc1EwRkJRenRCUVVaRUxEaERRVVZETzBGQlJVUXNVMEZCWjBJc1ZVRkJWVHRKUVVONFFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVRTdTVUZGTlVNc1RVRkJUU3hoUVVGaExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRKUVVOMlJTeEpRVUZKTEVOQlFVTXNZVUZCWVR0UlFVRkZMRTlCUVUwN1NVRkZNVUlzYVVKQlFXbENMRVZCUVVVc1EwRkJRVHRKUVVWdVFpeGhRVUZoTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRVHRCUVVNM1FpeERRVUZETzBGQlZFUXNaME5CVTBNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjYXJvdXNlbCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNhdGVnb3J5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcm91c2VsJyk7XHJcbiAgICBpZiAoIWNhdGVnb3J5KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGNhdGVnb3J5TGlzdCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC12aWV3ZXInKTtcclxuICAgIGNvbnN0IGNhdGVnb3J5TGlzdFNsaWRlID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLmNhcm91c2VsLXZpZXdlciA+IGJ1dHRvbicpO1xyXG4gICAgY29uc3QgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1hcnJvd3MtcHJldicpO1xyXG4gICAgY29uc3QgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1hcnJvd3MtbmV4dCcpO1xyXG4gICAgY29uc3QgY2F0ZWdvcnlEb3RzID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLmNhcm91c2VsLWRvdHMtZG90Jyk7XHJcbiAgICBpZiAoIWNhdGVnb3J5TGlzdCB8fCAhY2F0ZWdvcnlMaXN0U2xpZGUgfHwgIWNhdGVnb3J5TmF2aWdhdGlvblByZXYgfHwgIWNhdGVnb3J5TmF2aWdhdGlvbk5leHQgfHwgIWNhdGVnb3J5RG90cylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjb25zdCBjYXRlZ29yeUNvbnRhaW5lcldpZHRoID0gY2F0ZWdvcnlMaXN0Lm9mZnNldFdpZHRoO1xyXG4gICAgbGV0IHN1bSA9IDA7XHJcbiAgICBjb25zdCBpc0ZpcnN0ID0gY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgPT09IDA7XHJcbiAgICBpZiAoaXNGaXJzdCkge1xyXG4gICAgICAgIGNhdGVnb3J5TmF2aWdhdGlvblByZXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuICAgIGNhdGVnb3J5TGlzdFNsaWRlLmZvckVhY2goaXRlbSA9PiAoc3VtICs9IGl0ZW0ub2Zmc2V0V2lkdGgpKTtcclxuICAgIGNhdGVnb3J5TmF2aWdhdGlvbk5leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b05leHQpO1xyXG4gICAgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvUHJldik7XHJcbiAgICBjYXRlZ29yeURvdHMuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IH0pKTtcclxuICAgIGNhdGVnb3J5TGlzdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBzY3JvbGxMZWZ0IH0gPSBjYXRlZ29yeUxpc3Q7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3Njcm9sbC1sZWZ0Jywgc2Nyb2xsTGVmdCwgJ29mZnNldC13aWR0aCcsIGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpO1xyXG4gICAgICAgIGNvbnN0IGlzRmlyc3QgPSBzY3JvbGxMZWZ0ID09PSAwO1xyXG4gICAgICAgIGlmIChpc0ZpcnN0KSB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5TmF2aWdhdGlvblByZXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5TmF2aWdhdGlvblByZXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldi5oaWRkZW4gPSBzY3JvbGxMZWZ0ID09PSAwXHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHRvUHJldigpIHtcclxuICAgICAgICBjYXRlZ29yeUxpc3Quc2Nyb2xsTGVmdCAtPSAxMDA7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0b05leHQoKSB7XHJcbiAgICAgICAgY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgKz0gMTAwO1xyXG4gICAgICAgIC8vIGlmKHN1bSA+IGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpIHt9XHJcbiAgICAgICAgLy8gY29uc3QgdHR0ID0gMTAwICsgJ3B4JztcclxuICAgICAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2Fyb3VzZWwtdmlld2VyJykuc3R5bGUudHJhbnNmb3JtICs9ICd0cmFuc2xhdGVYKCcrdHR0KycpJztcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2Fyb3VzZWw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyRnliM1Z6Wld3dWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpqWVhKdmRYTmxiQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFZEJRVWNzUlVGQlJUdEpRVU53UWl4TlFVRk5MRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZqTEZkQlFWY3NRMEZCUXl4RFFVRkJPMGxCUTJwRkxFbEJRVWtzUTBGQlF5eFJRVUZSTzFGQlFVVXNUMEZCVFR0SlFVVnlRaXhOUVVGTkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMR3RDUVVGclFpeERRVUZETEVOQlFVRTdTVUZETlVVc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNNa0pCUVRKQ0xFTkJRVU1zUTBGQlFUdEpRVU0zUml4TlFVRk5MSE5DUVVGelFpeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc2RVSkJRWFZDTEVOQlFVTXNRMEZCUVR0SlFVTXpSaXhOUVVGTkxITkNRVUZ6UWl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zZFVKQlFYVkNMRU5CUVVNc1EwRkJRVHRKUVVNelJpeE5RVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlFUdEpRVVZxUml4SlFVRkpMRU5CUVVNc1dVRkJXU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEpRVUZKTEVOQlFVTXNXVUZCV1R0UlFVRkZMRTlCUVUwN1NVRkZkRWdzVFVGQlRTeHpRa0ZCYzBJc1IwRkJSeXhaUVVGWkxFTkJRVU1zVjBGQlZ5eERRVUZCTzBsQlEzWkVMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlFUdEpRVVZZTEUxQlFVMHNUMEZCVHl4SFFVRkhMRmxCUVZrc1EwRkJReXhWUVVGVkxFdEJRVXNzUTBGQlF5eERRVUZCTzBsQlF6ZERMRWxCUVVrc1QwRkJUeXhGUVVGRk8xRkJRMWdzYzBKQlFYTkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVRTdTMEZET1VNN1NVRkZSQ3hwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVVUxUkN4elFrRkJjMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdTVUZEZUVRc2MwSkJRWE5DTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUTNoRUxGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkZOVVVzV1VGQldTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeEhRVUZITEVWQlFVVTdVVUZETTBNc1RVRkJUU3hGUVVGRkxGVkJRVlVzUlVGQlJTeEhRVUZITEZsQlFWa3NRMEZCUVR0UlFVTnVReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNSVUZCUlN4VlFVRlZMRVZCUVVVc1kwRkJZeXhGUVVGRkxITkNRVUZ6UWl4RFFVRkRMRU5CUVVFN1VVRkZPVVVzVFVGQlRTeFBRVUZQTEVkQlFVY3NWVUZCVlN4TFFVRkxMRU5CUVVNc1EwRkJRVHRSUVVOb1F5eEpRVUZKTEU5QlFVOHNSVUZCUlR0WlFVTllMSE5DUVVGelFpeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGQk8xTkJRemxETzJGQlFVMDdXVUZEVEN4elFrRkJjMElzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRVHRUUVVNNVF6dFJRVU5FTEcxRVFVRnRSRHRKUVVOeVJDeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVVkdMRk5CUVZNc1RVRkJUVHRSUVVOaUxGbEJRV0VzUTBGQlF5eFZRVUZWTEVsQlFVa3NSMEZCUnl4RFFVRkJPMGxCUTJwRExFTkJRVU03U1VGRFJDeFRRVUZUTEUxQlFVMDdVVUZEWWl4WlFVRmhMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFZEJRVWNzUTBGQlFUdFJRVU12UWl4elEwRkJjME03VVVGRGRFTXNNRUpCUVRCQ08xRkJRekZDTEhWR1FVRjFSanRKUVVONlJpeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzVVVGQlVTeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHRvZ2dsZUVsZW1lbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90b2dnbGVFbGVtZW50XCIpKTtcclxuY29uc3QgZW50ZXJUYXJnZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lbnRlclRhcmdldFwiKSk7XHJcbmNvbnN0IHRhYl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RhYlwiKSk7XHJcbmNvbnN0IG1vZGFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kYWxcIikpO1xyXG5jb25zdCB0b1RvcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RvVG9wXCIpKTtcclxuY29uc3QgcG9zaXRpb25TdGlja3lfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9wb3NpdGlvblN0aWNreVwiKSk7XHJcbmNvbnN0IHNjcm9sbEFuaW1hdGlvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbEFuaW1hdGlvblwiKSk7XHJcbmNvbnN0IGNsb3NlUGFyZW50RWxlbWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Nsb3NlUGFyZW50RWxlbWVudFwiKSk7XHJcbmNvbnN0IGN1c3RvbUN1cnNvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2N1c3RvbUN1cnNvclwiKSk7XHJcbmNvbnN0IHNjcm9sbHNweV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbHNweVwiKSk7XHJcbmNvbnN0IHBhcmFsbGF4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcGFyYWxsYXhcIikpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSB7XHJcbiAgICB0b2dnbGVFbGVtZW50OiB0b2dnbGVFbGVtZW50XzEuZGVmYXVsdCxcclxuICAgIGVudGVyVGFyZ2V0OiBlbnRlclRhcmdldF8xLmRlZmF1bHQsXHJcbiAgICBtb2RhbDogbW9kYWxfMS5kZWZhdWx0LFxyXG4gICAgdGFiOiB0YWJfMS5kZWZhdWx0LFxyXG4gICAgdG9Ub3A6IHRvVG9wXzEuZGVmYXVsdCxcclxuICAgIHBvc2l0aW9uU3RpY2t5OiBwb3NpdGlvblN0aWNreV8xLmRlZmF1bHQsXHJcbiAgICBzY3JvbGxBbmltYXRpb246IHNjcm9sbEFuaW1hdGlvbl8xLmRlZmF1bHQsXHJcbiAgICBzY3JvbGxzcHk6IHNjcm9sbHNweV8xLmRlZmF1bHQsXHJcbiAgICBjbG9zZVBhcmVudEVsZW1lbnQ6IGNsb3NlUGFyZW50RWxlbWVudF8xLmRlZmF1bHQsXHJcbiAgICBjdXN0b21DdXJzb3I6IGN1c3RvbUN1cnNvcl8xLmRlZmF1bHQsXHJcbiAgICBwYXJhbGxheDogcGFyYWxsYXhfMS5kZWZhdWx0LFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRzlGUVVFeVF6dEJRVU16UXl4blJVRkJkVU03UVVGRGRrTXNaMFJCUVhWQ08wRkJRM1pDTEc5RVFVRXlRanRCUVVNelFpeHZSRUZCTWtJN1FVRkRNMElzYzBWQlFUWkRPMEZCUXpkRExIZEZRVUVyUXp0QlFVTXZReXc0UlVGQmNVUTdRVUZEY2tRc2EwVkJRWGxETzBGQlEzcERMRFJFUVVGdFF6dEJRVU51UXl3d1JFRkJhVU03UVVGRmFrTXNhMEpCUVdVN1NVRkRZaXhoUVVGaExFVkJRV0lzZFVKQlFXRTdTVUZEWWl4WFFVRlhMRVZCUVZnc2NVSkJRVmM3U1VGRFdDeExRVUZMTEVWQlFVd3NaVUZCU3p0SlFVTk1MRWRCUVVjc1JVRkJTQ3hoUVVGSE8wbEJRMGdzUzBGQlN5eEZRVUZNTEdWQlFVczdTVUZEVEN4alFVRmpMRVZCUVdRc2QwSkJRV003U1VGRFpDeGxRVUZsTEVWQlFXWXNlVUpCUVdVN1NVRkRaaXhUUVVGVExFVkJRVlFzYlVKQlFWTTdTVUZEVkN4clFrRkJhMElzUlVGQmJFSXNORUpCUVd0Q08wbEJRMnhDTEZsQlFWa3NSVUZCV2l4elFrRkJXVHRKUVVOYUxGRkJRVkVzUlVGQlVpeHJRa0ZCVVR0RFFVTlVMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gaW1wb3J0IHsgcmVtb3ZlRWxlbWVudENsYXNzbmFtZSB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnRVdGlscydcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyDqsrDqta3sl5DripQg67aA66qoLCDtmLnsnYAg64+E7YGQ66i87Yq47JeQ66eMIO2BtOuemOyKpCDthqDquIDtlZjripQg6rKD7J20IOyii+ydhOq5jD9cclxuLy8gMS4g7ZWY64KY66eMIO2GoOq4gCBvcGVuL2Nsb3NlXHJcbi8vIDIuIO2YleygnOuTpCDthqDquIAgZXZlbnQudGFyZ2V0Lm5hbWUgLCBpcyh0cnVlKSBzaWJsaW5ncy5yZW1vdmVcclxuLy8gMy4g7KCAIOupgOumrCDsnojripQg6rGwIO2GoOq4gCA9PiBwYW5lbOydtCDri6TsnYzsl5Ag7Jik7KeAIOyViuydhCDsiJjrj4Qg7J6I7J2MLiDri6TsnYzsl5Ag7J6I7Jy866m0IGEg7JeG7Jy866m0IGIuIHBhbmVsIOyngOygle2VmOq4sFxyXG4vLyA0LiBoYW1iZXJnZXIsIGZpbHRlciwgcG9wb3Zlcihkcm9wZG93bilcclxuY29uc3QgQUNUSVZFX0NMQVNTID0gJ2lzLWFjdGl2ZSc7XHJcbi8vIHRvZG8g7Lmp7J2AIOuwluydhCDtgbTrpq3tlojsnYQg65WMIOyXhuyVoOuptCDslYgg65CoLlxyXG4vLyBjb25zdCBjaGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNoaXAnKVxyXG4vLyBjb25zdCBjaGlwcyA9IGNoaXA/LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpXHJcbi8vIC8vIHRvZG8gc2VsZWN0b3JcclxuLy8gICBjaGlwcy5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGFjdGl2ZShlbGVtZW50KSlcclxuLy8gZnVuY3Rpb24gYWN0aXZlKGVUZW1wKSB7XHJcbi8vICAgY2hpcHM/LmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpKVxyXG4vLyAgIGVUZW1wLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpIC8vIHRoaXNcclxuLy8gfVxyXG5mdW5jdGlvbiB0b2dnbGVFbGVtZW50KHsgc2VsZWN0b3I6IHRyaWdnZXIgfSkge1xyXG4gICAgY29uc3QgdHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRyaWdnZXIpO1xyXG4gICAgdHJpZ2dlcnMuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgdHJpZ2dlcnMuZm9yRWFjaCh0cmlnZ2VyID0+IHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdHJpZ2dlcilcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NuYW1lKHRyaWdnZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRvZ2dsZUNsYXNzbmFtZShlbGVtZW50KTtcclxuICAgIH0pKTtcclxuICAgIC8vIGNsaWNrT3V0Ym91bmQoKSB7fVxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0cmlnZ2Vycy5mb3JFYWNoKHRyaWdnZXIgPT4gcmVtb3ZlQ2xhc3NuYW1lKHRyaWdnZXIpKSk7XHJcbiAgICAvLyBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhBQ1RJVkVfQ0xBU1MpKSB7fVxyXG4gICAgLy8gY29uc3QgaGFzRWxlbWVudFNpYmxpbmcgPSB0YXJnZXQubm9kZU5hbWUgPT09IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgIC8vIHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkVfQ0xBU1MpXHJcbiAgICAvLyBlbGVtZW50LnBhcmVudE5vZGUuY2xhc3NMaXN0LnRvZ2dsZShBQ1RJVkVfQ0xBU1MpXHJcbiAgICAvLyBjb25zdCB0cmlnZ2VyTmV4dEVsZW1lbnQgPSBlbGVtZW50Py5uZXh0RWxlbWVudFNpYmxpbmcgYXMgSFRNTEVsZW1lbnRcclxuICAgIC8vIHRyaWdnZXJOZXh0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKEFDVElWRV9DTEFTUylcclxuICAgIC8vIGZ1bmN0aW9uIHJlc2V0Q2xhc3NuYW1lKCkge31cclxufVxyXG5mdW5jdGlvbiB0b2dnbGVDbGFzc25hbWUoZWxlbWVudCkge1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKEFDVElWRV9DTEFTUyk7XHJcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGAke2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKEFDVElWRV9DTEFTUyl9YCk7XHJcbiAgICBlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUNsYXNzbmFtZShlbGVtZW50KSB7XHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSVZFX0NMQVNTKTtcclxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSB0b2dnbGVFbGVtZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkRzluWjJ4bFJXeGxiV1Z1ZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJblJ2WjJkc1pVVnNaVzFsYm5RdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTEdsRlFVRnBSVHM3UVVGUmFrVXNjME5CUVhORE8wRkJRM1JETEhWQ1FVRjFRanRCUVVOMlFpeDVSRUZCZVVRN1FVRkRla1FzZVVWQlFYbEZPMEZCUTNwRkxEQkRRVUV3UXp0QlFVVXhReXhOUVVGTkxGbEJRVmtzUjBGQlJ5eFhRVUZYTEVOQlFVRTdRVUZGYUVNc05rSkJRVFpDTzBGQlF6ZENMR3RFUVVGclJEdEJRVU5zUkN4cFJFRkJhVVE3UVVGRmFrUXNiVUpCUVcxQ08wRkJRMjVDTEhOR1FVRnpSanRCUVVWMFJpd3lRa0ZCTWtJN1FVRkRNMElzY1VWQlFYRkZPMEZCUTNKRkxEWkRRVUUyUXp0QlFVTTNReXhKUVVGSk8wRkJSVW9zVTBGQlV5eGhRVUZoTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1QwRkJUeXhGUVVGaE8wbEJRM0pFTEUxQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRKUVVWdVJDeFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRM3BDTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkRlRU1zUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkJPMUZCUTNSQ0xFdEJRVXNzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUVR0UlFVVjJRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCY1VJc1EwRkJRVHRSUVVVeFF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8xbEJRM3BDTEVsQlFVa3NUVUZCVFN4TFFVRkxMRTlCUVU4N1owSkJRVVVzVDBGQlRUdFpRVU01UWl4bFFVRmxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3VVVGRE1VSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRSaXhsUVVGbExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdTVUZETVVJc1EwRkJReXhEUVVGRExFTkJRMGdzUTBGQlFUdEpRVVZFTEhGQ1FVRnhRanRKUVVOeVFpeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlJTOUdMR3RFUVVGclJEdEpRVU5zUkN3d1JVRkJNRVU3U1VGRE1VVXNNa1JCUVRKRU8wbEJRek5FTEc5RVFVRnZSRHRKUVVOd1JDeDNSVUZCZDBVN1NVRkRlRVVzYjBSQlFXOUVPMGxCUTNCRUxDdENRVUVyUWp0QlFVTnFReXhEUVVGRE8wRkJSVVFzVTBGQlV5eGxRVUZsTEVOQlFVTXNUMEZCVHp0SlFVTTVRaXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRKUVVOMFF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVVZ3Uml4UFFVRlBMR0ZCUVZBc1QwRkJUeXgxUWtGQlVDeFBRVUZQTEVOQlFVVXNhMEpCUVd0Q0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1JVRkJSU3hGUVVGRE8wRkJRM3BHTEVOQlFVTTdRVUZGUkN4VFFVRlRMR1ZCUVdVc1EwRkJReXhQUVVGUE8wbEJRemxDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlEzUkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMEZCUXk5RExFTkJRVU03UVVGRlJDeHJRa0ZCWlN4aFFVRmhMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyB0aHJvdHRsZSDtlYTsmpTtlaAg65OvP1xyXG5jb25zdCBlbnRlclRhcmdldCA9ICh7IHNlbGVjdG9yOiB0YXJnZXRFbGVtZW50IH0pID0+IHtcclxuICAgIGNvbnN0IGhvdmVyRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldEVsZW1lbnQpO1xyXG4gICAgY29uc3QgQUNUSVZFX0NMQVNTTkFNRSA9ICdpcy1zaG93bic7XHJcbiAgICBob3ZlckVsZW1lbnRzID09PSBudWxsIHx8IGhvdmVyRWxlbWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhvdmVyRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAvLyBjb25zdCBpc05hdmlnYXRpb24gPSBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnbmF2YmFyLW1lbnUtaXRlbScpXHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4gZW50ZXJFdmVudChlbGVtZW50KSk7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4gbGVhdmVFdmVudChlbGVtZW50KSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGVudGVyRXZlbnQoZWxlbWVudCkge1xyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQUNUSVZFX0NMQVNTTkFNRSk7XHJcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4gZW50ZXJFdmVudChlbGVtZW50KSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsZWF2ZUV2ZW50KGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkVfQ0xBU1NOQU1FKTtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiBsZWF2ZUV2ZW50KGVsZW1lbnQpKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gZW50ZXJUYXJnZXQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpXNTBaWEpVWVhKblpYUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKbGJuUmxjbFJoY21kbGRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxHdENRVUZyUWp0QlFVVnNRaXhOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMR0ZCUVdFc1JVRkJZU3hGUVVGRkxFVkJRVVU3U1VGRE4wUXNUVUZCVFN4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRmpMR0ZCUVdFc1EwRkJReXhEUVVGQk8wbEJRek5GTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVlVGQlZTeERRVUZCTzBsQlJXNURMR0ZCUVdFc1lVRkJZaXhoUVVGaExIVkNRVUZpTEdGQlFXRXNRMEZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGREwwSXNjMFZCUVhORk8xRkJSWFJGTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZEYWtVc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOdVJTeERRVUZETEVWQlFVTTdTVUZGUml4VFFVRlRMRlZCUVZVc1EwRkJReXhQUVVGUE8xRkJRM3BDTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzFGQlF6ZERMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZCTzFGQlJUZERMRTlCUVU4c1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRkRVVzUTBGQlF6dEpRVU5FTEZOQlFWTXNWVUZCVlN4RFFVRkRMRTlCUVU4N1VVRkRla0lzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVUU3VVVGRE9VTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVUU3VVVGRmFFUXNUMEZCVHl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZsQlFWa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTjBSU3hEUVVGRE8wRkJRMGdzUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1YwRkJWeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBvcHRpbWl6YXRpb25VdGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL29wdGltaXphdGlvblV0aWxzXCIpO1xyXG5jb25zdCBlbGVtZW50VXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9lbGVtZW50VXRpbHNcIik7XHJcbi8vIGNvbnN0IHBhcmVudHMgPSBBcnJheS5mcm9tKGdyYW5kcGFyZW50LmNoaWxkcmVuKVxyXG4vLyDtg63sl5DshJzrp4wg7IKs7Jqp7ZWY6riwIOuVjOusuOyXkCBpbml0aWFsaXplVGFiSW5kaWNhdG9yIO2VqOyImOydmCDtjIzrnbzrr7jthLDrpbwg7KCc6rGw7ZWY6rOgIOydtOuypO2KuCDsoJzqsbDrpbwg7Im96rKMIOunjOuTpOyXiOuLpC5cclxuZnVuY3Rpb24gdGFiKCkge1xyXG4gICAgY29uc3QgdGFiRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10YWInKTtcclxuICAgIGlmICghdGFiRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjb25zdCB0YWJzID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJdJyk7XHJcbiAgICBjb25zdCBwYW5lbHMgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYnBhbmVsXScpO1xyXG4gICAgbGV0IHNlbGVjdGVkVGFiSW5kZXggPSAwO1xyXG4gICAgbGV0IHNlbGVjdGVkVGFiID0gdGFic1tzZWxlY3RlZFRhYkluZGV4XTtcclxuICAgIGluaXRpYWxpemVJbmRpY2F0b3IoKTtcclxuICAgIHRhYnMuZm9yRWFjaCh0YWIgPT4gdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hhbmdlVGFiKSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb3B0aW1pemF0aW9uVXRpbHNfMS50aHJvdHRsZShpbml0aWFsaXplSW5kaWNhdG9yKSwgdHJ1ZSk7XHJcbiAgICAvLyDtjIzrnbzrr7jthLDroZwg7J24642x7Iqk66W8IOuwm+yngCDslYrripQg67Cp67KVLlxyXG4gICAgZnVuY3Rpb24gY2hhbmdlVGFiKGV2ZW50KSB7XHJcbiAgICAgICAgc2VsZWN0ZWRUYWIgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgLy8gICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldFxyXG4gICAgICAgIC8vICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGVcclxuICAgICAgICAvLyAgIGNvbnN0IGdyYW5kcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGVcclxuICAgICAgICBpbml0aWFsaXplSW5kaWNhdG9yKCk7XHJcbiAgICAgICAgdGFicy5mb3JFYWNoKHRhYiA9PiB0YWIuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJykpO1xyXG4gICAgICAgIHNlbGVjdGVkVGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgcGFuZWxzLmZvckVhY2gocGFuZWwgPT4gcGFuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIFN0cmluZyhldmVudC50YXJnZXQuZGF0YXNldC5pbmRleCAhPT0gcGFuZWwuZGF0YXNldC5pbmRleCkpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVJbmRpY2F0b3IoKSB7XHJcbiAgICAgICAgaWYgKCF0YWJFbGVtZW50KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgaW5kaWNhdG9yRWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtdGFibGlzdC1pbmRpY2F0b3InKTtcclxuICAgICAgICBpZiAoIWluZGljYXRvckVsZW1lbnQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpbmRpY2F0b3JFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHtzZWxlY3RlZFRhYi5vZmZzZXRMZWZ0fXB4YDtcclxuICAgICAgICBpbmRpY2F0b3JFbGVtZW50LnN0eWxlLndpZHRoID0gZWxlbWVudFV0aWxzXzEuZ2V0RWxlbWVudFdpZHRoKHNlbGVjdGVkVGFiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSB0YWI7XHJcbi8vICAgdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRhYkluZGV4ID09PSB0YWIuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpXHJcbi8vIGNvbnN0IHsgcGF0aG5hbWUsIGhhc2ggfSA9IHdpbmRvdy5sb2NhdGlvblxyXG4vLyBoaXN0b3J5LnB1c2hTdGF0ZSh7IHRhYm5hbWU6ICd0ZXN0ZXInIH0sICduYW1lJywgYCR7dGFyZ2V0Lm5hbWV9YClcclxuLy8gICAvLyBFbmFibGUgYXJyb3cgbmF2aWdhdGlvbiBiZXR3ZWVuIHRhYnMgaW4gdGhlIHRhYiBsaXN0XHJcbi8vICAgbGV0IHRhYkZvY3VzID0gMFxyXG4vLyAgIHRhYkxpc3QuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xyXG4vLyAgICAgLy8gTW92ZSByaWdodFxyXG4vLyAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzkgfHwgZS5rZXlDb2RlID09PSAzNykge1xyXG4vLyAgICAgICB0YWJzW3RhYkZvY3VzXS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpXHJcbi8vICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XHJcbi8vICAgICAgICAgdGFiRm9jdXMrK1xyXG4vLyAgICAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSBlbmQsIGdvIHRvIHRoZSBzdGFydFxyXG4vLyAgICAgICAgIGlmICh0YWJGb2N1cyA+PSB0YWJzLmxlbmd0aCkge1xyXG4vLyAgICAgICAgICAgdGFiRm9jdXMgPSAwXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIC8vIE1vdmUgbGVmdFxyXG4vLyAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcclxuLy8gICAgICAgICB0YWJGb2N1cy0tXHJcbi8vICAgICAgICAgLy8gSWYgd2UncmUgYXQgdGhlIHN0YXJ0LCBtb3ZlIHRvIHRoZSBlbmRcclxuLy8gICAgICAgICBpZiAodGFiRm9jdXMgPCAwKSB7XHJcbi8vICAgICAgICAgICB0YWJGb2N1cyA9IHRhYnMubGVuZ3RoIC0gMVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgICB0YWJzW3RhYkZvY3VzXS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMClcclxuLy8gICAgICAgdGFic1t0YWJGb2N1c10uZm9jdXMoKVxyXG4vLyAgICAgfVxyXG4vLyAgIH0pXHJcbi8vIH0pXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHRmlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWRHRmlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNhMFZCUVhGRU8wRkJRM0pFTEhkRVFVRjFSRHRCUVVWMlJDeHRSRUZCYlVRN1FVRkRia1FzZFVWQlFYVkZPMEZCUlhaRkxGTkJRVk1zUjBGQlJ6dEpRVU5XTEUxQlFVMHNWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zVTBGQlV5eERRVUZETEVOQlFVRTdTVUZEYWtVc1NVRkJTU3hEUVVGRExGVkJRVlU3VVVGQlJTeFBRVUZOTzBsQlJYWkNMRTFCUVUwc1NVRkJTU3hIUVVGSExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdEpRVU4wUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUVR0SlFVVTNSQ3hKUVVGSkxHZENRVUZuUWl4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVONFFpeEpRVUZKTEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFXZENMRU5CUVVFN1NVRkZka1FzYlVKQlFXMUNMRVZCUVVVc1EwRkJRVHRKUVVWeVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUXpkRUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVVzTkVKQlFWRXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUlhSRkxIVkNRVUYxUWp0SlFVTjJRaXhUUVVGVExGTkJRVk1zUTBGQlF5eExRVUZMTzFGQlEzUkNMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZCTzFGQlF6RkNMRFJDUVVFMFFqdFJRVU0xUWl4eFEwRkJjVU03VVVGRGNrTXNNRU5CUVRCRE8xRkJRekZETEcxQ1FVRnRRaXhGUVVGRkxFTkJRVUU3VVVGRmNrSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZETDBRc1YwRkJWeXhEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1VVRkZha1FzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4RlFVRkZMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRXRCUVUwc1MwRkJjVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRM3BKTEVOQlFVTTdTVUZGUkN4VFFVRlRMRzFDUVVGdFFqdFJRVU14UWl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRaUVVGRkxFOUJRVTA3VVVGRmRrSXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RFFVRmpMRFJDUVVFMFFpeERRVUZETEVOQlFVRTdVVUZETlVZc1NVRkJTU3hEUVVGRExHZENRVUZuUWp0WlFVRkZMRTlCUVUwN1VVRkZOMElzWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEhRVUZITEZkQlFWY3NRMEZCUXl4VlFVRlZMRWxCUVVrc1EwRkJRVHRSUVVNelJDeG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITERoQ1FVRmxMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3U1VGRE4wUXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3hyUWtGQlpTeEhRVUZITEVOQlFVRTdRVUZGYkVJc2JVWkJRVzFHTzBGQlJXNUdMRFpEUVVFMlF6dEJRVU0zUXl4eFJVRkJjVVU3UVVGRmNrVXNORVJCUVRSRU8wRkJRelZFTEhGQ1FVRnhRanRCUVVOeVFpd3JRMEZCSzBNN1FVRkRMME1zYjBKQlFXOUNPMEZCUTNCQ0xHdEVRVUZyUkR0QlFVTnNSQ3h2UkVGQmIwUTdRVUZEY0VRc1owTkJRV2RETzBGQlEyaERMSEZDUVVGeFFqdEJRVU55UWl4clJFRkJhMFE3UVVGRGJFUXNlVU5CUVhsRE8wRkJRM3BETEhsQ1FVRjVRanRCUVVONlFpeFpRVUZaTzBGQlExb3NkVUpCUVhWQ08wRkJRM1pDTEhWRFFVRjFRenRCUVVOMlF5eHhRa0ZCY1VJN1FVRkRja0lzYjBSQlFXOUVPMEZCUTNCRUxEaENRVUU0UWp0QlFVTTVRaXgxUTBGQmRVTTdRVUZEZGtNc1dVRkJXVHRCUVVOYUxGVkJRVlU3UVVGRlZpeHRSRUZCYlVRN1FVRkRia1FzSzBKQlFTdENPMEZCUXk5Q0xGRkJRVkU3UVVGRFVpeFBRVUZQTzBGQlExQXNTMEZCU3lKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0RWxlbWVudFdpZHRoID0gZXhwb3J0cy5nZXRXaW5kb3dTY3JvbGxUb3AgPSBleHBvcnRzLmdldEVsZW1lbnRPZmZzZXRUb3AgPSBleHBvcnRzLmFkZENsYXNzbmFtZSA9IGV4cG9ydHMucmVtb3ZlQ2xhc3NuYW1lID0gdm9pZCAwO1xyXG5leHBvcnRzLnJlbW92ZUNsYXNzbmFtZSA9IChlbGVtZW50LCBjbGFzc25hbWUpID0+IGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc25hbWUpO1xyXG5leHBvcnRzLmFkZENsYXNzbmFtZSA9IChlbGVtZW50LCBjbGFzc25hbWUpID0+IGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc25hbWUpO1xyXG5mdW5jdGlvbiBnZXRFbGVtZW50T2Zmc2V0VG9wKGVsZW1lbnQpIHtcclxuICAgIGxldCBvZmZzZXRUb3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcclxuICAgIGNvbnN0IGhhc1BhcmVudEVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcclxuICAgIGlmIChoYXNQYXJlbnRFbGVtZW50KVxyXG4gICAgICAgIG9mZnNldFRvcCArPSBlbGVtZW50Lm9mZnNldFBhcmVudC5vZmZzZXRUb3A7XHJcbiAgICByZXR1cm4gb2Zmc2V0VG9wO1xyXG59XHJcbmV4cG9ydHMuZ2V0RWxlbWVudE9mZnNldFRvcCA9IGdldEVsZW1lbnRPZmZzZXRUb3A7XHJcbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbFRvcCgpIHtcclxuICAgIHJldHVybiB3aW5kb3cuc2Nyb2xsWSB8fCB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbn1cclxuZXhwb3J0cy5nZXRXaW5kb3dTY3JvbGxUb3AgPSBnZXRXaW5kb3dTY3JvbGxUb3A7XHJcbmZ1bmN0aW9uIGdldEVsZW1lbnRXaWR0aChlbGVtZW50KSB7XHJcbiAgICAvLyByZXR1cm4gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxyXG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkud2lkdGg7XHJcbiAgICAvLyByZXR1cm4gYCR7ZWxlbWVudC5vZmZzZXRXaWR0aH1weGBcclxufVxyXG5leHBvcnRzLmdldEVsZW1lbnRXaWR0aCA9IGdldEVsZW1lbnRXaWR0aDtcclxuLy8gSGlkZSB0aGUgbWVudSB3aGVuIGNsaWNraW5nIG91dHNpZGUgb2YgaXRcclxuLy8gZXhwb3J0IGNvbnN0IGRvY3VtZW50Q2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xyXG4vLyAgIGNvbnN0IGlzQ2xpY2tlZE91dHNpZGUgPSAhbWVudS5jb250YWlucyhlLnRhcmdldClcclxuLy8gICBpZiAoaXNDbGlja2VkT3V0c2lkZSkge1xyXG4vLyAgICAgbWVudS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxyXG4vLyAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb2N1bWVudENsaWNrSGFuZGxlcilcclxuLy8gICB9XHJcbi8vIH1cclxuLy8gY29uc3Qgc2libGluZ3MgPSBbXS5zbGljZS5jYWxsKHBhcmVudC5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XHJcbi8vICAgcmV0dXJuIGNoaWxkICE9PSBlbGU7XHJcbi8vIH0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laV3hsYldWdWRGVjBhV3h6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2laV3hsYldWdWRGVjBhV3h6TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZoTEZGQlFVRXNaVUZCWlN4SFFVRkhMRU5CUVVNc1QwRkJUeXhGUVVGRkxGTkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdRVUZETjBVc1VVRkJRU3haUVVGWkxFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RlFVRkZMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRCUVVWd1JpeFRRVUZuUWl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTzBsQlEzcERMRWxCUVVrc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVRTdTVUZEYWtNc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGQk8wbEJRemRETEVsQlFVa3NaMEpCUVdkQ08xRkJRVVVzVTBGQlV5eEpRVUZKTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1UwRkJVeXhEUVVGQk8wbEJSV3BGTEU5QlFVOHNVMEZCVXl4RFFVRkJPMEZCUTJ4Q0xFTkJRVU03UVVGT1JDeHJSRUZOUXp0QlFVVkVMRk5CUVdkQ0xHdENRVUZyUWp0SlFVTm9ReXhQUVVGUExFMUJRVTBzUTBGQlF5eFBRVUZQTEVsQlFVa3NUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJRVHRCUVVNM1F5eERRVUZETzBGQlJrUXNaMFJCUlVNN1FVRkZSQ3hUUVVGblFpeGxRVUZsTEVOQlFVTXNUMEZCVHp0SlFVTnlReXdyUTBGQkswTTdTVUZETDBNc1QwRkJUeXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVUU3U1VGRGRFTXNiME5CUVc5RE8wRkJRM1JETEVOQlFVTTdRVUZLUkN3d1EwRkpRenRCUVVWRUxEUkRRVUUwUXp0QlFVTTFReXh2UkVGQmIwUTdRVUZEY0VRc2MwUkJRWE5FTzBGQlEzUkVMRFJDUVVFMFFqdEJRVU0xUWl4dFEwRkJiVU03UVVGRmJrTXNhMFZCUVd0Rk8wRkJRMnhGTEUxQlFVMDdRVUZEVGl4SlFVRkpPMEZCUlVvc01rVkJRVEpGTzBGQlF6TkZMREJDUVVFd1FqdEJRVU14UWl4TlFVRk5JbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vdmFyIGFiYyA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcclxuLy8gcmVxdWlyZSgnLi9tb2RhbC5zY3NzJyk7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBicm93c2VyVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9icm93c2VyVXRpbHNcIik7XHJcbi8vIHRvZ2dsZUNsYXNzIOyWtOuWpCDsnbTrsqTtirjsnbjsp4Ag6rCc67Cc7J6QIOuPhOq1rOuhnCDslYwg7IiYIOqwgCDsl4brhKRcclxuLy8g66eI7Jqw7Iqk66GcIOqwgOuKpe2VnCBjb250ZXh0IG1lbnVz64qUIO2CpOuztOuTnOuhnOuPhCDrkJjslrTslbxcclxuLy8g67mE66qo64usIOuLpOydtOyWvOuhnOq3uOulvCDsnITtlbTshJxcclxuLy8g7Je066CkIOyeiOuKlCDri6TsnbTslrzroZzqt7jsmYAg66mU7J24IO2OmOydtOyngOqwhOyXkCDtj6zsu6TsiqTrpbwg7J2064+Z7Iuc7YKsIOyImCDsnojripRcclxuLy8g7KCE7JetIO2CpOuztOuTnCDri6jstpXtgqTqsIAg7ZWE7JqU7ZWY64uk64qUIOygkOydhCDsnKDsnZjtlZjsi63si5zsmKQuXHJcbi8vICEg66qo64us7J2EIOuLq+yVmOydhCDrlYwg7J207KCEIOyXmOumrOuovO2KuOuhnCDtj6zsu6TsiqRcclxuLy8gVE9ETyDslrTrlqQg67KE7Yq87J2EIO2BtOumre2VtOuPhCDri6vslYTslbwg7ZWoLiAo7ZmV7J24L+y3qOyGjClcclxuLy8gVE9ETyDrqqjri6wg67CW7J2YIOy7qO2FkOy4oOyXkCBhcmlhLWhpZGRlbiDrqqjri6zsnZgg7JyE7LmY64qUIOuwlOuUlCDslYjsl5A/XHJcbi8vIFRPRE8g64uk7J207Ja866Gc6re4IOyViOyXkOyEnOunjCDtg63snbQg64+M7JWE7JW8XHJcbi8vIFRPRE9cclxuLy8gVE9ETyDsp4DquIgg65287Jqw7YyF7JeQ7IScIGhpc3Rvcnnrpbwg7KCA7J6l7ZWgIOuVjOydmCDrrLjsoJwuXHJcbi8vICEgc3Bh7JeQ7IScIOuqqOuLrOydgCDqsrBcclxuZnVuY3Rpb24gbW9kYWwoeyBzZWxlY3RvcjogdHJpZ2dlciB9KSB7XHJcbiAgICBjb25zdCBtb2RhbFRyaWdnZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0cmlnZ2VyKTtcclxuICAgIGNvbnN0IG1vZGFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vZGFsJyk7XHJcbiAgICAvLyBjb25zdCBtb2RhbERpYWxvZyA9IG1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1kaWFsb2cnKVxyXG4gICAgLy8gY29uc3QgY2xvc2VFbGVtZW50ID0gbW9kYWxDb250YWluZXIucXVlcnlTZWxlY3RvcignLmpzLW1vZGFsLWNsb3NlJylcclxuICAgIGxldCBwcmV2aW91c0FjdGl2ZUVsZW1lbnQ7XHJcbiAgICBsZXQgcHJldmlvdXNQYWdlWU9mZnNldDtcclxuICAgIGNvbnN0IGlzT3BlbmVkID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLW1vZGFsLXZpc2libGUnKTtcclxuICAgIC8vY29uc3QgaXNPdXRzaWRlID0gIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcubW9kYWwtaW5uZXInKTtcclxuICAgIG1vZGFsVHJpZ2dlcnMuZm9yRWFjaCh0cmlnZ2VyID0+IHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBtb2RhbElkID0gdHJpZ2dlci5kYXRhc2V0Lm1vZGFsO1xyXG4gICAgICAgIGZldGNoRGF0YShtb2RhbElkKTtcclxuICAgICAgICBvcGVuTW9kYWwoKTtcclxuICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBjbG9zZU1vZGFsKVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0Nsb3NlRGlhbG9nKTtcclxuICAgICAgICBtb2RhbENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlTW9kYWxUZW1wKTtcclxuICAgIH0pKTtcclxuICAgIGZ1bmN0aW9uIGZldGNoRGF0YShtb2RhbElkKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gYC92aWV3cy8ke21vZGFsSWR9Lmh0bWxgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChlbmRwb2ludCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdTb21ldGhpbmcgd2VudCB3cm9uZy4nO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IHlpZWxkIHJlc3BvbnNlLnRleHQoKTtcclxuICAgICAgICAgICAgICAgIG1vZGFsQ29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoQnJvd3Nlckhpc3Rvcnkoe30sICcnLCBgLyNwcm9maWxlL21vZGFsLyR7bW9kYWxJZH1gKVxyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNBY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIC8vIG1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpLmZvY3VzKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2xvc2VNb2RhbFRlbXAoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgY29uc3QgaXNDbG9zZUVsZW1lbnQgPSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbCcpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsLWNsb3NlJyk7XHJcbiAgICAgICAgLy8gaWYgKGlzQ2xvc2VFbGVtZW50KSBiYWNrSGlzdG9yeSgpXHJcbiAgICAgICAgaWYgKGlzQ2xvc2VFbGVtZW50KVxyXG4gICAgICAgICAgICBjbG9zZU1vZGFsKCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBvcGVuTW9kYWwoKSB7XHJcbiAgICAgICAgcHJldmlvdXNQYWdlWU9mZnNldCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLW1vZGFsLXZpc2libGUnLCAnbG9jay1zY3JvbGwnKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IGAtJHtwcmV2aW91c1BhZ2VZT2Zmc2V0fXB4YDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1tb2RhbC12aXNpYmxlJywgJ2xvY2stc2Nyb2xsJyk7XHJcbiAgICAgICAgbW9kYWxDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHByZXZpb3VzUGFnZVlPZmZzZXQpO1xyXG4gICAgICAgIHByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgIC8vIGNsZWFudXAgRXZlbnRzXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNoZWNrQ2xvc2VEaWFsb2cpO1xyXG4gICAgICAgIG1vZGFsQ29udGFpbmVyID09PSBudWxsIHx8IG1vZGFsQ29udGFpbmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtb2RhbENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlTW9kYWxUZW1wKTtcclxuICAgICAgICAvLyB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBjbG9zZU1vZGFsKVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2hlY2tDbG9zZURpYWxvZyhldmVudCkge1xyXG4gICAgICAgIGNvbnN0IGlzS2V5RXNjID0gZXZlbnQua2V5Q29kZSA9PT0gMjc7XHJcbiAgICAgICAgaWYgKGlzS2V5RXNjKVxyXG4gICAgICAgICAgICBicm93c2VyVXRpbHNfMS5iYWNrSGlzdG9yeSgpO1xyXG4gICAgfVxyXG59XHJcbi8vIG1vZGFsVHJpZ2dlcnMuZm9yRWFjaChtb2RhbEVsZW1lbnQgPT5cclxuLy8gICBtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtbW9yZScpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuLy8gICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcbi8vICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbi8vICAgfSksXHJcbi8vIClcclxuZXhwb3J0cy5kZWZhdWx0ID0gbW9kYWw7XHJcbmNvbnN0IGdldE9wdGlvbnMgPSBkYXRhID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSB8fCB7fSksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59O1xyXG5jb25zdCBnZXREYXRhID0gKHVybCwgZGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcclxuICAgICAgICB9LFxyXG4gICAgfSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gPGZpZWxkc2V0IHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsbGVkYnk9XCJkaWFsb2cxVGl0bGVcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiZGlhbG9nMURlc2NcIj5cclxuLy8gICA8bGVnZW5kPlxyXG4vLyAgICAgPHNwYW4gaWQ9XCJkaWFsb2cxVGl0bGVcIj5Zb3VyIHBlcnNvbmFsIGRldGFpbHMgd2VyZSBzdWNjZXNzZnVsbHkgdXBkYXRlZC48L3NwYW4+XHJcbi8vICAgICA8c3BhbiBpZD1cImRpYWxvZzFEZXNjXCI+WW91IGNhbiBjaGFuZ2UgeW91ciBkZXRhaWxzIGF0IGFueSB0aW1lIGluIHRoZSB1c2VyIGFjY291bnQgc2VjdGlvbi48L3NwYW4+XHJcbi8vICAgPC9sZWdlbmQ+XHJcbi8vICAgPGJ1dHRvbj5DbG9zZTwvYnV0dG9uPlxyXG4vLyA8L2ZpZWxkc2V0PlxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liVzlrWVd3dWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp0YjJSaGJDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFc01FUkJRVEJFTzBGQlF6RkVMREpDUVVFeVFqczdPenM3T3pzN096czdRVUZGTTBJc2QwUkJRWFZGTzBGQlQzWkZMSGREUVVGM1F6dEJRVVY0UXl4dlEwRkJiME03UVVGRGNFTXNhVUpCUVdsQ08wRkJRMnBDTEhWRFFVRjFRenRCUVVOMlF5d3JRa0ZCSzBJN1FVRkZMMElzTWtKQlFUSkNPMEZCUXpOQ0xHdERRVUZyUXp0QlFVTnNReXcyUTBGQk5rTTdRVUZETjBNc2VVSkJRWGxDTzBGQlEzcENMRTlCUVU4N1FVRkRVQ3h2UTBGQmIwTTdRVUZEY0VNc1owSkJRV2RDTzBGQlJXaENMRk5CUVZNc1MwRkJTeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEU5QlFVOHNSVUZCWVR0SlFVTTNReXhOUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRV01zVDBGQlR5eERRVUZETEVOQlFVRTdTVUZEY2tVc1RVRkJUU3hqUVVGakxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRKUVVOd1JTeHZSVUZCYjBVN1NVRkRjRVVzZFVWQlFYVkZPMGxCUTNaRkxFbEJRVWtzY1VKQlFYRkNMRU5CUVVFN1NVRkRla0lzU1VGQlNTeHRRa0ZCYlVJc1EwRkJRVHRKUVVWMlFpeE5RVUZOTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdEpRVU55UlN3d1JFRkJNRVE3U1VGRk1VUXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVU01UWl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhGUVVGRk8xRkJRM2hETEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRVHRSUVVWMFFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlFUdFJRVU55UXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3VVVGRmJFSXNVMEZCVXl4RlFVRkZMRU5CUVVFN1VVRkZXQ3hyUkVGQmEwUTdVVUZEYkVRc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkJPMUZCUlhSRUxHTkJRV1VzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVRTdTVUZETTBRc1EwRkJReXhEUVVGRExFTkJRMGdzUTBGQlFUdEpRVVZFTEZOQlFXVXNVMEZCVXl4RFFVRkRMRTlCUVdkQ096dFpRVU4yUXl4SlFVRkpPMmRDUVVOR0xFMUJRVTBzVVVGQlVTeEhRVUZITEZWQlFWVXNUMEZCVHl4UFFVRlBMRU5CUVVFN1owSkJRM3BETEUxQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzJkQ1FVTjBReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdiMEpCUVVVc1RVRkJUU3gxUWtGQmRVSXNRMEZCUVR0blFrRkZMME1zVFVGQlRTeEpRVUZKTEVkQlFVY3NUVUZCVFN4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVUU3WjBKQlJXeERMR05CUVdVc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZCTzJkQ1FVVm9ReXd5UkVGQk1rUTdaMEpCUXpORUxIRkNRVUZ4UWl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVUU3WjBKQlF6bERMR2xFUVVGcFJEdGhRVU5zUkR0WlFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRkxFZEJRVVU3VVVGRGNFSXNRMEZCUXp0TFFVRkJPMGxCUlVRc1UwRkJVeXhqUVVGakxFTkJRVU1zUzBGQlN6dFJRVU16UWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQmNVSXNRMEZCUVR0UlFVTXhReXhOUVVGTkxHTkJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkJPMUZCUTNoSExHOURRVUZ2UXp0UlFVVndReXhKUVVGSkxHTkJRV003V1VGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUVR0SlFVTnNReXhEUVVGRE8wbEJSVVFzVTBGQlV5eFRRVUZUTzFGQlEyaENMRzFDUVVGdFFpeEhRVUZITEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVFN1VVRkRlRU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHdENRVUZyUWl4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGQk8xRkJRemxFTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEcxQ1FVRnRRaXhKUVVGSkxFTkJRVUU3U1VGRGRrUXNRMEZCUXp0SlFVTkVMRk5CUVZNc1ZVRkJWVHRSUVVOcVFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVUU3VVVGRmFrVXNZMEZCWlN4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVUU3VVVGRE9VSXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1EwRkJRVHRSUVVWMlF5eHhRa0ZCY1VJc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlFUdFJRVVUzUWl4cFFrRkJhVUk3VVVGRGFrSXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZOQlFWTXNSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZCTzFGQlEzcEVMR05CUVdNc1lVRkJaQ3hqUVVGakxIVkNRVUZrTEdOQlFXTXNRMEZCUlN4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNZMEZCWXl4RlFVRkRPMUZCUXpWRUxIRkVRVUZ4UkR0SlFVTjJSQ3hEUVVGRE8wbEJRMFFzVTBGQlV5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTE8xRkJRemRDTEUxQlFVMHNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFdEJRVXNzUlVGQlJTeERRVUZCTzFGQlEzSkRMRWxCUVVrc1VVRkJVVHRaUVVGRkxEQkNRVUZYTEVWQlFVVXNRMEZCUVR0SlFVTTNRaXhEUVVGRE8wRkJRMGdzUTBGQlF6dEJRVVZFTEhkRFFVRjNRenRCUVVONFF5eHRSa0ZCYlVZN1FVRkRia1lzT0VKQlFUaENPMEZCUXpsQ0xEWkNRVUUyUWp0QlFVTTNRaXhSUVVGUk8wRkJRMUlzU1VGQlNUdEJRVVZLTEd0Q1FVRmxMRXRCUVVzc1EwRkJRVHRCUVVWd1FpeE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSVHRKUVVONFFpeFBRVUZQTzFGQlEwd3NUVUZCVFN4RlFVRkZMRTFCUVUwN1VVRkRaQ3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRMmhETEU5QlFVOHNSVUZCUlR0WlFVTlFMR05CUVdNc1JVRkJSU3hwUTBGQmFVTTdVMEZEYkVRN1MwRkRSaXhEUVVGQk8wRkJRMGdzUTBGQlF5eERRVUZCTzBGQlJVUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVVTdTVUZETlVJc1QwRkJUeXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTzFGQlEyaENMRTFCUVUwc1JVRkJSU3hOUVVGTk8xRkJRMlFzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRekZDTEU5QlFVOHNSVUZCUlR0WlFVTlFMR05CUVdNc1JVRkJSU3hwUTBGQmFVTTdVMEZEYkVRN1MwRkRSaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMUZCUTJwQ0xFbEJRVWtzVVVGQlVTeERRVUZETEVWQlFVVTdXVUZCUlN4UFFVRlBMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlFUdFJRVU4yUXl4UFFVRlBMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdTVUZEYWtNc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeERRVUZETEVOQlFVRTdRVUZGUkN4NVJrRkJlVVk3UVVGRGVrWXNZVUZCWVR0QlFVTmlMSE5HUVVGelJqdEJRVU4wUml4NVIwRkJlVWM3UVVGRGVrY3NZMEZCWXp0QlFVVmtMREpDUVVFeVFqdEJRVU16UWl4alFVRmpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5iYWNrSGlzdG9yeSA9IGV4cG9ydHMucHVzaEJyb3dzZXJIaXN0b3J5ID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBwdXNoQnJvd3Nlckhpc3Rvcnkoc3RhdGUgPSB7fSwgdGl0bGUgPSAnJywgdXJsID0gJycpIHtcclxuICAgIGhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsKTtcclxufVxyXG5leHBvcnRzLnB1c2hCcm93c2VySGlzdG9yeSA9IHB1c2hCcm93c2VySGlzdG9yeTtcclxuZnVuY3Rpb24gYmFja0hpc3RvcnkoKSB7XHJcbiAgICBoaXN0b3J5LmJhY2soKTtcclxufVxyXG5leHBvcnRzLmJhY2tIaXN0b3J5ID0gYmFja0hpc3Rvcnk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVluSnZkM05sY2xWMGFXeHpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVluSnZkM05sY2xWMGFXeHpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMRk5CUVdkQ0xHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1IwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlN5eEhRVUZITEVWQlFVVXNSVUZCUlN4SFFVRkhMRWRCUVVjc1JVRkJSVHRKUVVOcVJTeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVRTdRVUZEZEVNc1EwRkJRenRCUVVaRUxHZEVRVVZETzBGQlJVUXNVMEZCWjBJc1YwRkJWenRKUVVONlFpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN1FVRkRhRUlzUTBGQlF6dEJRVVpFTEd0RFFVVkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdG9Ub3AgPSAoeyBzZWxlY3RvcjogdGFyZ2V0IH0pID0+IHtcclxuICAgIGNvbnN0IHRvVG9wRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcclxuICAgIGlmICghdG9Ub3BFbGVtZW50KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHRvVG9wRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHRvVG9wRWxlbWVudC5uYW1lIHx8IHRvVG9wRWxlbWVudC5ocmVmXHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gdG9Ub3A7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHOVViM0F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBiMVJ2Y0M1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEUxQlFVMHNTMEZCU3l4SFFVRkhMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzVFVGQlRTeEZRVUZoTEVWQlFVVXNSVUZCUlR0SlFVTm9SQ3hOUVVGTkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRnJRaXhOUVVGTkxFTkJRVU1zUTBGQlFUdEpRVU53UlN4SlFVRkpMRU5CUVVNc1dVRkJXVHRSUVVGRkxFOUJRVTA3U1VGRmVrSXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1JVRkJSVHRSUVVNM1F5eExRVUZMTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVFN1VVRkRkRUlzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRmNrSXNaMFZCUVdkRk8wbEJRMnhGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNTMEZCU3l4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIHBhc3NlZOyZgCDrsJTroZwuIGhlYWRlciAvIHBvc3QtaGVhZFxyXG4vLyB0b2RvIHJlbW92ZUV2ZW50TGlzdGVuZXJcclxuLy8gdG9kbyDsl5jrpqzrqLztirjsnZgg7IOB64uo7JeQ7IScIOuYkOuKlCDtlZjri6jsl5DshJwgc3RpY2t5XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3Qgb3B0aW1pemF0aW9uVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9vcHRpbWl6YXRpb25VdGlsc1wiKTtcclxuY29uc3QgZWxlbWVudFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZWxlbWVudFV0aWxzXCIpO1xyXG4vLyAhIHRhcmdldEVsZW1lbnQsIHBvc2l0aW9uLCBib2R5Y2xhc3NOYW1l7J2EIOuwm+uKlCDqsowg66ee7J2MLi4uXHJcbmNvbnN0IHBvc2l0aW9uU3RpY2t5ID0gKHsgc2VsZWN0b3IsIGFkZENsYXNzLCBpc1Bhc3NlZCB9KSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICBpZiAoIWVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgbGV0IG9mZnNldFRvcCA9IGVsZW1lbnRVdGlsc18xLmdldEVsZW1lbnRPZmZzZXRUb3AoZWxlbWVudCk7XHJcbiAgICBjb25zdCBlbGVtZW50SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICBjb25zdCBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgKyBlbGVtZW50SGVpZ2h0O1xyXG4gICAgbGV0IHByZXZpb3VzU2Nyb2xsVG9wID0gaXNQYXNzZWQgPyBvZmZzZXRCb3R0b20gOiBvZmZzZXRUb3A7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb3B0aW1pemF0aW9uVXRpbHNfMS50aHJvdHRsZShoYW5kbGVFbGVtZW50U2Nyb2xsKSwgZmFsc2UpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9wdGltaXphdGlvblV0aWxzXzEudGhyb3R0bGUoc2V0RWxlbWVudE9mZnNldFRvcCksIGZhbHNlKTtcclxuICAgIGZ1bmN0aW9uIHNldEVsZW1lbnRPZmZzZXRUb3AoKSB7XHJcbiAgICAgICAgb2Zmc2V0VG9wID0gZWxlbWVudFV0aWxzXzEuZ2V0RWxlbWVudE9mZnNldFRvcChlbGVtZW50KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGhhbmRsZUVsZW1lbnRTY3JvbGwoKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTY3JvbGxUb3AgPSBlbGVtZW50VXRpbHNfMS5nZXRXaW5kb3dTY3JvbGxUb3AoKTtcclxuICAgICAgICBjb25zdCBpc1N0dWNrID0gY3VycmVudFNjcm9sbFRvcCArIGVsZW1lbnRIZWlnaHQgPiBwcmV2aW91c1Njcm9sbFRvcDtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoYWRkQ2xhc3MsIGlzU3R1Y2spO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1RvcCA9IGlzU3R1Y2sgPyBgJHtlbGVtZW50SGVpZ2h0fXB4YCA6ICcwJztcclxuICAgICAgICAvLyB0b2RvIOydvOuLqC4uIOu5oOultOOFlOOEsS4uIG5hdmJhci4uLi4uaGVpZ2h0Li4uXHJcbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnLmhlcm8nKVxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdUb3AgPSAnMCc7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHBvc2l0aW9uU3RpY2t5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljRzl6YVhScGIyNVRkR2xqYTNrdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp3YjNOcGRHbHZibE4wYVdOcmVTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFc2FVTkJRV2xETzBGQlEycERMREpDUVVFeVFqdEJRVU16UWl4cFEwRkJhVU03TzBGQlJXcERMR3RGUVVGeFJEdEJRVU55UkN4M1JFRkJLMFU3UVVGUkwwVXNkVVJCUVhWRU8wRkJSWFpFTEUxQlFVMHNZMEZCWXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCWXl4RlFVRkZMRVZCUVVVN1NVRkRkRVVzVFVGQlRTeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXhSUVVGUkxFTkJRVU1zUTBGQlFUdEpRVU0zUkN4SlFVRkpMRU5CUVVNc1QwRkJUenRSUVVGRkxFOUJRVTA3U1VGRmNFSXNTVUZCU1N4VFFVRlRMRWRCUVVjc2EwTkJRVzFDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1NVRkZOVU1zVFVGQlRTeGhRVUZoTEVkQlFVY3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJRVHRKUVVNeFF5eE5RVUZOTEZsQlFWa3NSMEZCUnl4VFFVRlRMRWRCUVVjc1lVRkJZU3hEUVVGQk8wbEJSVGxETEVsQlFVa3NhVUpCUVdsQ0xFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlFUdEpRVVV6UkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRFJDUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU4yUlN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRFJDUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdEpRVVYyUlN4VFFVRlRMRzFDUVVGdFFqdFJRVU14UWl4VFFVRlRMRWRCUVVjc2EwTkJRVzFDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1NVRkRNVU1zUTBGQlF6dEpRVVZFTEZOQlFWTXNiVUpCUVcxQ08xRkJRekZDTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzYVVOQlFXdENMRVZCUVVVc1EwRkJRVHRSUVVVelF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4blFrRkJaMElzUjBGQlJ5eGhRVUZoTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVUU3VVVGRmNFVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRVHRSUVVOcVJDeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMR0ZCUVdFc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVRTdVVUZGY2tVc2QwTkJRWGRETzFGQlEzaERMRWxCUVVrc1VVRkJVU3hMUVVGTExFOUJRVTg3V1VGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzUjBGQlJ5eERRVUZCTzBsQlEyaEZMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4alFVRmpMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzY3JvbGxBbmltYXRpb24gPSAoeyBzZWxlY3Rvcjogc2VsZWN0b3IgfSkgPT4ge1xyXG4gICAgY29uc3QgQU5JTUFURURfQ0xBU1NOQU1FID0gJ2lzLW9ic2VydmVkJztcclxuICAgIGNvbnN0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcbiAgICAvLyBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zY3JvbGwtYW5pbWF0aW9uJykpLFxyXG4gICAgLy8gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtc2Nyb2xsLWFuaW1hdGlvbicpKSxcclxuICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zY3JvbGwtYW5pbWF0aW9uJykpXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgIHJvb3Q6IG51bGwsXHJcbiAgICAgICAgcm9vdE1hcmdpbjogJy0xMDBweCAwcHggLTEwMHB4IDBweCcsXHJcbiAgICAgICAgdGhyZXNob2xkOiAwLFxyXG4gICAgfTtcclxuICAgIGxldCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihjYWxsYmFjaywgb3B0aW9ucyk7XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4gb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KSk7XHJcbiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbnRyaWVzLCBvYnNlcnZlcikge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGlmICghZW50cnkuaXNJbnRlcnNlY3RpbmcpIHJldHVyblxyXG4gICAgICAgICAgICAvLyBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShBTklNQVRFRF9DTEFTU05BTUUsIGVudHJ5LmlzSW50ZXJzZWN0aW5nKVxyXG4gICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKEFOSU1BVEVEX0NMQVNTTkFNRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShBTklNQVRFRF9DTEFTU05BTUUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdwdWxzZScpXHJcbiAgICAgICAgICAgIC8vIGVudHJ5LnRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBldmVudCA9PiBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoQU5JTUFURURfQ0xBU1NOQU1FKSk7XHJcbiAgICAgICAgICAgIC8vIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpIC8vIG9uY2VcclxuICAgICAgICAgICAgLy8gY29uc3QgaXNJblZpZXcgPSBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA+IDBcclxuICAgICAgICAgICAgLy8gaWYoaXNJblZpZXcpIHsgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3RhZGEnKX1cclxuICAgICAgICAgICAgLy8gZWxzZSB7IGVudHJ5LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCd0YWRhJyl9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbEFuaW1hdGlvbjtcclxuLy8gZnVuY3Rpb24gYW5pbWF0ZU9uTG9hZCgpIHtcclxuLy8gICBjb25zdCBzY3JvbGxFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1sb2FkLWFuaW1hdGlvbicpXHJcbi8vICAgc2Nyb2xsRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuLy8gICAgIGNvbnN0IGlzT2JzZXJ2ZWQgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodCA8PSAwXHJcbi8vICAgICBpZiAoIWlzT2JzZXJ2ZWQpIHJldHVyblxyXG4vLyAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKEFOSU1BVEVEX0NMQVNTTkFNRSlcclxuLy8gICB9KVxyXG4vLyB9XHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZShhbmltYXRlT25TY3JvbGwpLCBmYWxzZSlcclxuLy8gc2Nyb2xsRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuLy8gICBjb25zdCBpc1Njcm9sbGVkID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodCAqIDAuNSAtIHdpbmRvdy5pbm5lckhlaWdodCA8PSAwXHJcbi8vICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKEFOSU1BVEVEX0NMQVNTTkFNRSwgaXNTY3JvbGxlZClcclxuLy8gfSlcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIChldmVudCkgPT4ge1xyXG4vLyBcdHZhciB0aW1lcjtcclxuLy8gXHRpZiAoIXRpbWVyKSB7XHJcbi8vIFx0XHR0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbi8vIFx0XHRcdHRpbWVyPW51bGw7XHJcbi8vIFx0XHRcdGNvbnN0IHRhcmdldFN0aWNreSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zdGlja3knKTtcclxuLy8gXHRcdFx0Y29uc3QgdGFyZ2V0U3RpY2t5SGVpZ2h0ID0gdGFyZ2V0U3RpY2t5LmNsaWVudEhlaWdodDtcclxuLy8gXHRcdFx0aWYod2luZG93LnBhZ2VZT2Zmc2V0ID4gdGFyZ2V0U3RpY2t5Lm9mZnNldFRvcCl7XHJcbi8vIFx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuc3R5bGUucGFkZGluZ1RvcCA9IHRhcmdldFN0aWNreUhlaWdodCArICdweCc7XHJcbi8vIFx0XHRcdFx0XHR0YXJnZXRTdGlja3kuY2xhc3NMaXN0LmFkZCgnaXMtc3RpY2t5Jyk7XHJcbi8vIFx0XHRcdH0gZWxzZSB7XHJcbi8vIFx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuc3R5bGUucGFkZGluZ1RvcCA9ICcwcHgnO1xyXG4vLyBcdFx0XHRcdFx0dGFyZ2V0U3RpY2t5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXN0aWNreScpO1xyXG4vLyBcdFx0XHR9XHJcbi8vIFx0XHR9LCA0MDApO1xyXG4vLyBcdH1cclxuLy8gfSk7XHJcbi8vIGNvbnN0IGFic29sdXRlVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbi8vIGZ1bmN0aW9uIGluaXRJbmRpY2F0b3IoKSB7XHJcbi8vICAgY29uc3QgaW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXNpZGUnKTtcclxuLy8gICBpbmRpY2F0b3IuY2xhc3NMaXN0LmFkZCgnaW5kaWNhdG9yJyk7XHJcbi8vICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYm94JykpLmZvckVhY2goKGJveCwgaW5kZXgpID0+IHtcclxuLy8gICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4vLyAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2luZGljYXRvci1pdGVtJyk7XHJcbi8vICAgICAgIGl0ZW0uZGF0YXNldC5pbmRleCA9IGluZGV4ICsgMTtcclxuLy8gICAgICAgaXRlbS50ZXh0Q29udGVudCA9IGluZGV4ICsgMTtcclxuLy8gICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBldmVudCA9PiBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ3B1bHNlJykpO1xyXG4vLyAgICAgICBpbmRpY2F0b3IuYXBwZW5kQ2hpbGQoaXRlbSk7XHJcbi8vICAgfSk7XHJcbi8vICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbmRpY2F0b3IpO1xyXG4vLyB9XHJcbi8vIGZ1bmN0aW9uIHVwZGF0ZUluZGljYXRvcihlbnRyaWVzLCBvYnNlcnZlcikge1xyXG4vLyAgIGNvbnN0IGluZGljYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbmRpY2F0b3InKTtcclxuLy8gICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4vLyAgICAgICBjb25zdCBpbmRleCA9IGVudHJ5LnRhcmdldC50ZXh0Q29udGVudC5yZXBsYWNlKCcjJywgJycpO1xyXG4vLyAgICAgICBjb25zdCBlbCA9IGluZGljYXRvci5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pbmRleD1cIiR7aW5kZXh9XCJdYCk7XHJcbi8vICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3B1bHNlJyk7XHJcbi8vICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ29uJywgZW50cnkuaXNJbnRlcnNlY3RpbmcpO1xyXG4vLyAgIH0pO1xyXG4vLyB9XHJcbi8vIGZ1bmN0aW9uIHVwZGF0ZUluZGljYXRvckJ5UmF0aW8oZW50cmllcywgb2JzZXJ2ZXIpIHtcclxuLy8gICBjb25zdCBpbmRpY2F0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5kaWNhdG9yJyk7XHJcbi8vICAgY29uc3QgY29sb3IgPSAncmdiYSgxNjAsIDIzMCwgMCwgYWxwaGEpJztcclxuLy8gICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4vLyAgICAgICBjb25zdCBpbmRleCA9IGVudHJ5LnRhcmdldC50ZXh0Q29udGVudC5yZXBsYWNlKCcjJywgJycpO1xyXG4vLyAgICAgICBjb25zdCBlbCA9IGluZGljYXRvci5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pbmRleD1cIiR7aW5kZXh9XCJdYCk7XHJcbi8vICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3B1bHNlJyk7XHJcbi8vICAgICAgIGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yLnJlcGxhY2UoJ2FscGhhJywgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8pO1xyXG4vLyAgIH0pO1xyXG4vLyB9XHJcbi8vIGluaXRJbmRpY2F0b3IoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJOeWIyeHNRVzVwYldGMGFXOXVMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWMyTnliMnhzUVc1cGJXRjBhVzl1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzVFVGQlRTeGxRVUZsTEVkQlFVY3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRVVVzUlVGQlJTeEZRVUZGTzBsQlEycEVMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NZVUZCWVN4RFFVRkJPMGxCUTNoRExFMUJRVTBzVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRGFFVXNiMFZCUVc5Rk8wbEJRM0JGTEdsRlFVRnBSVHRKUVVOcVJTeHhSRUZCY1VRN1NVRkRja1FzVFVGQlRTeFBRVUZQTEVkQlFVYzdVVUZEWkN4SlFVRkpMRVZCUVVVc1NVRkJTVHRSUVVOV0xGVkJRVlVzUlVGQlJTeDFRa0ZCZFVJN1VVRkRia01zVTBGQlV5eEZRVUZGTEVOQlFVTTdTMEZEWWl4RFFVRkJPMGxCUTBRc1NVRkJTU3hSUVVGUkxFZEJRVWNzU1VGQlNTeHZRa0ZCYjBJc1EwRkJReXhSUVVGUkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVRTdTVUZGTVVRc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVVjBSQ3hUUVVGVExGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVR0UlFVTnFReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMWxCUTNSQ0xHOURRVUZ2UXp0WlFVVndReXd3UlVGQk1FVTdXVUZGTVVVc1NVRkJTU3hMUVVGTExFTkJRVU1zWTBGQll5eEZRVUZGTzJkQ1FVTjRRaXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0aFFVTXZRenRwUWtGQlRUdG5Ra0ZEVEN4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdGhRVU5zUkR0WlFVVkVMSE5EUVVGelF6dFpRVU4wUXl4dlNFRkJiMGc3V1VGRGNFZ3NNa05CUVRKRE8xbEJSVE5ETEN0RFFVRXJRenRaUVVNdlF5eHhSRUZCY1VRN1dVRkRja1FzWjBSQlFXZEVPMUZCUTJ4RUxFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwb3NRMEZCUXp0QlFVTklMRU5CUVVNc1EwRkJRVHRCUVVWRUxHdENRVUZsTEdWQlFXVXNRMEZCUVR0QlFVVTVRaXcyUWtGQk5rSTdRVUZETjBJc01rVkJRVEpGTzBGQlF6TkZMSGREUVVGM1F6dEJRVU40UXl4MVJrRkJkVVk3UVVGRGRrWXNPRUpCUVRoQ08wRkJSVGxDTEdkRVFVRm5SRHRCUVVOb1JDeFBRVUZQTzBGQlExQXNTVUZCU1R0QlFVVktMSE5GUVVGelJUdEJRVU4wUlN4elEwRkJjME03UVVGRGRFTXNhMGhCUVd0SU8wRkJRMnhJTERaRVFVRTJSRHRCUVVNM1JDeExRVUZMTzBGQlJVd3NhVVJCUVdsRU8wRkJRMnBFTEdOQlFXTTdRVUZEWkN4cFFrRkJhVUk3UVVGRGFrSXNiME5CUVc5RE8wRkJRM0JETEdsQ1FVRnBRanRCUVVOcVFpeG5SVUZCWjBVN1FVRkRhRVVzTWtSQlFUSkVPMEZCUXpORUxITkVRVUZ6UkR0QlFVTjBSQ3h2UmtGQmIwWTdRVUZEY0VZc1owUkJRV2RFTzBGQlEyaEVMR05CUVdNN1FVRkRaQ3huUlVGQlowVTdRVUZEYUVVc2JVUkJRVzFFTzBGQlEyNUVMRTlCUVU4N1FVRkRVQ3hoUVVGaE8wRkJRMklzUzBGQlN6dEJRVU5NTEUxQlFVMDdRVUZGVGl4blJrRkJaMFk3UVVGRmFFWXNOa0pCUVRaQ08wRkJRemRDTEhWRVFVRjFSRHRCUVVWMlJDd3dRMEZCTUVNN1FVRkZNVU1zTkVWQlFUUkZPMEZCUXpWRkxHOUVRVUZ2UkR0QlFVVndSQ3c0UTBGQk9FTTdRVUZET1VNc2QwTkJRWGRETzBGQlEzaERMSE5EUVVGelF6dEJRVVYwUXl4MVIwRkJkVWM3UVVGRmRrY3NjVU5CUVhGRE8wRkJRM0pETEZGQlFWRTdRVUZGVWl3d1EwRkJNRU03UVVGRE1VTXNTVUZCU1R0QlFVVktMR2RFUVVGblJEdEJRVU5vUkN3MFJFRkJORVE3UVVGRk5VUXNLMEpCUVN0Q08wRkJReTlDTEdsRlFVRnBSVHRCUVVOcVJTeDFSVUZCZFVVN1FVRkZka1VzYlVOQlFXMURPMEZCUTI1RExIbEVRVUY1UkR0QlFVTjZSQ3hSUVVGUk8wRkJRMUlzU1VGQlNUdEJRVVZLTEhWRVFVRjFSRHRCUVVOMlJDdzBSRUZCTkVRN1FVRkROVVFzT0VOQlFUaERPMEZCUlRsRExDdENRVUVyUWp0QlFVTXZRaXhwUlVGQmFVVTdRVUZEYWtVc2RVVkJRWFZGTzBGQlJYWkZMRzFEUVVGdFF6dEJRVU51UXl4dlJrRkJiMFk3UVVGRGNFWXNVVUZCVVR0QlFVTlNMRWxCUVVrN1FVRkZTaXh0UWtGQmJVSWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY2xvc2VQYXJlbnRFbGVtZW50ID0gKHsgc2VsZWN0b3I6IHRhcmdldEVsZW1lbnQgfSkgPT4ge1xyXG4gICAgY29uc3QgY2xvc2VFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0RWxlbWVudCk7XHJcbiAgICBpZiAoY2xvc2VFbGVtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY2xvc2VFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUuaGlkZGVuID0gdHJ1ZTtcclxuICAgICAgICAvLyBpc0hpZGRlbiA9IEhUTUxFbGVtZW50LmhpZGRlblxyXG4gICAgfSkpO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBjbG9zZVBhcmVudEVsZW1lbnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyeHZjMlZRWVhKbGJuUkZiR1Z0Wlc1MExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWTJ4dmMyVlFZWEpsYm5SRmJHVnRaVzUwTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJTVUVzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEdGQlFXRXNSVUZCWVN4RlFVRkZMRVZCUVVVN1NVRkRjRVVzVFVGQlRTeGhRVUZoTEVkQlFVY3NVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZqTEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUXpORkxFbEJRVWtzWVVGQllTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRPMUZCUVVVc1QwRkJUVHRKUVVWMFF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRemxDTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZPMUZCUTNaQ0xFOUJRVThzUTBGQlF5eFZRVUZYTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRVHRSUVVNM1F5eG5RMEZCWjBNN1NVRkRjRU1zUTBGQlF5eERRVUZETEVOQlEwZ3NRMEZCUVR0QlFVTklMRU5CUVVNc1EwRkJRVHRCUVVWRUxHdENRVUZsTEd0Q1FVRnJRaXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjdXN0b21DdXJzb3IgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbG9hZGVyLXNwaW5uZXInKTtcclxuICAgIGNvbnN0IGhvdmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgYScpO1xyXG4gICAgaWYgKCFjdXJzb3IgfHwgIWhvdmVyRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZXZlbnQgPT4gc2V0Q3Vyc29yKGV2ZW50LCB7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudCA9PiBzZXRDdXJzb3IoZXZlbnQsIHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2V0UmlwcGxlKHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pKTtcclxuICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1kZWZhdWx0Jyk7XHJcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcclxuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xpY2thYmxlJyk7XHJcbiAgICB9KSk7XHJcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZCgnaXMtY2xpY2thYmxlJyk7XHJcbiAgICB9KSk7XHJcbiAgICBmdW5jdGlvbiBzZXRDdXJzb3IoZXZlbnQsIHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pIHtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WTtcclxuICAgICAgICBjdXJzb3Iuc3R5bGUubGVmdCA9IGAke3h9cHhgO1xyXG4gICAgICAgIGN1cnNvci5zdHlsZS50b3AgPSBgJHt5fXB4YDtcclxuICAgICAgICAvLyBjdXJzb3Iuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3ggLSAxNX1weCwgJHt5IC0gMTV9cHhgO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0UmlwcGxlKHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pIHtcclxuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZCgnZXhwYW5kJyk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmQnKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBjdXN0b21DdXJzb3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkzVnpkRzl0UTNWeWMyOXlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVkzVnpkRzl0UTNWeWMyOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNUVUZCVFN4WlFVRlpMRWRCUVVjc1IwRkJSeXhGUVVGRk8wbEJRM2hDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zYjBKQlFXOUNMRU5CUVVNc1EwRkJRVHRKUVVONFJTeE5RVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1NVRkZlRVVzU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRmxCUVZrN1VVRkJSU3hQUVVGTk8wbEJSWEJETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTI1SExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhYUVVGWExFVkJRVVVzUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzWVVGQllTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVNMVJpeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxHRkJRV0VzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkZPVVVzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3U1VGRmJFTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVU0zUWl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWRCUVVjc1JVRkJSVHRSUVVNeFF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlFUdEpRVU42UXl4RFFVRkRMRU5CUVVNc1EwRkRTQ3hEUVVGQk8wbEJRMFFzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVNM1FpeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEVkQlFVY3NSVUZCUlR0UlFVTXhReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRVHRKUVVOMFF5eERRVUZETEVOQlFVTXNRMEZEU0N4RFFVRkJPMGxCUlVRc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNZVUZCWVN4RlFVRkZMRTFCUVUwc1JVRkJUenRSUVVOMFJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGQk8xRkJRM1pDTEUxQlFVMHNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVUU3VVVGRmRrSXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUVR0UlFVTTFRaXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGQk8xRkJRek5DTEdsRlFVRnBSVHRKUVVOdVJTeERRVUZETzBsQlJVUXNVMEZCVXl4VFFVRlRMRU5CUVVNc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTzFGQlF6RkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMUZCUXpsQ0xGVkJRVlVzUTBGQlF5eEhRVUZITEVWQlFVVTdXVUZEWkN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0UlFVTnVReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEVkN4RFFVRkRPMEZCUTBnc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNXVUZCV1N4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3Qgb3B0aW1pemF0aW9uVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9vcHRpbWl6YXRpb25VdGlsc1wiKTtcclxuY29uc3Qgc2Nyb2xsc3B5ID0gKHsgbWVudXNTZWxlY3RvcjogbWVudXNDbGFzcywgc2VjdGlvbnNTZWxlY3Rvcjogc2VjdGlvbnNDbGFzcyB9KSA9PiB7XHJcbiAgICBjb25zdCBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VjdGlvbnNDbGFzcyk7XHJcbiAgICBjb25zdCBtZW51cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobWVudXNDbGFzcyk7XHJcbiAgICBpZiAoIXNlY3Rpb25zIHx8ICFtZW51cylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBtZW51cy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldE9mZnNldFkgPSBzZWN0aW9uc1tpbmRleF0ub2Zmc2V0VG9wIC0gMTYgKiA0O1xyXG4gICAgICAgICAgICAvLyBjb25zdCB0YXJnZXRPZmZzZXRZID0gc2VjdGlvbnNbaW5kZXhdLm9mZnNldFRvcCArIHNlY3Rpb25zW2luZGV4XS5jbGllbnRIZWlnaHRcclxuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHRhcmdldE9mZnNldFkpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCB0YXJnZXRPZmZzZXRZID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9wdGltaXphdGlvblV0aWxzXzEudGhyb3R0bGUoZGV0ZWN0U2VjdGlvbiksIGZhbHNlKTtcclxuICAgIGZ1bmN0aW9uIGRldGVjdFNlY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGxldCBhY3RpdmVPZmZzZXRMZWZ0O1xyXG4gICAgICAgIHNlY3Rpb25zLmZvckVhY2goKHNlY3Rpb24sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzT2JzZXJ2ZWQgPSBzZWN0aW9uLm9mZnNldFRvcCA8PSB3aW5kb3cucGFnZVlPZmZzZXQgKyAxMDA7XHJcbiAgICAgICAgICAgIGlmICghaXNPYnNlcnZlZClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TWVudSA9IG1lbnVzW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXRNZW51KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBtZW51cy5mb3JFYWNoKG1lbnUgPT4gbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKSk7XHJcbiAgICAgICAgICAgIHRhcmdldE1lbnUuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGFjdGl2ZU9mZnNldExlZnQgPSB0YXJnZXRNZW51Lm9mZnNldExlZnQgKyB0YXJnZXRNZW51LmNsaWVudFdpZHRoIC8gMjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSAoX2EgPSBtZW51c1swXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKCFidXR0b25Db250YWluZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyBpZihidXR0b25Db250YWluZXIuc2Nyb2xsTGVmdCA8IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLyAyKSByZXR1cm5cclxuICAgICAgICBidXR0b25Db250YWluZXIuc2Nyb2xsKHtcclxuICAgICAgICAgICAgbGVmdDogYWN0aXZlT2Zmc2V0TGVmdCAtIGJ1dHRvbkNvbnRhaW5lci5vZmZzZXRXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBzY3JvbGxzcHk7XHJcbi8vIGNvbnN0IGFic29sdXRlVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbi8vIGZ1bmN0aW9uIGdldEFic29sdXRlVG9wKGVsZW1lbnQpIHtcclxuLy8gICByZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbi8vIH1cclxuLy8g4oCLXHJcbi8vIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbi8vIGNvbnN0IHBhcmVudEFic29sdXRlVG9wID0gZ2V0QWJzb2x1dGVUb3AocGFyZW50RWxlbWVudCk7XHJcbi8vIGNvbnN0IGFic291bHRlVG9wID0gZ2V0QWJzb2x1dGVUb3AoZWxlbWVudCk7XHJcbi8vIOKAi1xyXG4vLyBjb25zdCByZWxhdGl2ZVRvcCA9IGFic29sdXRlVG9wIC0gcGFyZW50QWJzb2x1dGVUb3A7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyTnliMnhzYzNCNUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNjM0I1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzYTBWQlFYRkVPMEZCVDNKRUxFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1ZVRkJWU3hGUVVGRkxHZENRVUZuUWl4RlFVRkZMR0ZCUVdFc1JVRkJZU3hGUVVGRkxFVkJRVVU3U1VGRE9VWXNUVUZCVFN4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJORUlzUTBGQlFUdEpRVU53Uml4TlFVRk5MRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1ZVRkJWU3hEUVVFMFFpeERRVUZCTzBsQlJUbEZMRWxCUVVrc1EwRkJReXhSUVVGUkxFbEJRVWtzUTBGQlF5eExRVUZMTzFGQlFVVXNUMEZCVFR0SlFVVXZRaXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRk8xRkJRelZDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkRja01zUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkJPMWxCUlhSQ0xFMUJRVTBzWVVGQllTeEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUVR0WlFVTjRSQ3hwUmtGQmFVWTdXVUZEYWtZc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNZVUZCWVN4RFFVRkRMRU5CUVVFN1dVRkRha01zZVVkQlFYbEhPMUZCUXpOSExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkZSaXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxEUkNRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGRmFrVXNVMEZCVXl4aFFVRmhPenRSUVVOd1FpeEpRVUZKTEdkQ1FVRm5RaXhEUVVGQk8xRkJSWEJDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVTdXVUZEYkVNc1RVRkJUU3hWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhIUVVGSExFZEJRVWNzUTBGQlFUdFpRVU5vUlN4SlFVRkpMRU5CUVVNc1ZVRkJWVHRuUWtGQlJTeFBRVUZOTzFsQlJYWkNMRTFCUVUwc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFWRXNRMEZCUVR0WlFVTjBReXhKUVVGSkxFTkJRVU1zVlVGQlZUdG5Ra0ZCUlN4UFFVRk5PMWxCUlhaQ0xFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRM3BFTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzFsQlJYSkRMR2RDUVVGblFpeEhRVUZITEZWQlFWVXNRMEZCUXl4VlFVRlZMRWRCUVVjc1ZVRkJWU3hEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVRTdVVUZEZGtVc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRlJpeE5RVUZOTEdWQlFXVXNSMEZCUnl4TlFVRkJMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zTUVOQlFVVXNZVUZCTkVJc1EwRkJRVHRSUVVNNVJDeEpRVUZKTEVOQlFVTXNaVUZCWlR0WlFVRkZMRTlCUVUwN1VVRkROVUlzZDBWQlFYZEZPMUZCUTNoRkxHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZEY2tJc1NVRkJTU3hGUVVGRkxHZENRVUZuUWl4SFFVRkhMR1ZCUVdVc1EwRkJReXhYUVVGWExFZEJRVWNzUTBGQlF6dFpRVU40UkN4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVOT0xGRkJRVkVzUlVGQlJTeFJRVUZSTzFOQlEyNUNMRU5CUVVNc1EwRkJRVHRKUVVOS0xFTkJRVU03UVVGRFNDeERRVUZETEVOQlFVRTdRVUZGUkN4clFrRkJaU3hUUVVGVExFTkJRVUU3UVVGRmVFSXNaMFpCUVdkR08wRkJRMmhHTEhGRFFVRnhRenRCUVVOeVF5eHhSVUZCY1VVN1FVRkRja1VzU1VGQlNUdEJRVU5LTEVsQlFVazdRVUZEU2l3clEwRkJLME03UVVGREwwTXNNa1JCUVRKRU8wRkJRek5FTEN0RFFVRXJRenRCUVVNdlF5eEpRVUZKTzBGQlEwb3NkVVJCUVhWRUluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBlbGVtZW50VXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9lbGVtZW50VXRpbHNcIik7XHJcbmNvbnN0IHBhcmFsbGF4ID0gdGFyZ2V0RWxlbWVudCA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygncGFyYWxsYXgnLCB0YXJnZXRFbGVtZW50KTtcclxuICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbGVtZW50KTtcclxuICAgIGlmICghZWxlbWVudHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50KTtcclxuICAgIGZ1bmN0aW9uIGV2ZW50KCkge1xyXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGxldCByYXRlID0gZWxlbWVudFV0aWxzXzEuZ2V0V2luZG93U2Nyb2xsVG9wKCkgKyB3aW5kb3cuaW5uZXJIZWlnaHQgLSBlbGVtZW50VXRpbHNfMS5nZXRFbGVtZW50T2Zmc2V0VG9wKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICBsZXQgaXNMaW1pdCA9IHJhdGUgKiAwLjAwMiA+PSAxLjU7XHJcbiAgICAgICAgICAgIGlmIChpc0xpbWl0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZSgke3JhdGUgKiAwLjAwMTV9KWA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcmFsbGF4O1xyXG4vLyBsZXQgYWFhID0gKHdpbmRvdy5wYWdlWU9mZnNldCAtIGVsZW1lbnQub2Zmc2V0VG9wKSAqIC0xLjUgLy8gc2Nyb2xsZWQgPSB3aW5kb3cucGFnZVlPZmZzZXRcclxuLy9sZXQgYmJiID0gYWFhID4gMCA/IC1hYWEgOiBhYWE7XHJcbi8vIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gJ2NlbnRlciAnICsgYWFhICsgJ3B4J1xyXG4vLyBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsICcrcmF0ZSsncHgsIDBweCknO1xyXG4vLyBEYXRhVHJhbnNmZXJJdGVtTGlzdC5yYXRlXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNHRnlZV3hzWVhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp3WVhKaGJHeGhlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVTkJMSGRFUVVFclJUdEJRVVV2UlN4TlFVRk5MRkZCUVZFc1IwRkJSeXhoUVVGaExFTkJRVU1zUlVGQlJUdEpRVU12UWl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUVR0SlFVTjBReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdTVUZEZWtRc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZOTzBsQlJYSkNMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGRmVFTXNVMEZCVXl4TFFVRkxPMUZCUTFvc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlR0WlFVTjZRaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eHBRMEZCYTBJc1JVRkJSU3hIUVVGSExFMUJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NhME5CUVcxQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdXVUZEYmtZc1NVRkJTU3hQUVVGUExFZEJRVWNzU1VGQlNTeEhRVUZITEV0QlFVc3NTVUZCU1N4SFFVRkhMRU5CUVVFN1dVRkZha01zU1VGQlNTeFBRVUZQTzJkQ1FVRkZMRTlCUVUwN1dVRkZia0lzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1UwRkJVeXhKUVVGSkxFZEJRVWNzVFVGQlRTeEhRVUZITEVOQlFVRTdVVUZEY2tRc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFNpeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzVVVGQlVTeERRVUZCTzBGQlJYWkNMRFpHUVVFMlJqdEJRVU0zUml4cFEwRkJhVU03UVVGRGFrTXNORVJCUVRSRU8wRkJRelZFTEdsRlFVRnBSVHRCUVVOcVJTdzBRa0ZCTkVJaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjaGVja2JveF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NoZWNrYm94XCIpKTtcclxuY29uc3QgdGV4dGFyZWFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90ZXh0YXJlYVwiKSk7XHJcbmNvbnN0IGZpbGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9maWxlXCIpKTtcclxuY29uc3QgbnVtYmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbnVtYmVyXCIpKTtcclxuLy8gdG9kby4uLlxyXG5leHBvcnRzLmRlZmF1bHQgPSB7XHJcbiAgICBjaGVja2JveDogY2hlY2tib3hfMS5kZWZhdWx0LFxyXG4gICAgdGV4dGFyZWE6IHRleHRhcmVhXzEuZGVmYXVsdCxcclxuICAgIGZpbGU6IGZpbGVfMS5kZWZhdWx0LFxyXG4gICAgcXVhbnRpdHk6IG51bWJlcl8xLmRlZmF1bHQsXHJcbn07XHJcbmZ1bmN0aW9uIGNsZWFyVGV4dGZpZWxkKCkge1xyXG4gICAgLy8gZXZlbnQudGFyZ2V0LnNpYmxpbmdzLmlucHV0LnZhbHVlID0gJydcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMREJFUVVGcFF6dEJRVU5xUXl3d1JFRkJhVU03UVVGRGFrTXNhMFJCUVhsQ08wRkJRM3BDTEhORVFVRXJRanRCUVVVdlFpeFZRVUZWTzBGQlExWXNhMEpCUVdVN1NVRkRZaXhSUVVGUkxFVkJRVklzYTBKQlFWRTdTVUZEVWl4UlFVRlJMRVZCUVZJc2EwSkJRVkU3U1VGRFVpeEpRVUZKTEVWQlFVb3NZMEZCU1R0SlFVTktMRkZCUVZFc1JVRkJVaXhuUWtGQlVUdERRVU5VTEVOQlFVRTdRVUZGUkN4VFFVRlRMR05CUVdNN1NVRkRja0lzZVVOQlFYbERPMEZCUXpORExFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIHVzZVNlbGVjdGlvblxyXG4vLyB1c2VGb3JtXHJcbmNsYXNzIENoZWNrYm94IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tBbGxFbGVtZW50ID0gbnVsbDtcclxuICAgIH1cclxuICAgIGdldCBpc0NoZWNrZWRBbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzQ2hlY2tlZFNvbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoZWNrYm94KHsgY2hlY2tBbGxTZWxlY3RvciwgY2hlY2tTZWxlY3RvciB9KSB7XHJcbiAgICBjb25zdCBjaGVja0FsbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsU2VsZWN0b3IpO1xyXG4gICAgY29uc3QgY2hlY2tFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tTZWxlY3Rvcik7XHJcbiAgICBpZiAoIWNoZWNrQWxsRWxlbWVudCB8fCAhY2hlY2tFbGVtZW50cylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjaGVja0FsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4gY2hlY2tBbGwoY2hlY2tFbGVtZW50cywgY2hlY2tBbGxFbGVtZW50KSk7XHJcbiAgICBjaGVja0VsZW1lbnRzLmZvckVhY2goY2hlY2tFbGVtZW50ID0+IHtcclxuICAgICAgICBjaGVja0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4gY2hlY2tUYXJnZXQoY2hlY2tFbGVtZW50cywgY2hlY2tBbGxFbGVtZW50KSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjaGVja1RhcmdldChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xyXG4gICAgY29uc3QgY2hlY2tib3hFbGVtZW50cyA9IEFycmF5LmZyb20oY2hlY2tJdGVtcyk7XHJcbiAgICBsZXQgaXNDaGVja2VkQWxsID0gY2hlY2tib3hFbGVtZW50cy5ldmVyeShjaGVja0l0ZW0gPT4gY2hlY2tJdGVtLmNoZWNrZWQpO1xyXG4gICAgbGV0IGlzQ2hlY2tlZFNvbWUgPSBjaGVja2JveEVsZW1lbnRzLnNvbWUoY2hlY2tJdGVtID0+IGNoZWNrSXRlbS5jaGVja2VkKTtcclxuICAgIGxldCBpc0luZGV0ZXJtaW5hdGUgPSBpc0NoZWNrZWRTb21lICYmICFpc0NoZWNrZWRBbGw7XHJcbiAgICBjaGVja0FsbC5jaGVja2VkID0gaXNDaGVja2VkQWxsO1xyXG4gICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGlzSW5kZXRlcm1pbmF0ZTtcclxuICAgIGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGlzSW5kZXRlcm1pbmF0ZTtcclxufVxyXG5mdW5jdGlvbiBjaGVja0FsbChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xyXG4gICAgY2hlY2tJdGVtcy5mb3JFYWNoKGNoZWNrSXRlbSA9PiB7XHJcbiAgICAgICAgY2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xyXG4gICAgICAgIGNoZWNrQWxsLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICBjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrYm94O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMmhsWTJ0aWIzZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKamFHVmphMkp2ZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVXRCTEdWQlFXVTdRVUZEWml4VlFVRlZPMEZCUlZZc1RVRkJUU3hSUVVGUk8wbEJSVm83VVVGRFJTeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJRVHRKUVVNM1FpeERRVUZETzBsQlJVUXNTVUZCU1N4WlFVRlpPMUZCUTJRc1QwRkJUeXhMUVVGTExFTkJRVUU3U1VGRFpDeERRVUZETzBsQlEwUXNTVUZCU1N4aFFVRmhPMUZCUTJZc1QwRkJUeXhMUVVGTExFTkJRVUU3U1VGRFpDeERRVUZETzBOQlEwWTdRVUZGUkN4VFFVRlRMRkZCUVZFc1EwRkJReXhGUVVGRkxHZENRVUZuUWl4RlFVRkZMR0ZCUVdFc1JVRkJZVHRKUVVNNVJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGdFFpeG5Ra0ZCWjBJc1EwRkJReXhEUVVGQk8wbEJRMnhHTEUxQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCYlVJc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRGFFWXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJUbERMR1ZCUVdVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEdGQlFXRXNSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRekZHTEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVU3VVVGRGJrTXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU1zWVVGQllTeEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkROVVlzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRPMEZCUlVRc1UwRkJVeXhYUVVGWExFTkJRVU1zVlVGQlZTeEZRVUZGTEZGQlFWRTdTVUZEZGtNc1RVRkJUU3huUWtGQlowSXNSMEZCZFVJc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVVnVSU3hKUVVGSkxGbEJRVmtzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRGVrVXNTVUZCU1N4aFFVRmhMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMGxCUTNwRkxFbEJRVWtzWlVGQlpTeEhRVUZITEdGQlFXRXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJRVHRKUVVWd1JDeFJRVUZSTEVOQlFVTXNUMEZCVHl4SFFVRkhMRmxCUVZrc1EwRkJRVHRKUVVNdlFpeFJRVUZSTEVOQlFVTXNZVUZCWVN4SFFVRkhMR1ZCUVdVc1EwRkJRVHRKUVVONFF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1IwRkJSeXhsUVVGbExFTkJRVUU3UVVGRGJFUXNRMEZCUXp0QlFVVkVMRk5CUVZNc1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGQlJTeFJRVUZSTzBsQlEzQkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFVVTdVVUZETjBJc1UwRkJVeXhEUVVGRExFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkJPMUZCUTNCRExGRkJRVkVzUTBGQlF5eGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkJPMUZCUXpsQ0xGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJRVHRKUVVONFF5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTktMRU5CUVVNN1FVRkZSQ3hyUWtGQlpTeFJRVUZSTEVOQlFVRWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaW5wdXRUZXh0YXJlYSA9ICgpID0+IHtcclxuICAgIC8vIHRhZ05hbWXqs7wgbm9kZU5hbWXsnYAg7YWN7Iqk7Yq4IOuFuOuTnOulvCDqsIHqsIEgdW5kZWZpbmVk7JmAICN0ZXh0IOuwmO2ZmO2VnOuLpC5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcclxuICAgICAgICBpZiAodGFyZ2V0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgaXNUZXh0YXJlYSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnO1xyXG4gICAgICAgIGlmICghaXNUZXh0YXJlYSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IEJZVEVfTUFYSU1VTSA9IDMwO1xyXG4gICAgICAgIGNvbnN0IGJ5dGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRleHRmaWVsZC1ieXRlIGInKTtcclxuICAgICAgICBpZiAoIWJ5dGVFbGVtZW50KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3Qgc3RyaW5nQnl0ZUxlbmd0aCA9ICh0YXJnZXQgPT09IG51bGwgfHwgdGFyZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXJnZXQudmFsdWUucmVwbGFjZSgvW1xcMC1cXHg3Zl18KFswLVxcdTA3ZmZdfCguKSkvZywgJyQmJDEkMicpLmxlbmd0aCkgfHwgMDsgLy8gfHwgMCDsnoTsi5xcclxuICAgICAgICBieXRlRWxlbWVudC5pbm5lclRleHQgPSBzdHJpbmdCeXRlTGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGlzTWF4aW11bSA9IHN0cmluZ0J5dGVMZW5ndGggPiBCWVRFX01BWElNVU07XHJcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtaW52YWxpZCcsIGlzTWF4aW11bSk7XHJcbiAgICAgICAgLy8gYXV0b0V4cGFuZCh0YXJnZXQpXHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgYXV0b0V4cGFuZCA9IGZpZWxkID0+IHtcclxuICAgIC8vIGRvZXNudCB3b3JrXHJcbiAgICBmaWVsZC5zdHlsZS5oZWlnaHQgPSAnaW5oZXJpdCc7XHJcbiAgICBjb25zdCBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZpZWxkKTtcclxuICAgIGNvbnN0IGhlaWdodCA9IGZpZWxkLnNjcm9sbEhlaWdodCArIHBhcnNlSW50KGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSk7XHJcbiAgICBmaWVsZC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBpbnB1dFRleHRhcmVhO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR1Y0ZEdGeVpXRXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMFpYaDBZWEpsWVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEUxQlFVMHNZVUZCWVN4SFFVRkhMRWRCUVVjc1JVRkJSVHRKUVVONlFpeDFSRUZCZFVRN1NVRkRka1FzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNSVUZCUlR0UlFVTjZReXhOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVkQlFWRXNTMEZCU3l4RFFVRkJPMUZCUXpkQ0xFbEJRVWtzVFVGQlRUdFpRVUZGTEU5QlFVMDdVVUZGYkVJc1RVRkJUU3hWUVVGVkxFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1MwRkJTeXhWUVVGVkxFTkJRVUU3VVVGREwwUXNTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkJSU3hQUVVGTk8xRkJSWFpDTEUxQlFVMHNXVUZCV1N4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVWMlFpeE5RVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1VVRkROVVVzU1VGQlNTeERRVUZETEZkQlFWYzdXVUZCUlN4UFFVRk5PMUZCUlhoQ0xFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1EwRkJRU3hOUVVGTkxHRkJRVTRzVFVGQlRTeDFRa0ZCVGl4TlFVRk5MRU5CUVVVc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5dzJRa0ZCTmtJc1JVRkJSU3hSUVVGUkxFVkJRVVVzVFVGQlRTeExRVUZKTEVOQlFVTXNRMEZCUVN4RFFVRkRMRlZCUVZVN1VVRkRPVWNzVjBGQlZ5eERRVUZETEZOQlFWTXNSMEZCUnl4blFrRkJaMElzUTBGQlFUdFJRVVY0UXl4TlFVRk5MRk5CUVZNc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4WlFVRlpMRU5CUVVFN1VVRkRha1FzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUVR0UlFVVXpSQ3h4UWtGQmNVSTdTVUZEZGtJc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeERRVUZETEVOQlFVRTdRVUZGUkN4TlFVRk5MRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU1zUlVGQlJUdEpRVU42UWl4alFVRmpPMGxCUTJRc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkJPMGxCUlRsQ0xFMUJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0SlFVTXZReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUXpOR0xFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVUU3UVVGRGNFTXNRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzWVVGQllTeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFRPRE86IOyXrOufrOuyiCDrsJjrs7XtlbTshJwg7Jis66C47J2EIOuVjCBmaWxlbGlzdCDriITsoIHrkJjripTsp4A/XHJcbi8vIFRPRE86IOuPmeydvO2VnCDtjIzsnbzsnYQg7JeF66Gc65OcIO2WiOydhCDrlYwg7LK07YGsLCDsgq3soJztlojsnYQg65WMIGZpbGVMaXN07JeQ7IScIOyCreygnCwgZmlsZUlucHV0LmZpbGVz64qUIOyMk+ydtOyngCDslYrsnYwuXHJcbmNvbnN0IGF0dGFjaEZpbGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1pbnB1dCcpO1xyXG4gICAgaWYgKCFmaWxlSW5wdXQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gY29uc3QgZmlsZVN1Ym1pdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLXN1Ym1pdCcpO1xyXG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IGF0dGFjaChmaWxlSW5wdXQpKTtcclxufTtcclxuZnVuY3Rpb24gYXR0YWNoKGZpbGVJbnB1dCkge1xyXG4gICAgY29uc3QgeyBmaWxlcyB9ID0gZmlsZUlucHV0O1xyXG4gICAgY29uc3QgYXR0YWNobWVudExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1hdHRhY2htZW50LWxpc3QnKTtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRIZWxwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1hdHRhY2htZW50LWhlbHBlcicpO1xyXG4gICAgaWYgKCFmaWxlcyB8fCAhYXR0YWNobWVudExpc3QgfHwgIWF0dGFjaG1lbnRIZWxwZXIpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgYXR0YWNobWVudEhlbHBlci5zdHlsZS5kaXNwbGF5ID0gZmlsZXMubGVuZ3RoICE9PSAwID8gJ25vbmUnIDogJ2Jsb2NrJztcclxuICAgIEFycmF5LmZyb20oZmlsZXMpLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgaWYgKCF2YWxpZEZpbGVUeXBlKGZpbGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxlcnQoJ+2MjOydvO2DgOyehSBqcGVnIHBqcGVnIHBuZyDspJEg7ZWY64KY6rCAIOyVhOuLiOyVvH4nKTtcclxuICAgICAgICBjb25zdCBmaWxlVGVtcGxhdGUgPSBgXHJcblx0XHRcdDxkaXYgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbVwiPlxyXG5cdFx0XHRcdDxmaWd1cmUgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1pbWFnZVwiPjxpbWcgc3JjPSR7d2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSl9IGFsdD0ke2ZpbGUubmFtZX0+PC9maWd1cmU+XHJcblx0XHRcdFx0PGIgY2xhc3M9XCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1uYW1lXCI+JHtmaWxlLm5hbWV9PC9iPlxyXG5cdFx0XHRcdDxzbWFsbCBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLXNpemVcIiA+JHtyZXR1cm5GaWxlU2l6ZShmaWxlLnNpemUpfTwvc21hbGw+XHJcblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLWRlbGV0ZSBqcy1yZW1vdmUtdGhpc1wiPjxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiPmNsb3NlPC9zcGFuPjwvYnV0dG9uPlxyXG5cdFx0XHQ8L2Rpdj5gO1xyXG4gICAgICAgIGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTCArPSBmaWxlVGVtcGxhdGU7XHJcbiAgICAgICAgLy8gYXR0YWNobWVudExpc3QuYXBwZW5kKGZpbGVUZW1wbGF0ZSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiB2YWxpZEZpbGVUeXBlKGZpbGUpIHtcclxuICAgIGNvbnN0IGZpbGVUeXBlcyA9IFsnaW1hZ2UvanBlZycsICdpbWFnZS9naWYnLCAnaW1hZ2UvcG5nJ107XHJcbiAgICBjb25zdCBpc1ZhbGlkID0gZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSA+IC0xO1xyXG4gICAgLy8gY29uc3QgaXNWYWxpZCA9IGZpbGVUeXBlcy5pbmNsdWRlcyhmaWxlLnR5cGUpO1xyXG4gICAgaWYgKGlzVmFsaWQpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmV0dXJuRmlsZVNpemUoc2l6ZSkge1xyXG4gICAgY29uc3QgaXNCeXRlcyA9IHNpemUgPCAxMDI0O1xyXG4gICAgY29uc3QgaXNLaWxvQnl0ZXMgPSBzaXplID49IDEwMjQgJiYgc2l6ZSA8IDEwNDg1NzY7XHJcbiAgICBpZiAoaXNCeXRlcylcclxuICAgICAgICByZXR1cm4gYCR7c2l6ZX1ieXRlc2A7XHJcbiAgICBlbHNlIGlmIChpc0tpbG9CeXRlcylcclxuICAgICAgICByZXR1cm4gYCR7KHNpemUgLyAxMDI0KS50b0ZpeGVkKDIpfUtCYDtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gYCR7KHNpemUgLyAxMDQ4NTc2KS50b0ZpeGVkKDIpfU1CYDtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBhdHRhY2hGaWxlO1xyXG4vLyBmaWxlU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG4vLyBcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbi8vIFx0ZmlsZUxpc3QuZm9yRWFjaChmaWxlID0+IHtcclxuLy8gXHRcdHNlbmRGaWxlKGZpbGUpO1xyXG4vLyBcdH0pO1xyXG4vLyB9KTtcclxuLy8gZnVuY3Rpb24gdmFsaWRGaWxlU2l6ZShmaWxlKSB7XHJcbi8vIFx0YXR0YWNoZWRmaWxlcyA9IGZpbGUuZmlsZXM7XHJcbi8vIFx0aWYoYXR0YWNoZWRmaWxlcy5sZW5ndGggPT09IDApIHJldHVybjtcclxuLy8gXHRpZihhdHRhY2hlZGZpbGVzWzBdLnNpemUgPiA3NSAqIDEwMjQpIHtcclxuLy8gXHRcdGZpbGVJbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnVGhlIHNlbGVjdGVkIGZpbGUgbXVzdCBub3QgYmUgbGFyZ2VyIHRoYW4gNzUga0InKTtcclxuLy8gXHRcdHJldHVybjtcclxuLy8gXHR9XHJcbi8vIFx0ZmlsZUlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcclxuLy8gfVxyXG4vLyBmdW5jdGlvbiBzZW5kRmlsZShmaWxlKSB7XHJcbi8vIFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuLy8gXHRjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbi8vIFx0Zm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XHJcbi8vIFx0cmVxdWVzdC5vcGVuKCdwb3N0JywgJycpO1xyXG4vLyBcdHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7XHJcbi8vIH1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWm1sc1pTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW1acGJHVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeDFRMEZCZFVNN1FVRkRka01zTkVWQlFUUkZPMEZCUXpWRkxFMUJRVTBzVlVGQlZTeEhRVUZITEVkQlFVY3NSVUZCUlR0SlFVTjBRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRnRRaXhuUWtGQlowSXNRMEZCUXl4RFFVRkJPMGxCUXpWRkxFbEJRVWtzUTBGQlF5eFRRVUZUTzFGQlFVVXNUMEZCVFR0SlFVTjBRaXhuUlVGQlowVTdTVUZEYUVVc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVNdlJDeERRVUZETEVOQlFVRTdRVUZGUkN4VFFVRlRMRTFCUVUwc1EwRkJReXhUUVVFeVFqdEpRVU42UXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxFZEJRVWNzVTBGQlV5eERRVUZCTzBsQlF6TkNMRTFCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNNRUpCUVRCQ0xFTkJRVU1zUTBGQlFUdEpRVU4wUml4TlFVRk5MR2RDUVVGblFpeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc05FSkJRVFJDTEVOQlFVTXNRMEZCUVR0SlFVTXhSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNZMEZCWXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTzFGQlFVVXNUMEZCVFR0SlFVVXhSQ3huUWtGQlowSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUVR0SlFVVjBSU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdFJRVU12UWl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRMR2REUVVGblF5eERRVUZETEVOQlFVRTdVVUZGZUVVc1RVRkJUU3haUVVGWkxFZEJRVWM3T3pCRVFVVnBReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNUc3lRMEZEYUVVc1NVRkJTU3hEUVVGRExFbEJRVWs3WjBSQlEwb3NZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03TzFWQlJTOUVMRU5CUVVFN1VVRkZUaXhqUVVGakxFTkJRVU1zVTBGQlV5eEpRVUZKTEZsQlFWa3NRMEZCUVR0UlFVTjRReXgxUTBGQmRVTTdTVUZEZWtNc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4aFFVRmhMRU5CUVVNc1NVRkJTVHRKUVVONlFpeE5RVUZOTEZOQlFWTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1JVRkJSU3hYUVVGWExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVRTdTVUZETVVRc1RVRkJUU3hQUVVGUExFZEJRVWNzVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEYWtRc2FVUkJRV2xFTzBsQlJXcEVMRWxCUVVrc1QwRkJUenRSUVVGRkxFOUJRVThzU1VGQlNTeERRVUZCTzBGQlF6RkNMRU5CUVVNN1FVRkZSQ3hUUVVGVExHTkJRV01zUTBGQlF5eEpRVUZKTzBsQlF6RkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVRTdTVUZETTBJc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGQk8wbEJSV3hFTEVsQlFVa3NUMEZCVHp0UlFVRkZMRTlCUVU4c1IwRkJSeXhKUVVGSkxFOUJRVThzUTBGQlFUdFRRVU0zUWl4SlFVRkpMRmRCUVZjN1VVRkJSU3hQUVVGUExFZEJRVWNzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVRTdPMUZCUTNaRUxFOUJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUVR0QlFVTm9SQ3hEUVVGRE8wRkJSVVFzYTBKQlFXVXNWVUZCVlN4RFFVRkJPMEZCUlhwQ0xIRkVRVUZ4UkR0QlFVTnlSQ3d5UWtGQk1rSTdRVUZETTBJc09FSkJRVGhDTzBGQlF6bENMRzlDUVVGdlFqdEJRVU53UWl4UFFVRlBPMEZCUTFBc1RVRkJUVHRCUVVWT0xHbERRVUZwUXp0QlFVTnFReXdyUWtGQkswSTdRVUZETDBJc01FTkJRVEJETzBGQlJURkRMREpEUVVFeVF6dEJRVU16UXl4dlJrRkJiMFk3UVVGRGNFWXNXVUZCV1R0QlFVTmFMRXRCUVVzN1FVRkRUQ3h2UTBGQmIwTTdRVUZEY0VNc1NVRkJTVHRCUVVWS0xEUkNRVUUwUWp0QlFVTTFRaXh2UTBGQmIwTTdRVUZEY0VNc2VVTkJRWGxETzBGQlJYcERMQ3RDUVVFclFqdEJRVU12UWl3MlFrRkJOa0k3UVVGRE4wSXNNa0pCUVRKQ08wRkJRek5DTEVsQlFVa2lmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaW5wdXROdW1iZXIgPSAoKSA9PiB7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5ZG93biAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5cHJlc3M6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzcyAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5dXA6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXl1cCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZSAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygnaW5wdXQ6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdpbnB1dCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyDrsKntlqXtgqTroZwg7KGw7KCI7ZWgIOuVjCBtaW4gbWF4IOyhsOqxtOyXkCDqsbjrprDri6QuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcclxuICAgICAgICBjb25zdCBpc051bWJlcklucHV0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5qcy1udW1iZXItaW5wdXQnKTtcclxuICAgICAgICBpZiAoIWlzTnVtYmVySW5wdXQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHNldExpbWl0TnVtYmVyKTtcclxuICAgICAgICBmdW5jdGlvbiBzZXRMaW1pdE51bWJlcigpIHtcclxuICAgICAgICAgICAgY29uc3QgTUFYSU1VTSA9IDMwMDtcclxuICAgICAgICAgICAgY29uc3QgTUlOSU1VTiA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzRmlyc3RQbGFjZWRaZXJvID0gLyheMCspLy50ZXN0KHRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWF4aW11bSA9IE51bWJlcih0YXJnZXQudmFsdWUpID49IE1BWElNVU07XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGVuZ3RoID0gdGFyZ2V0LnZhbHVlLmxlbmd0aCA+IE1JTklNVU47XHJcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0UGxhY2VkWmVybylcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IE1JTklNVU47XHJcbiAgICAgICAgICAgIGlmIChpc0xlbmd0aClcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IHRhcmdldC52YWx1ZS5zbGljZSgwLCAzKTtcclxuICAgICAgICAgICAgaWYgKGlzTWF4aW11bSlcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IE1BWElNVU07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldElucHV0T25seU51bWJlcnMoKVxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIHNldElucHV0T25seU51bWJlcnMoKSB7XHJcbiAgICAgICAgLy8gICBjb25zdCB7IGtleUNvZGUgfSA9IGV2ZW50XHJcbiAgICAgICAgLy8gICBjb25zdCBrZXlDb2RlcyA9IFs2OSwgMTg5LCAxODcsIDE5MF1cclxuICAgICAgICAvLyAgIGNvbnN0IGlzVmFsaWQgPSBrZXlDb2Rlcy5pbmNsdWRlcyhrZXlDb2RlKVxyXG4gICAgICAgIC8vICAgaWYgKGlzVmFsaWQpIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAvLyAgIC8vIHRhcmdldC52YWx1ZS5sZW5ndGggPT09IDAgJiYga2V5Q29kZSA9PT0gNDggJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAvLyAgIC8vIGtleUNvZGUgPj0gNDggfHwga2V5Q29kZSA8PSA1NyB8fCBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIC8vICAgLy8ga2V5Q29kZSA9PT0gNjkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAvLyAgIC8vIGtleUNvZGUgPT09IDE4OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIC8vICAgLy8ga2V5Q29kZSA9PT0gMTg3ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgLy8gICAvLyBrZXlDb2RlID09PSAxOTAgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gaW5wdXROdW1iZXI7XHJcbmNvbnN0IGlucHV0VGVzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbnB1dC10ZXN0Jyk7XHJcbmlmIChpbnB1dFRlc3QpIHtcclxuICAgIGlucHV0VGVzdC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGV2ZW50ID0+IHtcclxuICAgICAgICBjb25zdCBrZXkgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xyXG4gICAgICAgIGNvbnN0IGlzTnVtYmVyS2V5ID0ga2V5IDwgNDggfHwga2V5ID4gNTc7IC8vIHRvZG8gISBpc051bWJlcktleSDsnbTri6Qg7KeA6riI7J2MMCB0byA5XHJcbiAgICAgICAgY29uc3QgaXNTcGFjZUtleSA9IGtleSA9PT0gMzI7XHJcbiAgICAgICAgaWYgKCFpc1NwYWNlS2V5ICYmIGlzTnVtYmVyS2V5KVxyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBUcmFjayB0aGUgY3VycmVudCB2YWx1ZVxyXG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGlucHV0VGVzdC52YWx1ZSB8fCAnJztcclxuICAgIGlucHV0VGVzdC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGlmICgvXlswLTlcXHNdKiQvLnRlc3QodGFyZ2V0LnZhbHVlKSlcclxuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gY3VycmVudFZhbHVlO1xyXG4gICAgICAgIC8vIE5vdGUgdGhhdCBpbiB0aGlzIGNhc2UsIGBlLnByZXZlbnREZWZhdWx0KClgIGRvZXNuJ3QgaGVscFxyXG4gICAgICAgIC8vIO2VnOq4gCDsnoXroKXtlojsnYQg65WMIOy7pOyEnOqwgCDrp6gg65Kk66GcIOqwkC5cclxuICAgICAgICAvLyBpZiAoL15bMC05c10qJC8udGVzdCh0YXJnZXQudmFsdWUpKSB7XHJcbiAgICAgICAgLy8gICBjdXJyZW50VmFsdWUgPSB0YXJnZXQudmFsdWVcclxuICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgdGFyZ2V0LnZhbHVlID0gY3VycmVudFZhbHVlXHJcbiAgICAgICAgLy8gICB0YXJnZXQuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VsZWN0aW9uLnN0YXJ0LCBzZWxlY3Rpb24uZW5kKVxyXG4gICAgICAgIC8vIH1cclxuICAgIH0pO1xyXG4gICAgLy8gbGV0IHNlbGVjdGlvbiA9IHt9O1xyXG4gICAgLy8gaW5wdXRUZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAvLyAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAvLyAgIHNlbGVjdGlvbiA9IHsgc3RhcnQ6IHRhcmdldC5zZWxlY3Rpb25TdGFydCwgZW5kOiB0YXJnZXQuc2VsZWN0aW9uRW5kIH07XHJcbiAgICAvLyB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liblZ0WW1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYm5WdFltVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1IwRkJSeXhGUVVGRk8wbEJRM1pDTEc5RVFVRnZSRHRKUVVOd1JDeHBSRUZCYVVRN1NVRkRha1FzYzBSQlFYTkVPMGxCUTNSRUxFMUJRVTA3U1VGRFRpeHhSRUZCY1VRN1NVRkRja1FzYTBSQlFXdEVPMGxCUTJ4RUxIVkVRVUYxUkR0SlFVTjJSQ3hOUVVGTk8wbEJRMDRzYTBSQlFXdEVPMGxCUTJ4RUxDdERRVUVyUXp0SlFVTXZReXh2UkVGQmIwUTdTVUZEY0VRc1RVRkJUVHRKUVVOT0xHMUVRVUZ0UkR0SlFVTnVSQ3huUkVGQlowUTdTVUZEYUVRc2NVUkJRWEZFTzBsQlEzSkVMRTFCUVUwN1NVRkRUaXhyUkVGQmEwUTdTVUZEYkVRc0swTkJRU3RETzBsQlF5OURMRzlFUVVGdlJEdEpRVU53UkN4TlFVRk5PMGxCUlU0c09FSkJRVGhDTzBsQlF6bENMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRVVU3VVVGRE0wTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGUkxFdEJRVXNzUTBGQlFUdFJRVU0zUWl4TlFVRk5MR0ZCUVdFc1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVUU3VVVGRGVFUXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1dVRkJSU3hQUVVGTk8xRkJSVEZDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVFN1VVRkZiRVFzVTBGQlV5eGpRVUZqTzFsQlEzSkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFZEJRVWNzUTBGQlFUdFpRVU51UWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVUU3V1VGRGFrSXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdFpRVU53UkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRTlCUVU4c1EwRkJRVHRaUVVOcVJDeE5RVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZGT1VNc1NVRkJTU3hwUWtGQmFVSTdaMEpCUVVVc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZETjBNc1NVRkJTU3hSUVVGUk8yZENRVUZGTEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRM0pFTEVsQlFVa3NVMEZCVXp0blFrRkJSU3hOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUVR0UlFVTjJReXhEUVVGRE8xRkJRMFFzZDBKQlFYZENPMUZCUlhoQ0xHMURRVUZ0UXp0UlFVTnVReXc0UWtGQk9FSTdVVUZET1VJc2VVTkJRWGxETzFGQlEzcERMQ3REUVVFclF6dFJRVU12UXl4M1EwRkJkME03VVVGRGVFTXNPRVZCUVRoRk8xRkJRemxGTEdsRlFVRnBSVHRSUVVOcVJTeHBSRUZCYVVRN1VVRkRha1FzYTBSQlFXdEVPMUZCUTJ4RUxHdEVRVUZyUkR0UlFVTnNSQ3hyUkVGQmEwUTdVVUZEYkVRc1NVRkJTVHRKUVVOT0xFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzVjBGQlZ5eERRVUZCTzBGQlJURkNMRTFCUVUwc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXMUNMR2RDUVVGblFpeERRVUZETEVOQlFVRTdRVUZETlVVc1NVRkJTU3hUUVVGVExFVkJRVVU3U1VGRFlpeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RlFVRkZPMUZCUXpkRExFMUJRVTBzUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlFUdFJRVU40UXl4TlFVRk5MRmRCUVZjc1IwRkJSeXhIUVVGSExFZEJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVFc1EwRkJReXhyUTBGQmEwTTdVVUZETTBVc1RVRkJUU3hWUVVGVkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVWQlFVVXNRMEZCUVR0UlFVVTNRaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEpRVUZKTEZkQlFWYzdXVUZCUlN4TFFVRkxMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVUU3U1VGRGVFUXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkZSaXd3UWtGQk1FSTdTVUZETVVJc1NVRkJTU3haUVVGWkxFZEJRVWNzVTBGQlV5eERRVUZETEV0QlFVc3NTVUZCU1N4RlFVRkZMRU5CUVVFN1NVRkRlRU1zVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlR0UlFVTjBReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCTUVJc1EwRkJRVHRSUVVNelF5eEpRVUZKTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFpRVUZGTEZsQlFWa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGQk96dFpRVU16UkN4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExGbEJRVmtzUTBGQlFUdFJRVU5vUXl3MFJFRkJORVE3VVVGRk5VUXNkMEpCUVhkQ08xRkJRM2hDTEhkRFFVRjNRenRSUVVONFF5eG5RMEZCWjBNN1VVRkRhRU1zVjBGQlZ6dFJRVU5ZTEdkRFFVRm5RenRSUVVOb1F5dzJSRUZCTmtRN1VVRkROMFFzU1VGQlNUdEpRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTBZc2MwSkJRWE5DTzBsQlEzUkNMSE5FUVVGelJEdEpRVU4wUkN4cFJFRkJhVVE3U1VGRGFrUXNORVZCUVRSRk8wbEJRelZGTEUxQlFVMDdRMEZEVUNKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGNvbnN0XzEgPSByZXF1aXJlKFwiLi9jb25zdFwiKTtcclxuLy8gdG9kbyDrsJTroZwgc3dpdGhjIOyFgOugie2EsOuhnFxyXG4vLyB0b2RvIOqwmeydgCDquLDriqXsnZgg67KE7Yq87J20IOyXrOufrCDqtbDrjbDsl5Ag7J6I7J2EIOuVjC5cclxuZnVuY3Rpb24gZGV0ZWN0VGhlbWUoKSB7XHJcbiAgICBjb25zdCBzYXZlZFRoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lJyk7XHJcbiAgICBpZiAoIXNhdmVkVGhlbWUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGNvbnN0XzEuREFSS19USEVNRV9DTEFTUyk7XHJcbiAgICBjb25zdCBkYXJrVGhlbWVUcmlnZ2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uc3RfMS5EQVJLVEhFTUVfU0VMRUNUT1IpO1xyXG4gICAgZGFya1RoZW1lVHJpZ2dlcnMgPT09IG51bGwgfHwgZGFya1RoZW1lVHJpZ2dlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhcmtUaGVtZVRyaWdnZXJzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBkZXRlY3RUaGVtZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWkdWamRHVmpkRlJvWlcxbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWkdWamRHVmpkRlJvWlcxbExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc2JVTkJRVEpGTzBGQlJUTkZMSE5DUVVGelFqdEJRVU4wUWl3clFrRkJLMEk3UVVGRkwwSXNVMEZCVXl4WFFVRlhPMGxCUTJ4Q0xFMUJRVTBzVlVGQlZTeEhRVUZITEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRGFFUXNTVUZCU1N4RFFVRkRMRlZCUVZVN1VVRkJSU3hQUVVGTk8wbEJSWFpDTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eDNRa0ZCWjBJc1EwRkJReXhEUVVGQk8wbEJSVGRETEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExEQkNRVUZyUWl4RFFVRkRMRU5CUVVFN1NVRkRka1VzYVVKQlFXbENMR0ZCUVdwQ0xHbENRVUZwUWl4MVFrRkJha0lzYVVKQlFXbENMRU5CUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zVDBGQldTeEZRVUZGTEVWQlFVVTdVVUZETVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGQk8wbEJReTlETEVOQlFVTXNSVUZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hyUWtGQlpTeFhRVUZYTEVOQlFVRWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5pc0RhcmtUaGVtZSA9IGV4cG9ydHMuREFSS1RIRU1FX1NFTEVDVE9SID0gZXhwb3J0cy5MSUdIVF9USEVNRV9DTEFTUyA9IGV4cG9ydHMuREFSS19USEVNRV9DTEFTUyA9IHZvaWQgMDtcclxuZXhwb3J0cy5EQVJLX1RIRU1FX0NMQVNTID0gJ3RoZW1lLWRhcmsnO1xyXG5leHBvcnRzLkxJR0hUX1RIRU1FX0NMQVNTID0gJyc7XHJcbmV4cG9ydHMuREFSS1RIRU1FX1NFTEVDVE9SID0gJy5qcy1kYXJrbW9kZSc7XHJcbi8vIGV4cG9ydCBjb25zdCBpc0RhcmtUaGVtZSA9IHNhdmVkVGhlbWUgPT09IERBUktfVEhFTUVfQ0xBU1NcclxuZXhwb3J0cy5pc0RhcmtUaGVtZSA9ICgpID0+IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKGV4cG9ydHMuREFSS19USEVNRV9DTEFTUyk7XHJcbi8vIDPqsIDsp4AgYm9keSBjbGFzcywgY2hlY2sgYXR0cmlidXRlLCBsb2NhbCBzdG9yYWdlXHJcbi8vIGV4cG9ydCBjb25zdCBpc0RhcmtUaGVtZSA9IHdpbmRvdy5tYXRjaE1lZGlhICYmXHJcbi8vICAgd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKS5tYXRjaGVzO1xyXG4vLyBmdW5jdGlvbiB1c2VQcmVmZXJzRGFya01vZGUoKSB7XHJcbi8vICAgcmV0dXJuIHVzZU1lZGlhKFtcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIl0sIFt0cnVlXSwgZmFsc2UpO1xyXG4vLyB9XHJcbi8vIGZ1bmN0aW9uIHRvZ2dsZVRoZW1lKCkge1xyXG4vLyAgIC8vIOyggOyepeuQnCDqsJLsnbQg7JeG64uk66m0IOyLnOyKpO2FnCDshKTsoJXsnYQg6riw7KSA7Jy866GcIO2VqFxyXG4vLyAgIGNvbnN0IGN1cnJlbnRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpLm1hdGNoZXMgPyAnZGFyaycgOiAnbGlnaHQnKVxyXG4vLyAgIGNvbnN0IG5ld1RoZW1lID0gY3VycmVudFRoZW1lID09PSAnZGFyaycgPyAnbGlnaHQnIDogJ2RhcmsnXHJcbi8vICAgLy8g7LWc7IOB7JyEIOyXmOumrOuovO2KuOyXkCDshKTsoJUsIOuhnOy7rCDsiqTthqDrpqzsp4Dsl5Ag7ISk7KCV7J2EIOyggOyepVxyXG4vLyAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3R5bGUnLCBuZXdUaGVtZSlcclxuLy8gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBuZXdUaGVtZSlcclxuLy8gfVxyXG4vLyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29sb3ItdGhlbWUtaW4tdHJhbnNpdGlvbicpXHJcbi8vIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3R5bGUnLCB0aGVtZSlcclxuLy8gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbi8vICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbG9yLXRoZW1lLWluLXRyYW5zaXRpb24nKVxyXG4vLyB9LCAxMDAwKVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjl1YzNRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpqYjI1emRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGQllTeFJRVUZCTEdkQ1FVRm5RaXhIUVVGSExGbEJRVmtzUTBGQlFUdEJRVU12UWl4UlFVRkJMR2xDUVVGcFFpeEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVTjBRaXhSUVVGQkxHdENRVUZyUWl4SFFVRkhMR05CUVdNc1EwRkJRVHRCUVVWb1JDdzJSRUZCTmtRN1FVRkRhRVFzVVVGQlFTeFhRVUZYTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMSGRDUVVGblFpeERRVUZETEVOQlFVRTdRVUZEYmtZc2FVUkJRV2xFTzBGQlJXcEVMR3RFUVVGclJEdEJRVU5zUkN3clJFRkJLMFE3UVVGRkwwUXNhME5CUVd0RE8wRkJRMnhETEhORlFVRnpSVHRCUVVOMFJTeEpRVUZKTzBGQlJVb3NNa0pCUVRKQ08wRkJRek5DTEdsRFFVRnBRenRCUVVOcVF5eDVTVUZCZVVrN1FVRkRla2tzWjBWQlFXZEZPMEZCUldoRkxIRkRRVUZ4UXp0QlFVTnlReXhyUlVGQmEwVTdRVUZEYkVVc05FTkJRVFJETzBGQlF6VkRMRWxCUVVrN1FVRkZTaXh6UlVGQmMwVTdRVUZEZEVVc05rUkJRVFpFTzBGQlJUZEVMR2xEUVVGcFF6dEJRVU5xUXl3eVJVRkJNa1U3UVVGRE0wVXNWMEZCVnlKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudG9nZ2xlRGFya1RoZW1lID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdF8xID0gcmVxdWlyZShcIi4vY29uc3RcIik7XHJcbi8vIHRvZG8gcmVtb3ZlTG9jYWxTdG9yYWdlXHJcbmZ1bmN0aW9uIHRvZ2dsZURhcmtUaGVtZShldmVudCkge1xyXG4gICAgaWYgKCFldmVudC50YXJnZXQuY2xvc2VzdChjb25zdF8xLkRBUktUSEVNRV9TRUxFQ1RPUikpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKGNvbnN0XzEuREFSS19USEVNRV9DTEFTUyk7XHJcbiAgICBjb25zdCBkYXJrVGhlbWVUcmlnZ2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uc3RfMS5EQVJLVEhFTUVfU0VMRUNUT1IpO1xyXG4gICAgZGFya1RoZW1lVHJpZ2dlcnMgPT09IG51bGwgfHwgZGFya1RoZW1lVHJpZ2dlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhcmtUaGVtZVRyaWdnZXJzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAvLyB0b2RvIHRvZ2dsZeqzvCBzd2l0Y2ggMuyiheulmC4uXHJcbiAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLmNoZWNrZWQgPSBjb25zdF8xLmlzRGFya1RoZW1lKCk7XHJcbiAgICB9KTtcclxuICAgIC8vIHNhdmVUaGVtZVxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgY29uc3RfMS5pc0RhcmtUaGVtZSgpID8gY29uc3RfMS5EQVJLX1RIRU1FX0NMQVNTIDogY29uc3RfMS5MSUdIVF9USEVNRV9DTEFTUyk7XHJcbn1cclxuZXhwb3J0cy50b2dnbGVEYXJrVGhlbWUgPSB0b2dnbGVEYXJrVGhlbWU7XHJcbi8vIGZ1bmN0aW9uIHRvZ2dsZVRoZW1lKCkge1xyXG4vLyAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZShEQVJLX1RIRU1FX0NMQVNTKVxyXG4vLyAgIGNvbnN0IGN1cnJlbnRUaGVtZSA9IGlzRGFya1RoZW1lKCkgPyBEQVJLX1RIRU1FX0NMQVNTIDogTElHSFRfVEhFTUVfQ0xBU1NcclxuLy8gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBjdXJyZW50VGhlbWUpXHJcbi8vICAgY2hlY2tTd2l0Y2goKVxyXG4vLyB9XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHRvZ2dsZURhcmtUaGVtZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEc5bloyeGxWR2hsYldVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowYjJkbmJHVlVhR1Z0WlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4dFEwRkJPRVk3UVVGSE9VWXNNRUpCUVRCQ08wRkJRekZDTEZOQlFXZENMR1ZCUVdVc1EwRkJReXhMUVVGTE8wbEJRMjVETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5d3dRa0ZCYTBJc1EwRkJRenRSUVVGRkxFOUJRVTA3U1VGRmNrUXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEhkQ1FVRm5RaXhEUVVGRExFTkJRVUU3U1VGRmFFUXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zTUVKQlFXdENMRU5CUVVNc1EwRkJRVHRKUVVOMlJTeHBRa0ZCYVVJc1lVRkJha0lzYVVKQlFXbENMSFZDUVVGcVFpeHBRa0ZCYVVJc1EwRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eFBRVUZaTEVWQlFVVXNSVUZCUlR0UlFVTXhReXcwUWtGQk5FSTdVVUZETlVJc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRlBMRWRCUVVjc2JVSkJRVmNzUlVGQlJTeERRVUZCTzBsQlEzaEVMRU5CUVVNc1JVRkJRenRKUVVWR0xGbEJRVms3U1VGRFdpeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3h0UWtGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMSGRDUVVGblFpeERRVUZETEVOQlFVTXNRMEZCUXl4NVFrRkJhVUlzUTBGQlF5eERRVUZCTzBGQlEzSkdMRU5CUVVNN1FVRmlSQ3d3UTBGaFF6dEJRVVZFTERKQ1FVRXlRanRCUVVNelFpeHhSRUZCY1VRN1FVRkZja1FzT0VWQlFUaEZPMEZCUXpsRkxHZEVRVUZuUkR0QlFVVm9SQ3hyUWtGQmEwSTdRVUZEYkVJc1NVRkJTVHRCUVVWS0xHdENRVUZsTEdWQlFXVXNRMEZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudG9nZ2xlTmF2YmFyTWVudSA9IGV4cG9ydHMuaW5pdGlhbGl6ZU5hdmJhciA9IHZvaWQgMDtcclxuY29uc3QgT1BFTkVEX01FTlVfQ0xBU1NOQU1FID0gJ2lzLW9wZW5lZC1tZW51JztcclxuY29uc3QgaXNPcGVuZE5hdmJhck1lbnUgPSAoKSA9PiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhPUEVORURfTUVOVV9DTEFTU05BTUUpO1xyXG5mdW5jdGlvbiBpbml0aWFsaXplTmF2YmFyKCkge1xyXG4gICAgY29uc3QgbmF2aWdhdGlvblRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyLXRvZ2dsZScpO1xyXG4gICAgbmF2aWdhdGlvblRyaWdnZXIgPT09IG51bGwgfHwgbmF2aWdhdGlvblRyaWdnZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRpb25UcmlnZ2VyLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKE9QRU5FRF9NRU5VX0NMQVNTTkFNRSk7XHJcbiAgICAvLyB0b2RvIOyymOydjOyXkCDsl7TroKQg7J6I64qU7KeAIOuLq+2YgOyeiOuKlOyngCDssrTtgawuXHJcbn1cclxuZXhwb3J0cy5pbml0aWFsaXplTmF2YmFyID0gaW5pdGlhbGl6ZU5hdmJhcjtcclxuZnVuY3Rpb24gdG9nZ2xlTmF2YmFyTWVudShldmVudCkge1xyXG4gICAgY29uc3QgdHJpZ2dlciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuanMtbmF2YmFyLXRvZ2dsZScpO1xyXG4gICAgaWYgKCF0cmlnZ2VyKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IG1lbnVFbGVtZW50ID0gdHJpZ2dlci5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoT1BFTkVEX01FTlVfQ0xBU1NOQU1FLCAhaXNPcGVuZE5hdmJhck1lbnUoKSk7XHJcbiAgICB0cmlnZ2VyID09PSBudWxsIHx8IHRyaWdnZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgU3RyaW5nKGlzT3BlbmROYXZiYXJNZW51KCkpKTtcclxuICAgIG1lbnVFbGVtZW50ID09PSBudWxsIHx8IG1lbnVFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZW51RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgU3RyaW5nKCFpc09wZW5kTmF2YmFyTWVudSgpKSk7XHJcbiAgICBjb25zdCB0YWJJbmRleCA9IFN0cmluZyhpc09wZW5kTmF2YmFyTWVudSgpID8gJzAnIDogJy0xJyk7XHJcbiAgICBtZW51RWxlbWVudCA9PT0gbnVsbCB8fCBtZW51RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVudUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgdGFiSW5kZXgpO1xyXG4gICAgfSk7XHJcbiAgICBmdW5jdGlvbiB0b2dnbGVBcmlhKGFyaWFUeXBlLCBmb3JjZSkge1xyXG4gICAgICAgIC8vIEVsZW1lbnQucHJvdG90eXBlXHJcbiAgICB9XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB7XHJcbiAgICAvLyAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTmF2YmFyTWVudSlcclxuICAgIC8vIH0pXHJcbiAgICAvLyBuYXZiYXJNZW51Py5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpKVxyXG59XHJcbmV4cG9ydHMudG9nZ2xlTmF2YmFyTWVudSA9IHRvZ2dsZU5hdmJhck1lbnU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJtRjJZbUZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2libUYyWW1GeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxFMUJRVTBzY1VKQlFYRkNMRWRCUVVjc1owSkJRV2RDTEVOQlFVRTdRVUZET1VNc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUVR0QlFVVjJSaXhUUVVGblFpeG5Ra0ZCWjBJN1NVRkRPVUlzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZqTEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3U1VGRmJFWXNhVUpCUVdsQ0xHRkJRV3BDTEdsQ1FVRnBRaXgxUWtGQmFrSXNhVUpCUVdsQ0xFTkJRVVVzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRVZCUVVNN1NVRkRhRVFzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVFN1NVRkZja1FzTkVKQlFUUkNPMEZCUXpsQ0xFTkJRVU03UVVGUVJDdzBRMEZQUXp0QlFVVkVMRk5CUVdkQ0xHZENRVUZuUWl4RFFVRkRMRXRCUVVzN1NVRkRjRU1zVFVGQlRTeFBRVUZQTEVkQlFVa3NTMEZCU3l4RFFVRkRMRTFCUVhOQ0xFTkJRVU1zVDBGQlR5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3U1VGRE1VVXNTVUZCU1N4RFFVRkRMRTlCUVU4N1VVRkJSU3hQUVVGTk8wbEJSWEJDTEUxQlFVMHNWMEZCVnl4SFFVRkhMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNRMEZCUVR0SlFVVTVReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVOQlFVRTdTVUZGTTBVc1QwRkJUeXhoUVVGUUxFOUJRVThzZFVKQlFWQXNUMEZCVHl4RFFVRkZMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVVzVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFTkJRVU1zUlVGQlF6dEpRVU51UlN4WFFVRlhMR0ZCUVZnc1YwRkJWeXgxUWtGQldDeFhRVUZYTEVOQlFVVXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRExFVkJRVU03U1VGRmRFVXNUVUZCVFN4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1NVRkZla1FzVjBGQlZ5eGhRVUZZTEZkQlFWY3NkVUpCUVZnc1YwRkJWeXhEUVVGRkxHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdVVUZEYmtRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVFN1NVRkROVU1zUTBGQlF5eEZRVUZETzBsQlJVWXNVMEZCVXl4VlFVRlZMRU5CUVVNc1VVRkJVU3hGUVVGRkxFdEJRVXM3VVVGRGFrTXNiMEpCUVc5Q08wbEJRM1JDTEVOQlFVTTdTVUZEUkN4cFJFRkJhVVE3U1VGRGFrUXNORVJCUVRSRU8wbEJRelZFTEV0QlFVczdTVUZEVEN3d1JVRkJNRVU3UVVGRE5VVXNRMEZCUXp0QlFYaENSQ3cwUTBGM1FrTWlmUT09IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=