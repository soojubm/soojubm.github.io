!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function c(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var a=i(n(2)),c=n(3),l=n(4),s=i(n(5)),u=i(n(16));window.innerHeight,window.pageYOffset,document.body.offsetHeight;function d(){return r(this,void 0,void 0,(function(){var e,t,n,r,i,c;return o(this,(function(o){switch(o.label){case 0:return[4,a.default()];case 1:return o.sent(),e=document.querySelectorAll(".js-system-theme button"),"is-active",[],null==e||e.forEach((function(t,n){t.addEventListener("click",(function(t){null==e||e.forEach((function(e){t.target===e?e.classList.add("is-active"):e.classList.remove("is-active")}))}))})),u.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),u.default.file(),u.default.textarea(),u.default.number(),s.default.toggleClass({selector:".js-navbar-toggle"}).setEvent(),s.default.modal({selector:".js-modal"}).setEvent(),s.default.toggleClass({selector:".js-toggle"}).setEvent(),s.default.enterTarget({selector:".js-hover-trigger"}),s.default.tabMenu(),s.default.closeParentElement({selector:".js-close"}),s.default.toTop({selector:".js-to-top"}),s.default.stickyElement({targetElement:".js-header",addClass:"is-sticky-header",position:"top"}),s.default.stickyElement({targetElement:".js-post-head",addClass:"is-sticky-post-head",position:"bottom"}),s.default.scrollAnimation(),(f=document.querySelectorAll(".js-graph .graph-item"))&&f.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var r=parseInt(n.innerText);t.style.height=r+"px",n.style.bottom=r+"px"}})),l.carousel(),function(){var e=document.querySelectorAll(".js-view-password");if(0===e.length)return;e.forEach((function(e){return e.addEventListener("click",(function(){var t,n,r;return n=null===(t=null==e?void 0:e.parentNode)||void 0===t?void 0:t.querySelector("input"),r="password"===(null==n?void 0:n.getAttribute("type"))?"text":"password",void(null==n||n.setAttribute("type",r))}))}))}(),d=document.querySelector(".js-comment-write"),document.querySelectorAll(".js-comment-textfield").forEach((function(e){return e.addEventListener("focus",(function(){d.classList.add("is-focused")}))})),(t=document.querySelector(".js-input-test"))&&(t.addEventListener("keypress",(function(e){var t=e.which||e.keyCode;!(32===t)&&(t<48||t>57)&&e.preventDefault()})),n=t.value||"",t.addEventListener("input",(function(e){var t=e.target;/^[0-9\s]*$/.test(t.value)?n=t.value:t.value=n}))),r=document.querySelector(".js-display-list"),i=document.querySelector(".js-display-grid"),c=document.querySelector(".profile-body"),null==r||r.addEventListener("click",(function(){null==r||r.classList.add("is-selected"),null==i||i.classList.remove("is-selected"),null==c||c.classList.add("list")})),null==i||i.addEventListener("click",(function(){null==r||r.classList.remove("is-selected"),null==i||i.classList.add("is-selected"),null==c||c.classList.remove("list")})),[2]}var d,f}))}))}document.addEventListener("readystatechange",(function(e){"loading"===e.target.readyState?console.log("loading..."):"interactive"===e.target.readyState?console.log("initLoader"):"complete"===e.target.readyState&&console.log("initApp")})),document.addEventListener("offline",(function(){document.querySelector(".js-offline").hidden=!1})),document.addEventListener("online",(function(){}),!1),window.addEventListener("unload",(function(){return console.log("unload event")})),window.addEventListener("hashchange",d),window.addEventListener("hashchange",(function(){t=document.querySelector(".js-navbar-toggle"),t&&t.classList.contains("is-active")&&(t.classList.remove("is-active"),null===(e=t.nextElementSibling)||void 0===e||e.classList.remove("is-visible"));var e,t})),document.addEventListener("DOMContentLoaded",(function(){c.detectBrowser(),c.initializeLoader(),l.setDarkmode(),d(),window.addEventListener("scroll",(function(){var e=document.querySelector(".post"),t=document.querySelector(".post-head-progress");if(!e||!t)return;var n=window.pageYOffset/(e.scrollHeight-window.innerHeight)*100+"%";t.style.width=n}),!0)}))},function(e,t,n){},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function c(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=[{name:"root",path:"/"},{name:"home",path:"/home"},{name:"design",path:"/design"},{name:"profile",path:"/profile"},{name:"blog",path:"/blog"}],a=window.location.pathname;t.default=function(){return r(void 0,void 0,void 0,(function(){function e(e){var n=e.target.attributes[0].value,r=i.filter((function(e){return e.path===n}))[0];r?(window.history.pushState({name:"tester"},"name",r.path),t.innerHTML=""+r.name):(window.history.pushState({},"","error"),t.innerHTML="no route exists")}var t,n,r,c;return o(this,(function(o){switch(o.label){case 0:return(t=document.getElementById("view"))?(Array.from(document.querySelectorAll("[route]")).forEach((function(t){t.addEventListener("click",e,flase)})),"/"===a||((n=i.filter((function(e){return e.path===a})))||(t.innerHTML="404"),t.innerHTML=""+n.name),r=window.location.hash.substring(1),[4,fetch(r?"/views/"+r+".html":"/views/design.html").then((function(e){return e.text()})).then((function(e){return t.innerHTML=e})).catch((function(e){return console.warn("router: ",e)}))]):[2];case 1:return c=o.sent(),window.scrollTo(0,0),[2,c]}}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initializeLoader=function(){document.addEventListener("DOMContentLoaded",(function(){document.body.classList.add("body-lock")})),window.addEventListener("load",(function(){var e=document.querySelector(".js-loader");if(!e)return;document.body.classList.remove("body-lock"),e.hidden=!0}))},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase(),n=t.indexOf("msie")>-1||t.indexOf("trident")>-1;e.hidden=!n}};t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return n(e)};n(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}function n(e){var t=document.body,n="fixed"===getComputedStyle(e).position;t.style.marginTop=n?e.clientHeight+"px":0}}},function(e,t,n){"use strict";function r(){document.body.classList.toggle("theme-dark"),document.body.classList.contains("theme-dark")?localStorage.setItem("theme","theme-dark"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),r=e.querySelector(".slider-arrows-prev"),o=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&r&&o&&i){var a=t.offsetWidth,c=0;n.forEach((function(e){return c+=e.offsetWidth})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",a)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",r))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(6)),i=r(n(7)),a=r(n(8)),c=r(n(9)),l=r(n(10)),s=r(n(11)),u=r(n(12)),d=r(n(13)),f=r(n(14)),v=r(n(15));t.default={toggleClass:o.default,enterTarget:i.default,modal:c.default,tabMenu:a.default,toTop:l.default,stickyElement:s.default,scrollAnimation:u.default,scrollspy:v.default,closeParentElement:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{init:function(){},triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",setEvent:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(n){n.preventDefault(),n.stopPropagation();var r=null==t?void 0:t.nextElementSibling;r&&(e.toggleClassTrigger(t),e.toggleClassTarget(r),e.triggers.forEach((function(t){n.target!==t&&e.removeAllClass(t)})))}))})),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.removeAllClass(t)}))})))},toggleClassTrigger:function(e){e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS))},toggleClassTarget:function(e){e.classList.toggle(this.ACTIVE_CLASS2),e.addEventListener("click",(function(e){return e.stopPropagation()}))},removeAllClass:function(e){e.setAttribute("aria-expanded","true"),e.classList.remove(this.ACTIVE_CLASS),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);null==n||n.forEach((function(e){e.addEventListener("mouseenter",(function(){return function(e){var t=e.classList.contains("navbar-menu-item");e.setAttribute("aria-expanded","true"),t&&document.body.classList.add("is-shown")}(e)})),e.addEventListener("mouseleave",(function(){return function(e){var t=e.classList.contains("navbar-menu-item");e.setAttribute("aria-expanded","false"),t&&document.body.classList.remove("is-shown")}(e)}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e,t=document.querySelector(".profile-tablist-indicator"),n=null===(e=null==t?void 0:t.parentNode)||void 0===e?void 0:e.querySelector("[role=tab]");if(t&&n){var r=getComputedStyle(n).width;t.style.width=r,document.addEventListener("resize",(function(){return function(e,t){setTimeout((function(){e.style.width=t}),100)}(t,r)})),document.addEventListener("click",(function(e){var n=e.target,r=n.parentNode.querySelectorAll("[role=tab]"),o=n.parentNode.parentNode.querySelectorAll("[role=tabpanel]"),i=n.getAttribute("data-index");r&&n.closest("[role=tab]")&&(t.style.left=n.offsetLeft+"px",t.style.width=getComputedStyle(n).width,r.forEach((function(e){return e.setAttribute("aria-selected","false")})),n.setAttribute("aria-selected","true"),o.forEach((function(e){e.classList.add("hidden"),e.setAttribute("aria-hidden","true"),i===e.getAttribute("data-index")&&(e.classList.remove("hidden"),e.setAttribute("aria-hidden","hidden"))})))}),!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{initialize:function(){},modals:document.querySelectorAll(t),modalContainer:document.querySelector("#modal"),setEvent:function(){var e=this;document.removeEventListener("click",this.backHistory),this.modals&&this.modals.forEach((function(t){return t.addEventListener("click",(function(n){n.stopPropagation(),n.preventDefault();var r=t.dataset.modal;fetch("/views/"+r+".html").then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(t){var n,o,i;if(e.modalContainer){e.modalContainer.innerHTML=t,document.body.classList.remove("is-modal-visible");var a=window.pageYOffset;e.showModal(a),e.setHistory(r),document.body.classList.contains("is-modal-visible")&&(null===(n=document.querySelector(".js-modal-close"))||void 0===n||n.addEventListener("click",(function(e){return e.stopPropagation()})),null===(o=document.querySelector(".js-modal-close"))||void 0===o||o.addEventListener("click",e.backHistory),null===(i=document.querySelector(".modal-dim"))||void 0===i||i.addEventListener("click",e.backHistory)),document.addEventListener("keydown",(function(t){27===t.keyCode&&e.backHistory()}),!0),window.addEventListener("popstate",(function(){return e.clearModal(e.modalContainer,a)}))}})).catch((function(e){return console.warn("modal Error")}))}))}))},showModal:function(e){document.body.classList.add("is-modal-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+e+"px"},clearModal:function(e,t){document.body.classList.remove("is-modal-visible"),document.body.classList.remove("body-lock"),e.innerHTML="",window.scrollTo(0,t)},setHistory:function(e){var t=e;history.pushState({name:"tester"},"dd",t)},backHistory:function(){history.back()}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,r=e.position,o=document.querySelector(t);if(o){var i,a=o.offsetHeight;window.addEventListener("scroll",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){var e=o.offsetTop,t=o.offsetTop+a;window.pageYOffset>("top"===r?e:t)?document.body.classList.add(n):document.body.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e,t=document.querySelectorAll(".js-scroll-animation");t&&(t.forEach((function(e){e.getBoundingClientRect().top<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){t.forEach((function(t){t.getBoundingClientRect().top+.5*t.clientHeight<=window.innerHeight&&(t.classList.add("is-scrolled"),e&&window.cancelAnimationFrame(e),e=window.requestAnimationFrame((function(){})))}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);0!==n.length&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-loader-spinner");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,r=e.clientX,o=e.clientY;n.style.left=r+"px",n.style.top=o+"px"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.menusSelector,n=e.sectionsSelector,r=document.querySelectorAll(t),o=document.querySelectorAll(n);r&&o&&(o.forEach((function(e,t){e.addEventListener("click",(function(e){e.preventDefault();var n=r[t].offsetTop;window.scrollTo(0,n)}))})),window.addEventListener("scroll",(function(){r.forEach((function(e,t){e.offsetTop<=window.pageYOffset+200&&(o.forEach((function(e){return e.classList.remove("is-active")})),o[t].classList.add("is-active"))}))})))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(17)),i=r(n(18)),a=r(n(19)),c=r(n(20));t.default={checkbox:o.default,textarea:i.default,file:a.default,number:c.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),r=n.every((function(e){return e.checked})),o=n.some((function(e){return e.checked}));t.checked=r,t.indeterminate=o&&!r,t.dataset.indeterminate=o&&!r},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t=e.target;if(!t&&"textarea"===t.nodeName.toLowerCase()){var n=document.querySelector(".textfield-byte b");if(n){var o=(null==t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;n.innerText=o,o>30?t.parentNode.classList.add("is-invalid"):t.parentNode.classList.remove("is-invalid"),r(t)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),r=document.querySelector(".js-file-attachment-helper");if(!t||!n||!r)return;r.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,r,o='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,r=t>=1024&&t<1048576,t<1024?t+"bytes":r?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=o}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,r=n.value.length>0;e&&(n.value=0);r&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelector(".js-quantity-input"),r=t.parentNode.querySelector(".js-quantity-decrement"),o=t.parentNode.querySelector(".js-quantity-increment");if(t.closest(".js-quantity-decrement")&&(--n.value,n.value<=0&&t.setAttribute("disabled","true"),n.value<10&&o.removeAttribute("disabled")),t.closest(".js-quantity-increment")){if(10===n.value)return;++n.value,n.value>=10&&t.setAttribute("disabled","true"),n.value>0&&r.removeAttribute("disabled")}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3NldERhcmtNb2RlLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9nZ2xlQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2VudGVyVGFyZ2V0LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC90YWJNZW51LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9tb2RhbC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3N0aWNreUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2xvc2VQYXJlbnRFbGVtZW50LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9jdXN0b21DdXJzb3IudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbHNweS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L2NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC90ZXh0YXJlYS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvZmlsZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvbnVtYmVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwicm91dGVyXzEiLCJsb2FkXzEiLCJzZXREYXJrTW9kZV8xIiwiaW5kZXhfMSIsImluZGV4XzIiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnQiLCJvZmZzZXRIZWlnaHQiLCJkb21FdmVudHMiLCJ0aGVtZUJ1dHRvbkVsZW1lbnRzIiwiaW5wdXRUZXN0IiwiY3VycmVudFZhbHVlXzEiLCJsaXN0IiwiZ3JpZCIsIndvcmtzIiwiX2EiLCJkZWZhdWx0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJidXR0b24iLCJpbmRleCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImJ1dHRvbjIiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjaGVja2JveCIsImNoZWNrQWxsU2VsZWN0b3IiLCJjaGVja1NlbGVjdG9yIiwic2V0RXZlbnQiLCJmaWxlIiwidGV4dGFyZWEiLCJudW1iZXIiLCJ0b2dnbGVDbGFzcyIsInNlbGVjdG9yIiwibW9kYWwiLCJlbnRlclRhcmdldCIsInRhYk1lbnUiLCJjbG9zZVBhcmVudEVsZW1lbnQiLCJ0b1RvcCIsInN0aWNreUVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwiYWRkQ2xhc3MiLCJwb3NpdGlvbiIsInNjcm9sbEFuaW1hdGlvbiIsImdyYXBoSXRlbXMiLCJlbGVtZW50IiwiZ3JhcGhJdGVtQmFyIiwicXVlcnlTZWxlY3RvciIsImdyYXBoSXRlbVZhbHVlIiwiZ3JhcGhWYWx1ZSIsInBhcnNlSW50IiwiaW5uZXJUZXh0Iiwic3R5bGUiLCJoZWlnaHQiLCJib3R0b20iLCJjYXJvdXNlbCIsImVsZW1lbnRzIiwiaW5wdXRFbGVtZW50IiwiaW5wdXRUeXBlIiwicGFyZW50Tm9kZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInJldmVhbFBhc3N3b3JkIiwiY29tbWVudFdyaXRlIiwid2hpY2giLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJ0ZXN0IiwicmVhZHlTdGF0ZSIsImNvbnNvbGUiLCJsb2ciLCJoaWRkZW4iLCJuYXZpZ2F0aW9uVHJpZ2dlciIsImNvbnRhaW5zIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZGV0ZWN0QnJvd3NlciIsImluaXRpYWxpemVMb2FkZXIiLCJzZXREYXJrbW9kZSIsImNvbnRhaW5lckVsZW1lbnQiLCJwcm9ncmVzc0JhciIsInNjcm9sbFBlcmNlbnQiLCJzY3JvbGxIZWlnaHQiLCJ3aWR0aCIsInJvdXRlcyIsInBhdGgiLCJjdXJyZW50UGF0aCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJuYXZpZ2F0ZSIsInJvdXRlIiwiYXR0cmlidXRlcyIsInJvdXRlSW5mbyIsImZpbHRlciIsIml0ZW0iLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwidmlldyIsImlubmVySFRNTCIsImhhc2giLCJyZXNwb25zZSIsImdldEVsZW1lbnRCeUlkIiwiQXJyYXkiLCJmcm9tIiwiZmxhc2UiLCJzdWJzdHJpbmciLCJmZXRjaCIsInRleHQiLCJodG1sIiwiY2F0Y2giLCJlcnJvciIsIndhcm4iLCJzY3JvbGxUbyIsImxvYWRlckVsZW1lbnQiLCJCcm93c2VyRWxlbWVudCIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInRvTG93ZXJDYXNlIiwiaXNJRUJyb3dzZXIiLCJpbmRleE9mIiwiYWRqdXN0VG9wUGFkZGluZyIsImhlYWRlckVsZW1lbnQiLCJmbiIsInNldEJvZHlNYXJnaW5Ub3AiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpc0ZpeGVkSGVhZGVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm1hcmdpblRvcCIsImNsaWVudEhlaWdodCIsInR0IiwidG9nZ2xlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjYXRlZ29yeSIsImNhdGVnb3J5TGlzdCIsImNhdGVnb3J5TGlzdFNsaWRlIiwiY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiIsImNhdGVnb3J5TmF2aWdhdGlvbk5leHQiLCJjYXRlZ29yeURvdHMiLCJjYXRlZ29yeUNvbnRhaW5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJzdW0iLCJzY3JvbGxMZWZ0IiwiZGFya21vZGVCdXR0b24iLCJsYXN0VGhlbWUiLCJnZXRJdGVtIiwibG9hZFRoZW1lIiwidG9nZ2xlQ2xhc3NfMSIsImVudGVyVGFyZ2V0XzEiLCJ0YWJNZW51XzEiLCJtb2RhbF8xIiwidG9Ub3BfMSIsInN0aWNreUVsZW1lbnRfMSIsInNjcm9sbEFuaW1hdGlvbl8xIiwiY2xvc2VQYXJlbnRFbGVtZW50XzEiLCJjdXN0b21DdXJzb3JfMSIsInNjcm9sbHNweV8xIiwic2Nyb2xsc3B5IiwiY3VzdG9tQ3Vyc29yIiwidHJpZ2dlciIsImluaXQiLCJ0cmlnZ2VycyIsIkFDVElWRV9DTEFTUyIsIkFDVElWRV9DTEFTUzIiLCJfdGhpcyIsInN0b3BQcm9wYWdhdGlvbiIsInRyaWdnZXJOZXh0RWxlbWVudCIsInRvZ2dsZUNsYXNzVHJpZ2dlciIsInRvZ2dsZUNsYXNzVGFyZ2V0IiwicmVtb3ZlQWxsQ2xhc3MiLCJob3ZlckVsZW1lbnRzIiwiaXNOYXZpZ2F0aW9uIiwiZW50ZXJFdmVudCIsImxlYXZlRXZlbnQiLCJ0YWJJbmRpY2F0b3IiLCJmaXJzdFRhYiIsImZpcnN0VGFiV2lkdGgiLCJzZXRUaW1lb3V0IiwiaW5pdGlhbGl6ZUluZGljYXRvciIsInRhYnMiLCJ0YWJQYW5lbHMiLCJ0YWJJbmRleCIsImNsb3Nlc3QiLCJsZWZ0Iiwib2Zmc2V0TGVmdCIsInRhYiIsImluaXRpYWxpemUiLCJtb2RhbHMiLCJtb2RhbENvbnRhaW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJiYWNrSGlzdG9yeSIsIm1vZGFsSWQiLCJkYXRhc2V0Iiwib2siLCJfYiIsIl9jIiwic2hvd01vZGFsIiwic2V0SGlzdG9yeSIsImNsZWFyTW9kYWwiLCJ0b3AiLCJjb250YWluZXIiLCJtb2RhbFVybCIsInVybCIsImJhY2siLCJ0b1RvcEVsZW1lbnQiLCJpc1Njcm9sbGluZyIsImVsZW1lbnRIZWlnaHQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImVsZW1lbnRPZmZzZXRUb3AiLCJvZmZzZXRUb3AiLCJlbGVtZW50T2Zmc2V0Qm90dG9tIiwidGVtcCIsInNjcm9sbEVsZW1lbnRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xvc2VFbGVtZW50cyIsImN1cnNvciIsImhvdmVyRWxlbWVudCIsInNldEN1cnNvciIsImN1cnNvckVsZW1lbnQiLCJzZXRSaXBwbGUiLCJ4IiwiY2xpZW50WCIsImNsaWVudFkiLCJtZW51c0NsYXNzIiwibWVudXNTZWxlY3RvciIsInNlY3Rpb25zQ2xhc3MiLCJzZWN0aW9uc1NlbGVjdG9yIiwic2VjdGlvbnMiLCJtZW51cyIsInRhcmdldE9mZnNldFkiLCJzZWN0aW9uIiwibWVudSIsImNoZWNrYm94XzEiLCJ0ZXh0YXJlYV8xIiwiZmlsZV8xIiwibnVtYmVyXzEiLCJjaGVja0FsbCIsImNoZWNrSXRlbXMiLCJzZXRDaGVja0FsbCIsImNoZWNrSXRlbSIsInNldENoZWNrRWFjaCIsImNoZWNrcyIsImlzQ2hlY2tlZEV2ZXJ5IiwiZXZlcnkiLCJjaGVja2VkIiwiaXNDaGVja2VkU29tZSIsInNvbWUiLCJpbmRldGVybWluYXRlIiwiYXV0b0V4cGFuZCIsImZpZWxkIiwiY29tcHV0ZWQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibm9kZU5hbWUiLCJieXRlRWxlbWVudCIsInN0cmluZ0J5dGVMZW5ndGgiLCJyZXBsYWNlIiwiZmlsZUlucHV0IiwiZmlsZXMiLCJhdHRhY2htZW50TGlzdCIsImF0dGFjaG1lbnRIZWxwZXIiLCJkaXNwbGF5IiwidHlwZSIsInZhbGlkRmlsZVR5cGUiLCJhbGVydCIsInNpemUiLCJpc0tpbG9CeXRlcyIsImZpbGVUZW1wbGF0ZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInRvRml4ZWQiLCJhdHRhY2giLCJpc0ZpcnN0UGxhY2VkWmVybyIsImlzTWF4aW11bSIsIk51bWJlciIsImlzTGVuZ3RoIiwic2xpY2UiLCJpbmNsdWRlcyIsImRlY3JlbWVudEVsZW1lbnQiLCJpbmNyZW1lbnRFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlC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aEIsSUFJVjRVLEVBQVc3UCxFQUFPL0UsTUFBTWlELE9BSGQsRUFJVndSLElBQ0ExUCxFQUFPL0UsTUFMRyxHQU1WNFUsSUFDQTdQLEVBQU8vRSxNQUFRK0UsRUFBTy9FLE1BQU02VSxNQUFNLEVBQUcsSUFDckNILElBQ0EzUCxFQUFPL0UsTUFWRyxRQWJWMkgsRUFBVTlDLEVBQU04QyxRQUNMLENBQUMsR0FBSSxJQUFLLElBQUssS0FDUG1OLFNBQVNuTixJQUU1QjlDLEVBQU0rQyxzQkE0RXRCL0QsU0FBU2UsaUJBQWlCLFNBQVMsU0FBVUMsR0FDekMsSUFBSUUsRUFBU0YsRUFBTUUsT0FDZm9DLEVBQWVwQyxFQUFPc0MsV0FBV1osY0FBYyxzQkFDL0NzTyxFQUFtQmhRLEVBQU9zQyxXQUFXWixjQUFjLDBCQUNuRHVPLEVBQW1CalEsRUFBT3NDLFdBQVdaLGNBQWMsMEJBV3ZELEdBUEkxQixFQUFPaUssUUFBUSw4QkFDYjdILEVBQWFuSCxNQUNYbUgsRUFBYW5ILE9BTEwsR0FNUitFLEVBQU93QyxhQUFhLFdBQVksUUFDaENKLEVBQWFuSCxNQU5MLElBT1JnVixFQUFpQkMsZ0JBQWdCLGFBRXJDbFEsRUFBT2lLLFFBQVEsMEJBQTJCLENBQzFDLEdBVlksS0FVUjdILEVBQWFuSCxNQUNiLFNBQ0ZtSCxFQUFhbkgsTUFDWG1ILEVBQWFuSCxPQWJMLElBY1IrRSxFQUFPd0MsYUFBYSxXQUFZLFFBQ2hDSixFQUFhbkgsTUFoQkwsR0FpQlIrVSxFQUFpQkUsZ0JBQWdCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnJlcXVpcmUoXCIuL3N0eWxlc2hlZXRzL3N0eWxlLnNjc3NcIik7XHJcbnZhciByb3V0ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9yb3V0ZXJcIikpO1xyXG52YXIgbG9hZF8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvbG9hZFwiKTtcclxudmFyIHNldERhcmtNb2RlXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZVwiKTtcclxuLy8gaW1wb3J0IHsgY291bnREb3duQ2xvY2sgfSBmcm9tICcuL2phdmFzY3JpcHRzL2NvdW50ZG93bidcclxudmFyIGluZGV4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvZXZlbnQvaW5kZXhcIikpO1xyXG52YXIgaW5kZXhfMiA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9pbnB1dC9pbmRleFwiKSk7XHJcbi8vIGltcG9ydCB7IHZhbGlkaXR5IH0gZnJvbSAnLi9qYXZhc2NyaXB0cy91dGlscy92YWxpZGF0aW9ucydcclxuLy8gaW1wb3J0IHsgY29weUNsaXBib2FyZCB9IGZyb20gJy4vamF2YXNjcmlwdHMvdXRpbHMvZm9ybWF0VXRpbHMuanMnXHJcbnZhciBpc1Njcm9sbEVuZCA9IHdpbmRvdy5pbm5lckhlaWdodCArIHdpbmRvdy5wYWdlWU9mZnNldCA+PSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgLy8gZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudCA/IHRydWVcclxuICAgIGlmIChldmVudC50YXJnZXQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nLi4uJyk7XHJcbiAgICBlbHNlIGlmIChldmVudC50YXJnZXQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJylcclxuICAgICAgICBjb25zb2xlLmxvZygnaW5pdExvYWRlcicpO1xyXG4gICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXRBcHAnKTtcclxufSk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgb2ZmbGluZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtb2ZmbGluZScpO1xyXG4gICAgb2ZmbGluZUVsZW1lbnQuaGlkZGVuID0gZmFsc2U7XHJcbn0pO1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBmdW5jdGlvbiAoKSB7IH0sIGZhbHNlKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnNvbGUubG9nKCd1bmxvYWQgZXZlbnQnKTsgfSk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgZG9tRXZlbnRzKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBpbml0aWFsaXplUGFnZSk7XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBsb2FkXzEuZGV0ZWN0QnJvd3NlcigpO1xyXG4gICAgbG9hZF8xLmluaXRpYWxpemVMb2FkZXIoKTtcclxuICAgIC8vIGluaXRpYWxpemVQYWdlKClcclxuICAgIHNldERhcmtNb2RlXzEuc2V0RGFya21vZGUoKTtcclxuICAgIGRvbUV2ZW50cygpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbFByb2dyZXNzLCB0cnVlKTtcclxuICAgIGZ1bmN0aW9uIHNjcm9sbFByb2dyZXNzKCkge1xyXG4gICAgICAgIHZhciBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QnKTtcclxuICAgICAgICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1oZWFkLXByb2dyZXNzJyk7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXJFbGVtZW50IHx8ICFwcm9ncmVzc0JhcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBzY3JvbGxQZXJjZW50ID0gKHdpbmRvdy5wYWdlWU9mZnNldCAvIChjb250YWluZXJFbGVtZW50LnNjcm9sbEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCkpICogMTAwICsgXCIlXCI7XHJcbiAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBzY3JvbGxQZXJjZW50O1xyXG4gICAgfVxyXG59KTtcclxuZnVuY3Rpb24gZG9tRXZlbnRzKCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIGxhenlMb2FkaW5nKClcclxuICAgICAgICBmdW5jdGlvbiBsYXp5TG9hZGluZygpIHtcclxuICAgICAgICAgICAgaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICYmICdJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5JyBpbiB3aW5kb3cgJiYgJ2ludGVyc2VjdGlvblJhdGlvJyBpbiB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYXp5QmFja2dyb3VuZHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdWJzY3JpYmUnKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByb290OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RNYXJnaW46ICcwcHggMHB4IDBweCAwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZDogMC4xLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcl8xID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGxhenlCYWNrZ3JvdW5kcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBvYnNlcnZlcl8xLm9ic2VydmUoZWxlbWVudCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVudHJpZXMsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGVudHJ5IGlzIG5vdCBpbiB0aGUgdmlld3BvcnQsIGRvIG5vdGhpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVudHJ5LmlzSW50ZXJzZWN0aW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBvYnNlcnZpbmdcclxuICAgICAgICAgICAgICAgICAgICAvLyBvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW50cnkudGFyZ2V0LnNyYyA9IGVudHJ5LnRhcmdldC5kYXRhc2V0LnNyYztcclxuICAgICAgICAgICAgICAgICAgICAvLyBsYXp5QmFja2dyb3VuZE9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBmZXRjaERhdGEoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFVSTF8xLCByZXNwb25zZSwgZGF0YSwgZXJyb3JfMTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDMsICwgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVSTF8xID0gJ2h0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20vcHJvZjNzc29yU3QzdjMvMTk0NGU3YmE3ZmZiNjJmZTc3MWM1MTc2NGY3OTc3YTQvcmF3L2M1OGEzNDJhYjE0OWZiYmI5YmIxOWM5NGUyNzhkNjQ3MDI4MzMyNzAvaW5maW5pdGUuanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2goVVJMXzEpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAnU29tZXRoaW5nIHdlbnQgd3JvbmcuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlc2lnbi1ib2R5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmlldylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIFwiPGRpdiBzdHlsZT1cXFwiaGVpZ2h0OjIwMHB4O2JhY2tncm91bmQ6Y3JpbXNvbjtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO1xcXCI+XFx1QkIzNFxcdUQ1NUNcXHVDMkE0XFx1RDA2Q1xcdUI4RDQ8L2Rpdj5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVHcmFwaCgpIHtcclxuICAgICAgICAgICAgLy8gdG9kbyDsp4DquIjsnYAg67CU6rCAIDEwMHB4IOydtOudvOyEnCAxOjHroZwg64yA7J6FXHJcbiAgICAgICAgICAgIHZhciBncmFwaEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWdyYXBoIC5ncmFwaC1pdGVtJyk7XHJcbiAgICAgICAgICAgIGlmICghZ3JhcGhJdGVtcylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZ3JhcGhJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ3JhcGhJdGVtQmFyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS1iYXInKTtcclxuICAgICAgICAgICAgICAgIHZhciBncmFwaEl0ZW1WYWx1ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIGlmICghZ3JhcGhJdGVtQmFyIHx8ICFncmFwaEl0ZW1WYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB2YXIgZ3JhcGhWYWx1ZSA9IHBhcnNlSW50KGdyYXBoSXRlbVZhbHVlLmlubmVyVGV4dCk7XHJcbiAgICAgICAgICAgICAgICBncmFwaEl0ZW1CYXIuc3R5bGUuaGVpZ2h0ID0gZ3JhcGhWYWx1ZSArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIGdyYXBoSXRlbVZhbHVlLnN0eWxlLmJvdHRvbSA9IGdyYXBoVmFsdWUgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGhlbWVCdXR0b25FbGVtZW50cywgQUNUSVZFX0NMQVNTLCBjbGFzc2VzLCBpbnB1dFRlc3QsIGN1cnJlbnRWYWx1ZV8xLCBsaXN0LCBncmlkLCB3b3JrcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgcm91dGVyXzEuZGVmYXVsdCgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlbWVCdXR0b25FbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zeXN0ZW0tdGhlbWUgYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgQUNUSVZFX0NMQVNTID0gJ2lzLWFjdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZW1lQnV0dG9uRWxlbWVudHMgPT09IG51bGwgfHwgdGhlbWVCdXR0b25FbGVtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWVCdXR0b25FbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsYXNzZXMucHVzaChidXR0b24uZ2V0QXR0cmlidXRlKCduYW1lJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNsYXNzZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYoaW5kZXggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdkZXNpZ24tc3lzdGVtLWRhbm5nbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnZGVzaWduLXN5c3RlbS1uZXduZWVrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgaWYgKGluZGV4ID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZGVzaWduLXN5c3RlbS1uZXduZWVrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdkZXNpZ24tc3lzdGVtLWRhbm5nbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdkZXNpZ24tc3lzdGVtLW5ld25lZWsnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2lnbi1zeXN0ZW0tZGFubmduJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lQnV0dG9uRWxlbWVudHMgPT09IG51bGwgfHwgdGhlbWVCdXR0b25FbGVtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWVCdXR0b25FbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVGFyZ2V0ID0gZXZlbnQudGFyZ2V0ID09PSBidXR0b24yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1RhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24yLmNsYXNzTGlzdC5hZGQoQUNUSVZFX0NMQVNTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKG5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uMi5jbGFzc0xpc3QucmVtb3ZlKEFDVElWRV9DTEFTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMi5kZWZhdWx0LmNoZWNrYm94KHsgY2hlY2tBbGxTZWxlY3RvcjogJy5qcy1jaGVja2FsbCcsIGNoZWNrU2VsZWN0b3I6ICcuanMtY2hlY2snIH0pLnNldEV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMi5kZWZhdWx0LmZpbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8yLmRlZmF1bHQudGV4dGFyZWEoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8yLmRlZmF1bHQubnVtYmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnRvZ2dsZUNsYXNzKHsgc2VsZWN0b3I6ICcuanMtbmF2YmFyLXRvZ2dsZScgfSkuc2V0RXZlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQubW9kYWwoeyBzZWxlY3RvcjogJy5qcy1tb2RhbCcgfSkuc2V0RXZlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQudG9nZ2xlQ2xhc3MoeyBzZWxlY3RvcjogJy5qcy10b2dnbGUnIH0pLnNldEV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LmVudGVyVGFyZ2V0KHsgc2VsZWN0b3I6ICcuanMtaG92ZXItdHJpZ2dlcicgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnRhYk1lbnUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQuY2xvc2VQYXJlbnRFbGVtZW50KHsgc2VsZWN0b3I6ICcuanMtY2xvc2UnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC50b1RvcCh7IHNlbGVjdG9yOiAnLmpzLXRvLXRvcCcgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnN0aWNreUVsZW1lbnQoeyB0YXJnZXRFbGVtZW50OiAnLmpzLWhlYWRlcicsIGFkZENsYXNzOiAnaXMtc3RpY2t5LWhlYWRlcicsIHBvc2l0aW9uOiAndG9wJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQuc3RpY2t5RWxlbWVudCh7IHRhcmdldEVsZW1lbnQ6ICcuanMtcG9zdC1oZWFkJywgYWRkQ2xhc3M6ICdpcy1zdGlja3ktcG9zdC1oZWFkJywgcG9zaXRpb246ICdib3R0b20nIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC5zY3JvbGxBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBldmVudC5zY3JvbGxzcHkoeyBtZW51c1NlbGVjdG9yOiAnLmpzLXNlY3Rpb24nLCBzZWN0aW9uc1NlbGVjdG9yOiAnLm5ld25lZWstbmF2YmFyLW1lbnUtaXRlbScgfSlcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVHcmFwaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvdW50RG93bkNsb2NrKDIwLCAnZGF5cycpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RGFya01vZGVfMS5jYXJvdXNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldmVhbFBhc3N3b3JkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNDb21tZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUZXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWlucHV0LXRlc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRUZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VGVzdC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNOdW1iZXJLZXkgPSBrZXkgPCA0OCB8fCBrZXkgPiA1NzsgLy8gdG9kbyAhIGlzTnVtYmVyS2V5IOydtOuLpCDsp4DquIjsnYwwIHRvIDlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1NwYWNlS2V5ID0ga2V5ID09PSAzMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNTcGFjZUtleSAmJiBpc051bWJlcktleSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlXzEgPSBpbnB1dFRlc3QudmFsdWUgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VGVzdC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15bMC05XFxzXSokLy50ZXN0KHRhcmdldC52YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlXzEgPSB0YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gY3VycmVudFZhbHVlXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgaW4gdGhpcyBjYXNlLCBgZS5wcmV2ZW50RGVmYXVsdCgpYCBkb2Vzbid0IGhlbHBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIO2VnOq4gCDsnoXroKXtlojsnYQg65WMIOy7pOyEnOqwgCDrp6gg65Kk66GcIOqwkC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmICgvXlswLTlzXSokLy50ZXN0KHRhcmdldC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycmVudFZhbHVlID0gdGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0YXJnZXQudmFsdWUgPSBjdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGFyZ2V0LnNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvbi5zdGFydCwgc2VsZWN0aW9uLmVuZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBzZWxlY3Rpb24gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5wdXRUZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBzZWxlY3Rpb24gPSB7IHN0YXJ0OiB0YXJnZXQuc2VsZWN0aW9uU3RhcnQsIGVuZDogdGFyZ2V0LnNlbGVjdGlvbkVuZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kaXNwbGF5LWxpc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRpc3BsYXktZ3JpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtYm9keScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgPT09IG51bGwgfHwgbGlzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9PT0gbnVsbCB8fCBsaXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0LmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQgPT09IG51bGwgfHwgZ3JpZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ3JpZC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrcyA9PT0gbnVsbCB8fCB3b3JrcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd29ya3MuY2xhc3NMaXN0LmFkZCgnbGlzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyaWQgPT09IG51bGwgfHwgZ3JpZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9PT0gbnVsbCB8fCBsaXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQgPT09IG51bGwgfHwgZ3JpZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ3JpZC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrcyA9PT0gbnVsbCB8fCB3b3JrcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd29ya3MuY2xhc3NMaXN0LnJlbW92ZSgnbGlzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gcmV2ZWFsUGFzc3dvcmQoKSB7XHJcbiAgICB2YXIgRUxFTUVOVF9DTEFTU05BTUUgPSAnLmpzLXZpZXctcGFzc3dvcmQnO1xyXG4gICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChFTEVNRU5UX0NMQVNTTkFNRSk7XHJcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgdmFyIF9hOyByZXR1cm4gdG9nZ2xlUGFzc3dvcmQoKF9hID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbGVtZW50LnBhcmVudE5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpKTsgfSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHRvZ2dsZVBhc3N3b3JkKGlucHV0RWxlbWVudCkge1xyXG4gICAgICAgIHZhciBpc1Bhc3N3b3JkVHlwZSA9IChpbnB1dEVsZW1lbnQgPT09IG51bGwgfHwgaW5wdXRFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dEVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykpID09PSAncGFzc3dvcmQnO1xyXG4gICAgICAgIHZhciBpbnB1dFR5cGUgPSBpc1Bhc3N3b3JkVHlwZSA/ICd0ZXh0JyA6ICdwYXNzd29yZCc7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50ID09PSBudWxsIHx8IGlucHV0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZSgndHlwZScsIGlucHV0VHlwZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVBhZ2UoKSB7XHJcbiAgICBpbml0aWFsaXplTmF2YmFyKCk7XHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplTmF2YmFyKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB2YXIgbmF2aWdhdGlvblRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyLXRvZ2dsZScpO1xyXG4gICAgICAgIGlmICghbmF2aWdhdGlvblRyaWdnZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAobmF2aWdhdGlvblRyaWdnZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSkge1xyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uVHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcclxuICAgICAgICAgICAgKF9hID0gbmF2aWdhdGlvblRyaWdnZXIubmV4dEVsZW1lbnRTaWJsaW5nKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGRldGVjdFBhZ2UoKSB7XHJcbiAgICAgICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gXCJwYWdlLVwiICsgKGhhc2ggPT09ICcnID8gJ2Rlc2lnbicgOiBoYXNoLnN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAnJztcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgIH1cclxufVxyXG4vLyBsZXQgY29tcGFueSA9IHtcclxuLy8gICBuYW1lOiAnR2l0aHViJyxcclxuLy8gICByZXZlbnVlOiAyMDAwLFxyXG4vLyAgIHVzZXJzOiBbXHJcbi8vICAgICB7IG5hbWU6ICdKb2huJywgaGFuZGxlOiAnQGpvaG4nIH0sXHJcbi8vICAgICB7IG5hbWU6ICdkb2UnLCBoYW5kbGU6ICdAZG9lJyB9LFxyXG4vLyAgIF0sXHJcbi8vICAgZ2V0VXNlck5hbWVzKCkge1xyXG4vLyAgICAgcmV0dXJuIHVzZXJzLm1hcCh1c2VyID0+IHVzZXIubmFtZSlcclxuLy8gICB9LFxyXG4vLyB9XHJcbi8vIGNvbnN0IHZhbHVlID0gY29tcGFueT8ubmFtZSA/PyAnZGVmYXVsdCBuYW1lJ1xyXG4vLyBjb25zdCBjb21wYW55TmFtZSA9IGNvbXBhbnk/LlsnbmFtZSddID8/ICdkZWZhdWx0IHZhbHVlJ1xyXG4vLyBjb21wYW55LmdldFVzZXJOYW1lcz8uKClcclxuLy8gISBjbGljayDsnbTrsqTtirgg7Jm467aA7JeQIOuEo+ycvOuLiOq5jCDtjIztj63sl5DshJzrp4wg7Jik66WYLiBldmVudCB1bmRlZmluZWRcclxuLy8gVE9ETzog64+E7YGQ66i87Yq46rCAIOyVhOuLiOudvCBldmVudC50YXJnZXQucGFyZW50IOqwgCDslYTri4wg6rKD7J2EIO2BtOumre2WiOydhCDrlYwg64uk64u57JW8IO2VmOuCmFxyXG4vLyBjb25zdCBmaW5kQ2xhc3NSZWN1cnNpdmUgPSAoZWxlbWVudCwgY2xhc3NOYW1lLCBkZXB0aCkgPT4ge1xyXG4vLyAvLyBwYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygnanMtbW9kYWwnKVxyXG4vLyBcdGNvbnNvbGUubG9nKCdkZXB0aDogJyArIGRlcHRoLCBlbGVtZW50KTtcclxuLy8gXHRpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkgcmV0dXJuIGVsZW1lbnQ7XHJcbi8vIFx0ZWxzZSByZXR1cm4gZmluZENsYXNzUmVjdXJzaXZlKGVsZW1lbnQucGFyZW50Tm9kZSwgY2xhc3NOYW1lLCBkZXB0aCArIDEpO1xyXG4vLyB9O1xyXG4vLyB2YXIgZ2V0Q2xvc2VzdCA9IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7XHJcbi8vIFx0Zm9yICg7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQ7IGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpIHtcclxuLy8gXHRcdGlmIChlbGVtLm1hdGNoZXMoc2VsZWN0b3IpKSByZXR1cm4gZWxlbTtcclxuLy8gXHR9XHJcbi8vIFx0cmV0dXJuIG51bGw7XHJcbi8vIH07XHJcbi8vIFByb21pc2UuYWxsKFtcclxuLy8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJyksXHJcbi8vIFx0ZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2VycycpXHJcbi8vIF0pXHJcbi8vIC50aGVuKHJlc3BvbnNlcyA9PiB7XHJcbi8vIFx0cmV0dXJuIHJlc3BvbnNlcy5tYXAocmVzcG9uc2UgPT4ge1xyXG4vLyBcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuLy8gXHR9KTtcclxuLy8g7Jew64+E67OEIOqwkOuPheuzhCDrgpjrnbzrs4RcclxuLy8gY29uc3QgYm9hcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkJyk7XHJcbi8vIGlmKCFib2FyZEVsZW1lbnQpIHJldHVybiBudWxsO1xyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuLy8gXHRjb25zdCBmaWx0ZXJlZENvdW50cnkgPSBmaWxtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmNvdW50cnkgPT09ICfrr7jqta0nKTtcclxuLy8gXHRjb25zb2xlLmxvZyhmaWx0ZXJlZENvdW50cnkpO1xyXG4vLyBcdGlmKGV2ZW50LnRhcmdldC5uYW1lID09PSAndXNhJykge1xyXG4vLyBcdFx0Ym9hcmRFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4vLyBcdFx0ZmlsdGVyZWRDb3VudHJ5Lm1hcChpdGVtID0+IHtcclxuLy8gXHRcdFx0Ym9hcmRFbGVtZW50LmlubmVySFRNTCArPSBgXHJcbi8vIFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWJvZHlcIj5cclxuLy8gXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLmlkfTwvZGl2PlxyXG4vLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0ucmVsZWFzZURhdGV9PC9kaXY+XHJcbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS50aXRsZUtvcmVhbn08ZGl2PiR7aXRlbS50aXRsZUVuZ2xpc2h9PC9kaXY+PC9kaXY+XHJcbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5kaXJlY3Rvcn08L2Rpdj5cclxuLy8gXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLmNvdW50cnl9PC9kaXY+XHJcbi8vIFx0XHRcdFx0PC9kaXY+YDtcclxuLy8gXHRcdH0pO1xyXG4vLyBcdH1cclxuLy8gfSk7XHJcbi8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4vLyBcdGZpbG1zLm1hcChpdGVtID0+IHtcclxuLy8gXHRcdGJvYXJkRWxlbWVudC5pbm5lckhUTUwgKz0gYFxyXG4vLyBcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWJvZHlcIj5cclxuLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uaWR9PC9kaXY+XHJcbi8vIFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLnJlbGVhc2VEYXRlfTwvZGl2PlxyXG4vLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS50aXRsZUtvcmVhbn08ZGl2PiR7aXRlbS50aXRsZUVuZ2xpc2h9PC9kaXY+PC9kaXY+XHJcbi8vIFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLmRpcmVjdG9yfTwvZGl2PlxyXG4vLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5jb3VudHJ5fTwvZGl2PlxyXG4vLyBcdFx0PC9kaXY+YDtcclxuLy8gXHR9KTtcclxuLy8gfSwgMjAwKTtcclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XHJcbi8vIFx0Ly8gY29uc3QgaGVscGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZXh0ZmllbGQtaGVscGVyJyk7XHJcbi8vIFx0Ly8gaGVscGVycy5mb3JFYWNoKGhlbHBlciA9PiBoZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XHJcbi8vIFx0Ly8gbGV0IGxvZ2luRGF0YSA9IHtlbWFpbDogJycsIHBhc3N3b3JkOiAnJ307XHJcbi8vIFx0Ly8gY29uc3QgaXNFbWFpbCA9IGV2ZW50LnRhcmdldCA9PT0gZW1haWw7XHJcbi8vIFx0Y29uc3QgaXNQYXNzd29yZCA9IGV2ZW50LnRhcmdldCA9PT0gcGFzc3dvcmQ7XHJcbi8vIFx0Y29uc3QgaGFuZGxlVmFsaWRhdGUgPSAoeyB0YXJnZXQ6IGFueSwgdmFsaWRhdGU6IHZvaWQsIG1lc3NhZ2U6IGFueSB9KSA9PiB7XHJcbi8vIFx0XHRpZih2YWxpZGF0ZSkge1xyXG4vLyBcdFx0XHR0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJyk7XHJcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gJyc7XHJcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuLy8gXHRcdH0gZWxzZSB7XHJcbi8vIFx0XHRcdGlmKCF0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm47XHJcbi8vIFx0XHRcdC8vIGNvbnN0IGlkID0gdGFyZ2V0LmlkIHx8IHRhcmdldC5uYW1lO1xyXG4vLyBcdFx0XHQvLyB0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgJ2Vycm9yLScgKyBpZCk7XHJcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcclxuLy8gXHRcdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5pbm5lclRleHQgPSBtZXNzYWdlO1xyXG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4vLyBcdFx0fVxyXG4vLyBcdH07XHJcbi8vIFx0aWYoaXNQYXNzd29yZCkge1xyXG4vLyBcdFx0aGFuZGxlVmFsaWRhdGUoe1xyXG4vLyBcdFx0XHR0YXJnZXQ6IHBhc3N3b3JkLFxyXG4vLyBcdFx0XHR2YWxpZGF0ZTogaXNQYXNzd29yZCAmJiAhKHZhbGlkaXR5LmlzTGVuZ3RoKHBhc3N3b3JkLnZhbHVlLCA4KSksXHJcbi8vIFx0XHRcdG1lc3NhZ2U6ICfruYTrsIDrsojtmLjrpbwg65iR67CU66GcIOyeheugpe2VtOudvC4nXHJcbi8vIFx0XHR9KTtcclxuLy8gXHR9XHJcbi8vIH0pO1xyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnQgPT4ge30sIHRydWUpOyAvLyBibHVyIGlzIG5vdCBidWJibGVcclxuLy8gZXZlbnQudGFyZ2V0LnJlc2V0KCk7XHJcbi8vIHZhciBmb3JtID0gdXNlcm5hbWUuZm9ybTtcclxuLy8gdmFyIGVsZW1lbnRzID0gZm9ybS5lbGVtZW50cztcclxuLy8gdmFyIGhhc0Vycm9yID0gZnVuY3Rpb24oZmllbGQpIHtcclxuLy8gXHRpZiAoZmllbGQuZGlzYWJsZWQgfHwgZmllbGQudHlwZSA9PT0gJ2ZpbGUnIHx8IGZpZWxkLnR5cGUgPT09ICdyZXNldCcgfHwgZmllbGQudHlwZSA9PT0gJ3N1Ym1pdCcgfHwgZmllbGQudHlwZSA9PT0gJ2J1dHRvbicpIHJldHVybjtcclxuLy8gXHR2YXIgdmFsaWRpdHkgPSBmaWVsZC52YWxpZGl0eTtcclxuLy8gXHRpZiAodmFsaWRpdHkudmFsaWQpIHJldHVybjtcclxuLy8gXHRpZiAodmFsaWRpdHkudmFsdWVNaXNzaW5nKSByZXR1cm4gJ1BsZWFzZSBmaWxsIG91dCB0aGlzIGZpZWxkLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnR5cGVNaXNtYXRjaCkgcmV0dXJuICdQbGVhc2UgdXNlIHRoZSBjb3JyZWN0IGlucHV0IHR5cGUuJztcclxuLy8gXHRpZiAodmFsaWRpdHkudG9vU2hvcnQpIHJldHVybiAnUGxlYXNlIGxlbmd0aGVuIHRoaXMgdGV4dC4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS50b29Mb25nKSByZXR1cm4gJ1BsZWFzZSBzaG9ydGVuIHRoaXMgdGV4dC4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS5iYWRJbnB1dCkgcmV0dXJuICdQbGVhc2UgZW50ZXIgYSBudW1iZXIuJztcclxuLy8gXHRpZiAodmFsaWRpdHkuc3RlcE1pc21hdGNoKSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSB2YWxpZCB2YWx1ZS4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS5yYW5nZU92ZXJmbG93KSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSBzbWFsbGVyIHZhbHVlLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnJhbmdlVW5kZXJmbG93KSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSBsYXJnZXIgdmFsdWUuJztcclxuLy8gXHRpZiAodmFsaWRpdHkucGF0dGVybk1pc21hdGNoKSByZXR1cm4gJ1BsZWFzZSBtYXRjaCB0aGUgcmVxdWVzdGVkIGZvcm1hdC4nO1xyXG4vLyBcdHJldHVybiAnVGhlIHZhbHVlIHlvdSBlbnRlcmVkIGZvciB0aGlzIGZpZWxkIGlzIGludmFsaWQuJztcclxuLy8gfTtcclxuLy8gY29uc3QgdWlEYXRhID0gW1xyXG4vLyAgIHsgbGFiZWw6ICfsg4Htkogg7IOB7IS47Y6Y7J207KeAJywgZGVzY3JpcHRpb24gOicnLCBkYXRlIDonMjAyMC4wMS0wMScsIGhyZWY6ICcjcHJvZHVjdCcsIHRhZ3M6IFsn6riw7ZqNJywgJ+uUlOyekOyduCddIH0sXHJcbi8vICAgeyBsYWJlbDogJ+yDge2SiCDsubTtirgnLCBkZXNjcmlwdGlvbiA6JycsIGRhdGUgOicyMDIwLTAxLTAxJywgaHJlZjogJyNjYXJ0JywgdGFnczogWyfquLDtmo0nLCAn65SU7J6Q7J24J10gfSxcclxuLy8gICB7IGxhYmVsOiAn66Gc6re47J24JywgZGVzY3JpcHRpb24gOicnLCBkYXRlIDonMjAyMC0wMS0wMScsIGhyZWY6ICcjbG9naW4nLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxyXG4vLyAgIHsgbGFiZWw6ICfruYTrsIDrsojtmLgg7LC+6riwJywgZGVzY3JpcHRpb24gOicnLCBkYXRlIDonMjAyMC0wMS0wMScsIGhyZWY6ICcjZm9yZ290JywgdGFnczogWyfquLDtmo0nLCAn65SU7J6Q7J24J10gfVxyXG4vLyBdXHJcbi8vIGNvbnN0IGNjYzogYW55ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJy5qcy11aScpO1xyXG4vLyBpZihjY2MpIHtcclxuLy8gICBjb25zdCB0ZW1wID0gdWlEYXRhLm1hcChpdGVtID0+IHtcclxuLy8gICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xyXG4vLyAgICAgY29uc3QgdHR0ID0gaXRlbS50YWdzLm1hcChpID0+IGA8c3BhbiBjbGFzcz1cInRhZ1wiPiR7aX08L3NwYW4+YCkuam9pbignJylcclxuLy8gICAgIGNvbnN0IHVpVGVtcGxhdGUgPSBgPGEgY2xhc3M9XCJjYXJkXCIgaHJlZj1cIiR7aXRlbS5ocmVmfVwiPlxyXG4vLyAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJjYXJkLXRodW1ibmFpbFwiIHN0eWxlPVwiZm9udC1mYW1pbHk6J0R1bmtlbFNhbnMnO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtcIj4ke2l0ZW0ubGFiZWx9PC9maWd1cmU+XHJcbi8vICAgICAgICAgPGgzIGNsYXNzPVwiY2FyZC10aXRsZVwiPiR7aXRlbS5sYWJlbH08L2gzPlxyXG4vLyAgICAgICAgIDx0aW1lIGNsYXNzPVwiY2FyZC1kYXRlXCI+JHtpdGVtLmRhdGV9PHRpbWU+XHJcbi8vICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtdGFnc1wiIHJvbGU9XCJncm91cFwiPlxyXG4vLyAgICAgICAgICAgJHt0dHR9XHJcbi8vICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhcmQtbW9yZSBpY29uLWJ1dHRvblwiPjxpIGNsYXNzPVwiaWNvbi1tb3JlXCI+PC9pPjwvYnV0dG9uPlxyXG4vLyAgICAgICA8L2E+YFxyXG4vLyAgICAgcmV0dXJuIHVpVGVtcGxhdGU7XHJcbi8vICAgfSkuam9pbignJylcclxuLy8gICBjb25zb2xlLmxvZyh0ZW1wKTtcclxuLy8gICBjY2MuaW5uZXJIVE1MID0gdGVtcDtcclxuLy8gfVxyXG4vLyB2YXIgaSA9IDA7XHJcbi8vIHZhciBpbWFnZXMgPSBbJ2NvdmVyMS5qcGcnLCdjb3ZlcjIuanBnJ107XHJcbi8vIHZhciBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY292ZXJfaW1hZ2UnKTtcclxuLy8gLy8gaW1hZ2UuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybCgvaW1nL2NvdmVyMS5qcGcpJyk7XHJcbi8vIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XHJcbi8vIFx0aW1hZ2VFbGVtZW50LmZhZGVPdXQoMTAwMCwgKCkgPT4ge1xyXG4vLyBcdFx0aW1hZ2VFbGVtZW50LmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoJHtpbWFnZXNbaSsrXX0pYCk7XHJcbi8vIFx0XHRpbWFnZUVsZW1lbnQuZmFkZUluKDEwMDApO1xyXG4vLyBcdH0pO1xyXG4vLyBcdGlmKGkgPT09IGltYWdlcy5sZW5ndGgpIGkgPSAwO1xyXG4vLyB9LCA1MDAwKTtcclxuLy8gdmFyIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS0zJyk7XHJcbi8vIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcbi8vIHZhciBwYXJlbnROb2RlcyA9IHBhcmVudC5jaGlsZHJlbjtcclxuLy8gdmFyIHBhcmVudE5vZGVzQXJyYXkgPSBBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbik7XHJcbi8vIHZhciBzaWJsaW5ncyA9IHBhcmVudE5vZGVzQXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChzaWJsaW5nKSB7XHJcbi8vIFx0cmV0dXJuIHNpYmxpbmcgIT09IGVsZW07XHJcbi8vIH0pO1xyXG4vLyB2YXIgY291bnRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb3VudGVyJyk7XHJcbi8vIHZhciBudW1iZXIgPSAwO1xyXG4vLyB2YXIgY291bnRVcCA9IGZ1bmN0aW9uICgpIHtcclxuLy8gXHQvLyBJbmNyZWFzZSBudW1iZXIgYnkgMVxyXG4vLyBcdG51bWJlcisrO1xyXG4vLyBcdC8vIFVwZGF0ZSB0aGUgVUlcclxuLy8gXHRjb3VudGVyLnRleHRDb250ZW50ID0gbnVtYmVyO1xyXG4vLyBcdC8vIGlmIHRoZSBudW1iZXIgaXMgbGVzcyB0aGFuIDUwMCwgcnVuIGl0IGFnYWluXHJcbi8vIFx0aWYgKG51bWJlciA8IDUwMCkge1xyXG4vLyBcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjb3VudFVwKTtcclxuLy8gXHR9XHJcbi8vIH07XHJcbi8vIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cclxuLy8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjb3VudFVwKTtcclxuLy8gLy8gU2V0dXAgdGhlIGFuaW1hdGlvblxyXG4vLyB2YXIgYW5pbWF0aW9uID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XHJcbi8vIFx0Y29uc29sZS5sb2coJ3JhbiEnKTtcclxuLy8gfSk7XHJcbi8vIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb24pO1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVSZWFkVGltZSgpIHtcclxuICAgIHZhciByZWFkVGltZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1oZWFkJyk7XHJcbiAgICB2YXIgcG9zdENvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1ib2R5LXBhcmFncmFwaCcpO1xyXG4gICAgaWYgKCFwb3N0Q29udGVudCB8fCAhcmVhZFRpbWVFbGVtZW50KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciB0ZXh0ID0gKHBvc3RDb250ZW50ID09PSBudWxsIHx8IHBvc3RDb250ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3N0Q29udGVudC50ZXh0Q29udGVudCkgfHwgKHBvc3RDb250ZW50ID09PSBudWxsIHx8IHBvc3RDb250ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3N0Q29udGVudC5pbm5lclRleHQpO1xyXG4gICAgdmFyIHRleHRMZW5ndGggPSB0ZXh0LnNwbGl0KCcgJykubGVuZ3RoIHx8IDE7XHJcbiAgICB2YXIgd29yZHNQZXJNaW51dGUgPSAyMDA7XHJcbiAgICB2YXIgdmFsdWUgPSBNYXRoLmNlaWwodGV4dExlbmd0aCAvIHdvcmRzUGVyTWludXRlKTtcclxuICAgIHZhciByZXN1bHQgPSB2YWx1ZSArIFwiIG1pbiByZWFkXCI7XHJcbiAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4gICAgcmVhZFRpbWVFbGVtZW50LmlubmVyVGV4dCA9IHJlc3VsdDtcclxufVxyXG4vLyBmdW5jdGlvbiBidXN0Q2FjaGUoKSB7XHJcbi8vICAgY29uc3QgbGlua0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpXHJcbi8vICAgbGlua0VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbi8vICAgICBjb25zdCBpc1N0eWxlc2hlZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgncmVsJykgPT09ICdzdHlsZXNoZWV0J1xyXG4vLyAgICAgaWYgKCFpc1N0eWxlc2hlZXQpIHJldHVyblxyXG4vLyAgICAgY29uc3QgaHJlZiA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcclxuLy8gICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbi8vICAgICBjb25zdCBjYWNoZUJ1c3RlciA9IGAke2hyZWZ9P2NhY2hlQnVzdGVyPSR7dGltZXN0YW1wfWBcclxuLy8gICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdocmVmJywgY2FjaGVCdXN0ZXIpXHJcbi8vICAgfSlcclxuLy8gfVxyXG5mdW5jdGlvbiBmb2N1c0NvbW1lbnQoKSB7XHJcbiAgICB2YXIgY29tbWVudFdyaXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNvbW1lbnQtd3JpdGUnKTtcclxuICAgIHZhciBjb21tZW50VGV4dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWNvbW1lbnQtdGV4dGZpZWxkJyk7XHJcbiAgICBjb21tZW50VGV4dEZpZWxkLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29tbWVudFdyaXRlLmNsYXNzTGlzdC5hZGQoJ2lzLWZvY3VzZWQnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3haUVVGWkxFTkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJSVm9zYjBOQlFXbERPMEZCUldwRExHZEZRVUUwUXp0QlFVTTFReXd5UTBGQmIwVTdRVUZEY0VVc2VVUkJRV2xGTzBGQlEycEZMREpFUVVFeVJEdEJRVU16UkN4dlJVRkJOa003UVVGRE4wTXNiMFZCUVRaRE8wRkJSVGRETERaRVFVRTJSRHRCUVVNM1JDeHhSVUZCY1VVN1FVRkZja1VzU1VGQlRTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEpRVUZKTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGQk8wRkJSWHBHTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hWUVVGRExFdEJRVlU3U1VGRGRrUXNiVU5CUVcxRE8wbEJRMjVETEVsQlFVa3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFdEJRVXNzVTBGQlV6dFJRVUZGTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VTBGREwwUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUzBGQlN5eGhRVUZoTzFGQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdFRRVU40UlN4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeExRVUZMTEZWQlFWVTdVVUZCUlN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzBGQlEzcEZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJSVVlzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGTkJRVk1zUlVGQlJUdEpRVU51UXl4SlFVRk5MR05CUVdNc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZqTEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUTNwRkxHTkJRV1VzUTBGQlF5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkJPMEZCUTJoRExFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwWXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4alFVRlBMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU53UkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRXpRaXhEUVVFeVFpeERRVUZETEVOQlFVRTdRVUZGY0VVc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlFUdEJRVU5vUkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMR05CUVdNc1EwRkJReXhEUVVGQk8wRkJSWEpFTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRKUVVNMVF5eHZRa0ZCWVN4RlFVRkZMRU5CUVVFN1NVRkZaaXgxUWtGQlowSXNSVUZCUlN4RFFVRkJPMGxCUTJ4Q0xHMUNRVUZ0UWp0SlFVTnVRaXg1UWtGQlZ5eEZRVUZGTEVOQlFVRTdTVUZGWWl4VFFVRlRMRVZCUVVVc1EwRkJRVHRKUVVWWUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVVzWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUTNaRUxGTkJRVk1zWTBGQll6dFJRVU55UWl4SlFVRk5MR2RDUVVGblFpeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1QwRkJUeXhEUVVGRExFTkJRVUU3VVVGRGNrVXNTVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8xRkJRemxGTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzU1VGQlNTeERRVUZETEZkQlFWYzdXVUZCUlN4UFFVRk5PMUZCUlRkRExFbEJRVTBzWVVGQllTeEhRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExHZENRVUZwUWl4RFFVRkRMRmxCUVZrc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRTFCUVVjc1EwRkJRVHRSUVVNNVJ5eFhRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhoUVVGaExFTkJRVUU3U1VGRE1VTXNRMEZCUXp0QlFVVklMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJTVVlzVTBGQlpTeFRRVUZUT3p0UlFYRkRkRUlzWjBKQlFXZENPMUZCUldoQ0xGTkJRVk1zVjBGQlZ6dFpRVU5zUWl4SlFVRkpMSE5DUVVGelFpeEpRVUZKTEUxQlFVMHNTVUZCU1N3eVFrRkJNa0lzU1VGQlNTeE5RVUZOTEVsQlFVa3NiVUpCUVcxQ0xFbEJRVWtzVFVGQlRTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExGTkJRVk1zUlVGQlJUdG5Ra0ZEYkVvc1NVRkJUU3hsUVVGbExFZEJRVWNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVUU3WjBKQlF6bEZMRWxCUVUwc1QwRkJUeXhIUVVGSE8yOUNRVU5rTEVsQlFVa3NSVUZCUlN4SlFVRkpPMjlDUVVOV0xGVkJRVlVzUlVGQlJTeHBRa0ZCYVVJN2IwSkJRemRDTEZOQlFWTXNSVUZCUlN4SFFVRkhPMmxDUVVObUxFTkJRVUU3WjBKQlEwUXNTVUZCU1N4VlFVRlJMRWRCUVVjc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVUU3WjBKQlJURkVMR1ZCUVdVc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTEVsQlFVa3NUMEZCUVN4VlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUY2UWl4RFFVRjVRaXhEUVVGRExFTkJRVUU3WVVGRE9VUTdXVUZGUkN4VFFVRlRMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVUdG5Ra0ZEYWtNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEV0QlFVczdiMEpCUTI1Q0xHdEVRVUZyUkR0dlFrRkRiRVFzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4alFVRmpPM2RDUVVGRkxFOUJRVTA3YjBKQlEycERMR2xDUVVGcFFqdHZRa0ZEYWtJc2IwTkJRVzlETzI5Q1FVTndReXhUUVVGVExFVkJRVVVzUTBGQlFUdHZRa0ZGV0N4M1EwRkJkME03YjBKQlEzaERMQ3REUVVFclF6dHZRa0ZETDBNc2FVUkJRV2xFTzJkQ1FVTnVSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdFpRVU5LTEVOQlFVTTdXVUZGUkN4VFFVRmxMRk5CUVZNN096czdPenM3WjBOQlJXUXNVVUZCVFN3clNVRkJLMGtzUTBGQlFUdG5RMEZETVVrc2NVSkJRVTBzUzBGQlN5eERRVUZETEV0QlFVY3NRMEZCUXl4RlFVRkJPenRuUTBGQk0wSXNVVUZCVVN4SFFVRkhMRk5CUVdkQ08yZERRVU5xUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3YjBOQlFVVXNUVUZCVFN4MVFrRkJkVUlzUTBGQlFUdG5RMEZGY0VNc2NVSkJRVTBzVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkJPenRuUTBGQk5VSXNTVUZCU1N4SFFVRkhMRk5CUVhGQ08yZERRVU5vUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVsQlFVazdiME5CUTNKQ0xFbEJRVTBzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVUU3YjBOQlEyNUVMRWxCUVVrc1EwRkJReXhKUVVGSk8zZERRVUZGTEU5QlFVMDdiME5CUldwQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhYUVVGWExFVkJRVVVzYlVoQlFYZEdMRU5CUVVNc1EwRkJRVHRuUTBGRGFFa3NRMEZCUXl4RFFVRkRMRU5CUVVFN096czdPenM3T3p0aFFVVk1PMUZCUTBnc1EwRkJRenRSUVRSQ1JDeFRRVUZUTEZkQlFWYzdXVUZEYkVJc1owTkJRV2RETzFsQlEyaERMRWxCUVUwc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkJPMWxCUTNKRkxFbEJRVWtzUTBGQlF5eFZRVUZWTzJkQ1FVRkZMRTlCUVUwN1dVRkZka0lzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4N1owSkJRM2hDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRV01zYVVKQlFXbENMRU5CUVVNc1EwRkJRVHRuUWtGRE1VVXNTVUZCVFN4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQll5eHRRa0ZCYlVJc1EwRkJReXhEUVVGQk8yZENRVU01UlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hKUVVGSkxFTkJRVU1zWTBGQll6dHZRa0ZCUlN4UFFVRk5PMmRDUVVVMVF5eEpRVUZOTEZWQlFWVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzJkQ1FVVnlSQ3haUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCVFN4VlFVRlZMRTlCUVVrc1EwRkJRVHRuUWtGRE4wTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVTBzVlVGQlZTeFBRVUZKTEVOQlFVRTdXVUZEYWtRc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFNpeERRVUZET3pzN08zZENRVE5JUkN4eFFrRkJUU3huUWtGQlV5eEZRVUZGTEVWQlFVRTdPMjlDUVVGcVFpeFRRVUZwUWl4RFFVRkJPMjlDUVVWWUxHMUNRVUZ0UWl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eERRVUZCTzI5Q1FVTXhSU3haUVVGWkxFZEJRVWNzVjBGQlZ5eERRVUZCTzI5Q1FVTTFRaXhQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZCTzI5Q1FVVm9RaXh0UWtGQmJVSXNZVUZCYmtJc2JVSkJRVzFDTEhWQ1FVRnVRaXh0UWtGQmJVSXNRMEZCUlN4UFFVRlBMRU5CUVVNc1ZVRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN6dDNRa0ZEZWtNc05FTkJRVFJETzNkQ1FVTTFReXgxUWtGQmRVSTdkMEpCUTNaQ0xFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlFTeExRVUZMT3pSQ1FVTndReXh2UWtGQmIwSTdORUpCUTNCQ0xESkVRVUV5UkRzMFFrRkRNMFFzZVVSQlFYbEVPelJDUVVONlJDeEpRVUZKT3pSQ1FVTktMREJDUVVFd1FqczBRa0ZETVVJc05FUkJRVFJFT3pSQ1FVTTFSQ3gzUkVGQmQwUTdORUpCUTNoRUxFbEJRVWs3TkVKQlEwb3NVMEZCVXpzMFFrRkRWQ3cwUkVGQk5FUTdORUpCUXpWRUxESkVRVUV5UkRzMFFrRkRNMFFzU1VGQlNUczBRa0ZGU2l4dFFrRkJiVUlzWVVGQmJrSXNiVUpCUVcxQ0xIVkNRVUZ1UWl4dFFrRkJiVUlzUTBGQlJTeFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMmREUVVWc1F5eEpRVUZOTEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFOUJRVThzUTBGQlFUdG5RMEZGZWtNc1NVRkJSeXhSUVVGUkxFVkJRVVU3YjBOQlExZ3NUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVRTdiME5CUTI1RExHOURRVUZ2UXp0cFEwRkRja003TzI5RFFVTkpMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPelJDUVVNM1F5eERRVUZETEVWQlFVTTdkMEpCUTBvc1EwRkJReXhEUVVGRExFTkJRVUU3YjBKQlEwb3NRMEZCUXl4RlFVRkRPMjlDUVdsRVJpeGxRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNZMEZCWXl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkJPMjlDUVVNelJpeGxRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN2IwSkJRMW9zWlVGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkJPMjlDUVVOb1FpeGxRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVFN2IwSkJSV1FzWlVGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVUU3YjBKQlF5OUVMR1ZCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNWMEZCVnl4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlFUdHZRa0ZEYWtRc1pVRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlN4WlFVRlpMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZCTzI5Q1FVTjRSQ3hsUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEVOQlFVTXNRMEZCUVR0dlFrRkRjRVFzWlVGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkJPMjlDUVVObUxHVkJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhGUVVGRkxGRkJRVkVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkJPMjlDUVVOdVJDeGxRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVRTdiMEpCUlhaRExHVkJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1dVRkJXU3hGUVVGRkxGRkJRVkVzUlVGQlJTeHJRa0ZCYTBJc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUVR0dlFrRkRia2NzWlVGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hsUVVGbExFVkJRVVVzVVVGQlVTeEZRVUZGTEhGQ1FVRnhRaXhGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkJPMjlDUVVVMVJ5eGxRVUZMTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVFN2IwSkJRM1pDTEcxSFFVRnRSenR2UWtGRmJrY3NWMEZCVnl4RlFVRkZMRU5CUVVFN2IwSkJRMklzTmtKQlFUWkNPMjlDUVVNM1FpeHpRa0ZCVVN4RlFVRkZMRU5CUVVFN2IwSkJRMVlzWTBGQll5eEZRVUZGTEVOQlFVRTdiMEpCUTJoQ0xGbEJRVmtzUlVGQlJTeERRVUZCTzI5Q1FYRkNVaXhUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCYlVJc1owSkJRV2RDTEVOQlFVTXNRMEZCUVR0dlFrRkROVVVzU1VGQlNTeFRRVUZUTEVWQlFVVTdkMEpCUTJJc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1JVRkJSU3hWUVVGQkxFdEJRVXM3TkVKQlF6RkRMRWxCUVUwc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRVHMwUWtGRGVFTXNTVUZCVFN4WFFVRlhMRWRCUVVjc1IwRkJSeXhIUVVGSExFVkJRVVVzU1VGQlNTeEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkJMRU5CUVVNc2EwTkJRV3RET3pSQ1FVTXpSU3hKUVVGTkxGVkJRVlVzUjBGQlJ5eEhRVUZITEV0QlFVc3NSVUZCUlN4RFFVRkJPelJDUVVVM1FpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SlFVRkpMRmRCUVZjN1owTkJRVVVzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkJPM2RDUVVONFJDeERRVUZETEVOQlFVTXNRMEZCUVR0M1FrRkhSU3hwUWtGQlpTeFRRVUZUTEVOQlFVTXNTMEZCU3l4SlFVRkpMRVZCUVVVc1EwRkJRVHQzUWtGRGVFTXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRU5CUVVNN05FSkJRMjVETEVsQlFVMHNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVFd1FpeERRVUZCT3pSQ1FVTXpReXhKUVVGSkxGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRuUTBGQlJTeGpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRVHM3WjBOQlF6TkVMRTFCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzWTBGQldTeERRVUZCT3pSQ1FVTm9ReXcwUkVGQk5FUTdORUpCUlRWRUxIZENRVUYzUWpzMFFrRkRlRUlzZDBOQlFYZERPelJDUVVONFF5eG5RMEZCWjBNN05FSkJRMmhETEZkQlFWYzdORUpCUTFnc1owTkJRV2RET3pSQ1FVTm9ReXcyUkVGQk5rUTdORUpCUXpkRUxFbEJRVWs3ZDBKQlEwNHNRMEZCUXl4RFFVRkRMRU5CUVVFN2QwSkJSVVlzYzBKQlFYTkNPM2RDUVVOMFFpeHpSRUZCYzBRN2QwSkJRM1JFTEdsRVFVRnBSRHQzUWtGRGFrUXNORVZCUVRSRk8zZENRVU0xUlN4TlFVRk5PM0ZDUVVOUU8yOUNRVWRMTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVFN2IwSkJRMnBFTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVFN2IwSkJRMnBFTEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZCTzI5Q1FVVnlSQ3hKUVVGSkxHRkJRVW9zU1VGQlNTeDFRa0ZCU2l4SlFVRkpMRU5CUVVVc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZPM2RDUVVNNVFpeEpRVUZKTEdGQlFVb3NTVUZCU1N4MVFrRkJTaXhKUVVGSkxFTkJRVVVzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRVZCUVVNN2QwSkJRMnhETEVsQlFVa3NZVUZCU2l4SlFVRkpMSFZDUVVGS0xFbEJRVWtzUTBGQlJTeFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1JVRkJRenQzUWtGRGNrTXNTMEZCU3l4aFFVRk1MRXRCUVVzc2RVSkJRVXdzUzBGQlN5eERRVUZGTEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRE8yOUNRVU01UWl4RFFVRkRMRVZCUVVNN2IwSkJRMFlzU1VGQlNTeGhRVUZLTEVsQlFVa3NkVUpCUVVvc1NVRkJTU3hEUVVGRkxHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSVHQzUWtGRE9VSXNTVUZCU1N4aFFVRktMRWxCUVVrc2RVSkJRVW9zU1VGQlNTeERRVUZGTEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hGUVVGRE8zZENRVU55UXl4SlFVRkpMR0ZCUVVvc1NVRkJTU3gxUWtGQlNpeEpRVUZKTEVOQlFVVXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFVkJRVU03ZDBKQlEyeERMRXRCUVVzc1lVRkJUQ3hMUVVGTExIVkNRVUZNTEV0QlFVc3NRMEZCUlN4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlF6dHZRa0ZEYWtNc1EwRkJReXhGUVVGRE96czdPenREUVVOSU8wRkJTVVFzVTBGQlV5eGpRVUZqTzBsQlEzSkNMRWxCUVUwc2FVSkJRV2xDTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVUU3U1VGRE4wTXNTVUZCVFN4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRmpMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdTVUZETVVVc1NVRkJTU3hSUVVGUkxFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTTdVVUZCUlN4UFFVRk5PMGxCUldwRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMUZCUTNSQ0xFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeHpRa0ZEYUVNc1QwRkJRU3hqUVVGakxFOUJRVU1zVDBGQlR5eGhRVUZRTEU5QlFVOHNkVUpCUVZBc1QwRkJUeXhEUVVGRkxGVkJRVlVzTUVOQlFVVXNZVUZCWVN4RFFVRmpMRTlCUVU4c1JVRkJSU3hEUVVGQkxFVkJRVUVzUTBGRGVrVTdTVUZHUkN4RFFVVkRMRU5CUTBZc1EwRkJRVHRKUVVWRUxGTkJRVk1zWTBGQll5eERRVUZETEZsQlFWazdVVUZEYkVNc1NVRkJUU3hqUVVGakxFZEJRVWNzUTBGQlFTeFpRVUZaTEdGQlFWb3NXVUZCV1N4MVFrRkJXaXhaUVVGWkxFTkJRVVVzV1VGQldTeERRVUZETEUxQlFVMHNUMEZCVFN4VlFVRlZMRU5CUVVFN1VVRkRlRVVzU1VGQlNTeFRRVUZUTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUVR0UlFVVndSQ3haUVVGWkxHRkJRVm9zV1VGQldTeDFRa0ZCV2l4WlFVRlpMRU5CUVVVc1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJTeFRRVUZUTEVWQlFVTTdTVUZETDBNc1EwRkJRenRCUVVOSUxFTkJRVU03UVVGRlJDeFRRVUZUTEdOQlFXTTdTVUZEY2tJc1owSkJRV2RDTEVWQlFVVXNRMEZCUVR0SlFVVnNRaXhUUVVGVExHZENRVUZuUWpzN1VVRkRka0lzU1VGQlRTeHBRa0ZCYVVJc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZqTEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3VVVGRGJFWXNTVUZCUnl4RFFVRkRMR2xDUVVGcFFqdFpRVUZGTEU5QlFVMDdVVUZGTjBJc1NVRkJSeXhwUWtGQmFVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTzFsQlEzQkVMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3V1VGREwwTXNUVUZCUVN4cFFrRkJhVUlzUTBGQlF5eHJRa0ZCYTBJc01FTkJRVVVzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRVZCUVVNN1UwRkRja1U3U1VGRFNDeERRVUZETzBsQlEwUXNVMEZCVXl4VlFVRlZPMUZCUTFnc1NVRkJRU3d5UWtGQlNTeERRVUZ2UWp0UlFVTTVRaXhKUVVGTkxGTkJRVk1zUjBGQlJ5eFhRVUZSTEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlJTeERRVUZCTzFGQlJYUkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVWQlFVVXNRMEZCUVR0UlFVTTFRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3U1VGRGVFTXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3hyUWtGQmEwSTdRVUZEYkVJc2IwSkJRVzlDTzBGQlEzQkNMRzFDUVVGdFFqdEJRVU51UWl4aFFVRmhPMEZCUTJJc2VVTkJRWGxETzBGQlEzcERMSFZEUVVGMVF6dEJRVU4yUXl4UFFVRlBPMEZCUTFBc2NVSkJRWEZDTzBGQlEzSkNMREJEUVVFd1F6dEJRVU14UXl4UFFVRlBPMEZCUTFBc1NVRkJTVHRCUVVOS0xHZEVRVUZuUkR0QlFVTm9SQ3d5UkVGQk1rUTdRVUZETTBRc01rSkJRVEpDTzBGQlJUTkNMR2xFUVVGcFJEdEJRVU5xUkN3MFJFRkJORVE3UVVGRE5VUXNPRVJCUVRoRU8wRkJRemxFTEN0RFFVRXJRenRCUVVNdlF5dzBRMEZCTkVNN1FVRkROVU1zT0VSQlFUaEVPMEZCUXpsRUxEWkZRVUUyUlR0QlFVTTNSU3hMUVVGTE8wRkJSVXdzT0VOQlFUaERPMEZCUXpsRExDdEVRVUVyUkR0QlFVTXZSQ3cyUTBGQk5rTTdRVUZETjBNc1MwRkJTenRCUVVOTUxHZENRVUZuUWp0QlFVTm9RaXhMUVVGTE8wRkJSVXdzWjBKQlFXZENPMEZCUTJoQ0xIZEVRVUYzUkR0QlFVTjRSQ3gxUkVGQmRVUTdRVUZEZGtRc1MwRkJTenRCUVVOTUxIVkNRVUYxUWp0QlFVTjJRaXh6UTBGQmMwTTdRVUZEZEVNc05FSkJRVFJDTzBGQlF6VkNMRTlCUVU4N1FVRkZVQ3hqUVVGak8wRkJRMlFzZVVSQlFYbEVPMEZCUTNwRUxHbERRVUZwUXp0QlFVTnFReXhuUkVGQlowUTdRVUZEYUVRc2QwVkJRWGRGTzBGQlEzaEZMR2xEUVVGcFF6dEJRVU5xUXl4eFEwRkJjVU03UVVGRGNrTXNhVU5CUVdsRE8wRkJRMnBETEd0RFFVRnJRenRCUVVOc1F5eHBRMEZCYVVNN1FVRkRha01zSzBKQlFTdENPMEZCUXk5Q0xITkVRVUZ6UkR0QlFVTjBSQ3dyUkVGQkswUTdRVUZETDBRc09FWkJRVGhHTzBGQlF6bEdMRFJFUVVFMFJEdEJRVU0xUkN3eVJFRkJNa1E3UVVGRE0wUXNaVUZCWlR0QlFVTm1MRkZCUVZFN1FVRkRVaXhMUVVGTE8wRkJRMHdzVFVGQlRUdEJRVU5PTEhGQ1FVRnhRanRCUVVOeVFpeDFRa0ZCZFVJN1FVRkRka0lzWjBOQlFXZERPMEZCUTJoRExEWkNRVUUyUWp0QlFVTTNRaXh2UkVGQmIwUTdRVUZEY0VRc05rUkJRVFpFTzBGQlF6ZEVMRFJHUVVFMFJqdEJRVU0xUml3d1JFRkJNRVE3UVVGRE1VUXNlVVJCUVhsRU8wRkJRM3BFTEdGQlFXRTdRVUZEWWl4UFFVRlBPMEZCUTFBc1YwRkJWenRCUVVWWUxHZEVRVUZuUkR0QlFVTm9SQ3h6UlVGQmMwVTdRVUZEZEVVc1owVkJRV2RGTzBGQlEyaEZMR2xFUVVGcFJEdEJRVVZxUkN3NFEwRkJPRU03UVVGRE9VTXNhVVJCUVdsRU8wRkJSV3BFTEN0RlFVRXJSVHRCUVVNdlJTeHRRa0ZCYlVJN1FVRkRia0lzZFVSQlFYVkVPMEZCUTNaRUxDdERRVUVyUXp0QlFVTXZReXgxUkVGQmRVUTdRVUZEZGtRc1lVRkJZVHRCUVVOaUxEUkRRVUUwUXp0QlFVTTFReXcyUTBGQk5rTTdRVUZETjBNc1owVkJRV2RGTzBGQlEyaEZMRzlFUVVGdlJEdEJRVU53UkN4dlJFRkJiMFE3UVVGRGNFUXNkMFJCUVhkRU8wRkJRM2hFTEUxQlFVMDdRVUZEVGl4TlFVRk5PMEZCUlU0c2IwSkJRVzlDTzBGQlEzQkNMSEZDUVVGeFFqdEJRVU55UWl4MVFrRkJkVUk3UVVGRGRrSXNjMFZCUVhORk8wRkJRM1JGTEdkRFFVRm5RenRCUVVOb1F5eFJRVUZSTzBGQlExSXNTMEZCU3p0QlFVVk1MRTFCUVUwN1FVRkZUaXc0UlVGQk9FVTdRVUZGT1VVc2QwSkJRWGRDTzBGQlJYaENMRFJDUVVFMFFqdEJRVU0xUWl4blEwRkJaME03UVVGRmFFTXNiVU5CUVcxRE8wRkJRMjVETEhkSlFVRjNTVHRCUVVWNFNTeHJRMEZCYTBNN1FVRkRiRU1zSzBKQlFTdENPMEZCUlM5Q0xHOUZRVUZ2UlR0QlFVTndSU3d5UlVGQk1rVTdRVUZETTBVc0swUkJRU3RFTzBGQlF5OUVMRFpFUVVFMlJEdEJRVU0zUkN3eVJFRkJNa1E3UVVGRE0wUXNjVVZCUVhGRk8wRkJRM0pGTEhkRlFVRjNSVHRCUVVONFJTeDNSVUZCZDBVN1FVRkRlRVVzT0VWQlFUaEZPMEZCUlRsRkxEaEVRVUU0UkR0QlFVTTVSQ3hMUVVGTE8wRkJSVXdzYlVKQlFXMUNPMEZCUTI1Q0xIVkhRVUYxUnp0QlFVTjJSeXhwUjBGQmFVYzdRVUZEYWtjc1owZEJRV2RITzBGQlEyaEhMRzlIUVVGdlJ6dEJRVU53Unl4SlFVRkpPMEZCUTBvc2EwVkJRV3RGTzBGQlEyeEZMRmxCUVZrN1FVRkRXaXh6UTBGQmMwTTdRVUZEZEVNc2VVSkJRWGxDTzBGQlEzcENMQ3RGUVVFclJUdEJRVU12UlN3clJFRkJLMFE3UVVGREwwUXNlVXBCUVhsS08wRkJRM3BLTEc5RVFVRnZSRHRCUVVOd1JDeHhSRUZCY1VRN1FVRkRja1FzSzBOQlFTdERPMEZCUXk5RExHMUNRVUZ0UWp0QlFVTnVRaXhwUWtGQmFVSTdRVUZEYWtJc2JVWkJRVzFHTzBGQlEyNUdMR05CUVdNN1FVRkRaQ3g1UWtGQmVVSTdRVUZEZWtJc1owSkJRV2RDTzBGQlEyaENMSFZDUVVGMVFqdEJRVU4yUWl3d1FrRkJNRUk3UVVGRE1VSXNTVUZCU1R0QlFVVktMR0ZCUVdFN1FVRkRZaXcwUTBGQk5FTTdRVUZETlVNc05rUkJRVFpFTzBGQlF6ZEVMRFJFUVVFMFJEdEJRVU0xUkN3d1FrRkJNRUk3UVVGRE1VSXNjME5CUVhORE8wRkJRM1JETEdsRlFVRnBSVHRCUVVOcVJTd3JRa0ZCSzBJN1FVRkRMMElzVDBGQlR6dEJRVU5RTEd0RFFVRnJRenRCUVVOc1F5eFpRVUZaTzBGQlJWb3NaMFJCUVdkRU8wRkJRMmhFTEdkRFFVRm5RenRCUVVOb1F5eHhRMEZCY1VNN1FVRkRja01zYzBSQlFYTkVPMEZCUTNSRUxEaEVRVUU0UkR0QlFVTTVSQ3cwUWtGQk5FSTdRVUZETlVJc1RVRkJUVHRCUVVWT0xHOUVRVUZ2UkR0QlFVTndSQ3hyUWtGQmEwSTdRVUZEYkVJc09FSkJRVGhDTzBGQlF6bENMREpDUVVFeVFqdEJRVU16UWl4aFFVRmhPMEZCUTJJc2IwSkJRVzlDTzBGQlEzQkNMR2xEUVVGcFF6dEJRVU5xUXl4dFJFRkJiVVE3UVVGRGJrUXNkVUpCUVhWQ08wRkJRM1pDTERKRFFVRXlRenRCUVVNelF5eExRVUZMTzBGQlEwd3NTMEZCU3p0QlFVTk1MSGxDUVVGNVFqdEJRVU42UWl4NVEwRkJlVU03UVVGRmVrTXNlVUpCUVhsQ08wRkJRM3BDTERaRVFVRTJSRHRCUVVNM1JDeDNRa0ZCZDBJN1FVRkRlRUlzVFVGQlRUdEJRVVZPTERCRFFVRXdRenRCUVVVeFF5eFRRVUZUTEdsQ1FVRnBRanRKUVVONFFpeEpRVUZOTEdWQlFXVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlEzcEZMRWxCUVUwc1YwRkJWeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdEpRVU12UlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFTkJRVU1zWlVGQlpUdFJRVUZGTEU5QlFVMDdTVUZGTlVNc1NVRkJUU3hKUVVGSkxFZEJRVWNzUTBGQlFTeFhRVUZYTEdGQlFWZ3NWMEZCVnl4MVFrRkJXQ3hYUVVGWExFTkJRVVVzVjBGQlZ5eE5RVUZKTEZkQlFWY3NZVUZCV0N4WFFVRlhMSFZDUVVGWUxGZEJRVmNzUTBGQlJTeFRRVUZUTEVOQlFVRXNRMEZCUVR0SlFVTXZSQ3hKUVVGSkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVOQlFVRTdTVUZETlVNc1NVRkJUU3hqUVVGakxFZEJRVWNzUjBGQlJ5eERRVUZCTzBsQlF6RkNMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMR05CUVdNc1EwRkJReXhEUVVGQk8wbEJRMnhFTEVsQlFVMHNUVUZCVFN4SFFVRk5MRXRCUVVzc1kwRkJWeXhEUVVGQk8wbEJRMnhETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRmJrSXNaVUZCWlN4RFFVRkRMRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVUU3UVVGRGNFTXNRMEZCUXp0QlFVVkVMSGxDUVVGNVFqdEJRVU42UWl3eVJFRkJNa1E3UVVGRE0wUXNjME5CUVhORE8wRkJRM1JETEhkRlFVRjNSVHRCUVVONFJTeG5RMEZCWjBNN1FVRkZhRU1zWjBSQlFXZEVPMEZCUTJoRUxEWkRRVUUyUXp0QlFVTTNReXcyUkVGQk5rUTdRVUZETjBRc1owUkJRV2RFTzBGQlEyaEVMRTlCUVU4N1FVRkRVQ3hKUVVGSk8wRkJSVW9zVTBGQlV5eFpRVUZaTzBsQlEyNUNMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlFUdEpRVU0zUlN4SlFVRk5MR2RDUVVGblFpeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQll5eDFRa0ZCZFVJc1EwRkJReXhEUVVGQk8wbEJSWGhHTEdkQ1FVRnBRaXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEU5QlFVODdVVUZETDBJc1QwRkJRU3hQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRMmhETEZsQlFXRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFGQlF6TkRMRU5CUVVNc1EwRkJRenRKUVVaR0xFTkJSVVVzUTBGRFNDeERRVUZCTzBGQlEwZ3NRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBAdHMtbm9jaGVja1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgcm91dGVzID0gW1xyXG4gICAgeyBuYW1lOiAncm9vdCcsIHBhdGg6ICcvJyB9LFxyXG4gICAgeyBuYW1lOiAnaG9tZScsIHBhdGg6ICcvaG9tZScgfSxcclxuICAgIHsgbmFtZTogJ2Rlc2lnbicsIHBhdGg6ICcvZGVzaWduJyB9LFxyXG4gICAgeyBuYW1lOiAncHJvZmlsZScsIHBhdGg6ICcvcHJvZmlsZScgfSxcclxuICAgIHsgbmFtZTogJ2Jsb2cnLCBwYXRoOiAnL2Jsb2cnIH0sXHJcbl07XHJcbnZhciBjdXJyZW50UGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcclxudmFyIHJvdXRlUGFnZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBuYXZpZ2F0ZShldmVudCkge1xyXG4gICAgICAgIHZhciByb3V0ZSA9IGV2ZW50LnRhcmdldC5hdHRyaWJ1dGVzWzBdLnZhbHVlO1xyXG4gICAgICAgIHZhciByb3V0ZUluZm8gPSByb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLnBhdGggPT09IHJvdXRlOyB9KVswXTtcclxuICAgICAgICBpZiAoIXJvdXRlSW5mbykge1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCAnZXJyb3InKTtcclxuICAgICAgICAgICAgdmlldy5pbm5lckhUTUwgPSAnbm8gcm91dGUgZXhpc3RzJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IG5hbWU6ICd0ZXN0ZXInIH0sICduYW1lJywgcm91dGVJbmZvLnBhdGgpO1xyXG4gICAgICAgICAgICB2aWV3LmlubmVySFRNTCA9IFwiXCIgKyByb3V0ZUluZm8ubmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyB0b2RvIOycoO2LuFxyXG4gICAgZnVuY3Rpb24gc2V0SGlzdG9yeSh1cmkpIHtcclxuICAgICAgICB2YXIgc3RhdGUgPSB7IG5hbWU6ICd0ZXN0ZXInIH07XHJcbiAgICAgICAgdmFyIHRpdGxlID0gJ2RkJztcclxuICAgICAgICB2YXIgdXJsID0gdXJpO1xyXG4gICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgdXJpKTtcclxuICAgIH1cclxuICAgIHZhciB2aWV3LCBhY3RpdmVSb3V0ZXMsIHJvdXRlLCBoYXNoLCB1cmksIHJlc3BvbnNlO1xyXG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgdmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZpZXcpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlUm91dGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbcm91dGVdJykpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlUm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuYXZpZ2F0ZSwgZmxhc2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBhdGggPT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJvb3QgcGFnZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgPSByb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLnBhdGggPT09IGN1cnJlbnRQYXRoOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJvdXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmlubmVySFRNTCA9ICc0MDQnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuaW5uZXJIVE1MID0gXCJcIiArIHJvdXRlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgdXJpID0gaGFzaCA/IFwiL3ZpZXdzL1wiICsgaGFzaCArIFwiLmh0bWxcIiA6ICcvdmlld3MvZGVzaWduLmh0bWwnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godXJpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGh0bWwpIHsgcmV0dXJuICh2aWV3LmlubmVySFRNTCA9IGh0bWwpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBjb25zb2xlLndhcm4oJ3JvdXRlcjogJywgZXJyb3IpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldEhpc3RvcnkoaGFzaClcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0SGlzdG9yeShoYXNoKVxyXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3BvbnNlXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7IH07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHJvdXRlUGFnZTtcclxuLy8gaGFzaCDrp5Dqs6Ag7YG066at7ZWY64qUIOyInOqwhOyXkCDqsJLsnYQg7JWM7JWE7JW8IO2VqC4gZGF0YSBhdHRyIG9yIGhhc2hcclxuLy8gdmFyIGFjdGl2ZVJvdXRlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2hyZWZdJykpO1xyXG4vLyBhY3RpdmVSb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiByb3V0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5hdmlnYXRlKSk7XHJcbi8vIGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XHJcbi8vIFx0Y29uc3Qgcm91dGUgPSBmaW5kQ3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzBdLnZhbHVlO1xyXG4vLyBcdGNvbnN0IHJvdXRlSW5mbyA9IG15Rmlyc3RSb3V0ZXIucm91dGVzLmZpbmQociA9PiByLnBhdGggPT09IHJvdXRlKTtcclxuLy8gXHRpZighcm91dGVJbmZvKSB7XHJcbi8vIFx0XHQvL3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsICdlcnJvcicpO1xyXG4vLyBcdFx0dmlldy5pbm5lckhUTUwgPSAnTm8gcm91dGUgZXhpc3RzIHdpdGggdGhpcyBwYXRoJztcclxuLy8gfTtcclxuLy8gXHRib2R5OiAndGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnTXkgYXdlc29tZSBuZXcgYXJ0aWNsZScpICsgJyZib2R5PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1RoaXMgaXMgdGhlIHRleHQgb2YgbXkgYXJ0aWNsZScpLFxyXG4vLyBcdHJlZmVycmVyOiAnbm8tcmVmZXJyZXInXHJcbi8vIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuLy8gY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XHJcbi8vIHZpZXcuaW5uZXJIVE1MID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbihldmVudCkge1xyXG4vLyBcdGlmIChoaXN0b3J5LnN0YXRlICYmIGhpc3Rvcnkuc3RhdGUuaWQgPT09ICdob21lcGFnZScpIHt9XHJcbi8vIH0sIGZhbHNlKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY205MWRHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWNtOTFkR1Z5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRU3hqUVVGak96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVVZrTEVsQlFVMHNUVUZCVFN4SFFVRkhPMGxCUTJJc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVN1NVRkRNMElzUlVGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVU3U1VGREwwSXNSVUZCUlN4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFRRVUZUTEVWQlFVVTdTVUZEYmtNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEVsQlFVa3NSVUZCUlN4VlFVRlZMRVZCUVVVN1NVRkRja01zUlVGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVU3UTBGRGFFTXNRMEZCUVR0QlFVTkVMRWxCUVUwc1YwRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkJPMEZCUlRWRExFbEJRVTBzVTBGQlV5eEhRVUZITzBsQlZXaENMRk5CUVZNc1VVRkJVU3hEUVVGRExFdEJRVXM3VVVGRGNrSXNTVUZCVFN4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGQk8xRkJRemxETEVsQlFVMHNVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlFTeEpRVUZKTEVsQlFVa3NUMEZCUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFdEJRVXNzUlVGQmJrSXNRMEZCYlVJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlF5OUVMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVU3V1VGRFpDeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkJPMWxCUTNwRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVUU3VTBGRGJrTTdZVUZCVFR0WlFVTk1MRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1dVRkRjRVVzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4TFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGTkxFTkJRVUU3VTBGRGNrTTdTVUZEU0N4RFFVRkRPMGxCWlVRc1ZVRkJWVHRKUVVOV0xGTkJRVk1zVlVGQlZTeERRVUZETEVkQlFVYzdVVUZEY2tJc1NVRkJUU3hMUVVGTExFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVFN1VVRkRhRU1zU1VGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkJPMUZCUTJ4Q0xFbEJRVTBzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUVR0UlFVTm1MRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVOMFF5eERRVUZET3pzN096dG5Ra0Y0UTBzc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1owSkJRelZETEVsQlFVa3NRMEZCUXl4SlFVRkpPMjlDUVVGRkxITkNRVUZOTzJkQ1FVOVlMRmxCUVZrc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkJPMmRDUVdGeVJTeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1MwRkJTenR2UWtGRGVFSXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3WjBKQlEyeEVMRU5CUVVNc1EwRkJReXhEUVVGQk8yZENRVVZHTEVsQlFVa3NWMEZCVnl4TFFVRkxMRWRCUVVjc1JVRkJSVHR2UWtGRGRrSXNXVUZCV1R0cFFrRkRZanR4UWtGQlRUdHZRa0ZEUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZCTEVsQlFVa3NTVUZCU1N4UFFVRkJMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVjBGQlZ5eEZRVUY2UWl4RFFVRjVRaXhEUVVGRExFTkJRVUU3YjBKQlF6bEVMRWxCUVVrc1EwRkJReXhMUVVGTE8zZENRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGQk8yOUNRVVZzUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVWNzUzBGQlN5eERRVUZETEVsQlFVMHNRMEZCUVR0cFFrRkRha003WjBKQlZVY3NTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRuUWtGRGRFTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQlZTeEpRVUZKTEZWQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc2IwSkJRVzlDTEVOQlFVRTdaMEpCUXpsRExIRkNRVUZOTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNN2VVSkJRemxDTEVsQlFVa3NRMEZCUXl4VlFVRkJMRkZCUVZFc1NVRkJTU3hQUVVGQkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCWml4RFFVRmxMRU5CUVVNN2VVSkJRMnBETEVsQlFVa3NRMEZCUXl4VlFVRkJMRWxCUVVrc1NVRkJTU3hQUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJka0lzUTBGQmRVSXNRMEZCUXp0NVFrRkRja01zUzBGQlN5eERRVUZETEZWQlFVRXNTMEZCU3l4SlFVRkpMRTlCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVM5Q0xFTkJRU3RDTEVOQlFVTTdiMEpCUld4RUxHMUNRVUZ0UWp0clFrRkdLMEk3TzJkQ1FVZzFReXhSUVVGUkxFZEJRVWNzVTBGSGFVTTdaMEpCUld4RUxHMUNRVUZ0UWp0blFrRkRia0lzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3WjBKQlJYSkNMSE5DUVVGUExGRkJRVkVzUlVGQlFUczdPMHRCUTJoQ0xFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4VFFVRlRMRU5CUVVFN1FVRkZlRUlzSzBOQlFTdERPMEZCUlM5RExITkZRVUZ6UlR0QlFVTjBSU3cwUlVGQk5FVTdRVUZGTlVVc1owTkJRV2RETzBGQlEyaERMSGRFUVVGM1JEdEJRVU40UkN4MVJVRkJkVVU3UVVGRGRrVXNiMEpCUVc5Q08wRkJRM0JDTEdsRVFVRnBSRHRCUVVOcVJDeDFSRUZCZFVRN1FVRkRka1FzUzBGQlN6dEJRVVZNTEc5SlFVRnZTVHRCUVVOd1NTd3lRa0ZCTWtJN1FVRkZNMElzYTBOQlFXdERPMEZCUTJ4RExIbEVRVUY1UkR0QlFVTjZSQ3dyUkVGQkswUTdRVUZGTDBRc2QwUkJRWGRFTzBGQlEzaEVMRFJFUVVFMFJEdEJRVU0xUkN4aFFVRmhJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5pbml0aWFsaXplTG9hZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvY2tCb2R5RWxlbWVudCk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHVubG9ja0JvZHlFbGVtZW50KTtcclxuICAgIC8vIHRvZG8g66qo65OI66GcXHJcbiAgICBmdW5jdGlvbiBsb2NrQm9keUVsZW1lbnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVubG9ja0JvZHlFbGVtZW50KCkge1xyXG4gICAgICAgIHZhciBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRlcicpO1xyXG4gICAgICAgIGlmICghbG9hZGVyRWxlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XHJcbiAgICAgICAgbG9hZGVyRWxlbWVudC5oaWRkZW4gPSB0cnVlO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLmRldGVjdEJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgQnJvd3NlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtYnJvd3NlcicpO1xyXG4gICAgaWYgKCFCcm93c2VyRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdmFyIGlzSUVCcm93c2VyID0gdXNlckFnZW50LmluZGV4T2YoJ21zaWUnKSA+IC0xIHx8IHVzZXJBZ2VudC5pbmRleE9mKCd0cmlkZW50JykgPiAtMTtcclxuICAgIC8vIGNvbnN0IGlzQ2hyb21lQnJvd3NlciA9IHVzZXJBZ2VudC5pbmRleE9mKCdjaHJvbWUnKSAhPT0gLTFcclxuICAgIC8vIGNvbnN0IGlzTWFjQnJvd3NlciA9IC9NYWN8aVBvZHxpUGhvbmV8aVBhZC8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xyXG4gICAgQnJvd3NlckVsZW1lbnQuaGlkZGVuID0gIWlzSUVCcm93c2VyO1xyXG4gICAgLy8gdG9kbyByZXR1cm4gYnJvd3NlclxyXG59O1xyXG52YXIgZG93bmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyA8YSBocmVmPVwiL3BhdGgvdG8vZmlsZVwiIGRvd25sb2FkPkRvd25sb2FkPC9hPlxyXG4gICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICBsaW5rLmRvd25sb2FkID0gJ2ZpbGUgbmFtZSc7XHJcbiAgICBsaW5rLmhyZWYgPSAnL3BhdGgvdG8vZmlsZSc7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgbGluay5jbGljaygpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcclxuICAgIC8vIGNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7ICdtZXNzYWdlJzogJ0hlbGxvIFdvcmQnIH0pO1xyXG4gICAgLy8gY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtkYXRhXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vanNvbicgfSk7XHJcbiAgICAvLyAvLyBDcmVhdGUgbmV3IFVSTFxyXG4gICAgLy8gY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAvLyAvLyBDcmVhdGUgYSBsaW5rIGFuZCB0cmlnZ2VyIHRoZSBkb3dubG9hZFxyXG4gICAgLy8gLi4uXHJcbiAgICAvLyAvLyBGcmVlIHRoZSBVUkwgY3JlYXRlZCBhYm92ZVxyXG4gICAgLy8gd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcclxufTtcclxuZXhwb3J0cy5hZGp1c3RUb3BQYWRkaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyJyk7XHJcbiAgICBpZiAoIWhlYWRlckVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGZuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0Qm9keU1hcmdpblRvcChoZWFkZXJFbGVtZW50KTsgfTtcclxuICAgIHNldEJvZHlNYXJnaW5Ub3AoaGVhZGVyRWxlbWVudCk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsgfSk7XHJcbiAgICBmdW5jdGlvbiBzZXRCb2R5TWFyZ2luVG9wKGhlYWRlckVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgdmFyIGlzRml4ZWRIZWFkZXIgPSBnZXRDb21wdXRlZFN0eWxlKGhlYWRlckVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnO1xyXG4gICAgICAgIGJvZHkuc3R5bGUubWFyZ2luVG9wID0gaXNGaXhlZEhlYWRlciA/IGhlYWRlckVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgXCJweFwiIDogMDtcclxuICAgIH1cclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYkc5aFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW14dllXUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQllTeFJRVUZCTEdkQ1FVRm5RaXhIUVVGSE8wbEJRemxDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hsUVVGbExFTkJRVU1zUTBGQlFUdEpRVU01UkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdTVUZGYkVRc1YwRkJWenRKUVVOWUxGTkJRVk1zWlVGQlpUdFJRVU4wUWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1NVRkRNVU1zUTBGQlF6dEpRVU5FTEZOQlFWTXNhVUpCUVdsQ08xRkJRM2hDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zV1VGQldTeERRVUZETEVOQlFVRTdVVUZEZGtVc1NVRkJTU3hEUVVGRExHRkJRV0U3V1VGQlJTeFBRVUZOTzFGQlJURkNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRSUVVNelF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRVHRKUVVNM1FpeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3hoUVVGaExFZEJRVWM3U1VGRE0wSXNTVUZCVFN4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eGhRVUZoTEVOQlFVTXNRMEZCUVR0SlFVTjZSU3hKUVVGSkxFTkJRVU1zWTBGQll6dFJRVUZGTEU5QlFVMDdTVUZGTTBJc1NVRkJUU3hUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRVHRKUVVOdVJDeEpRVUZOTEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRka1lzTmtSQlFUWkVPMGxCUXpkRUxIZEZRVUYzUlR0SlFVVjRSU3hqUVVGakxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkJPMGxCUTNCRExITkNRVUZ6UWp0QlFVTjRRaXhEUVVGRExFTkJRVUU3UVVGTFJDeEpRVUZOTEZGQlFWRXNSMEZCUnp0SlFVTm1MR2RFUVVGblJEdEpRVU5vUkN4SlFVRk5MRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUTNoRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NWMEZCVnl4RFFVRkJPMGxCUXpOQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NaVUZCWlN4RFFVRkJPMGxCUlROQ0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wbEJReTlDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRVHRKUVVWYUxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wbEJSUzlDTERSRVFVRTBSRHRKUVVNMVJDd3JSRUZCSzBRN1NVRkRMMFFzYjBKQlFXOUNPMGxCUTNCQ0xHZEVRVUZuUkR0SlFVTm9SQ3cwUTBGQk5FTTdTVUZETlVNc1RVRkJUVHRKUVVOT0xHZERRVUZuUXp0SlFVTm9ReXh0UTBGQmJVTTdRVUZEY2tNc1EwRkJReXhEUVVGQk8wRkJSVmtzVVVGQlFTeG5Ra0ZCWjBJc1IwRkJSenRKUVVNNVFpeEpRVUZOTEdGQlFXRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlEzWkZMRWxCUVVrc1EwRkJReXhoUVVGaE8xRkJRVVVzVDBGQlRUdEpRVVV4UWl4SlFVRk5MRVZCUVVVc1IwRkJSeXhqUVVGTkxFOUJRVUVzWjBKQlFXZENMRU5CUVVNc1lVRkJZU3hEUVVGRExFVkJRUzlDTEVOQlFTdENMRU5CUVVFN1NVRkRhRVFzWjBKQlFXZENMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGREwwSXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4alFVRk5MRTlCUVVFc2NVSkJRWEZDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVhwQ0xFTkJRWGxDTEVOQlFVTXNRMEZCUVR0SlFVTnNSU3hOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHTkJRVTBzVDBGQlFTeHhRa0ZCY1VJc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQmVrSXNRMEZCZVVJc1EwRkJReXhEUVVGQk8wbEJSV3hGTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllUdFJRVU0zUWl4SlFVRkJMRzlDUVVGSkxFTkJRV3RDTzFGQlF6bENMRWxCUVUwc1lVRkJZU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExGRkJRVkVzUzBGQlN5eFBRVUZQTEVOQlFVRTdVVUZGTVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJTU3hoUVVGaExFTkJRVU1zV1VGQldTeFBRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVNNVJTeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jYXJvdXNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjYXRlZ29yeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXInKTtcclxuICAgIGlmICghY2F0ZWdvcnkpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGNhdGVnb3J5TGlzdCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdmlld2VyJyk7XHJcbiAgICB2YXIgY2F0ZWdvcnlMaXN0U2xpZGUgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyLXZpZXdlciA+IGJ1dHRvbicpO1xyXG4gICAgdmFyIGNhdGVnb3J5TmF2aWdhdGlvblByZXYgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWFycm93cy1wcmV2Jyk7XHJcbiAgICB2YXIgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLW5leHQnKTtcclxuICAgIHZhciBjYXRlZ29yeURvdHMgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyLWRvdHMtZG90Jyk7XHJcbiAgICBpZiAoIWNhdGVnb3J5TGlzdCB8fCAhY2F0ZWdvcnlMaXN0U2xpZGUgfHwgIWNhdGVnb3J5TmF2aWdhdGlvblByZXYgfHwgIWNhdGVnb3J5TmF2aWdhdGlvbk5leHQgfHwgIWNhdGVnb3J5RG90cylcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgY2F0ZWdvcnlDb250YWluZXJXaWR0aCA9IGNhdGVnb3J5TGlzdC5vZmZzZXRXaWR0aDtcclxuICAgIHZhciBzdW0gPSAwO1xyXG4gICAgY2F0ZWdvcnlMaXN0U2xpZGUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKHN1bSArPSBpdGVtLm9mZnNldFdpZHRoKTsgfSk7XHJcbiAgICBjYXRlZ29yeU5hdmlnYXRpb25OZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9OZXh0KTtcclxuICAgIGNhdGVnb3J5TmF2aWdhdGlvblByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b1ByZXYpO1xyXG4gICAgY2F0ZWdvcnlEb3RzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IH0pOyB9KTtcclxuICAgIGNhdGVnb3J5TGlzdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBjYXRlZ29yeUxpc3Quc2Nyb2xsTGVmdDtcclxuICAgICAgICBjb25zb2xlLmxvZygnc2Nyb2xsLWxlZnQnLCBzY3JvbGxMZWZ0LCAnb2Zmc2V0LXdpZHRoJywgY2F0ZWdvcnlDb250YWluZXJXaWR0aCk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHRvUHJldigpIHtcclxuICAgICAgICBpZiAoIWNhdGVnb3J5TGlzdClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0IC09IDEwMDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHRvTmV4dCgpIHtcclxuICAgICAgICBpZiAoIWNhdGVnb3J5TGlzdClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0ICs9IDEwMDtcclxuICAgICAgICAvLyBpZihzdW0gPiBjYXRlZ29yeUNvbnRhaW5lcldpZHRoKSB7fVxyXG4gICAgICAgIC8vIGNvbnN0IHR0dCA9IDEwMCArICdweCc7XHJcbiAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlci12aWV3ZXInKS5zdHlsZS50cmFuc2Zvcm0gKz0gJ3RyYW5zbGF0ZVgoJyt0dHQrJyknO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLnNldERhcmttb2RlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGRhcmttb2RlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRhcmttb2RlJyk7XHJcbiAgICBpZiAoIWRhcmttb2RlQnV0dG9uKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGxvYWRUaGVtZSgpO1xyXG4gICAgZGFya21vZGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0dCk7XHJcbn07XHJcbmZ1bmN0aW9uIHR0KCkge1xyXG4gICAgdmFyIERBUktfQ0xBU1MgPSAndGhlbWUtZGFyayc7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoREFSS19DTEFTUyk7XHJcbiAgICB2YXIgaXNEYXJrbW9kZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKERBUktfQ0xBU1MpO1xyXG4gICAgaWYgKGlzRGFya21vZGUpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBEQVJLX0NMQVNTKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0aGVtZScpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGxvYWRUaGVtZSgpIHtcclxuICAgIHZhciBsYXN0VGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKTtcclxuICAgIGlmICghbGFzdFRoZW1lKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChsYXN0VGhlbWUpO1xyXG59XHJcbi8vIGZ1bmN0aW9uIHRvZ2dsZVRoZW1lKCkge1xyXG4vLyAgIC8vIOyggOyepeuQnCDqsJLsnbQg7JeG64uk66m0IOyLnOyKpO2FnCDshKTsoJXsnYQg6riw7KSA7Jy866GcIO2VqFxyXG4vLyAgIGNvbnN0IGN1cnJlbnRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpLm1hdGNoZXMgPyAnZGFyaycgOiAnbGlnaHQnKVxyXG4vLyAgIGNvbnN0IG5ld1RoZW1lID0gY3VycmVudFRoZW1lID09PSAnZGFyaycgPyAnbGlnaHQnIDogJ2RhcmsnXHJcbi8vICAgLy8g7LWc7IOB7JyEIOyXmOumrOuovO2KuOyXkCDshKTsoJUsIOuhnOy7rCDsiqTthqDrpqzsp4Dsl5Ag7ISk7KCV7J2EIOyggOyepVxyXG4vLyAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnLCBuZXdUaGVtZSlcclxuLy8gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBuZXdUaGVtZSlcclxuLy8gfVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMlYwUkdGeWEwMXZaR1V1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnpaWFJFWVhKclRXOWtaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRmhMRkZCUVVFc1VVRkJVU3hIUVVGSE8wbEJRM1JDTEVsQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdTVUZEYkVRc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZOTzBsQlJYSkNMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlFUdEpRVU14UlN4SlFVRk5MR2xDUVVGcFFpeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQll5eDVRa0ZCZVVJc1EwRkJReXhEUVVGQk8wbEJRek5HTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBsQlF6VkZMRWxCUVUwc2MwSkJRWE5DTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkJPMGxCUXpWRkxFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGQk8wbEJSV3hGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFbEJRVWtzUTBGQlF5eFpRVUZaTzFGQlFVVXNUMEZCVFR0SlFVVjBTQ3hKUVVGTkxITkNRVUZ6UWl4SFFVRkhMRmxCUVZrc1EwRkJReXhYUVVGWExFTkJRVUU3U1VGRGRrUXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJSVmdzYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzU1VGQlNTeEpRVUZKTEU5QlFVRXNRMEZCUXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUY2UWl4RFFVRjVRaXhEUVVGRExFTkJRVUU3U1VGRk5VUXNjMEpCUVhOQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzBsQlEzaEVMSE5DUVVGelFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0SlFVTjRSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHl4SlFVRkpMRTlCUVVFc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hqUVVGUExFTkJRVU1zUTBGQlF5eEZRVUV6UXl4RFFVRXlReXhEUVVGRExFTkJRVUU3U1VGRk5VVXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlR0UlFVTTVRaXhKUVVGQkxHOURRVUZWTEVOQlFXbENPMUZCUTI1RExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RlFVRkZMRlZCUVZVc1JVRkJSU3hqUVVGakxFVkJRVVVzYzBKQlFYTkNMRU5CUVVNc1EwRkJRVHRKUVVOb1JpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVVkdMRk5CUVZNc1RVRkJUVHRSUVVOaUxFbEJRVWtzUTBGQlF5eFpRVUZaTzFsQlFVVXNUMEZCVFR0UlFVTjZRaXhaUVVGWkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVkQlFVY3NRMEZCUVR0SlFVTm9ReXhEUVVGRE8wbEJRMFFzVTBGQlV5eE5RVUZOTzFGQlEySXNTVUZCU1N4RFFVRkRMRmxCUVZrN1dVRkJSU3hQUVVGTk8xRkJRM3BDTEZsQlFWa3NRMEZCUXl4VlFVRlZMRWxCUVVrc1IwRkJSeXhEUVVGQk8xRkJRemxDTEhORFFVRnpRenRSUVVOMFF5d3dRa0ZCTUVJN1VVRkRNVUlzY1VaQlFYRkdPMGxCUTNaR0xFTkJRVU03UVVGRFNDeERRVUZETEVOQlFVRTdRVUZGV1N4UlFVRkJMRmRCUVZjc1IwRkJSenRKUVVONlFpeEpRVUZOTEdOQlFXTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZCTzBsQlF6ZEVMRWxCUVVrc1EwRkJReXhqUVVGak8xRkJRVVVzVDBGQlRUdEpRVVV6UWl4VFFVRlRMRVZCUVVVc1EwRkJRVHRKUVVOWUxHTkJRV01zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZET1VNc1EwRkJReXhEUVVGQk8wRkJSVVFzVTBGQlV5eEZRVUZGTzBsQlExUXNTVUZCVFN4VlFVRlZMRWRCUVVjc1dVRkJXU3hEUVVGQk8wbEJReTlDTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVVXhReXhKUVVGTkxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVRTdTVUZETDBRc1NVRkJTU3hWUVVGVkxFVkJRVVU3VVVGRFpDeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlFUdExRVU14UXp0VFFVRk5PMUZCUTB3c1dVRkJXU3hEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0TFFVTnFRenRCUVVOSUxFTkJRVU03UVVGRlJDeFRRVUZUTEZOQlFWTTdTVUZEYUVJc1NVRkJUU3hUUVVGVExFZEJRVWNzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRKUVVNdlF5eEpRVUZKTEVOQlFVTXNVMEZCVXp0UlFVRkZMRTlCUVUwN1NVRkZkRUlzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzBGQlEzaERMRU5CUVVNN1FVRkZSQ3d5UWtGQk1rSTdRVUZETTBJc2FVTkJRV2xETzBGQlEycERMSGxKUVVGNVNUdEJRVU42U1N4blJVRkJaMFU3UVVGRmFFVXNjVU5CUVhGRE8wRkJRM0pETEd0RlFVRnJSVHRCUVVOc1JTdzBRMEZCTkVNN1FVRkROVU1zU1VGQlNTSjkiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgdG9nZ2xlQ2xhc3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90b2dnbGVDbGFzc1wiKSk7XHJcbnZhciBlbnRlclRhcmdldF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2VudGVyVGFyZ2V0XCIpKTtcclxudmFyIHRhYk1lbnVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90YWJNZW51XCIpKTtcclxudmFyIG1vZGFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kYWxcIikpO1xyXG52YXIgdG9Ub3BfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90b1RvcFwiKSk7XHJcbnZhciBzdGlja3lFbGVtZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc3RpY2t5RWxlbWVudFwiKSk7XHJcbnZhciBzY3JvbGxBbmltYXRpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxBbmltYXRpb25cIikpO1xyXG52YXIgY2xvc2VQYXJlbnRFbGVtZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY2xvc2VQYXJlbnRFbGVtZW50XCIpKTtcclxudmFyIGN1c3RvbUN1cnNvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2N1c3RvbUN1cnNvclwiKSk7XHJcbnZhciBzY3JvbGxzcHlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxzcHlcIikpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSB7XHJcbiAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3NfMS5kZWZhdWx0LFxyXG4gICAgZW50ZXJUYXJnZXQ6IGVudGVyVGFyZ2V0XzEuZGVmYXVsdCxcclxuICAgIG1vZGFsOiBtb2RhbF8xLmRlZmF1bHQsXHJcbiAgICB0YWJNZW51OiB0YWJNZW51XzEuZGVmYXVsdCxcclxuICAgIHRvVG9wOiB0b1RvcF8xLmRlZmF1bHQsXHJcbiAgICBzdGlja3lFbGVtZW50OiBzdGlja3lFbGVtZW50XzEuZGVmYXVsdCxcclxuICAgIHNjcm9sbEFuaW1hdGlvbjogc2Nyb2xsQW5pbWF0aW9uXzEuZGVmYXVsdCxcclxuICAgIHNjcm9sbHNweTogc2Nyb2xsc3B5XzEuZGVmYXVsdCxcclxuICAgIGNsb3NlUGFyZW50RWxlbWVudDogY2xvc2VQYXJlbnRFbGVtZW50XzEuZGVmYXVsdCxcclxuICAgIGN1c3RvbUN1cnNvcjogY3VzdG9tQ3Vyc29yXzEuZGVmYXVsdFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRGhFUVVGMVF6dEJRVU4yUXl3NFJFRkJkVU03UVVGRGRrTXNjMFJCUVN0Q08wRkJReTlDTEd0RVFVRXlRanRCUVVNelFpeHJSRUZCTWtJN1FVRkRNMElzYTBWQlFUSkRPMEZCUXpORExITkZRVUVyUXp0QlFVTXZReXcwUlVGQmNVUTdRVUZEY2tRc1owVkJRWGxETzBGQlEzcERMREJFUVVGdFF6dEJRVVZ1UXl4clFrRkJaVHRKUVVOaUxGZEJRVmNzZFVKQlFVRTdTVUZEV0N4WFFVRlhMSFZDUVVGQk8wbEJRMWdzUzBGQlN5eHBRa0ZCUVR0SlFVTk1MRTlCUVU4c2JVSkJRVUU3U1VGRFVDeExRVUZMTEdsQ1FVRkJPMGxCUTB3c1lVRkJZU3g1UWtGQlFUdEpRVU5pTEdWQlFXVXNNa0pCUVVFN1NVRkRaaXhUUVVGVExIRkNRVUZCTzBsQlExUXNhMEpCUVd0Q0xEaENRVUZCTzBsQlEyeENMRmxCUVZrc2QwSkJRVUU3UTBGRFlpeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIHRyaWdnZXIgPSBfYS5zZWxlY3RvcjtcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsgfSxcclxuICAgICAgICB0cmlnZ2VyczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0cmlnZ2VyKSxcclxuICAgICAgICBBQ1RJVkVfQ0xBU1M6ICdpcy1hY3RpdmUnLFxyXG4gICAgICAgIEFDVElWRV9DTEFTUzI6ICdpcy12aXNpYmxlJyxcclxuICAgICAgICBzZXRFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudHJpZ2dlcnMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyTmV4dEVsZW1lbnQgPSBlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJpZ2dlck5leHRFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlQ2xhc3NUcmlnZ2VyKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvZ2dsZUNsYXNzVGFyZ2V0KHRyaWdnZXJOZXh0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVBbGxDbGFzcyhlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHsgcmV0dXJuIF90aGlzLnJlbW92ZUFsbENsYXNzKHRyaWdnZXIpOyB9KTsgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b2dnbGVDbGFzc1RyaWdnZXI6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkFDVElWRV9DTEFTUyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJcIiArIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuQUNUSVZFX0NMQVNTKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b2dnbGVDbGFzc1RhcmdldDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQUNUSVZFX0NMQVNTMik7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZUFsbENsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkFDVElWRV9DTEFTUyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5BQ1RJVkVfQ0xBU1MyKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gdG9nZ2xlQ2xhc3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHOW5aMnhsUTJ4aGMzTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMGIyZG5iR1ZEYkdGemN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEZWQlFVTXNSVUZCWjBNN1VVRkJPVUlzY1VKQlFXbENPMGxCUVd0Q0xFOUJRVUVzUTBGQlF6dFJRVU42UkN4SlFVRkpMRVZCUVVVc1kwRkJXU3hEUVVGRE8xRkJRMjVDTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUXpWRExGbEJRVmtzUlVGQlJTeFhRVUZYTzFGQlEzcENMR0ZCUVdFc1JVRkJSU3haUVVGWk8xRkJRek5DTEZGQlFWRXNSVUZCUlR0WlFVRkJMR2xDUVhOQ1ZEdFpRWEpDUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkU3WjBKQlFVVXNUMEZCVFR0WlFVVXhRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4N1owSkJRek5DTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN2IwSkJRM0pETEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRVHR2UWtGRGRFSXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGQk8yOUNRVVYyUWl4SlFVRk5MR3RDUVVGclFpeEhRVUZITEU5QlFVOHNZVUZCVUN4UFFVRlBMSFZDUVVGUUxFOUJRVThzUTBGQlJTeHJRa0ZCYVVNc1EwRkJRVHR2UWtGRGNrVXNTVUZCU1N4RFFVRkRMR3RDUVVGclFqdDNRa0ZCUlN4UFFVRk5PMjlDUVVVdlFpeExRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdiMEpCUTJoRExFdEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkJPMjlDUVVVeFF5eExRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFOUJRVTg3ZDBKQlF6TkNMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUzBGQlN5eFBRVUZQT3pSQ1FVRkZMRTlCUVUwN2QwSkJRM0JETEV0QlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3YjBKQlF6bENMRU5CUVVNc1EwRkJReXhEUVVGQk8yZENRVU5LTEVOQlFVTXNRMEZCUXp0WlFXUkdMRU5CWTBVc1EwRkRTQ3hEUVVGQk8xbEJRMFFzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNZMEZCVFN4UFFVRkJMRXRCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHl4SlFVRkpMRTlCUVVFc1MwRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCTlVJc1EwRkJORUlzUTBGQlF5eEZRVUU1UkN4RFFVRTRSQ3hEUVVGRExFTkJRVUU3VVVGRkwwY3NRMEZCUXp0UlFVTkVMR3RDUVVGclFpeEZRVUZGTEZWQlFWTXNUMEZCVHp0WlFVTnNReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3V1VGRE0wTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVVzUzBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZITEVOQlFVTXNRMEZCUVR0UlFVTXpSaXhEUVVGRE8xRkJRMFFzYVVKQlFXbENMRVZCUVVVc1ZVRkJVeXhQUVVGUE8xbEJRMnBETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTTFReXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN5eEpRVUZKTEU5QlFVRXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1JVRkJSU3hGUVVGMlFpeERRVUYxUWl4RFFVRkRMRU5CUVVFN1VVRkRja1VzUTBGQlF6dFJRVU5FTEdOQlFXTXNSVUZCUlN4VlFVRlRMRTlCUVU4N1dVRkRPVUlzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVUU3V1VGRE4wTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMWxCUXpORExFOUJRVThzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRSUVVOcVJTeERRVUZETzB0QlEwWXNRMEZCUXp0QlFYcERkMFFzUTBGNVEzaEVMRU5CUVVFN1FVRkZSaXhyUWtGQlpTeFhRVUZYTEVOQlFVRWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGVudGVyVGFyZ2V0ID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IF9hLnNlbGVjdG9yO1xyXG4gICAgdmFyIGhvdmVyRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldEVsZW1lbnQpO1xyXG4gICAgaG92ZXJFbGVtZW50cyA9PT0gbnVsbCB8fCBob3ZlckVsZW1lbnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBob3ZlckVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7IHJldHVybiBlbnRlckV2ZW50KGVsZW1lbnQpOyB9KTtcclxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBsZWF2ZUV2ZW50KGVsZW1lbnQpOyB9KTtcclxuICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gZW50ZXJFdmVudChlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGlzTmF2aWdhdGlvbiA9IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCduYXZiYXItbWVudS1pdGVtJyk7XHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIGlzTmF2aWdhdGlvbiAmJiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLXNob3duJyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsZWF2ZUV2ZW50KGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgaXNOYXZpZ2F0aW9uID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ25hdmJhci1tZW51LWl0ZW0nKTtcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xyXG4gICAgICAgIGlzTmF2aWdhdGlvbiAmJiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNob3duJyk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGVudGVyVGFyZ2V0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laVzUwWlhKVVlYSm5aWFF1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SmxiblJsY2xSaGNtZGxkQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1YwRkJWeXhIUVVGSExGVkJRVU1zUlVGQmMwTTdVVUZCY0VNc01rSkJRWFZDTzBsQlF6VkRMRWxCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJZeXhoUVVGaExFTkJRVU1zUTBGQlFUdEpRVVV6UlN4aFFVRmhMR0ZCUVdJc1lVRkJZU3gxUWtGQllpeGhRVUZoTEVOQlFVVXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenRSUVVNMVFpeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEdOQlFVMHNUMEZCUVN4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVzVDTEVOQlFXMUNMRU5CUVVNc1EwRkJRVHRSUVVOcVJTeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEdOQlFVMHNUMEZCUVN4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVzVDTEVOQlFXMUNMRU5CUVVNc1EwRkJRVHRKUVVOdVJTeERRVUZETEVWQlFVTTdTVUZGUml4VFFVRlRMRlZCUVZVc1EwRkJReXhQUVVGUE8xRkJRM3BDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVUU3VVVGRmJrVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdVVUZETjBNc1dVRkJXU3hKUVVGSkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlFUdEpRVU42UkN4RFFVRkRPMGxCUTBRc1UwRkJVeXhWUVVGVkxFTkJRVU1zVDBGQlR6dFJRVU42UWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZCTzFGQlJXNUZMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkJPMUZCUXpsRExGbEJRVmtzU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVRTdTVUZETlVRc1EwRkJRenRCUVVOSUxFTkJRVU1zUTBGQlFUdEJRVVZFTEd0Q1FVRmxMRmRCUVZjc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHRhYk1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICAvLyB0b2RvIHJlc2l6ZSB0aHJvdHRsZVxyXG4gICAgdmFyIHRhYkluZGljYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLXRhYmxpc3QtaW5kaWNhdG9yJyk7XHJcbiAgICB2YXIgZmlyc3RUYWIgPSAoX2EgPSB0YWJJbmRpY2F0b3IgPT09IG51bGwgfHwgdGFiSW5kaWNhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YWJJbmRpY2F0b3IucGFyZW50Tm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3IoJ1tyb2xlPXRhYl0nKTtcclxuICAgIGlmICghdGFiSW5kaWNhdG9yIHx8ICFmaXJzdFRhYilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgZmlyc3RUYWJXaWR0aCA9IGdldENvbXB1dGVkU3R5bGUoZmlyc3RUYWIpLndpZHRoO1xyXG4gICAgdGFiSW5kaWNhdG9yLnN0eWxlLndpZHRoID0gZmlyc3RUYWJXaWR0aDtcclxuICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gaW5pdGlhbGl6ZUluZGljYXRvcih0YWJJbmRpY2F0b3IsIGZpcnN0VGFiV2lkdGgpKVxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5pdGlhbGl6ZUluZGljYXRvcih0YWJJbmRpY2F0b3IsIGZpcnN0VGFiV2lkdGgpOyB9KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICB2YXIgdGFicyA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYl0nKTtcclxuICAgICAgICB2YXIgdGFiUGFuZWxzID0gdGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJwYW5lbF0nKTtcclxuICAgICAgICB2YXIgdGFiSW5kZXggPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XHJcbiAgICAgICAgaWYgKCF0YWJzKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCdbcm9sZT10YWJdJykpIHtcclxuICAgICAgICAgICAgdGFiSW5kaWNhdG9yLnN0eWxlLmxlZnQgPSB0YXJnZXQub2Zmc2V0TGVmdCArIFwicHhcIjtcclxuICAgICAgICAgICAgdGFiSW5kaWNhdG9yLnN0eWxlLndpZHRoID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLndpZHRoO1xyXG4gICAgICAgICAgICB0YWJzLmZvckVhY2goZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpOyB9KTtcclxuICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgIHRhYlBhbmVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgIGlmICh0YWJJbmRleCA9PT0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LCB0cnVlKTtcclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVJbmRpY2F0b3IodGFiSW5kaWNhdG9yLCBmaXJzdFRhYldpZHRoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRhYkluZGljYXRvci5zdHlsZS53aWR0aCA9IGZpcnN0VGFiV2lkdGg7XHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gdGFiTWVudTtcclxuLy8gY29uc3QgdGFiczIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PignW3JvbGU9dGFiXScpXHJcbi8vIGlmICghdGFiMikgcmV0dXJuXHJcbi8vIHRhYnMyLmZvckVhY2godGFiID0+IHtcclxuLy8gICB0YWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbi8vICAgICBjb25zdCB0YWJJbmRleCA9IHRhYi5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKVxyXG4vLyAgICAgY29uc3QgdGFiSW5kaWNhdG9yID0gdGFiPy5wYXJlbnROb2RlPy5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignLnByb2ZpbGUtdGFibGlzdC1pbmRpY2F0b3InKVxyXG4vLyAgICAgaWYgKHRhYkluZGljYXRvcikge1xyXG4vLyAgICAgICB0YWJJbmRpY2F0b3Iuc3R5bGUubGVmdCA9IGAke3RhYi5vZmZzZXRMZWZ0fXB4YFxyXG4vLyAgICAgICB0YWJJbmRpY2F0b3Iuc3R5bGUud2lkdGggPSBnZXRDb21wdXRlZFN0eWxlKHRhYikud2lkdGhcclxuLy8gICAgIH1cclxuLy8gICAgIHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpXHJcbi8vICAgfSlcclxuLy8gfSlcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEdGaVRXVnVkUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkluUmhZazFsYm5VdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4SlFVRk5MRTlCUVU4c1IwRkJSenM3U1VGRFpDeDFRa0ZCZFVJN1NVRkRka0lzU1VGQlRTeFpRVUZaTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXcwUWtGQk5FSXNRMEZCUXl4RFFVRkJPMGxCUTNSR0xFbEJRVTBzVVVGQlVTeFRRVUZITEZsQlFWa3NZVUZCV2l4WlFVRlpMSFZDUVVGYUxGbEJRVmtzUTBGQlJTeFZRVUZWTERCRFFVRkZMR0ZCUVdFc1EwRkJZeXhaUVVGWkxFTkJRVU1zUTBGQlFUdEpRVU51Uml4SlFVRkpMRU5CUVVNc1dVRkJXU3hKUVVGSkxFTkJRVU1zVVVGQlVUdFJRVUZGTEU5QlFVMDdTVUZGZEVNc1NVRkJUU3hoUVVGaExFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZCTzBsQlEzUkVMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEdGQlFXRXNRMEZCUVR0SlFVVjRReXd3UmtGQk1FWTdTVUZETVVZc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hqUVVGTkxFOUJRVUVzYlVKQlFXMUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxHRkJRV0VzUTBGQlF5eEZRVUZvUkN4RFFVRm5SQ3hEUVVGRExFTkJRVUU3U1VGRE0wWXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN1VVRkRPVUlzU1VGQlFTeHhRa0ZCVFN4RFFVRmxPMUZCUXpkQ0xFbEJRVTBzU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1VVRkROMFFzU1VGQlRTeFRRVUZUTEVkQlFVY3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUVR0UlFVTnNSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xRkJSV3hFTEVsQlFVa3NRMEZCUXl4SlFVRkpPMWxCUVVVc1QwRkJUVHRSUVVWcVFpeEpRVUZKTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVU3V1VGRGFFTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVTBzVFVGQlRTeERRVUZETEZWQlFWVXNUMEZCU1N4RFFVRkJPMWxCUTJ4RUxGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMR2RDUVVGblFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRVHRaUVVWNlJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1IwRkJSeXhKUVVGSkxFOUJRVUVzUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1QwRkJUeXhEUVVGRExFVkJRVEZETEVOQlFUQkRMRU5CUVVNc1EwRkJRVHRaUVVNdlJDeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVVUxUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dG5Ra0ZEZGtJc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN1owSkJReTlDTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzJkQ1FVVXpReXhKUVVGSkxGRkJRVkVzUzBGQlN5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRk8yOUNRVU51UkN4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0dlFrRkRiRU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVUU3YVVKQlF6bERPMWxCUTBnc1EwRkJReXhEUVVGRExFTkJRVUU3VTBGRFNEdEpRVU5JTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRKUVVWU0xGTkJRVk1zYlVKQlFXMUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxHRkJRV0U3VVVGRGRFUXNWVUZCVlN4RFFVRkRPMWxCUTFRc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NZVUZCWVN4RFFVRkJPMUZCUXpGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUVR0SlFVTlVMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4UFFVRlBMRU5CUVVFN1FVRkZkRUlzY1VWQlFYRkZPMEZCUTNKRkxHOUNRVUZ2UWp0QlFVVndRaXg1UWtGQmVVSTdRVUZEZWtJc05rTkJRVFpETzBGQlF6ZERMSE5FUVVGelJEdEJRVU4wUkN4eFIwRkJjVWM3UVVGRGNrY3NNRUpCUVRCQ08wRkJRekZDTEhkRVFVRjNSRHRCUVVONFJDd3JSRUZCSzBRN1FVRkRMMFFzVVVGQlVUdEJRVVZTTEdkRVFVRm5SRHRCUVVOb1JDeFBRVUZQTzBGQlExQXNTMEZCU3lKOSIsIlwidXNlIHN0cmljdFwiO1xyXG4vL1RPRE86IOuqqOuLrCDrsJbsnZgg7Luo7YWQ7Lig7JeQIGFyaWEtaGlkZGVuIOuqqOuLrOydmCDsnITsuZjripQg67CU65SUIOyViOyXkD9cclxuLy92YXIgYWJjID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xyXG4vLyByZXF1aXJlKCcuL21vZGFsLnNjc3MnKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEgfHwge30pLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufTtcclxudmFyIGdldERhdGEgPSBmdW5jdGlvbiAodXJsLCBkYXRhKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5vaylcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBtb2RhbCA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIHRyaWdnZXIgPSBfYS5zZWxlY3RvcjtcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsgfSxcclxuICAgICAgICBtb2RhbHM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlciksXHJcbiAgICAgICAgbW9kYWxDb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtb2RhbCcpLFxyXG4gICAgICAgIHNldEV2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5iYWNrSGlzdG9yeSk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tb2RhbHMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbElkID0gbW9kYWwuZGF0YXNldC5tb2RhbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXJpID0gXCIvdmlld3MvXCIgKyBtb2RhbElkICsgXCIuaHRtbFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoKHVyaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMubW9kYWxDb250YWluZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1vZGFsQ29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbW9kYWwtdmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZVlPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNob3dNb2RhbChwYWdlWU9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEhpc3RvcnkobW9kYWxJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1Nob3duID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLW1vZGFsLXZpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2hvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1tb2RhbC1jbG9zZScpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1tb2RhbC1jbG9zZScpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpcy5iYWNrSGlzdG9yeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtZGltJykpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzLmJhY2tIaXN0b3J5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5iYWNrSGlzdG9yeSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNLZXlFc2MgPSBldmVudC5rZXlDb2RlID09PSAyNztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNLZXlFc2MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYmFja0hpc3RvcnkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5iYWNrSGlzdG9yeSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY2xlYXJNb2RhbChfdGhpcy5tb2RhbENvbnRhaW5lciwgcGFnZVlPZmZzZXQpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBjb25zb2xlLndhcm4oJ21vZGFsIEVycm9yJyk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvd01vZGFsOiBmdW5jdGlvbiAocGFnZVlPZmZzZXQpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1tb2RhbC12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7IC8vIHRvZG8gaW1wb3J0IFxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IFwiLVwiICsgcGFnZVlPZmZzZXQgKyBcInB4XCI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGVhck1vZGFsOiBmdW5jdGlvbiAoY29udGFpbmVyLCBwYWdlWU9mZnNldCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW1vZGFsLXZpc2libGUnKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdib2R5LWxvY2snKTsgLy8gdG9kbyBpbXBvcnQgXHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHBhZ2VZT2Zmc2V0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEhpc3Rvcnk6IGZ1bmN0aW9uIChtb2RhbFVybCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB7IG5hbWU6ICd0ZXN0ZXInIH07XHJcbiAgICAgICAgICAgIHZhciB0aXRsZSA9ICdkZCc7XHJcbiAgICAgICAgICAgIHZhciB1cmwgPSBtb2RhbFVybDtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmFja0hpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaGlzdG9yeS5iYWNrKCk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBtb2RhbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYlc5a1lXd3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKdGIyUmhiQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRXNOa05CUVRaRE8wRkJRemRETERCRVFVRXdSRHRCUVVNeFJDd3lRa0ZCTWtJN08wRkJUVE5DTEVsQlFVMHNWVUZCVlN4SFFVRkhMRlZCUVVFc1NVRkJTVHRKUVVOeVFpeFBRVUZQTzFGQlEwd3NUVUZCVFN4RlFVRkZMRTFCUVUwN1VVRkRaQ3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRMmhETEU5QlFVOHNSVUZCUlR0WlFVTlFMR05CUVdNc1JVRkJSU3hwUTBGQmFVTTdVMEZEYkVRN1MwRkRSaXhEUVVGQk8wRkJRMGdzUTBGQlF5eERRVUZCTzBGQlJVUXNTVUZCVFN4UFFVRlBMRWRCUVVjc1ZVRkJReXhIUVVGSExFVkJRVVVzU1VGQlNUdEpRVU40UWl4UFFVRlBMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVU3VVVGRGFFSXNUVUZCVFN4RlFVRkZMRTFCUVUwN1VVRkRaQ3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRNVUlzVDBGQlR5eEZRVUZGTzFsQlExQXNZMEZCWXl4RlFVRkZMR2xEUVVGcFF6dFRRVU5zUkR0TFFVTkdMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlFTeFJRVUZSTzFGQlEyUXNTVUZCU1N4UlFVRlJMRU5CUVVNc1JVRkJSVHRaUVVGRkxFOUJRVThzVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkJPMUZCUTNaRExFOUJRVThzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRKUVVOcVF5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTktMRU5CUVVNc1EwRkJRVHRCUVVWRUxFbEJRVTBzUzBGQlN5eEhRVUZITEZWQlFVTXNSVUZCWjBNN1VVRkJPVUlzY1VKQlFXbENPMGxCUVd0Q0xFOUJRVUVzUTBGQlF6dFJRVU51UkN4VlFVRlZMR2RDUVVGSkxFTkJRVU03VVVGRFppeE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZqTEU5QlFVOHNRMEZCUXp0UlFVTjJSQ3hqUVVGakxFVkJRVVVzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4UlFVRlJMRU5CUVVNN1VVRkROMFFzVVVGQlVUdFpRVUZTTEdsQ1FTdERRenRaUVRsRFF5eFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRaUVVOMlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwN1owSkJRVVVzVDBGQlRUdFpRVVY0UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEV0QlFVczdaMEpCUTNaQ0xFOUJRVUVzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZCTEV0QlFVczdiMEpCUTI1RExFdEJRVXNzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUVR0dlFrRkRka0lzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkJPMjlDUVVWMFFpeEpRVUZOTEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlFUdHZRa0ZEYmtNc1NVRkJUU3hIUVVGSExFZEJRVWNzV1VGQlZTeFBRVUZQTEZWQlFVOHNRMEZCUVR0dlFrRkRjRU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXp0NVFrRkRVQ3hKUVVGSkxFTkJRVU1zVlVGQlFTeFJRVUZSTzNkQ1FVTmFMRWxCUVVrc1VVRkJVU3hEUVVGRExFVkJRVVU3TkVKQlFVVXNUMEZCVHl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVUU3T3pSQ1FVTnNReXhQUVVGUExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN2IwSkJRM1JETEVOQlFVTXNRMEZCUXp0NVFrRkRSQ3hKUVVGSkxFTkJRVU1zVlVGQlFTeEpRVUZKT3p0M1FrRkRVaXhKUVVGSkxFTkJRVU1zUzBGQlNTeERRVUZETEdOQlFXTTdORUpCUVVVc1QwRkJUVHQzUWtGRmFFTXNTMEZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZCTzNkQ1FVTndReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0M1FrRkZNVU1zU1VGQlFTeG5RMEZCVnl4RFFVRlhPM2RDUVVNNVFpeExRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8zZENRVU16UWl4TFFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzNkQ1FVVjRRaXhKUVVGTkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHQzUWtGRGNFVXNTVUZCU1N4UFFVRlBMRVZCUVVVN05FSkJRMWdzVFVGQlFTeFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETERCRFFVRkZMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxFdEJRVXNzUTBGQlF5eGxRVUZsTEVWQlFVVXNSVUZCZGtJc1EwRkJkVUlzUlVGQlF6czBRa0ZEZEVjc1RVRkJRU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExEQkRRVUZGTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkRPelJDUVVOMFJpeE5RVUZCTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1dVRkJXU3hEUVVGRExEQkRRVUZGTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkRPelJDUVVOcVJpeDFSRUZCZFVRN2VVSkJRM2hFTzNkQ1FVTkVMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1ZVRkJRU3hMUVVGTE96UkNRVU40UXl4SlFVRk5MRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eExRVUZMTEVWQlFVVXNRMEZCUVRzMFFrRkRja01zU1VGQlNTeERRVUZETEZGQlFWRTdaME5CUVVVc1QwRkJUVHMwUWtGRmNrSXNTMEZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGQk8zZENRVU53UWl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3ZDBKQlJWSXNkVVJCUVhWRU8zZENRVVYyUkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWVUZCVlN4RlFVRkZMR05CUVUwc1QwRkJRU3hMUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVc1YwRkJWeXhEUVVGRExFVkJRV3BFTEVOQlFXbEVMRU5CUVVNc1EwRkJRVHR2UWtGRE9VWXNRMEZCUXl4RFFVRkRPM2xDUVVORUxFdEJRVXNzUTBGQlF5eFZRVUZCTEV0QlFVc3NTVUZCU1N4UFFVRkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVWQlFUTkNMRU5CUVRKQ0xFTkJRVU1zUTBGQlFUdG5Ra0ZEYUVRc1EwRkJReXhEUVVGRE8xbEJlRU5HTEVOQmQwTkZMRU5CUTBnc1EwRkJRVHRSUVVOSUxFTkJRVU03VVVGRFJDeFRRVUZUTEZsQlFVTXNWMEZCVnp0WlFVTnVRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0WlFVTXZReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUVzUTBGQlF5eGxRVUZsTzFsQlEzaEVMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSMEZCUnl4TlFVRkpMRmRCUVZjc1QwRkJTU3hEUVVGQk8xRkJReTlETEVOQlFVTTdVVUZEUkN4VlFVRlZMRmxCUVVNc1UwRkJVeXhGUVVGRkxGZEJRVmM3V1VGREwwSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVUU3V1VGRGJFUXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJMRU5CUVVVc1pVRkJaVHRaUVVVMVJDeFRRVUZUTEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRVHRaUVVONFFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlFUdFJRVU5xUXl4RFFVRkRPMUZCUTBRc1ZVRkJWU3haUVVGRExGRkJRVkU3V1VGRGFrSXNTVUZCVFN4TFFVRkxMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVOQlFVRTdXVUZEYUVNc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZCTzFsQlEyeENMRWxCUVUwc1IwRkJSeXhIUVVGSExGRkJRVkVzUTBGQlFUdFpRVU53UWl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVFN1VVRkRkRU1zUTBGQlF6dFJRVU5FTEZkQlFWYzdXVUZEVkN4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVUU3VVVGRGFFSXNRMEZCUXp0TFFVTkdMRU5CUVVNN1FVRjZSV3RFTEVOQmVVVnNSQ3hEUVVGQk8wRkJSVVlzYTBKQlFXVXNTMEZCU3l4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHRvVG9wID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICB2YXIgdGFyZ2V0ID0gX2Euc2VsZWN0b3I7XHJcbiAgICB2YXIgdG9Ub3BFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xyXG4gICAgaWYgKCF0b1RvcEVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdG9Ub3BFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLmhhc2ggPSB0b1RvcEVsZW1lbnQubmFtZSB8fCB0b1RvcEVsZW1lbnQuaHJlZlxyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHRvVG9wO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkRzlVYjNBdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowYjFSdmNDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzUzBGQlN5eEhRVUZITEZWQlFVTXNSVUZCSzBJN1VVRkJOMElzYjBKQlFXZENPMGxCUXk5Q0xFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVd0Q0xFMUJRVTBzUTBGQlF5eERRVUZCTzBsQlEzQkZMRWxCUVVrc1EwRkJReXhaUVVGWk8xRkJRVVVzVDBGQlRUdEpRVVY2UWl4WlFVRlpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVFc1MwRkJTenRSUVVNeFF5eExRVUZMTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVFN1VVRkRkRUlzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRmNrSXNaMFZCUVdkRk8wbEJRMnhGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNTMEZCU3l4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIOyKpO2LsO2CpOyghOydmOyYteyFi+q4sOyWte2VtOyjvOq4sFxyXG4vLyBwYXNzZWTsmYAg67CU66GcLiBoZWFkZXIgLyBwb3N0LWhlYWRcclxuLy8g7Ja47KCcIGNhbmNlbFxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBzdGlja3lFbGVtZW50ID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IF9hLnRhcmdldEVsZW1lbnQsIGFkZENsYXNzID0gX2EuYWRkQ2xhc3MsIHBvc2l0aW9uID0gX2EucG9zaXRpb247XHJcbiAgICB2YXIgc3RpY2t5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWxlbWVudCk7XHJcbiAgICBpZiAoIXN0aWNreUVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgIHZhciBpc1Njcm9sbGluZztcclxuICAgIGZ1bmN0aW9uIGhhc1Njcm9sbGVkKCkge1xyXG4gICAgICAgIGlzU2Nyb2xsaW5nICYmIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpc1Njcm9sbGluZyk7XHJcbiAgICAgICAgaXNTY3JvbGxpbmcgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXRUb3AgPSBzdGlja3lFbGVtZW50Lm9mZnNldFRvcDtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXRCb3R0b20gPSBzdGlja3lFbGVtZW50Lm9mZnNldFRvcCArIGVsZW1lbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIHZhciBpc1N0dWNrID0gd2luZG93LnBhZ2VZT2Zmc2V0ID4gKHBvc2l0aW9uID09PSAndG9wJyA/IGVsZW1lbnRPZmZzZXRUb3AgOiBlbGVtZW50T2Zmc2V0Qm90dG9tKTtcclxuICAgICAgICAgICAgaWYgKGlzU3R1Y2spIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdUb3AgPSBgJHtlbGVtZW50SGVpZ2h0fXB4YFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGFkZENsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgIC8vICAgaXNTY3JvbGxpbmcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlzU2Nyb2xsaW5nKVxyXG4gICAgLy8gICBpc1Njcm9sbGluZyA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgLy8gICAgIGVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodFxyXG4gICAgLy8gICB9KVxyXG4gICAgLy8gfSlcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYXNTY3JvbGxlZCk7XHJcbn07XHJcbi8vIHZhciBpc1Njcm9sbGluZztcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIChldmVudCkgPT4ge1xyXG4vLyBcdGlmKGlzU2Nyb2xsaW5nKSB3aW5kb3cuY2xlYXJUaW1lb3V0KGlzU2Nyb2xsaW5nKTtcclxuLy8gXHRpc1Njcm9sbGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuLy8gXHRcdHN0aWNreVRvZ2dsZSgpO1xyXG4vLyBcdH0sIDUwKTtcclxuLy8gfSk7XHJcbi8vIGV4cG9ydCBjb25zdCBzdGlja3lIZWFkZXJFbGVtZW50ID0gKHRhcmdldEVsZW1lbnQsIGFkZENsYXNzKSA9PiB7XHJcbi8vIFx0c3RpY2t5RWxlbWVudCh7dGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MsIHRydWV9KTtcclxuLy8gfTtcclxuLy8gY29uc3Qgc3RpY2t5SGVhZGVyID0gKCkgPT4ge1xyXG4vLyBcdGNvbnN0IGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcbi8vIFx0bGV0IGxhc3RTY3JvbGxUb3AgPSAwO1xyXG4vLyBcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcbi8vIFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaGFzU2Nyb2xsZWQpO1xyXG4vLyBcdH0pO1xyXG4vLyBcdGZ1bmN0aW9uIGhhc1Njcm9sbGVkKCkge1xyXG4vLyBcdFx0aWYod2luZG93LnBhZ2VZT2Zmc2V0ID4gbGFzdFNjcm9sbFRvcCkge1xyXG4vLyBcdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdi11cCcpO1xyXG4vLyBcdFx0fSBlbHNlIHtcclxuLy8gXHRcdFx0aGVhZGVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduYXYtdXAnKTtcclxuLy8gXHRcdH1cclxuLy8gXHRcdGxhc3RTY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbi8vIFx0fVxyXG4vLyB9O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBzdGlja3lFbGVtZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljM1JwWTJ0NVJXeGxiV1Z1ZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbk4wYVdOcmVVVnNaVzFsYm5RdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTEdWQlFXVTdRVUZEWml4cFEwRkJhVU03UVVGRGFrTXNXVUZCV1RzN1FVRkZXaXhKUVVGTkxHRkJRV0VzUjBGQlJ5eFZRVUZETEVWQlFYRkRPMUZCUVc1RExHZERRVUZoTEVWQlFVVXNjMEpCUVZFc1JVRkJSU3h6UWtGQlVUdEpRVU40UkN4SlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUXpORUxFbEJRVWtzUTBGQlF5eGhRVUZoTzFGQlFVVXNUMEZCVFR0SlFVVXhRaXhKUVVGSkxHRkJRV0VzUjBGQlJ5eGhRVUZoTEVOQlFVTXNXVUZCV1N4RFFVRkJPMGxCUXpsRExFbEJRVWtzVjBGQlZ5eERRVUZCTzBsQlJXWXNVMEZCVXl4WFFVRlhPMUZCUTJ4Q0xGZEJRVmNzU1VGQlNTeE5RVUZOTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdVVUZEZGtRc1YwRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRaUVVONlF5eEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVRTdXVUZEYUVRc1NVRkJUU3h0UWtGQmJVSXNSMEZCUnl4aFFVRmhMRU5CUVVNc1UwRkJVeXhIUVVGSExHRkJRV0VzUTBGQlFUdFpRVU51UlN4SlFVRk5MRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVOQlFVTXNVVUZCVVN4TFFVRkxMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1dVRkRiRWNzU1VGQlNTeFBRVUZQTEVWQlFVVTdaMEpCUTFnc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGQk8yZENRVU55UXl4M1JFRkJkMFE3WVVGRGVrUTdhVUpCUVUwN1owSkJRMHdzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzJGQlEzcERPMUZCUTBnc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFNpeERRVUZETzBsQlEwUXNORU5CUVRSRE8wbEJRelZETERSRVFVRTBSRHRKUVVNMVJDeDFSRUZCZFVRN1NVRkRka1FzYVVSQlFXbEVPMGxCUTJwRUxFOUJRVTg3U1VGRFVDeExRVUZMTzBsQlJVd3NUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRVHRCUVVOb1JDeERRVUZETEVOQlFVRTdRVUZGUkN4dFFrRkJiVUk3UVVGRGJrSXNhVVJCUVdsRU8wRkJRMnBFTEhGRVFVRnhSRHRCUVVOeVJDeDNRMEZCZDBNN1FVRkRlRU1zYjBKQlFXOUNPMEZCUTNCQ0xGZEJRVmM3UVVGRFdDeE5RVUZOTzBGQlJVNHNiMFZCUVc5Rk8wRkJRM0JGTEcxRVFVRnRSRHRCUVVOdVJDeExRVUZMTzBGQlJVd3NLMEpCUVN0Q08wRkJReTlDTERSRVFVRTBSRHRCUVVNMVJDd3dRa0ZCTUVJN1FVRkZNVUlzTmtOQlFUWkRPMEZCUXpkRExIZERRVUYzUXp0QlFVTjRReXhQUVVGUE8wRkJSVkFzTkVKQlFUUkNPMEZCUXpWQ0xEWkRRVUUyUXp0QlFVTTNReXcwUTBGQk5FTTdRVUZETlVNc1lVRkJZVHRCUVVOaUxDdERRVUVyUXp0QlFVTXZReXhOUVVGTk8wRkJRMDRzZDBOQlFYZERPMEZCUTNoRExFdEJRVXM3UVVGRFRDeExRVUZMTzBGQlJVd3NhMEpCUVdVc1lVRkJZU3hEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZXZlbnRTY3JvbGxBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgU0NST0xMRURfQ0xBU1MgPSAnaXMtc2Nyb2xsZWQnO1xyXG4gICAgdmFyIHNjcm9sbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcclxuICAgIGlmICghc2Nyb2xsRWxlbWVudHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIHRlbXA7XHJcbiAgICBzY3JvbGxFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGlzU2Nyb2xsZWQgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA8PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgaWYgKCFpc1Njcm9sbGVkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFNDUk9MTEVEX0NMQVNTKTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzY3JvbGxFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBpc1Njcm9sbGVkID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodCAqIDAuNSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGlzU2Nyb2xsZWQgPSB3aW5kb3cucGFnZVlPZmZzZXQgPiB3aW5kb3cucGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodCArIDUwXHJcbiAgICAgICAgICAgIGlmICghaXNTY3JvbGxlZClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFNDUk9MTEVEX0NMQVNTKTtcclxuICAgICAgICAgICAgdGVtcCAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGVtcCk7XHJcbiAgICAgICAgICAgIHRlbXAgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoU0NST0xMRURfQ0xBU1MpO1xyXG4gICAgICAgICAgICAgICAgLy8gfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gZXZlbnRTY3JvbGxBbmltYXRpb247XHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZXZlbnQpID0+IHtcclxuLy8gXHR2YXIgdGltZXI7XHJcbi8vIFx0aWYgKCF0aW1lcikge1xyXG4vLyBcdFx0dGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4vLyBcdFx0XHR0aW1lcj1udWxsO1xyXG4vLyBcdFx0XHRjb25zdCB0YXJnZXRTdGlja3kgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc3RpY2t5Jyk7XHJcbi8vIFx0XHRcdGNvbnN0IHRhcmdldFN0aWNreUhlaWdodCA9IHRhcmdldFN0aWNreS5jbGllbnRIZWlnaHQ7XHJcbi8vIFx0XHRcdGlmKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRhcmdldFN0aWNreS5vZmZzZXRUb3Ape1xyXG4vLyBcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLnN0eWxlLnBhZGRpbmdUb3AgPSB0YXJnZXRTdGlja3lIZWlnaHQgKyAncHgnO1xyXG4vLyBcdFx0XHRcdFx0dGFyZ2V0U3RpY2t5LmNsYXNzTGlzdC5hZGQoJ2lzLXN0aWNreScpO1xyXG4vLyBcdFx0XHR9IGVsc2Uge1xyXG4vLyBcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLnN0eWxlLnBhZGRpbmdUb3AgPSAnMHB4JztcclxuLy8gXHRcdFx0XHRcdHRhcmdldFN0aWNreS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zdGlja3knKTtcclxuLy8gXHRcdFx0fVxyXG4vLyBcdFx0fSwgNDAwKTtcclxuLy8gXHR9XHJcbi8vIH0pO1xyXG4vLyBjb25zdCBhYnNvbHV0ZVRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCArIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMk55YjJ4c1FXNXBiV0YwYVc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNRVzVwYldGMGFXOXVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFN4dlFrRkJiMElzUjBGQlJ6dEpRVU16UWl4SlFVRk5MR05CUVdNc1IwRkJSeXhoUVVGaExFTkJRVUU3U1VGRGNFTXNTVUZCVFN4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVRTdTVUZEZUVVc1NVRkJTU3hEUVVGRExHTkJRV003VVVGQlJTeFBRVUZOTzBsQlJUTkNMRWxCUVVrc1NVRkJTU3hEUVVGQk8wbEJSVklzWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4N1VVRkROVUlzU1VGQlRTeFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVUU3VVVGRE5VVXNTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkJSU3hQUVVGTk8xRkJSWFpDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZCTzBsQlEzWkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJSVVlzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU5vUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dFpRVU0xUWl4SlFVRk5MRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlFUdFpRVU42Unl3MlNFRkJOa2c3V1VGRE4wZ3NTVUZCU1N4RFFVRkRMRlZCUVZVN1owSkJRVVVzVDBGQlRUdFpRVVYyUWl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUVR0WlFVTnlReXhKUVVGSkxFbEJRVWtzVFVGQlRTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzFsQlEzcERMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNN1owSkJRMnhETEcxRVFVRnRSRHRuUWtGRGJrUXNPRU5CUVRoRE8yZENRVU01UXl4TFFVRkxPMWxCUTFBc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFNpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc2IwSkJRVzlDTEVOQlFVRTdRVUZGYmtNc2FVUkJRV2xFTzBGQlEycEVMR05CUVdNN1FVRkRaQ3hwUWtGQmFVSTdRVUZEYWtJc2IwTkJRVzlETzBGQlEzQkRMR2xDUVVGcFFqdEJRVU5xUWl4blJVRkJaMFU3UVVGRGFFVXNNa1JCUVRKRU8wRkJRek5FTEhORVFVRnpSRHRCUVVOMFJDeHZSa0ZCYjBZN1FVRkRjRVlzWjBSQlFXZEVPMEZCUTJoRUxHTkJRV003UVVGRFpDeG5SVUZCWjBVN1FVRkRhRVVzYlVSQlFXMUVPMEZCUTI1RUxFOUJRVTg3UVVGRFVDeGhRVUZoTzBGQlEySXNTMEZCU3p0QlFVTk1MRTFCUVUwN1FVRkZUaXhuUmtGQlowWWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNsb3NlUGFyZW50RWxlbWVudCA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIHRhcmdldEVsZW1lbnQgPSBfYS5zZWxlY3RvcjtcclxuICAgIHZhciBjbG9zZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbGVtZW50KTtcclxuICAgIGlmIChjbG9zZUVsZW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjbG9zZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIGlzSGlkZGVuID0gSFRNTEVsZW1lbnQuaGlkZGVuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2xvc2VQYXJlbnRFbGVtZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnh2YzJWUVlYSmxiblJGYkdWdFpXNTBMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVkyeHZjMlZRWVhKbGJuUkZiR1Z0Wlc1MExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCU1VFc1NVRkJUU3hyUWtGQmEwSXNSMEZCUnl4VlFVRkRMRVZCUVhORE8xRkJRWEJETERKQ1FVRjFRanRKUVVOdVJDeEpRVUZOTEdGQlFXRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRNMFVzU1VGQlNTeGhRVUZoTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNN1VVRkJSU3hQUVVGTk8wbEJSWFJETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xRkJRek5DTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTnNRaXhQUVVGUExFTkJRVU1zVlVGQlZ5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVFN1dVRkROME1zWjBOQlFXZERPMUZCUTNCRExFTkJRVU1zUTBGQlF6dEpRVWhHTEVOQlIwVXNRMEZEU0N4RFFVRkJPMEZCUTBnc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNhMEpCUVd0Q0xFTkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBjdXN0b21DdXJzb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY3Vyc29yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRlci1zcGlubmVyJyk7XHJcbiAgICBpZiAoIWN1cnNvcilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgaG92ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBhJyk7XHJcbiAgICBpZiAoIWhvdmVyRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBzZXRDdXJzb3IoZXZlbnQsIHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pOyB9KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gc2V0Q3Vyc29yKGV2ZW50LCB7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFJpcHBsZSh7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XHJcbiAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZCgnaXMtZGVmYXVsdCcpO1xyXG4gICAgaG92ZXJFbGVtZW50LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xpY2thYmxlJyk7XHJcbiAgICB9KTsgfSk7XHJcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1jbGlja2FibGUnKTtcclxuICAgIH0pOyB9KTtcclxuICAgIGZ1bmN0aW9uIHNldEN1cnNvcihldmVudCwgX2EpIHtcclxuICAgICAgICB2YXIgY3Vyc29yID0gX2EuY3Vyc29yRWxlbWVudDtcclxuICAgICAgICB2YXIgeCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgICAgdmFyIHkgPSBldmVudC5jbGllbnRZO1xyXG4gICAgICAgIGN1cnNvci5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcclxuICAgICAgICBjdXJzb3Iuc3R5bGUudG9wID0geSArIFwicHhcIjtcclxuICAgICAgICAvLyBjdXJzb3Iuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3ggLSAxNX1weCwgJHt5IC0gMTV9cHhgO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0UmlwcGxlKF9hKSB7XHJcbiAgICAgICAgdmFyIGN1cnNvciA9IF9hLmN1cnNvckVsZW1lbnQ7XHJcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZCcpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kJyk7XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY3VzdG9tQ3Vyc29yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZM1Z6ZEc5dFEzVnljMjl5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lZM1Z6ZEc5dFEzVnljMjl5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeFpRVUZaTEVkQlFVYzdTVUZEYmtJc1NVRkJUU3hOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4dlFrRkJiMElzUTBGQlF5eERRVUZETzBsQlEzcEZMRWxCUVVjc1EwRkJReXhOUVVGTk8xRkJRVVVzVDBGQlR6dEpRVVZ3UWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVdNc1YwRkJWeXhEUVVGRExFTkJRVU03U1VGRGVrVXNTVUZCUnl4RFFVRkRMRmxCUVZrN1VVRkJSU3hQUVVGUE8wbEJSWHBDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hWUVVGQkxFdEJRVXNzU1VGQlNTeFBRVUZCTEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCTTBNc1EwRkJNa01zUTBGQlF5eERRVUZETzBsQlEzQkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1ZVRkJRU3hMUVVGTExFbEJRVWtzVDBGQlFTeFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1lVRkJZU3hGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFUTkRMRU5CUVRKRExFTkJRVU1zUTBGQlF6dEpRVU0zUml4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMR05CUVUwc1QwRkJRU3hUUVVGVExFTkJRVU1zUlVGQlJTeGhRVUZoTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJjRU1zUTBGQmIwTXNRMEZCUXl4RFFVRkRPMGxCUlM5RkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJRMjVETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUExFbEJRVWtzVDBGQlFTeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTzFGQlEzUkZMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMGxCUTNwRExFTkJRVU1zUTBGQlF5eEZRVVk0UWl4RFFVVTVRaXhEUVVGRExFTkJRVU03U1VGRFNpeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUeXhKUVVGSkxFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUlVGQlJUdFJRVU4wUlN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTjBReXhEUVVGRExFTkJRVU1zUlVGR09FSXNRMEZGT1VJc1EwRkJReXhEUVVGRE8wbEJSVW9zVTBGQlV5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVRoQ08xbEJRVFZDTEhsQ1FVRnhRanRSUVVOb1JDeEpRVUZOTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRE8xRkJRM2hDTEVsQlFVMHNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03VVVGRmVFSXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVTBzUTBGQlF5eFBRVUZKTEVOQlFVTTdVVUZETjBJc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVkQlFVMHNRMEZCUXl4UFFVRkpMRU5CUVVNN1VVRkROVUlzYVVWQlFXbEZPMGxCUTJwRkxFTkJRVU03U1VGRlJpeFRRVUZUTEZOQlFWTXNRMEZCUXl4RlFVRjVRanRaUVVGMlFpeDVRa0ZCY1VJN1VVRkRla01zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGREwwSXNWVUZCVlN4RFFVRkRPMWxCUTFZc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkRia01zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTFRc1EwRkJRenRCUVVOR0xFTkJRVU1zUTBGQlF6dEJRVVZHTEd0Q1FVRmxMRmxCUVZrc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHNjcm9sbHNweSA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIG1lbnVzQ2xhc3MgPSBfYS5tZW51c1NlbGVjdG9yLCBzZWN0aW9uc0NsYXNzID0gX2Euc2VjdGlvbnNTZWxlY3RvcjtcclxuICAgIHZhciBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobWVudXNDbGFzcyk7XHJcbiAgICB2YXIgbWVudXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlY3Rpb25zQ2xhc3MpO1xyXG4gICAgaWYgKCFzZWN0aW9ucyB8fCAhbWVudXMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgbWVudXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHtcclxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGhyZWYgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHRhcmdldE9mZnNldFkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGhyZWYpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0T2Zmc2V0WSA9IHNlY3Rpb25zW2luZGV4XS5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0YXJnZXRPZmZzZXRZKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWN0aW9uLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5vZmZzZXRUb3AgPD0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgMjAwKSB7XHJcbiAgICAgICAgICAgICAgICBtZW51cy5mb3JFYWNoKGZ1bmN0aW9uIChtZW51KSB7IHJldHVybiBtZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpOyB9KTtcclxuICAgICAgICAgICAgICAgIG1lbnVzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbHNweTtcclxuLy8gY29uc3QgYWJzb2x1dGVUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuLy8gZnVuY3Rpb24gZ2V0QWJzb2x1dGVUb3AoZWxlbWVudCkge1xyXG4vLyAgIHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuLy8gfVxyXG4vLyDigItcclxuLy8gY29uc3QgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuLy8gY29uc3QgcGFyZW50QWJzb2x1dGVUb3AgPSBnZXRBYnNvbHV0ZVRvcChwYXJlbnRFbGVtZW50KTtcclxuLy8gY29uc3QgYWJzb3VsdGVUb3AgPSBnZXRBYnNvbHV0ZVRvcChlbGVtZW50KTtcclxuLy8g4oCLXHJcbi8vIGNvbnN0IHJlbGF0aXZlVG9wID0gYWJzb2x1dGVUb3AgLSBwYXJlbnRBYnNvbHV0ZVRvcDtcclxuLy8g7Lac7LKYOiBodHRwczovL21vbW1vby50aXN0b3J5LmNvbS84NSBb6rCc67Cc7J6Q66GcIO2ZgOuhnCDshJzquLBdXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyTnliMnhzYzNCNUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNjM0I1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJTMEVzU1VGQlRTeFRRVUZUTEVkQlFVY3NWVUZCUXl4RlFVRjVSVHRSUVVGMlJTdzJRa0ZCZVVJc1JVRkJSU3h0UTBGQkswSTdTVUZETjBVc1NVRkJUU3hSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGclFpeFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVTjJSU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRV3RDTEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUTNaRkxFbEJRVWNzUTBGQlF5eFJRVUZSTEVsQlFVa3NRMEZCUXl4TFFVRkxPMUZCUVVVc1QwRkJUVHRKUVVVNVFpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXM3VVVGRE0wSXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN1dVRkRja01zUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkJPMWxCUTNSQ0xEUkRRVUUwUXp0WlFVTTFReXhwUmtGQmFVWTdXVUZEYWtZc1NVRkJUU3hoUVVGaExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJRVHRaUVVNdlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hoUVVGaExFTkJRVU1zUTBGQlFUdFJRVU51UXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOS0xFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwWXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlR0UlFVTm9ReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzN1dVRkRPVUlzU1VGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4SlFVRkpMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzUjBGQlJ5eEZRVUZGTzJkQ1FVTm9SQ3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1N4SlFVRkpMRTlCUVVFc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVd4RExFTkJRV3RETEVOQlFVTXNRMEZCUVR0blFrRkRla1FzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdZVUZEZUVNN1VVRkRTQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5LTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNVMEZCVXl4RFFVRkJPMEZCU1hoQ0xHZEdRVUZuUmp0QlFVTm9SaXh4UTBGQmNVTTdRVUZEY2tNc2NVVkJRWEZGTzBGQlEzSkZMRWxCUVVrN1FVRkRTaXhKUVVGSk8wRkJRMG9zSzBOQlFTdERPMEZCUXk5RExESkVRVUV5UkR0QlFVTXpSQ3dyUTBGQkswTTdRVUZETDBNc1NVRkJTVHRCUVVOS0xIVkVRVUYxUkR0QlFVZDJSQ3hwUkVGQmFVUWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNoZWNrYm94XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY2hlY2tib3hcIikpO1xyXG52YXIgdGV4dGFyZWFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90ZXh0YXJlYVwiKSk7XHJcbnZhciBmaWxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZmlsZVwiKSk7XHJcbnZhciBudW1iZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9udW1iZXJcIikpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSB7XHJcbiAgICBjaGVja2JveDogY2hlY2tib3hfMS5kZWZhdWx0LFxyXG4gICAgdGV4dGFyZWE6IHRleHRhcmVhXzEuZGVmYXVsdCxcclxuICAgIGZpbGU6IGZpbGVfMS5kZWZhdWx0LFxyXG4gICAgbnVtYmVyOiBudW1iZXJfMS5kZWZhdWx0LFxyXG59O1xyXG5mdW5jdGlvbiBjbGVhclRleHRmaWVsZCgpIHtcclxuICAgIC8vIGV2ZW50LnRhcmdldC5zaWJsaW5ncy5pbnB1dC52YWx1ZSA9ICcnXHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKcGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dEJRVUZCTEhkRVFVRnBRenRCUVVOcVF5eDNSRUZCYVVNN1FVRkRha01zWjBSQlFYbENPMEZCUTNwQ0xHOUVRVUUyUWp0QlFVVTNRaXhyUWtGQlpUdEpRVU5pTEZGQlFWRXNiMEpCUVVFN1NVRkRVaXhSUVVGUkxHOUNRVUZCTzBsQlExSXNTVUZCU1N4blFrRkJRVHRKUVVOS0xFMUJRVTBzYTBKQlFVRTdRMEZEVUN4RFFVRkJPMEZCUlVRc1UwRkJVeXhqUVVGak8wbEJRM0pDTEhsRFFVRjVRenRCUVVNelF5eERRVUZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBjaGVja2JveCA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIGNoZWNrQWxsU2VsZWN0b3IgPSBfYS5jaGVja0FsbFNlbGVjdG9yLCBjaGVja1NlbGVjdG9yID0gX2EuY2hlY2tTZWxlY3RvcjtcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIGNoZWNrQWxsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsU2VsZWN0b3IpLFxyXG4gICAgICAgIGNoZWNrSXRlbXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tTZWxlY3RvciksXHJcbiAgICAgICAgc2V0RXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWxsIHx8ICF0aGlzLmNoZWNrSXRlbXMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tBbGwoX3RoaXMuY2hlY2tJdGVtcywgX3RoaXMuY2hlY2tBbGwpOyB9KTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0l0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGNoZWNrSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldENoZWNrRWFjaChfdGhpcy5jaGVja0l0ZW1zLCBfdGhpcy5jaGVja0FsbCk7IH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldENoZWNrRWFjaDogZnVuY3Rpb24gKGNoZWNrSXRlbXMsIGNoZWNrQWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGVja3MgPSBBcnJheS5mcm9tKGNoZWNrSXRlbXMpO1xyXG4gICAgICAgICAgICB2YXIgaXNDaGVja2VkRXZlcnkgPSBjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrSXRlbSkgeyByZXR1cm4gY2hlY2tJdGVtLmNoZWNrZWQ7IH0pO1xyXG4gICAgICAgICAgICB2YXIgaXNDaGVja2VkU29tZSA9IGNoZWNrcy5zb21lKGZ1bmN0aW9uIChjaGVja0l0ZW0pIHsgcmV0dXJuIGNoZWNrSXRlbS5jaGVja2VkOyB9KTtcclxuICAgICAgICAgICAgY2hlY2tBbGwuY2hlY2tlZCA9IGlzQ2hlY2tlZEV2ZXJ5O1xyXG4gICAgICAgICAgICBjaGVja0FsbC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XHJcbiAgICAgICAgICAgIGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0Q2hlY2tBbGw6IGZ1bmN0aW9uIChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xyXG4gICAgICAgICAgICBjaGVja0l0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGNoZWNrSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tBbGwuZGF0YXNldC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tib3g7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyaGxZMnRpYjNndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpqYUdWamEySnZlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVdEJMRWxCUVUwc1VVRkJVU3hIUVVGSExGVkJRVU1zUlVGQk9FTTdVVUZCTlVNc2MwTkJRV2RDTEVWQlFVVXNaME5CUVdFN1NVRkJhMElzVDBGQlFTeERRVUZETzFGQlEzQkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8xRkJRMnhFTEZWQlFWVXNSVUZCUlN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RFFVRkRPMUZCUTNCRUxGRkJRVkU3V1VGQlVpeHBRa0ZQUXp0WlFVNURMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1owSkJRVVVzVDBGQlRUdFpRVVU1UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hqUVVGTkxFOUJRVUVzUzBGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFdEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCYUVRc1EwRkJaMFFzUTBGQlF5eERRVUZCTzFsQlEyaEhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNVMEZCVXp0blFrRkRMMElzVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNTMEZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhMUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEV0QlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJha1FzUTBGQmFVUXNRMEZCUXl4RFFVRkJPMWxCUXk5R0xFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEwb3NRMEZCUXp0UlFVTkVMRmxCUVZrc1JVRkJXaXhWUVVGaExGVkJRVlVzUlVGQlJTeFJRVUZSTzFsQlF5OUNMRWxCUVUwc1RVRkJUU3hIUVVGMVFpeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGQk8xbEJRM3BFTEVsQlFVMHNZMEZCWXl4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlFTeFRRVUZUTEVsQlFVa3NUMEZCUVN4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGcVFpeERRVUZwUWl4RFFVRkRMRU5CUVVFN1dVRkRia1VzU1VGQlRTeGhRVUZoTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGQkxGTkJRVk1zU1VGQlNTeFBRVUZCTEZOQlFWTXNRMEZCUXl4UFFVRlBMRVZCUVdwQ0xFTkJRV2xDTEVOQlFVTXNRMEZCUVR0WlFVVnFSU3hSUVVGUkxFTkJRVU1zVDBGQlR5eEhRVUZITEdOQlFXTXNRMEZCUVR0WlFVTnFReXhSUVVGUkxFTkJRVU1zWVVGQllTeEhRVUZITEdGQlFXRXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJRVHRaUVVONlJDeFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1IwRkJSeXhoUVVGaExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVRTdVVUZEYmtVc1EwRkJRenRSUVVORUxGZEJRVmNzV1VGQlF5eFZRVUZWTEVWQlFVVXNVVUZCVVR0WlFVTTVRaXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNVMEZCVXp0blFrRkRNVUlzVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGQk8yZENRVU53UXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlFUdG5Ra0ZET1VJc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkJPMWxCUTNoRExFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEwb3NRMEZCUXp0TFFVTkdMRU5CUVVNN1FVRXpRbTFGTEVOQk1rSnVSU3hEUVVGQk8wRkJSVVlzYTBKQlFXVXNVVUZCVVN4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGlucHV0VGV4dGFyZWEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyB0YWdOYW1l6rO8IG5vZGVOYW1l7J2AIO2FjeyKpO2KuCDrhbjrk5zrpbwg6rCB6rCBIHVuZGVmaW5lZOyZgCAjdGV4dCDrsJjtmZjtlZzri6QuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgaWYgKHRhcmdldClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBpc1RleHRhcmVhID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYSc7XHJcbiAgICAgICAgaWYgKCFpc1RleHRhcmVhKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIEJZVEVfTUFYSU1VTSA9IDMwO1xyXG4gICAgICAgIHZhciBieXRlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0ZmllbGQtYnl0ZSBiJyk7XHJcbiAgICAgICAgaWYgKCFieXRlRWxlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBzdHJpbmdCeXRlTGVuZ3RoID0gKHRhcmdldCA9PT0gbnVsbCB8fCB0YXJnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRhcmdldC52YWx1ZS5yZXBsYWNlKC9bXFwwLVxceDdmXXwoWzAtXFx1MDdmZl18KC4pKS9nLCAnJCYkMSQyJykubGVuZ3RoKSB8fCAwOyAvLyB8fCAwIOyehOyLnFxyXG4gICAgICAgIGJ5dGVFbGVtZW50LmlubmVyVGV4dCA9IHN0cmluZ0J5dGVMZW5ndGg7XHJcbiAgICAgICAgdmFyIGlzTWF4aW11bSA9IHN0cmluZ0J5dGVMZW5ndGggPiBCWVRFX01BWElNVU07XHJcbiAgICAgICAgaWYgKGlzTWF4aW11bSkge1xyXG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF1dG9FeHBhbmQodGFyZ2V0KTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgYXV0b0V4cGFuZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xyXG4gICAgZmllbGQuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xyXG4gICAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZmllbGQpO1xyXG4gICAgdmFyIGhlaWdodCA9IGZpZWxkLnNjcm9sbEhlaWdodCArIHBhcnNlSW50KGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSk7XHJcbiAgICBmaWVsZC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGlucHV0VGV4dGFyZWE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVjRkR0Z5WldFdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowWlhoMFlYSmxZUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVUwc1lVRkJZU3hIUVVGSE8wbEJRM0JDTEhWRVFVRjFSRHRKUVVOMlJDeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3p0UlFVTTVRaXhKUVVGQkxIRkNRVUZOTEVOQlFXVTdVVUZETjBJc1NVRkJTU3hOUVVGTk8xbEJRVVVzVDBGQlRUdFJRVVZzUWl4SlFVRk5MRlZCUVZVc1IwRkJSeXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSVUZCUlN4TFFVRkxMRlZCUVZVc1EwRkJRVHRSUVVNdlJDeEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVRkZMRTlCUVUwN1VVRkZka0lzU1VGQlRTeFpRVUZaTEVkQlFVY3NSVUZCUlN4RFFVRkJPMUZCUlhaQ0xFbEJRVTBzVjBGQlZ5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUVR0UlFVTTFSU3hKUVVGSkxFTkJRVU1zVjBGQlZ6dFpRVUZGTEU5QlFVMDdVVUZGZUVJc1NVRkJUU3huUWtGQlowSXNSMEZCUnl4RFFVRkJMRTFCUVUwc1lVRkJUaXhOUVVGTkxIVkNRVUZPTEUxQlFVMHNRMEZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExEWkNRVUUyUWl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFdEJRVWtzUTBGQlF5eERRVUZCTEVOQlFVTXNWVUZCVlR0UlFVTTVSeXhYUVVGWExFTkJRVU1zVTBGQlV5eEhRVUZITEdkQ1FVRm5RaXhEUVVGQk8xRkJSWGhETEVsQlFVMHNVMEZCVXl4SFFVRkhMR2RDUVVGblFpeEhRVUZITEZsQlFWa3NRMEZCUVR0UlFVTnFSQ3hKUVVGSkxGTkJRVk1zUlVGQlJUdFpRVU5pTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0VFFVTTVRenRoUVVGTk8xbEJRMHdzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFOQlEycEVPMUZCUlVRc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZCTzBsQlEzQkNMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNTVUZCVFN4VlFVRlZMRWRCUVVjc1ZVRkJRU3hMUVVGTE8wbEJRM1JDTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlFUdEpRVVU1UWl4SlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGREwwTXNTVUZCVFN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU16Uml4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlRTeE5RVUZOTEU5QlFVa3NRMEZCUVR0QlFVTndReXhEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4aFFVRmhMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBUT0RPOiDsl6zrn6zrsogg67CY67O17ZW07IScIOyYrOuguOydhCDrlYwgZmlsZWxpc3Qg64iE7KCB65CY64qU7KeAP1xyXG4vLyBUT0RPOiDrj5nsnbztlZwg7YyM7J287J2EIOyXheuhnOuTnCDtlojsnYQg65WMIOyytO2BrCwg7IKt7KCc7ZaI7J2EIOuVjCBmaWxlTGlzdOyXkOyEnCDsgq3soJwsIGZpbGVJbnB1dC5maWxlc+uKlCDsjJPsnbTsp4Ag7JWK7J2MLlxyXG52YXIgYXR0YWNoRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBmaWxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1pbnB1dCcpO1xyXG4gICAgaWYgKCFmaWxlSW5wdXQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gY29uc3QgZmlsZVN1Ym1pdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLXN1Ym1pdCcpO1xyXG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF0dGFjaChmaWxlSW5wdXQpOyB9KTtcclxufTtcclxuZnVuY3Rpb24gYXR0YWNoKGZpbGVJbnB1dCkge1xyXG4gICAgdmFyIGZpbGVzID0gZmlsZUlucHV0LmZpbGVzO1xyXG4gICAgdmFyIGF0dGFjaG1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1saXN0Jyk7XHJcbiAgICB2YXIgYXR0YWNobWVudEhlbHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtaGVscGVyJyk7XHJcbiAgICBpZiAoIWZpbGVzIHx8ICFhdHRhY2htZW50TGlzdCB8fCAhYXR0YWNobWVudEhlbHBlcilcclxuICAgICAgICByZXR1cm47XHJcbiAgICBhdHRhY2htZW50SGVscGVyLnN0eWxlLmRpc3BsYXkgPSBmaWxlcy5sZW5ndGggIT09IDAgPyAnbm9uZScgOiAnYmxvY2snO1xyXG4gICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgIGlmICghdmFsaWRGaWxlVHlwZShmaWxlKSlcclxuICAgICAgICAgICAgcmV0dXJuIGFsZXJ0KCftjIzsnbztg4DsnoUganBlZyBwanBlZyBwbmcg7KSRIO2VmOuCmOqwgCDslYTri4jslbx+Jyk7XHJcbiAgICAgICAgdmFyIGZpbGVUZW1wbGF0ZSA9IFwiXFxuXFx0XFx0XFx0PGEgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtXFxcIiBocmVmPVxcXCJcXFwiPlxcblxcdFxcdFxcdFxcdDxmaWd1cmUgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLWltYWdlXFxcIj48aW1nIHNyYz1cIiArIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpICsgXCIgYWx0PVwiICsgZmlsZS5uYW1lICsgXCI+PC9maWd1cmU+XFxuXFx0XFx0XFx0XFx0PGIgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLW5hbWVcXFwiIGhyZWY9XFxcIiNcXFwiPlwiICsgZmlsZS5uYW1lICsgXCI8L2I+XFxuXFx0XFx0XFx0XFx0PHNtYWxsIGNsYXNzPVxcXCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1zaXplXFxcIiA+XCIgKyByZXR1cm5GaWxlU2l6ZShmaWxlLnNpemUpICsgXCI8L3NtYWxsPlxcblxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLWRlbGV0ZSBqcy1yZW1vdmUtdGhpc1xcXCI+PGkgY2xhc3M9XFxcImljb24tY2xvc2VcXFwiPjwvaT48L2J1dHRvbj5cXG5cXHRcXHRcXHQ8L2E+XCI7XHJcbiAgICAgICAgYXR0YWNobWVudExpc3QuaW5uZXJIVE1MICs9IGZpbGVUZW1wbGF0ZTtcclxuICAgICAgICAvLyBhdHRhY2htZW50TGlzdC5hcHBlbmQoZmlsZVRlbXBsYXRlKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkRmlsZVR5cGUoZmlsZSkge1xyXG4gICAgdmFyIGZpbGVUeXBlcyA9IFsnaW1hZ2UvanBlZycsICdpbWFnZS9naWYnLCAnaW1hZ2UvcG5nJ107XHJcbiAgICB2YXIgaXNWYWxpZCA9IGZpbGVUeXBlcy5pbmRleE9mKGZpbGUudHlwZSkgPiAtMTtcclxuICAgIC8vIGNvbnN0IGlzVmFsaWQgPSBmaWxlVHlwZXMuaW5jbHVkZXMoZmlsZS50eXBlKTtcclxuICAgIGlmIChpc1ZhbGlkKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIHJldHVybkZpbGVTaXplKHNpemUpIHtcclxuICAgIHZhciBpc0J5dGVzID0gc2l6ZSA8IDEwMjQ7XHJcbiAgICB2YXIgaXNLaWxvQnl0ZXMgPSBzaXplID49IDEwMjQgJiYgc2l6ZSA8IDEwNDg1NzY7XHJcbiAgICBpZiAoaXNCeXRlcylcclxuICAgICAgICByZXR1cm4gc2l6ZSArIFwiYnl0ZXNcIjtcclxuICAgIGVsc2UgaWYgKGlzS2lsb0J5dGVzKVxyXG4gICAgICAgIHJldHVybiAoc2l6ZSAvIDEwMjQpLnRvRml4ZWQoMikgKyBcIktCXCI7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIChzaXplIC8gMTA0ODU3NikudG9GaXhlZCgyKSArIFwiTUJcIjtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBhdHRhY2hGaWxlO1xyXG4vLyBmaWxlU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG4vLyBcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbi8vIFx0ZmlsZUxpc3QuZm9yRWFjaChmaWxlID0+IHtcclxuLy8gXHRcdHNlbmRGaWxlKGZpbGUpO1xyXG4vLyBcdH0pO1xyXG4vLyB9KTtcclxuLy8gZnVuY3Rpb24gdmFsaWRGaWxlU2l6ZShmaWxlKSB7XHJcbi8vIFx0YXR0YWNoZWRmaWxlcyA9IGZpbGUuZmlsZXM7XHJcbi8vIFx0aWYoYXR0YWNoZWRmaWxlcy5sZW5ndGggPT09IDApIHJldHVybjtcclxuLy8gXHRpZihhdHRhY2hlZGZpbGVzWzBdLnNpemUgPiA3NSAqIDEwMjQpIHtcclxuLy8gXHRcdGZpbGVJbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnVGhlIHNlbGVjdGVkIGZpbGUgbXVzdCBub3QgYmUgbGFyZ2VyIHRoYW4gNzUga0InKTtcclxuLy8gXHRcdHJldHVybjtcclxuLy8gXHR9XHJcbi8vIFx0ZmlsZUlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcclxuLy8gfVxyXG4vLyBmdW5jdGlvbiBzZW5kRmlsZShmaWxlKSB7XHJcbi8vIFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuLy8gXHRjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbi8vIFx0Zm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XHJcbi8vIFx0cmVxdWVzdC5vcGVuKCdwb3N0JywgJycpO1xyXG4vLyBcdHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7XHJcbi8vIH1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWm1sc1pTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW1acGJHVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeDFRMEZCZFVNN1FVRkRka01zTkVWQlFUUkZPMEZCUXpWRkxFbEJRVTBzVlVGQlZTeEhRVUZITzBsQlEycENMRWxCUVUwc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXMUNMR2RDUVVGblFpeERRVUZETEVOQlFVRTdTVUZETlVVc1NVRkJTU3hEUVVGRExGTkJRVk03VVVGQlJTeFBRVUZOTzBsQlEzUkNMR2RGUVVGblJUdEpRVU5vUlN4VFFVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFXcENMRU5CUVdsQ0xFTkJRVU1zUTBGQlFUdEJRVU12UkN4RFFVRkRMRU5CUVVFN1FVRkZSQ3hUUVVGVExFMUJRVTBzUTBGQlF5eFRRVUV5UWp0SlFVTnFReXhKUVVGQkxIVkNRVUZMTEVOQlFXTTdTVUZETTBJc1NVRkJUU3hqUVVGakxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl3d1FrRkJNRUlzUTBGQlF5eERRVUZCTzBsQlEzUkdMRWxCUVUwc1owSkJRV2RDTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXcwUWtGQk5FSXNRMEZCUXl4RFFVRkJPMGxCUXpGR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4alFVRmpMRWxCUVVrc1EwRkJReXhuUWtGQlowSTdVVUZCUlN4UFFVRk5PMGxCUlRGRUxHZENRVUZuUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkJPMGxCUlhSRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzU1VGQlNUdFJRVU0xUWl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRMR2REUVVGblF5eERRVUZETEVOQlFVRTdVVUZGZUVVc1NVRkJUU3haUVVGWkxFZEJRVWNzZVVoQlJXbERMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxEaEZRVU4yUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hyUlVGRFlpeGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh4U1VGRmFrVXNRMEZCUVR0UlFVVktMR05CUVdNc1EwRkJReXhUUVVGVExFbEJRVWtzV1VGQldTeERRVUZCTzFGQlEzaERMSFZEUVVGMVF6dEpRVU42UXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZUTEdGQlFXRXNRMEZCUXl4SlFVRkpPMGxCUTNwQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNXVUZCV1N4RlFVRkZMRmRCUVZjc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlFUdEpRVU14UkN4SlFVRk5MRTlCUVU4c1IwRkJSeXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5xUkN4cFJFRkJhVVE3U1VGRmFrUXNTVUZCU1N4UFFVRlBPMUZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVUU3UVVGRE1VSXNRMEZCUXp0QlFVVkVMRk5CUVZNc1kwRkJZeXhEUVVGRExFbEJRVWs3U1VGRE1VSXNTVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlFUdEpRVU16UWl4SlFVRk5MRmRCUVZjc1IwRkJSeXhKUVVGSkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVFN1NVRkZiRVFzU1VGQlNTeFBRVUZQTzFGQlFVVXNUMEZCVlN4SlFVRkpMRlZCUVU4c1EwRkJRVHRUUVVNM1FpeEpRVUZKTEZkQlFWYzdVVUZCUlN4UFFVRlZMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTU3hEUVVGQk96dFJRVU4yUkN4UFFVRlZMRU5CUVVNc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTU3hEUVVGQk8wRkJRMmhFTEVOQlFVTTdRVUZGUkN4clFrRkJaU3hWUVVGVkxFTkJRVUU3UVVGRmVrSXNjVVJCUVhGRU8wRkJRM0pFTERKQ1FVRXlRanRCUVVNelFpdzRRa0ZCT0VJN1FVRkRPVUlzYjBKQlFXOUNPMEZCUTNCQ0xFOUJRVTg3UVVGRFVDeE5RVUZOTzBGQlJVNHNhVU5CUVdsRE8wRkJRMnBETEN0Q1FVRXJRanRCUVVNdlFpd3dRMEZCTUVNN1FVRkZNVU1zTWtOQlFUSkRPMEZCUXpORExHOUdRVUZ2Ump0QlFVTndSaXhaUVVGWk8wRkJRMW9zUzBGQlN6dEJRVU5NTEc5RFFVRnZRenRCUVVOd1F5eEpRVUZKTzBGQlJVb3NORUpCUVRSQ08wRkJRelZDTEc5RFFVRnZRenRCUVVOd1F5eDVRMEZCZVVNN1FVRkZla01zSzBKQlFTdENPMEZCUXk5Q0xEWkNRVUUyUWp0QlFVTTNRaXd5UWtGQk1rSTdRVUZETTBJc1NVRkJTU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGlucHV0TnVtYmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5ZG93bjogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd24gLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZXZlbnQpID0+IHtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5cHJlc3MgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXVwOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5dXAgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2U6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2UgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2lucHV0OiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygnaW5wdXQgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8g67Cp7Zal7YKk66GcIOyhsOygiO2VoCDrlYwgbWluIG1heCDsobDqsbTsl5Ag6rG466aw64ukLlxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgdmFyIGlzTnVtYmVySW5wdXQgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLW51bWJlci1pbnB1dCcpO1xyXG4gICAgICAgIGlmICghaXNOdW1iZXJJbnB1dClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgc2V0TGltaXROdW1iZXIpO1xyXG4gICAgICAgIHNldElucHV0T25seU51bWJlcnMoKTtcclxuICAgICAgICBmdW5jdGlvbiBzZXRJbnB1dE9ubHlOdW1iZXJzKCkge1xyXG4gICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XHJcbiAgICAgICAgICAgIHZhciBrZXlDb2RlcyA9IFs2OSwgMTg5LCAxODcsIDE5MF07XHJcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkID0ga2V5Q29kZXMuaW5jbHVkZXMoa2V5Q29kZSk7XHJcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgLy8gdGFyZ2V0LnZhbHVlLmxlbmd0aCA9PT0gMCAmJiBrZXlDb2RlID09PSA0OCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyBrZXlDb2RlID49IDQ4IHx8IGtleUNvZGUgPD0gNTcgfHwgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gNjkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gMTg5ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDE4NyAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSAxOTAgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0TGltaXROdW1iZXIoKSB7XHJcbiAgICAgICAgICAgIHZhciBNQVhJTVVNID0gMzAwO1xyXG4gICAgICAgICAgICB2YXIgTUlOSU1VTiA9IDA7XHJcbiAgICAgICAgICAgIHZhciBpc0ZpcnN0UGxhY2VkWmVybyA9IC8oXjArKS8udGVzdCh0YXJnZXQudmFsdWUpO1xyXG4gICAgICAgICAgICB2YXIgaXNNYXhpbXVtID0gTnVtYmVyKHRhcmdldC52YWx1ZSkgPj0gTUFYSU1VTTtcclxuICAgICAgICAgICAgdmFyIGlzTGVuZ3RoID0gdGFyZ2V0LnZhbHVlLmxlbmd0aCA+IE1JTklNVU47XHJcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0UGxhY2VkWmVybylcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IE1JTklNVU47XHJcbiAgICAgICAgICAgIGlmIChpc0xlbmd0aClcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IHRhcmdldC52YWx1ZS5zbGljZSgwLCAzKTtcclxuICAgICAgICAgICAgaWYgKGlzTWF4aW11bSlcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IE1BWElNVU07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGlucHV0TnVtYmVyO1xyXG4vLyBleHBvcnQgY29uc3QgaW5wdXRxdWFudGl0eSA9ICgpID0+IHtcclxuLy8gXHRjb25zdCBxdWFudGl0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1xdWFudGl0eScpO1xyXG4vLyBcdGNvbnN0IGlucHV0ID0gcXVhbnRpdHkucXVlcnlTZWxlY3RvcignLmpzLXF1YW50aXR5LWlucHV0Jyk7XHJcbi8vIFx0Y29uc3QgZGVjcmVtZW50ID0gcXVhbnRpdHkucXVlcnlTZWxlY3RvcignLmpzLXF1YW50aXR5LWRlY3JlbWVudCcpO1xyXG4vLyBcdGNvbnN0IGluY3JlbWVudCA9IHF1YW50aXR5LnF1ZXJ5U2VsZWN0b3IoJy5qcy1xdWFudGl0eS1pbmNyZW1lbnQnKTtcclxuLy8gXHRsZXQgdmFsdWUgPSBpbnB1dC52YWx1ZTtcclxuLy8gXHRjb25zdCBNSU5fVkFMVUUgPSAwO1xyXG4vLyBcdGNvbnN0IE1BWF9WQUxVRSA9IDEwO1xyXG4vLyBcdGxldFx0aXNNaW5pbXVuO1xyXG4vLyBcdGxldCBpc01heGltdW07XHJcbi8vIFx0Ly8gY29uc3RcdGlzTWluaW11biA9IE51bWJlcih2YWx1ZSkgPD0gTUlOX1ZBTFVFO1xyXG4vLyBcdC8vIGNvbnN0IGlzTWF4aW11bSA9IE51bWJlcih2YWx1ZSkgPj0gTUFYX1ZBTFVFO1xyXG4vLyBcdC8vIGlmKGlzTWluaW11bikgc2V0RGlzYWJsZURlY3JlbWVudCgpO1xyXG4vLyBcdC8vIGlmKGlzTWF4aW11bSkgc2V0RGlzYWJsZUllY3JlbWVudCgpO1xyXG4vLyBcdGRlY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuLy8gXHRcdGlzTWluaW11biA9IE51bWJlcih2YWx1ZSkgPD0gTUlOX1ZBTFVFO1xyXG4vLyBcdFx0aXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XHJcbi8vIFx0XHRpZihpc01pbmltdW4pIHtcclxuLy8gXHRcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcbi8vIFx0XHRcdHJldHVybjtcclxuLy8gXHRcdH1cclxuLy8gXHRcdGlmKCFpc01heGltdW0pIHtcclxuLy8gXHRcdFx0aW5jcmVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XHJcbi8vIFx0XHR9XHJcbi8vIFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSkgLSAxO1xyXG4vLyBcdH0pO1xyXG4vLyBcdGluY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuLy8gXHRcdGlzTWluaW11biA9IE51bWJlcih2YWx1ZSkgPD0gTUlOX1ZBTFVFO1xyXG4vLyBcdFx0aXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XHJcbi8vIFx0XHRjb25zb2xlLmxvZyhpc01pbmltdW4sIGlzTWF4aW11bSwgdmFsdWUpO1xyXG4vLyBcdFx0aWYoaXNNYXhpbXVtKSB7XHJcbi8vIFx0XHRcdGluY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG4vLyBcdFx0XHRyZXR1cm47XHJcbi8vIFx0XHR9XHJcbi8vIFx0XHRpZighaXNNaW5pbXVuKSB7XHJcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xyXG4vLyBcdFx0fVxyXG4vLyBcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpICsgMTtcclxuLy8gXHR9KTtcclxuLy8gXHRmdW5jdGlvbiBzZXREaXNhYmxlRGVjcmVtZW50KCkge1xyXG4vLyBcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcbi8vIFx0XHRyZXR1cm47XHJcbi8vIFx0fVxyXG4vLyBcdGZ1bmN0aW9uIHNldERpc2FibGVJZWNyZW1lbnQoKSB7XHJcbi8vIFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuLy8gXHRcdHJldHVybjtcclxuLy8gXHR9XHJcbi8vIH07XHJcbi8vIHZhbHVlID0gaXNOYU4odmFsdWUpID8gMCA6IHZhbHVlO1xyXG4vLyB2YWx1ZSA8IDEgPyB2YWx1ZSA9IDEgOiAnJztcclxuLy8gdmFsdWUtLTtcclxuLy8gcGFyc2VJbnQgdnMgTnVtYmVyID0+IOyIq+yekOuhnCDsi5zsnpHtlZjrqbQg7Iir7J6Q66W8IOyggOyepSDslYTri4jrqbQgTmFOXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgdmFyIGlucHV0RWxlbWVudCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy1xdWFudGl0eS1pbnB1dCcpO1xyXG4gICAgdmFyIGRlY3JlbWVudEVsZW1lbnQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtcXVhbnRpdHktZGVjcmVtZW50Jyk7XHJcbiAgICB2YXIgaW5jcmVtZW50RWxlbWVudCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy1xdWFudGl0eS1pbmNyZW1lbnQnKTtcclxuICAgIHZhciBNSU5fVkFMVUUgPSAwO1xyXG4gICAgdmFyIE1BWF9WQUxVRSA9IDEwO1xyXG4gICAgdmFyIERJU0FCTEVEX0NMQVNTID0gJ2lzLWRpc2FibGVkJztcclxuICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXF1YW50aXR5LWRlY3JlbWVudCcpKSB7XHJcbiAgICAgICAgLS1pbnB1dEVsZW1lbnQudmFsdWU7XHJcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudC52YWx1ZSA8PSBNSU5fVkFMVUUpXHJcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcclxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbHVlIDwgTUFYX1ZBTFVFKVxyXG4gICAgICAgICAgICBpbmNyZW1lbnRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgIH1cclxuICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXF1YW50aXR5LWluY3JlbWVudCcpKSB7XHJcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudC52YWx1ZSA9PT0gTUFYX1ZBTFVFKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgKytpbnB1dEVsZW1lbnQudmFsdWU7XHJcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudC52YWx1ZSA+PSBNQVhfVkFMVUUpXHJcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcclxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbHVlID4gTUlOX1ZBTFVFKVxyXG4gICAgICAgICAgICBkZWNyZW1lbnRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgIH1cclxufSk7XHJcbi8vIGZ1bmN0aW9uIHNldFN0cmluZ0J5dGVzKCkge31cclxuLy8gZXhwb3J0IGNvbnN0IGlucHV0ID0ge1xyXG4vLyBcdHRleHRhcmVhOiBpbnB1dFRleHRhcmVhKCksXHJcbi8vIFx0bnVtYmVyOiBpbnB1dE51bWJlcigpXHJcbi8vIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJuVnRZbVZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2liblZ0WW1WeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUU3hYUVVGWExFZEJRVWM3U1VGRGJFSXNiMFJCUVc5RU8wbEJRM0JFTEdsRVFVRnBSRHRKUVVOcVJDeHpSRUZCYzBRN1NVRkRkRVFzVFVGQlRUdEpRVU5PTEhGRVFVRnhSRHRKUVVOeVJDeHJSRUZCYTBRN1NVRkRiRVFzZFVSQlFYVkVPMGxCUTNaRUxFMUJRVTA3U1VGRFRpeHJSRUZCYTBRN1NVRkRiRVFzSzBOQlFTdERPMGxCUXk5RExHOUVRVUZ2UkR0SlFVTndSQ3hOUVVGTk8wbEJRMDRzYlVSQlFXMUVPMGxCUTI1RUxHZEVRVUZuUkR0SlFVTm9SQ3h4UkVGQmNVUTdTVUZEY2tRc1RVRkJUVHRKUVVOT0xHdEVRVUZyUkR0SlFVTnNSQ3dyUTBGQkswTTdTVUZETDBNc2IwUkJRVzlFTzBsQlEzQkVMRTFCUVUwN1NVRkZUaXc0UWtGQk9FSTdTVUZET1VJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGQkxFdEJRVXM3VVVGRGFFTXNTVUZCUVN4eFFrRkJUU3hEUVVGbE8xRkJSVGRDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHRSUVVONFJDeEpRVUZKTEVOQlFVTXNZVUZCWVR0WlFVRkZMRTlCUVUwN1VVRkZNVUlzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUVR0UlFVTnNSQ3h0UWtGQmJVSXNSVUZCUlN4RFFVRkJPMUZCUlhKQ0xGTkJRVk1zYlVKQlFXMUNPMWxCUTJ4Q0xFbEJRVUVzZFVKQlFVOHNRMEZCVlR0WlFVTjZRaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzFsQlEzQkRMRWxCUVUwc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1dVRkRNVU1zU1VGQlNTeFBRVUZQTzJkQ1FVRkZMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdFpRVU51UXl4NVJVRkJlVVU3V1VGRGVrVXNORVJCUVRSRU8xbEJRelZFTERSRFFVRTBRenRaUVVNMVF5dzJRMEZCTmtNN1dVRkROME1zTmtOQlFUWkRPMWxCUXpkRExEWkRRVUUyUXp0UlFVTXZReXhEUVVGRE8xRkJRMFFzVTBGQlV5eGpRVUZqTzFsQlEzSkNMRWxCUVUwc1QwRkJUeXhIUVVGSExFZEJRVWNzUTBGQlFUdFpRVU51UWl4SlFVRk5MRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVUU3V1VGRGFrSXNTVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdFpRVU53UkN4SlFVRk5MRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRTlCUVU4c1EwRkJRVHRaUVVOcVJDeEpRVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZGT1VNc1NVRkJTU3hwUWtGQmFVSTdaMEpCUVVVc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZETjBNc1NVRkJTU3hSUVVGUk8yZENRVUZGTEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRM0pFTEVsQlFVa3NVMEZCVXp0blFrRkJSU3hOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUVR0UlFVTjJReXhEUVVGRE8wbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hyUWtGQlpTeFhRVUZYTEVOQlFVRTdRVUZGTVVJc2RVTkJRWFZETzBGQlEzWkRMRFJFUVVFMFJEdEJRVU0xUkN3clJFRkJLMFE3UVVGREwwUXNkVVZCUVhWRk8wRkJRM1pGTEhWRlFVRjFSVHRCUVVWMlJTdzBRa0ZCTkVJN1FVRkROVUlzZDBKQlFYZENPMEZCUTNoQ0xIbENRVUY1UWp0QlFVTjZRaXhyUWtGQmEwSTdRVUZEYkVJc2EwSkJRV3RDTzBGQlEyeENMRzlFUVVGdlJEdEJRVU53UkN4dlJFRkJiMFE3UVVGRmNFUXNNa05CUVRKRE8wRkJRek5ETERKRFFVRXlRenRCUVVVelF5eHJSRUZCYTBRN1FVRkRiRVFzTkVOQlFUUkRPMEZCUXpWRExEUkRRVUUwUXp0QlFVTTFReXh2UWtGQmIwSTdRVUZEY0VJc05rTkJRVFpETzBGQlF6ZERMR0ZCUVdFN1FVRkRZaXhOUVVGTk8wRkJRMDRzY1VKQlFYRkNPMEZCUTNKQ0xHZEVRVUZuUkR0QlFVTm9SQ3hOUVVGTk8wRkJSVTRzSzBKQlFTdENPMEZCUXk5Q0xFOUJRVTg3UVVGRFVDeHJSRUZCYTBRN1FVRkRiRVFzTkVOQlFUUkRPMEZCUXpWRExEUkRRVUUwUXp0QlFVTTFReXc0UTBGQk9FTTdRVUZET1VNc2IwSkJRVzlDTzBGQlEzQkNMRFpEUVVFMlF6dEJRVU0zUXl4aFFVRmhPMEZCUTJJc1RVRkJUVHRCUVVOT0xIRkNRVUZ4UWp0QlFVTnlRaXhuUkVGQlowUTdRVUZEYUVRc1RVRkJUVHRCUVVWT0xDdENRVUVyUWp0QlFVTXZRaXhQUVVGUE8wRkJSVkFzYjBOQlFXOURPMEZCUTNCRExEUkRRVUUwUXp0QlFVTTFReXhaUVVGWk8wRkJRMW9zUzBGQlN6dEJRVU5NTEc5RFFVRnZRenRCUVVOd1F5dzBRMEZCTkVNN1FVRkROVU1zV1VGQldUdEJRVU5hTEV0QlFVczdRVUZEVEN4TFFVRkxPMEZCUlV3c2IwTkJRVzlETzBGQlEzQkRMRGhDUVVFNFFqdEJRVU01UWl4WFFVRlhPMEZCUlZnc1owUkJRV2RFTzBGQlEyaEVMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJRU3hMUVVGTE8wbEJRemxDTEVsQlFVRXNjVUpCUVUwc1EwRkJaVHRKUVVNM1FpeEpRVUZOTEZsQlFWa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHRkJRV0VzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGQk8wbEJRekZGTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNRMEZCUVR0SlFVTnNSaXhKUVVGTkxHZENRVUZuUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zWVVGQllTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVUU3U1VGRGJFWXNTVUZCVFN4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJRMjVDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRVHRKUVVOd1FpeEpRVUZOTEdOQlFXTXNSMEZCUnl4aFFVRmhMRU5CUVVFN1NVRkZjRU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVWQlFVVTdVVUZETlVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZCTzFGQlJYQkNMRWxCUVVrc1dVRkJXU3hEUVVGRExFdEJRVXNzU1VGQlNTeFRRVUZUTzFsQlFVVXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhWUVVGVkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdVVUZETlVVc1NVRkJTU3haUVVGWkxFTkJRVU1zUzBGQlN5eEhRVUZITEZOQlFWTTdXVUZCUlN4blFrRkJaMElzUTBGQlF5eGxRVUZsTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1MwRkRha1k3U1VGRFJDeEpRVUZKTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNSVUZCUlR0UlFVTTFReXhKUVVGSkxGbEJRVmtzUTBGQlF5eExRVUZMTEV0QlFVc3NVMEZCVXp0WlFVRkZMRTlCUVUwN1VVRkZOVU1zUlVGQlJTeFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkJPMUZCUlhCQ0xFbEJRVWtzV1VGQldTeERRVUZETEV0QlFVc3NTVUZCU1N4VFFVRlRPMWxCUVVVc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1VVRkROVVVzU1VGQlNTeFpRVUZaTEVOQlFVTXNTMEZCU3l4SFFVRkhMRk5CUVZNN1dVRkJSU3huUWtGQlowSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3UzBGRGFrWTdRVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVWR0xDdENRVUVyUWp0QlFVVXZRaXg1UWtGQmVVSTdRVUZEZWtJc09FSkJRVGhDTzBGQlF6bENMSGxDUVVGNVFqdEJRVU42UWl4TFFVRkxJbjA9Il0sInNvdXJjZVJvb3QiOiIifQ==