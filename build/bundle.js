!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function c(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,r=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!(o=(o=c.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var c=i(n(2)),a=n(4),l=n(5),u=i(n(6)),s=i(n(18)),d=n(10);function f(){var e;return r(this,void 0,void 0,(function(){var t,n,r,i,a;return o(this,(function(o){switch(o.label){case 0:return[4,c.default()];case 1:return o.sent(),l.setDarkmode(),null===(e=document.querySelector(".textbox-toolbar-bold"))||void 0===e||e.addEventListener("click",(function(){return e="italic",t=null,alert(),void document.execCommand(e,!1,t);var e,t})),s.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).initialize(),s.default.file(),s.default.textarea(),s.default.number(),u.default.modal({selector:".js-modal"}).initialize(),u.default.toggleClass({selector:".js-toggle"}).initialize(),u.default.enterTarget({selector:".js-hover-trigger"}),u.default.tabMenu(),u.default.closeParentElement({selector:".js-close"}),u.default.toTop({selector:".js-to-top"}),u.default.stickyElement({targetElement:".js-header",addClass:"is-sticky-header",position:"top"}),u.default.stickyElement({targetElement:".js-post-head",addClass:"is-sticky-post-head",position:"bottom"}),u.default.scrollAnimation(),(f=document.querySelectorAll(".js-graph .graph-item"))&&f.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var r=parseInt(n.innerText);t.style.height=r+"px",n.style.bottom=r+"px"}})),l.carousel(),function(){var e=document.querySelectorAll(".js-view-password");if(0===e.length)return;e.forEach((function(e){return e.addEventListener("click",(function(){var t,n,r;return n=null===(t=null==e?void 0:e.parentNode)||void 0===t?void 0:t.querySelector("input"),r="password"===(null==n?void 0:n.getAttribute("type"))?"text":"password",void(null==n||n.setAttribute("type",r))}))}))}(),d=document.querySelector(".js-comment-write"),document.querySelectorAll(".js-comment-textfield").forEach((function(e){return e.addEventListener("focus",(function(){d.classList.add("is-focused")}))})),(t=document.querySelector(".js-input-test"))&&(t.addEventListener("keypress",(function(e){var t=e.which||e.keyCode;!(32===t)&&(t<48||t>57)&&e.preventDefault()})),n=t.value||"",t.addEventListener("input",(function(e){var t=e.target;/^[0-9\s]*$/.test(t.value)?n=t.value:t.value=n}))),r=document.querySelector(".js-display-list"),i=document.querySelector(".js-display-grid"),a=document.querySelector(".profile-body"),null==r||r.addEventListener("click",(function(){null==r||r.classList.add("is-selected"),null==i||i.classList.remove("is-selected"),null==a||a.classList.add("list")})),null==i||i.addEventListener("click",(function(){null==r||r.classList.remove("is-selected"),null==i||i.classList.add("is-selected"),null==a||a.classList.remove("list")})),[2]}var d,f}))}))}document.addEventListener("readystatechange",(function(e){var t=e.target.readyState;"loading"===t?console.log("loading..."):"interactive"===t?console.log("initLoader"):"complete"===t&&console.log("initApp")})),window.addEventListener("unload",(function(){return console.log("unload event")})),window.addEventListener("hashchange",f),window.addEventListener("hashchange",(function(){t=document.querySelector(".js-navbar-toggle"),t&&t.classList.contains("is-active")&&(t.classList.remove("is-active"),null===(e=t.nextElementSibling)||void 0===e||e.classList.remove("is-visible"));var e,t})),document.addEventListener("DOMContentLoaded",(function(){a.detectBrowser(),a.initializeLoader(),f(),u.default.toggleClass({selector:".js-navbar-toggle"}).initialize(),window.addEventListener("scroll",d.throttle((function(){var e=document.querySelector(".post"),t=document.querySelector(".post-head-progress");if(!e||!t)return;var n=window.pageYOffset/(e.scrollHeight-window.innerHeight)*100+"%";t.style.width=n})),!0)}))},function(e,t,n){},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function c(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,r=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!(o=(o=c.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});n(3),window.location.pathname;t.default=function(){return r(void 0,void 0,void 0,(function(){var e,t;return o(this,(function(n){switch(n.label){case 0:return(e=document.getElementById("view"))?(t=window.location.hash.substring(1),[4,fetch(t?"/views/"+t+".html":"/views/design.html").then((function(e){return e.text()})).then((function(t){return e.innerHTML=t})).catch((function(e){return console.warn("router: ",e)}))]):[2];case 1:return n.sent(),window.scrollTo(0,0),[2]}}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pushBrowserHistory=function(e,t,n){void 0===e&&(e={}),void 0===t&&(t=""),void 0===n&&(n=""),history.pushState(e,t,n)},t.backHistory=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initializeLoader=function(){document.addEventListener("DOMContentLoaded",(function(){document.body.classList.add("body-lock")})),window.addEventListener("load",(function(){var e=document.querySelector(".js-loader");if(!e)return;document.body.classList.remove("body-lock"),e.hidden=!0}))},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase(),n=t.indexOf("msie")>-1||t.indexOf("trident")>-1;e.hidden=!n}};t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return n(e)};n(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}function n(e){var t=document.body,n="fixed"===getComputedStyle(e).position;t.style.marginTop=n?e.clientHeight+"px":0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),r=e.querySelector(".slider-arrows-prev"),o=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&r&&o&&i){var c=t.offsetWidth,a=0;n.forEach((function(e){return a+=e.offsetWidth})),o.addEventListener("click",(function(){t.scrollLeft+=100})),r.addEventListener("click",(function(){t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",c)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");console.log(e),e&&(e.addEventListener("click",(function(){document.body.classList.toggle("theme-dark");var t=document.body.classList.contains("theme-dark");e.querySelector("input").checked=t,t?localStorage.setItem("theme","theme-dark"):localStorage.removeItem("theme")})),function(){var t=localStorage.getItem("theme");if(!t)return;document.body.classList.add(t);var n=document.body.classList.contains("theme-dark");e.querySelector("input").checked=n}())}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(7)),i=r(n(8)),c=r(n(9)),a=r(n(11)),l=r(n(12)),u=r(n(13)),s=r(n(14)),d=r(n(15)),f=r(n(16)),v=r(n(17));t.default={toggleClass:o.default,enterTarget:i.default,modal:a.default,tabMenu:c.default,toTop:l.default,stickyElement:u.default,scrollAnimation:s.default,scrollspy:v.default,closeParentElement:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",initialize:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(n){n.preventDefault(),n.stopPropagation(),e.toggle(t),e.triggers.forEach((function(t){n.target===t||e.remove(t)}))}))}),!1),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.remove(t)}))})))},toggle:function(e){var t=null==e?void 0:e.nextElementSibling;t&&(e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS)),t.classList.toggle(this.ACTIVE_CLASS2),t.addEventListener("click",(function(e){return e.stopPropagation()})))},remove:function(e){e.classList.remove(this.ACTIVE_CLASS),e.setAttribute("aria-expanded","true"),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)},clickOutbound:function(){}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);null==n||n.forEach((function(e){e.addEventListener("mouseenter",(function(){return function(e){var t=e.classList.contains("navbar-menu-item");e.setAttribute("aria-expanded","true"),t&&document.body.classList.add("is-shown")}(e)})),e.addEventListener("mouseleave",(function(){return function(e){var t=e.classList.contains("navbar-menu-item");e.setAttribute("aria-expanded","false"),t&&document.body.classList.remove("is-shown")}(e)}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10);t.default=function(){var e,t=document.querySelector(".profile-tablist-indicator"),n=null===(e=null==t?void 0:t.parentNode)||void 0===e?void 0:e.querySelector("[role=tab]");if(t&&n){var o=getComputedStyle(n).width;t.style.width=o,document.addEventListener("resize",(function(){return r.throttle(function(e,t){setTimeout((function(){e.style.width=t}),100)}(t,o))})),document.addEventListener("click",(function(e){var n=e.target,r=n.parentNode.querySelectorAll("[role=tab]"),o=n.parentNode.parentNode.querySelectorAll("[role=tabpanel]"),i=n.getAttribute("data-index");r&&n.closest("[role=tab]")&&(t.style.left=n.offsetLeft+"px",t.style.width=getComputedStyle(n).width,r.forEach((function(e){return e.setAttribute("aria-selected","false")})),n.setAttribute("aria-selected","true"),o.forEach((function(e){e.classList.add("hidden"),e.setAttribute("aria-hidden","true"),i===e.getAttribute("data-index")&&(e.classList.remove("hidden"),e.setAttribute("aria-hidden","hidden"))})))}),!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=function(e){var t;return function(){t&&window.cancelAnimationFrame(t),t=window.requestAnimationFrame((function(){return e()}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.default=function(e){var t=e.selector;return{modalTriggers:document.querySelectorAll(t),modalContainer:document.querySelector("#modal"),initialize:function(){var e=this;this.modalTriggers&&(document.removeEventListener("click",this.backHistory),this.modalTriggers.forEach((function(t){return t.addEventListener("click",(function(n){n.stopPropagation(),n.preventDefault();var o=t.dataset.modal;fetch("/views/"+o+".html").then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(t){if(e.modalContainer&&(e.modalContainer.innerHTML=t,e.showModal(window.pageYOffset),r.pushBrowserHistory({},"",o),document.body.classList.contains("is-modal-visible"))){var n=e.modalContainer.querySelector(".js-modal-close"),i=e.modalContainer.querySelector(".modal-dim");null==n||n.addEventListener("click",(function(e){return e.stopPropagation()})),null==n||n.addEventListener("click",e.backHistory),null==i||i.addEventListener("click",e.backHistory),window.addEventListener("popstate",(function(){return e.clearModal(e.modalContainer,pageYOffset)})),document.addEventListener("keydown",(function(t){27===t.keyCode&&e.backHistory()}),!0)}})).catch((function(e){return console.warn("modal Error")}))}))})))},showModal:function(e){document.body.classList.add("is-modal-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+e+"px"},clearModal:function(e,t){document.body.classList.remove("is-modal-visible"),document.body.classList.remove("body-lock"),e.innerHTML="",window.scrollTo(0,t)},backHistory:function(){history.back()}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10);t.default=function(e){var t=e.targetElement,n=e.addClass,o=e.position,i=document.querySelector(t);if(i){var c=i.offsetHeight;window.addEventListener("scroll",r.throttle((function(){var e=i.offsetTop,t=i.offsetTop+c;window.pageYOffset>("top"===o?e:t)?document.body.classList.add(n):document.body.classList.remove(n)})),!1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10);t.default=function(){var e=document.querySelectorAll(".js-scroll-animation");if(e){e.forEach((function(e){e.getBoundingClientRect().top<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",r.throttle((function(){e.forEach((function(e){e.getBoundingClientRect().top+.5*e.clientHeight<=window.innerHeight&&e.classList.add("is-scrolled")}))})),!1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);0!==n.length&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-loader-spinner");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,r=e.clientX,o=e.clientY;n.style.left=r+"px",n.style.top=o+"px"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10);t.default=function(e){var t=e.menusSelector,n=e.sectionsSelector,o=document.querySelectorAll(t),i=document.querySelectorAll(n);o&&i&&(i.forEach((function(e,t){e.addEventListener("click",(function(e){e.preventDefault();var n=o[t].offsetTop;window.scrollTo(0,n)}))})),window.addEventListener("scroll",r.throttle((function(){o.forEach((function(e,t){e.offsetTop<=window.pageYOffset+200&&(i.forEach((function(e){return e.classList.remove("is-active")})),i[t].classList.add("is-active"))}))})),!1))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(19)),i=r(n(20)),c=r(n(21)),a=r(n(22));t.default={checkbox:o.default,textarea:i.default,file:c.default,number:a.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),initialize:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckedAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckedEach(e.checkItems,e.checkAll)}))})))},setCheckedEach:function(e,t){var n=Array.from(e),r=n.every((function(e){return e.checked})),o=n.some((function(e){return e.checked}))&&!r;t.checked=r,t.indeterminate=o,t.dataset.indeterminate=o},setCheckedAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t=e.target;if(!t&&"textarea"===t.nodeName.toLowerCase()){var n=document.querySelector(".textfield-byte b");if(n){var o=(null==t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;n.innerText=o,o>30?t.parentNode.classList.add("is-invalid"):t.parentNode.classList.remove("is-invalid"),r(t)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),r=document.querySelector(".js-file-attachment-helper");if(!t||!n||!r)return;r.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,r,o='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,r=t>=1024&&t<1048576,t<1024?t+"bytes":r?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=o}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,r=n.value.length>0;e&&(n.value=0);r&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelector(".js-quantity-input"),r=t.parentNode.querySelector(".js-quantity-decrement"),o=t.parentNode.querySelector(".js-quantity-increment");if(t.closest(".js-quantity-decrement")&&(--n.value,n.value<=0&&t.setAttribute("disabled","true"),n.value<10&&o.removeAttribute("disabled")),t.closest(".js-quantity-increment")){if(10===n.value)return;++n.value,n.value>=10&&t.setAttribute("disabled","true"),n.value>0&&r.removeAttribute("disabled")}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3V0aWxzL2Jyb3dzZXJVdGlscy50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvbG9hZC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvc2V0RGFya01vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC90b2dnbGVDbGFzcy50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvZW50ZXJUYXJnZXQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3RhYk1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3V0aWxzL29wdGltaXphdGlvblV0aWxzLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9tb2RhbC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3N0aWNreUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2xvc2VQYXJlbnRFbGVtZW50LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9jdXN0b21DdXJzb3IudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbHNweS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L2NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC90ZXh0YXJlYS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvZmlsZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvbnVtYmVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwicm91dGVyXzEiLCJsb2FkXzEiLCJzZXREYXJrTW9kZV8xIiwiaW5kZXhfMSIsImluZGV4XzIiLCJvcHRpbWl6YXRpb25VdGlsc18xIiwiZG9tRXZlbnRzIiwiX2EiLCJpbnB1dFRlc3QiLCJjdXJyZW50VmFsdWVfMSIsImxpc3QiLCJncmlkIiwid29ya3MiLCJfYiIsImRlZmF1bHQiLCJzZXREYXJrbW9kZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb21tYW5kIiwiYWxlcnQiLCJleGVjQ29tbWFuZCIsImNoZWNrYm94IiwiY2hlY2tBbGxTZWxlY3RvciIsImNoZWNrU2VsZWN0b3IiLCJpbml0aWFsaXplIiwiZmlsZSIsInRleHRhcmVhIiwibnVtYmVyIiwibW9kYWwiLCJzZWxlY3RvciIsInRvZ2dsZUNsYXNzIiwiZW50ZXJUYXJnZXQiLCJ0YWJNZW51IiwiY2xvc2VQYXJlbnRFbGVtZW50IiwidG9Ub3AiLCJzdGlja3lFbGVtZW50IiwidGFyZ2V0RWxlbWVudCIsImFkZENsYXNzIiwicG9zaXRpb24iLCJzY3JvbGxBbmltYXRpb24iLCJncmFwaEl0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbGVtZW50IiwiZ3JhcGhJdGVtQmFyIiwiZ3JhcGhJdGVtVmFsdWUiLCJncmFwaFZhbHVlIiwicGFyc2VJbnQiLCJpbm5lclRleHQiLCJzdHlsZSIsImhlaWdodCIsImJvdHRvbSIsImNhcm91c2VsIiwiZWxlbWVudHMiLCJpbnB1dEVsZW1lbnQiLCJpbnB1dFR5cGUiLCJwYXJlbnROb2RlIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwicmV2ZWFsUGFzc3dvcmQiLCJjb21tZW50V3JpdGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJldmVudCIsIndoaWNoIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwidGVzdCIsInJlbW92ZSIsInJlYWR5U3RhdGUiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwibmF2aWdhdGlvblRyaWdnZXIiLCJjb250YWlucyIsIm5leHRFbGVtZW50U2libGluZyIsImRldGVjdEJyb3dzZXIiLCJpbml0aWFsaXplTG9hZGVyIiwidGhyb3R0bGUiLCJjb250YWluZXJFbGVtZW50IiwicHJvZ3Jlc3NCYXIiLCJzY3JvbGxQZXJjZW50IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxIZWlnaHQiLCJpbm5lckhlaWdodCIsIndpZHRoIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInZpZXciLCJoYXNoIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdWJzdHJpbmciLCJmZXRjaCIsInJlc3BvbnNlIiwidGV4dCIsImh0bWwiLCJpbm5lckhUTUwiLCJjYXRjaCIsImVycm9yIiwid2FybiIsInNjcm9sbFRvIiwicHVzaEJyb3dzZXJIaXN0b3J5Iiwic3RhdGUiLCJ0aXRsZSIsInVybCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJiYWNrSGlzdG9yeSIsImxvYWRlckVsZW1lbnQiLCJoaWRkZW4iLCJCcm93c2VyRWxlbWVudCIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInRvTG93ZXJDYXNlIiwiaXNJRUJyb3dzZXIiLCJpbmRleE9mIiwiYWRqdXN0VG9wUGFkZGluZyIsImhlYWRlckVsZW1lbnQiLCJmbiIsInNldEJvZHlNYXJnaW5Ub3AiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpc0ZpeGVkSGVhZGVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm1hcmdpblRvcCIsImNsaWVudEhlaWdodCIsImNhdGVnb3J5IiwiY2F0ZWdvcnlMaXN0IiwiY2F0ZWdvcnlMaXN0U2xpZGUiLCJjYXRlZ29yeU5hdmlnYXRpb25QcmV2IiwiY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCIsImNhdGVnb3J5RG90cyIsImNhdGVnb3J5Q29udGFpbmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsInN1bSIsIml0ZW0iLCJzY3JvbGxMZWZ0IiwiZGFya21vZGVCdXR0b24iLCJ0b2dnbGUiLCJpc0Rhcmttb2RlIiwiY2hlY2tlZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwibGFzdFRoZW1lIiwiZ2V0SXRlbSIsImxvYWRUaGVtZSIsInRvZ2dsZUNsYXNzXzEiLCJlbnRlclRhcmdldF8xIiwidGFiTWVudV8xIiwibW9kYWxfMSIsInRvVG9wXzEiLCJzdGlja3lFbGVtZW50XzEiLCJzY3JvbGxBbmltYXRpb25fMSIsImNsb3NlUGFyZW50RWxlbWVudF8xIiwiY3VzdG9tQ3Vyc29yXzEiLCJzY3JvbGxzcHlfMSIsInNjcm9sbHNweSIsImN1c3RvbUN1cnNvciIsInRyaWdnZXIiLCJ0cmlnZ2VycyIsIkFDVElWRV9DTEFTUyIsIkFDVElWRV9DTEFTUzIiLCJfdGhpcyIsInN0b3BQcm9wYWdhdGlvbiIsInRyaWdnZXJOZXh0RWxlbWVudCIsImNsaWNrT3V0Ym91bmQiLCJob3ZlckVsZW1lbnRzIiwiaXNOYXZpZ2F0aW9uIiwiZW50ZXJFdmVudCIsImxlYXZlRXZlbnQiLCJpbmRpY2F0b3JFbGVtZW50IiwiZmlyc3RUYWIiLCJmaXJzdFRhYldpZHRoIiwidGFiSW5kaWNhdG9yIiwic2V0VGltZW91dCIsImluaXRpYWxpemVJbmRpY2F0b3IiLCJ0YWJzIiwidGFiUGFuZWxzIiwidGFiSW5kZXgiLCJjbG9zZXN0IiwibGVmdCIsIm9mZnNldExlZnQiLCJ0YWIiLCJjYWxsYmFjayIsInRpbWVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJicm93c2VyVXRpbHNfMSIsIm1vZGFsVHJpZ2dlcnMiLCJtb2RhbENvbnRhaW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb2RhbEVsZW1lbnQiLCJtb2RhbElkIiwiZGF0YXNldCIsIm9rIiwic2hvd01vZGFsIiwiY2xvc2VFbGVtZW50IiwiZGltRWxlbWVudCIsImNsZWFyTW9kYWwiLCJ0b3AiLCJjb250YWluZXIiLCJiYWNrIiwidG9Ub3BFbGVtZW50IiwiZWxlbWVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsImVsZW1lbnRPZmZzZXRUb3AiLCJvZmZzZXRUb3AiLCJlbGVtZW50T2Zmc2V0Qm90dG9tIiwic2Nyb2xsRWxlbWVudHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbG9zZUVsZW1lbnRzIiwiY3Vyc29yIiwiaG92ZXJFbGVtZW50Iiwic2V0Q3Vyc29yIiwiY3Vyc29yRWxlbWVudCIsInNldFJpcHBsZSIsIngiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1lbnVzQ2xhc3MiLCJtZW51c1NlbGVjdG9yIiwic2VjdGlvbnNDbGFzcyIsInNlY3Rpb25zU2VsZWN0b3IiLCJzZWN0aW9ucyIsIm1lbnVzIiwiaW5kZXgiLCJ0YXJnZXRPZmZzZXRZIiwic2VjdGlvbiIsIm1lbnUiLCJjaGVja2JveF8xIiwidGV4dGFyZWFfMSIsImZpbGVfMSIsIm51bWJlcl8xIiwiY2hlY2tBbGwiLCJjaGVja0l0ZW1zIiwic2V0Q2hlY2tlZEFsbCIsImNoZWNrSXRlbSIsInNldENoZWNrZWRFYWNoIiwiY2hlY2tib3hFbGVtZW50cyIsIkFycmF5IiwiZnJvbSIsImlzQ2hlY2tlZEV2ZXJ5IiwiZXZlcnkiLCJpc0luZGV0ZXJtaW5hdGUiLCJzb21lIiwiaW5kZXRlcm1pbmF0ZSIsImF1dG9FeHBhbmQiLCJmaWVsZCIsImNvbXB1dGVkIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm5vZGVOYW1lIiwiYnl0ZUVsZW1lbnQiLCJzdHJpbmdCeXRlTGVuZ3RoIiwicmVwbGFjZSIsImZpbGVJbnB1dCIsImZpbGVzIiwiYXR0YWNobWVudExpc3QiLCJhdHRhY2htZW50SGVscGVyIiwiZGlzcGxheSIsInR5cGUiLCJ2YWxpZEZpbGVUeXBlIiwic2l6ZSIsImlzS2lsb0J5dGVzIiwiZmlsZVRlbXBsYXRlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwidG9GaXhlZCIsImF0dGFjaCIsImlzRmlyc3RQbGFjZWRaZXJvIiwiaXNNYXhpbXVtIiwiTnVtYmVyIiwiaXNMZW5ndGgiLCJzbGljZSIsImluY2x1ZGVzIiwiZGVjcmVtZW50RWxlbWVudCIsImluY3JlbWVudEVsZW1lbnQiLCJyZW1v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LEVBQWlCQyxnQkFBZ0IsYUFFckNqTixFQUFPaUgsUUFBUSwwQkFBMkIsQ0FDMUMsR0FWWSxLQVVSOUgsRUFBYTVHLE1BQ2IsU0FDRjRHLEVBQWE1RyxNQUNYNEcsRUFBYTVHLE9BYkwsSUFjUnlILEVBQU9ULGFBQWEsV0FBWSxRQUNoQ0osRUFBYTVHLE1BaEJMLEdBaUJSd1UsRUFBaUJFLGdCQUFnQiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5yZXF1aXJlKFwiLi9zdHlsZXNoZWV0cy9zdHlsZS5zY3NzXCIpO1xyXG52YXIgcm91dGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvcm91dGVyXCIpKTtcclxudmFyIGxvYWRfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2xvYWRcIik7XHJcbnZhciBzZXREYXJrTW9kZV8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvc2V0RGFya01vZGVcIik7XHJcbi8vIGltcG9ydCB7IGNvdW50RG93bkNsb2NrIH0gZnJvbSAnLi9qYXZhc2NyaXB0cy9jb3VudGRvd24nXHJcbnZhciBpbmRleF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2V2ZW50L2luZGV4XCIpKTtcclxudmFyIGluZGV4XzIgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvaW5wdXQvaW5kZXhcIikpO1xyXG52YXIgb3B0aW1pemF0aW9uVXRpbHNfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3V0aWxzL29wdGltaXphdGlvblV0aWxzXCIpO1xyXG4vLyBpbXBvcnQgeyB2YWxpZGl0eSB9IGZyb20gJy4vamF2YXNjcmlwdHMvdXRpbHMvdmFsaWRhdGlvbnMnXHJcbi8vIGltcG9ydCB7IGNvcHlDbGlwYm9hcmQgfSBmcm9tICcuL2phdmFzY3JpcHRzL3V0aWxzL2Zvcm1hdFV0aWxzLmpzJ1xyXG4vLyBjb25zdCBpc1Njcm9sbEVuZCA9IHdpbmRvdy5pbm5lckhlaWdodCArIHdpbmRvdy5wYWdlWU9mZnNldCA+PSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodFxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICB2YXIgcmVhZHlTdGF0ZSA9IGV2ZW50LnRhcmdldC5yZWFkeVN0YXRlO1xyXG4gICAgLy8gZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudCA/IHRydWVcclxuICAgIGlmIChyZWFkeVN0YXRlID09PSAnbG9hZGluZycpXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2xvYWRpbmcuLi4nKTtcclxuICAgIGVsc2UgaWYgKHJlYWR5U3RhdGUgPT09ICdpbnRlcmFjdGl2ZScpXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXRMb2FkZXInKTtcclxuICAgIGVsc2UgaWYgKHJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXRBcHAnKTtcclxufSk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zb2xlLmxvZygndW5sb2FkIGV2ZW50Jyk7IH0pO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGRvbUV2ZW50cyk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaW5pdGlhbGl6ZVBhZ2UpO1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgbG9hZF8xLmRldGVjdEJyb3dzZXIoKTtcclxuICAgIGxvYWRfMS5pbml0aWFsaXplTG9hZGVyKCk7XHJcbiAgICAvLyBpbml0aWFsaXplUGFnZSgpXHJcbiAgICBkb21FdmVudHMoKTtcclxuICAgIGluZGV4XzEuZGVmYXVsdC50b2dnbGVDbGFzcyh7IHNlbGVjdG9yOiAnLmpzLW5hdmJhci10b2dnbGUnIH0pLmluaXRpYWxpemUoKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvcHRpbWl6YXRpb25VdGlsc18xLnRocm90dGxlKHNjcm9sbFByb2dyZXNzKSwgdHJ1ZSk7XHJcbiAgICBmdW5jdGlvbiBzY3JvbGxQcm9ncmVzcygpIHtcclxuICAgICAgICB2YXIgY29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0Jyk7XHJcbiAgICAgICAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QtaGVhZC1wcm9ncmVzcycpO1xyXG4gICAgICAgIGlmICghY29udGFpbmVyRWxlbWVudCB8fCAhcHJvZ3Jlc3NCYXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgc2Nyb2xsUGVyY2VudCA9ICh3aW5kb3cucGFnZVlPZmZzZXQgLyAoY29udGFpbmVyRWxlbWVudC5zY3JvbGxIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQpKSAqIDEwMCArIFwiJVwiO1xyXG4gICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gc2Nyb2xsUGVyY2VudDtcclxuICAgIH1cclxufSk7XHJcbmZ1bmN0aW9uIGRvbUV2ZW50cygpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBmb3JtYXQoY29tbWFuZCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYWxlcnQoKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoY29tbWFuZCwgZmFsc2UsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc3QgdGhlbWVCdXR0b25FbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zeXN0ZW0tdGhlbWUgYnV0dG9uJylcclxuICAgICAgICAvLyBjb25zdCBBQ1RJVkVfQ0xBU1MgPSAnaXMtYWN0aXZlJ1xyXG4gICAgICAgIC8vIGxldCBjbGFzc2VzID0gW11cclxuICAgICAgICAvLyB0aGVtZUJ1dHRvbkVsZW1lbnRzPy5mb3JFYWNoKChidXR0b24sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgLy8gICAvLyBjbGFzc2VzLnB1c2goYnV0dG9uLmdldEF0dHJpYnV0ZSgnbmFtZScpKVxyXG4gICAgICAgIC8vICAgLy8gY29uc29sZS5sb2coY2xhc3NlcylcclxuICAgICAgICAvLyAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuICAgICAgICAvLyAgICAgLy8gaWYoaW5kZXggPT09IDEpIHtcclxuICAgICAgICAvLyAgICAgLy8gICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2lnbi1zeXN0ZW0tZGFubmduJylcclxuICAgICAgICAvLyAgICAgLy8gICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2Rlc2lnbi1zeXN0ZW0tbmV3bmVlaycpXHJcbiAgICAgICAgLy8gICAgIC8vIH1cclxuICAgICAgICAvLyAgICAgLy8gZWxzZSBpZiAoaW5kZXggPT09IDIpIHtcclxuICAgICAgICAvLyAgICAgLy8gICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2lnbi1zeXN0ZW0tbmV3bmVlaycpXHJcbiAgICAgICAgLy8gICAgIC8vICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdkZXNpZ24tc3lzdGVtLWRhbm5nbicpXHJcbiAgICAgICAgLy8gICAgIC8vIH1cclxuICAgICAgICAvLyAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIC8vICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdkZXNpZ24tc3lzdGVtLW5ld25lZWsnKVxyXG4gICAgICAgIC8vICAgICAvLyAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZGVzaWduLXN5c3RlbS1kYW5uZ24nKVxyXG4gICAgICAgIC8vICAgICAvLyB9XHJcbiAgICAgICAgLy8gICAgIHRoZW1lQnV0dG9uRWxlbWVudHM/LmZvckVhY2goYnV0dG9uMiA9PiB7XHJcbiAgICAgICAgLy8gICAgICAgY29uc3QgaXNUYXJnZXQgPSBldmVudC50YXJnZXQgPT09IGJ1dHRvbjJcclxuICAgICAgICAvLyAgICAgICBpZihpc1RhcmdldCkge1xyXG4gICAgICAgIC8vICAgICAgICAgYnV0dG9uMi5jbGFzc0xpc3QuYWRkKEFDVElWRV9DTEFTUylcclxuICAgICAgICAvLyAgICAgICAgIC8vIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChuYW1lKVxyXG4gICAgICAgIC8vICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICBlbHNlIGJ1dHRvbjIuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkVfQ0xBU1MpXHJcbiAgICAgICAgLy8gICAgIH0pXHJcbiAgICAgICAgLy8gICB9KVxyXG4gICAgICAgIC8vIH0pXHJcbiAgICAgICAgLy8gbGF6eUxvYWRpbmcoKVxyXG4gICAgICAgIGZ1bmN0aW9uIGxhenlMb2FkaW5nKCkge1xyXG4gICAgICAgICAgICBpZiAoJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgJiYgJ0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnknIGluIHdpbmRvdyAmJiAnaW50ZXJzZWN0aW9uUmF0aW8nIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhenlCYWNrZ3JvdW5kcyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnN1YnNjcmliZScpKTtcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogJzBweCAwcHggMHB4IDBweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkOiAwLjEsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyXzEgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgbGF6eUJhY2tncm91bmRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIG9ic2VydmVyXzEub2JzZXJ2ZShlbGVtZW50KTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soZW50cmllcywgb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZW50cnkgaXMgbm90IGluIHRoZSB2aWV3cG9ydCwgZG8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZW50cnkuaXNJbnRlcnNlY3RpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIG9ic2VydmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJylcclxuICAgICAgICAgICAgICAgICAgICAvLyBlbnRyeS50YXJnZXQuc3JjID0gZW50cnkudGFyZ2V0LmRhdGFzZXQuc3JjO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxhenlCYWNrZ3JvdW5kT2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZldGNoRGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgVVJMXzEsIHJlc3BvbnNlLCBkYXRhLCBlcnJvcl8xO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVVJMXzEgPSAnaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9wcm9mM3Nzb3JTdDN2My8xOTQ0ZTdiYTdmZmI2MmZlNzcxYzUxNzY0Zjc5NzdhNC9yYXcvYzU4YTM0MmFiMTQ5ZmJiYjliYjE5Yzk0ZTI3OGQ2NDcwMjgzMzI3MC9pbmZpbml0ZS5qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaChVUkxfMSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICdTb21ldGhpbmcgd2VudCB3cm9uZy4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVzaWduLWJvZHknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2aWV3KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgXCI8ZGl2IHN0eWxlPVxcXCJoZWlnaHQ6MjAwcHg7YmFja2dyb3VuZDpjcmltc29uO2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7XFxcIj5cXHVCQjM0XFx1RDU1Q1xcdUMyQTRcXHVEMDZDXFx1QjhENDwvZGl2PlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUdyYXBoKCkge1xyXG4gICAgICAgICAgICAvLyB0b2RvIOyngOq4iOydgCDrsJTqsIAgMTAwcHgg7J2065287IScIDE6MeuhnCDrjIDsnoVcclxuICAgICAgICAgICAgdmFyIGdyYXBoSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZ3JhcGggLmdyYXBoLWl0ZW0nKTtcclxuICAgICAgICAgICAgaWYgKCFncmFwaEl0ZW1zKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBncmFwaEl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBncmFwaEl0ZW1CYXIgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncmFwaC1pdGVtLWJhcicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGdyYXBoSXRlbVZhbHVlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS12YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFncmFwaEl0ZW1CYXIgfHwgIWdyYXBoSXRlbVZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBncmFwaFZhbHVlID0gcGFyc2VJbnQoZ3JhcGhJdGVtVmFsdWUuaW5uZXJUZXh0KTtcclxuICAgICAgICAgICAgICAgIGdyYXBoSXRlbUJhci5zdHlsZS5oZWlnaHQgPSBncmFwaFZhbHVlICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgZ3JhcGhJdGVtVmFsdWUuc3R5bGUuYm90dG9tID0gZ3JhcGhWYWx1ZSArIFwicHhcIjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbnB1dFRlc3QsIGN1cnJlbnRWYWx1ZV8xLCBsaXN0LCBncmlkLCB3b3JrcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgcm91dGVyXzEuZGVmYXVsdCgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RGFya01vZGVfMS5zZXREYXJrbW9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0Ym94LXRvb2xiYXItYm9sZCcpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IHJldHVybiBmb3JtYXQoJ2l0YWxpYycsIG51bGwpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8yLmRlZmF1bHQuY2hlY2tib3goeyBjaGVja0FsbFNlbGVjdG9yOiAnLmpzLWNoZWNrYWxsJywgY2hlY2tTZWxlY3RvcjogJy5qcy1jaGVjaycgfSkuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzIuZGVmYXVsdC5maWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMi5kZWZhdWx0LnRleHRhcmVhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMi5kZWZhdWx0Lm51bWJlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG8gOiDtgbTrnpjsiqTrp4wg7JOw66m0IOuQmOuPhOuhnSDrkJjslrQg7J6I64qU642wIOqwgeqwgeyXkCDsnbTrsqTtirjrpbwg7ISk7KCV7ZW07KO864qUIOuwqe2WpT/snLzroZxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQubW9kYWwoeyBzZWxlY3RvcjogJy5qcy1tb2RhbCcgfSkuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC50b2dnbGVDbGFzcyh7IHNlbGVjdG9yOiAnLmpzLXRvZ2dsZScgfSkuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC5lbnRlclRhcmdldCh7IHNlbGVjdG9yOiAnLmpzLWhvdmVyLXRyaWdnZXInIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC50YWJNZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LmNsb3NlUGFyZW50RWxlbWVudCh7IHNlbGVjdG9yOiAnLmpzLWNsb3NlJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQudG9Ub3AoeyBzZWxlY3RvcjogJy5qcy10by10b3AnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC5zdGlja3lFbGVtZW50KHsgdGFyZ2V0RWxlbWVudDogJy5qcy1oZWFkZXInLCBhZGRDbGFzczogJ2lzLXN0aWNreS1oZWFkZXInLCBwb3NpdGlvbjogJ3RvcCcgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnN0aWNreUVsZW1lbnQoeyB0YXJnZXRFbGVtZW50OiAnLmpzLXBvc3QtaGVhZCcsIGFkZENsYXNzOiAnaXMtc3RpY2t5LXBvc3QtaGVhZCcsIHBvc2l0aW9uOiAnYm90dG9tJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQuc2Nyb2xsQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnQuc2Nyb2xsc3B5KHsgbWVudXNTZWxlY3RvcjogJy5qcy1zZWN0aW9uJywgc2VjdGlvbnNTZWxlY3RvcjogJy5uZXduZWVrLW5hdmJhci1tZW51LWl0ZW0nIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlR3JhcGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb3VudERvd25DbG9jaygyMCwgJ2RheXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIHNldERhcmtNb2RlXzEuY2Fyb3VzZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXZlYWxQYXNzd29yZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzQ29tbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0VGVzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbnB1dC10ZXN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0VGVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFRlc3QuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzTnVtYmVyS2V5ID0ga2V5IDwgNDggfHwga2V5ID4gNTc7IC8vIHRvZG8gISBpc051bWJlcktleSDsnbTri6Qg7KeA6riI7J2MMCB0byA5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNTcGFjZUtleSA9IGtleSA9PT0gMzI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU3BhY2VLZXkgJiYgaXNOdW1iZXJLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZV8xID0gaW5wdXRUZXN0LnZhbHVlIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFRlc3QuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eWzAtOVxcc10qJC8udGVzdCh0YXJnZXQudmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZV8xID0gdGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IGN1cnJlbnRWYWx1ZV8xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IGluIHRoaXMgY2FzZSwgYGUucHJldmVudERlZmF1bHQoKWAgZG9lc24ndCBoZWxwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDtlZzquIAg7J6F66Cl7ZaI7J2EIOuVjCDsu6TshJzqsIAg66eoIOuSpOuhnCDqsJAuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoL15bMC05c10qJC8udGVzdCh0YXJnZXQudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGN1cnJlbnRWYWx1ZSA9IHRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGFyZ2V0LnZhbHVlID0gY3VycmVudFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb24uc3RhcnQsIHNlbGVjdGlvbi5lbmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgc2VsZWN0aW9uID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlucHV0VGVzdC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgc2VsZWN0aW9uID0geyBzdGFydDogdGFyZ2V0LnNlbGVjdGlvblN0YXJ0LCBlbmQ6IHRhcmdldC5zZWxlY3Rpb25FbmQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlzcGxheS1saXN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kaXNwbGF5LWdyaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB3b3JrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLWJvZHknKTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ID09PSBudWxsIHx8IGxpc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPT09IG51bGwgfHwgbGlzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkID09PSBudWxsIHx8IGdyaWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdyaWQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya3MgPT09IG51bGwgfHwgd29ya3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdvcmtzLmNsYXNzTGlzdC5hZGQoJ2xpc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBncmlkID09PSBudWxsIHx8IGdyaWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdyaWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPT09IG51bGwgfHwgbGlzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkID09PSBudWxsIHx8IGdyaWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdyaWQuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya3MgPT09IG51bGwgfHwgd29ya3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdvcmtzLmNsYXNzTGlzdC5yZW1vdmUoJ2xpc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHJldmVhbFBhc3N3b3JkKCkge1xyXG4gICAgdmFyIEVMRU1FTlRfQ0xBU1NOQU1FID0gJy5qcy12aWV3LXBhc3N3b3JkJztcclxuICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoRUxFTUVOVF9DTEFTU05BTUUpO1xyXG4gICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IHZhciBfYTsgcmV0dXJuIHRvZ2dsZVBhc3N3b3JkKChfYSA9IGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWxlbWVudC5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucXVlcnlTZWxlY3RvcignaW5wdXQnKSk7IH0pO1xyXG4gICAgfSk7XHJcbiAgICBmdW5jdGlvbiB0b2dnbGVQYXNzd29yZChpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgaXNQYXNzd29yZFR5cGUgPSAoaW5wdXRFbGVtZW50ID09PSBudWxsIHx8IGlucHV0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRFbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpKSA9PT0gJ3Bhc3N3b3JkJztcclxuICAgICAgICB2YXIgaW5wdXRUeXBlID0gaXNQYXNzd29yZFR5cGUgPyAndGV4dCcgOiAncGFzc3dvcmQnO1xyXG4gICAgICAgIGlucHV0RWxlbWVudCA9PT0gbnVsbCB8fCBpbnB1dEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBpbnB1dFR5cGUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluaXRpYWxpemVQYWdlKCkge1xyXG4gICAgaW5pdGlhbGl6ZU5hdmJhcigpO1xyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5hdmJhcigpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIG5hdmlnYXRpb25UcmlnZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW5hdmJhci10b2dnbGUnKTtcclxuICAgICAgICBpZiAoIW5hdmlnYXRpb25UcmlnZ2VyKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKG5hdmlnYXRpb25UcmlnZ2VyLmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgbmF2aWdhdGlvblRyaWdnZXIuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIChfYSA9IG5hdmlnYXRpb25UcmlnZ2VyLm5leHRFbGVtZW50U2libGluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkZXRlY3RQYWdlKCkge1xyXG4gICAgICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IFwicGFnZS1cIiArIChoYXNoID09PSAnJyA/ICdkZXNpZ24nIDogaGFzaC5zdWJzdHJpbmcoMSkpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJyc7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuLy8gbGV0IGNvbXBhbnkgPSB7XHJcbi8vICAgbmFtZTogJ0dpdGh1YicsXHJcbi8vICAgcmV2ZW51ZTogMjAwMCxcclxuLy8gICB1c2VyczogW1xyXG4vLyAgICAgeyBuYW1lOiAnSm9obicsIGhhbmRsZTogJ0Bqb2huJyB9LFxyXG4vLyAgICAgeyBuYW1lOiAnZG9lJywgaGFuZGxlOiAnQGRvZScgfSxcclxuLy8gICBdLFxyXG4vLyAgIGdldFVzZXJOYW1lcygpIHtcclxuLy8gICAgIHJldHVybiB1c2Vycy5tYXAodXNlciA9PiB1c2VyLm5hbWUpXHJcbi8vICAgfSxcclxuLy8gfVxyXG4vLyBjb25zdCB2YWx1ZSA9IGNvbXBhbnk/Lm5hbWUgPz8gJ2RlZmF1bHQgbmFtZSdcclxuLy8gY29uc3QgY29tcGFueU5hbWUgPSBjb21wYW55Py5bJ25hbWUnXSA/PyAnZGVmYXVsdCB2YWx1ZSdcclxuLy8gY29tcGFueS5nZXRVc2VyTmFtZXM/LigpXHJcbi8vICEgY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXHJcbi8vIFRPRE86IOuPhO2BkOuovO2KuOqwgCDslYTri4jrnbwgZXZlbnQudGFyZ2V0LnBhcmVudCDqsIAg7JWE64uMIOqyg+ydhCDtgbTrpq3tlojsnYQg65WMIOuLpOuLueyVvCDtlZjrgphcclxuLy8gY29uc3QgZmluZENsYXNzUmVjdXJzaXZlID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZGVwdGgpID0+IHtcclxuLy8gLy8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcclxuLy8gXHRjb25zb2xlLmxvZygnZGVwdGg6ICcgKyBkZXB0aCwgZWxlbWVudCk7XHJcbi8vIFx0aWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHJldHVybiBlbGVtZW50O1xyXG4vLyBcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcclxuLy8gfTtcclxuLy8gdmFyIGdldENsb3Nlc3QgPSBmdW5jdGlvbihlbGVtLCBzZWxlY3Rvcikge1xyXG4vLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XHJcbi8vIFx0XHRpZiAoZWxlbS5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIGVsZW07XHJcbi8vIFx0fVxyXG4vLyBcdHJldHVybiBudWxsO1xyXG4vLyB9O1xyXG4vLyBQcm9taXNlLmFsbChbXHJcbi8vIFx0ZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycpLFxyXG4vLyBcdGZldGNoKCdodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdXNlcnMnKVxyXG4vLyBdKVxyXG4vLyAudGhlbihyZXNwb25zZXMgPT4ge1xyXG4vLyBcdHJldHVybiByZXNwb25zZXMubWFwKHJlc3BvbnNlID0+IHtcclxuLy8gXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vIFx0fSk7XHJcbi8vIOyXsOuPhOuzhCDqsJDrj4Xrs4Qg64KY652867OEXHJcbi8vIGNvbnN0IGJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCcpO1xyXG4vLyBpZighYm9hcmRFbGVtZW50KSByZXR1cm4gbnVsbDtcclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbi8vIFx0Y29uc3QgZmlsdGVyZWRDb3VudHJ5ID0gZmlsbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5jb3VudHJ5ID09PSAn66+46rWtJyk7XHJcbi8vIFx0Y29uc29sZS5sb2coZmlsdGVyZWRDb3VudHJ5KTtcclxuLy8gXHRpZihldmVudC50YXJnZXQubmFtZSA9PT0gJ3VzYScpIHtcclxuLy8gXHRcdGJvYXJkRWxlbWVudC5pbm5lckhUTUwgPSAnJztcclxuLy8gXHRcdGZpbHRlcmVkQ291bnRyeS5tYXAoaXRlbSA9PiB7XHJcbi8vIFx0XHRcdGJvYXJkRWxlbWVudC5pbm5lckhUTUwgKz0gYFxyXG4vLyBcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1ib2R5XCI+XHJcbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5pZH08L2Rpdj5cclxuLy8gXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLnJlbGVhc2VEYXRlfTwvZGl2PlxyXG4vLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0udGl0bGVLb3JlYW59PGRpdj4ke2l0ZW0udGl0bGVFbmdsaXNofTwvZGl2PjwvZGl2PlxyXG4vLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uZGlyZWN0b3J9PC9kaXY+XHJcbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5jb3VudHJ5fTwvZGl2PlxyXG4vLyBcdFx0XHRcdDwvZGl2PmA7XHJcbi8vIFx0XHR9KTtcclxuLy8gXHR9XHJcbi8vIH0pO1xyXG4vLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuLy8gXHRmaWxtcy5tYXAoaXRlbSA9PiB7XHJcbi8vIFx0XHRib2FyZEVsZW1lbnQuaW5uZXJIVE1MICs9IGBcclxuLy8gXHRcdDxkaXYgY2xhc3M9XCJib2FyZC1ib2R5XCI+XHJcbi8vIFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLmlkfTwvZGl2PlxyXG4vLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5yZWxlYXNlRGF0ZX08L2Rpdj5cclxuLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0udGl0bGVLb3JlYW59PGRpdj4ke2l0ZW0udGl0bGVFbmdsaXNofTwvZGl2PjwvZGl2PlxyXG4vLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5kaXJlY3Rvcn08L2Rpdj5cclxuLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uY291bnRyeX08L2Rpdj5cclxuLy8gXHRcdDwvZGl2PmA7XHJcbi8vIFx0fSk7XHJcbi8vIH0sIDIwMCk7XHJcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xyXG4vLyBcdC8vIGNvbnN0IGhlbHBlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGV4dGZpZWxkLWhlbHBlcicpO1xyXG4vLyBcdC8vIGhlbHBlcnMuZm9yRWFjaChoZWxwZXIgPT4gaGVscGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpO1xyXG4vLyBcdC8vIGxldCBsb2dpbkRhdGEgPSB7ZW1haWw6ICcnLCBwYXNzd29yZDogJyd9O1xyXG4vLyBcdC8vIGNvbnN0IGlzRW1haWwgPSBldmVudC50YXJnZXQgPT09IGVtYWlsO1xyXG4vLyBcdGNvbnN0IGlzUGFzc3dvcmQgPSBldmVudC50YXJnZXQgPT09IHBhc3N3b3JkO1xyXG4vLyBcdGNvbnN0IGhhbmRsZVZhbGlkYXRlID0gKHsgdGFyZ2V0OiBhbnksIHZhbGlkYXRlOiB2b2lkLCBtZXNzYWdlOiBhbnkgfSkgPT4ge1xyXG4vLyBcdFx0aWYodmFsaWRhdGUpIHtcclxuLy8gXHRcdFx0dGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtaW52YWxpZCcpO1xyXG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmlubmVyVGV4dCA9ICcnO1xyXG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbi8vIFx0XHR9IGVsc2Uge1xyXG4vLyBcdFx0XHRpZighdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZykgcmV0dXJuO1xyXG4vLyBcdFx0XHQvLyBjb25zdCBpZCA9IHRhcmdldC5pZCB8fCB0YXJnZXQubmFtZTtcclxuLy8gXHRcdFx0Ly8gdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsICdlcnJvci0nICsgaWQpO1xyXG4vLyBcdFx0XHR0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XHJcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gbWVzc2FnZTtcclxuLy8gXHRcdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuLy8gXHRcdH1cclxuLy8gXHR9O1xyXG4vLyBcdGlmKGlzUGFzc3dvcmQpIHtcclxuLy8gXHRcdGhhbmRsZVZhbGlkYXRlKHtcclxuLy8gXHRcdFx0dGFyZ2V0OiBwYXNzd29yZCxcclxuLy8gXHRcdFx0dmFsaWRhdGU6IGlzUGFzc3dvcmQgJiYgISh2YWxpZGl0eS5pc0xlbmd0aChwYXNzd29yZC52YWx1ZSwgOCkpLFxyXG4vLyBcdFx0XHRtZXNzYWdlOiAn67mE67CA67KI7Zi466W8IOuYkeuwlOuhnCDsnoXroKXtlbTrnbwuJ1xyXG4vLyBcdFx0fSk7XHJcbi8vIFx0fVxyXG4vLyB9KTtcclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50ID0+IHt9LCB0cnVlKTsgLy8gYmx1ciBpcyBub3QgYnViYmxlXHJcbi8vIGV2ZW50LnRhcmdldC5yZXNldCgpO1xyXG4vLyB2YXIgZm9ybSA9IHVzZXJuYW1lLmZvcm07XHJcbi8vIHZhciBlbGVtZW50cyA9IGZvcm0uZWxlbWVudHM7XHJcbi8vIHZhciBoYXNFcnJvciA9IGZ1bmN0aW9uKGZpZWxkKSB7XHJcbi8vIFx0aWYgKGZpZWxkLmRpc2FibGVkIHx8IGZpZWxkLnR5cGUgPT09ICdmaWxlJyB8fCBmaWVsZC50eXBlID09PSAncmVzZXQnIHx8IGZpZWxkLnR5cGUgPT09ICdzdWJtaXQnIHx8IGZpZWxkLnR5cGUgPT09ICdidXR0b24nKSByZXR1cm47XHJcbi8vIFx0dmFyIHZhbGlkaXR5ID0gZmllbGQudmFsaWRpdHk7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnZhbGlkKSByZXR1cm47XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnZhbHVlTWlzc2luZykgcmV0dXJuICdQbGVhc2UgZmlsbCBvdXQgdGhpcyBmaWVsZC4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS50eXBlTWlzbWF0Y2gpIHJldHVybiAnUGxlYXNlIHVzZSB0aGUgY29ycmVjdCBpbnB1dCB0eXBlLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnRvb1Nob3J0KSByZXR1cm4gJ1BsZWFzZSBsZW5ndGhlbiB0aGlzIHRleHQuJztcclxuLy8gXHRpZiAodmFsaWRpdHkudG9vTG9uZykgcmV0dXJuICdQbGVhc2Ugc2hvcnRlbiB0aGlzIHRleHQuJztcclxuLy8gXHRpZiAodmFsaWRpdHkuYmFkSW5wdXQpIHJldHVybiAnUGxlYXNlIGVudGVyIGEgbnVtYmVyLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnN0ZXBNaXNtYXRjaCkgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgdmFsdWUuJztcclxuLy8gXHRpZiAodmFsaWRpdHkucmFuZ2VPdmVyZmxvdykgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgc21hbGxlciB2YWx1ZS4nO1xyXG4vLyBcdGlmICh2YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgbGFyZ2VyIHZhbHVlLic7XHJcbi8vIFx0aWYgKHZhbGlkaXR5LnBhdHRlcm5NaXNtYXRjaCkgcmV0dXJuICdQbGVhc2UgbWF0Y2ggdGhlIHJlcXVlc3RlZCBmb3JtYXQuJztcclxuLy8gXHRyZXR1cm4gJ1RoZSB2YWx1ZSB5b3UgZW50ZXJlZCBmb3IgdGhpcyBmaWVsZCBpcyBpbnZhbGlkLic7XHJcbi8vIH07XHJcbi8vIGNvbnN0IHVpRGF0YSA9IFtcclxuLy8gICB7IGxhYmVsOiAn7IOB7ZKIIOyDgeyEuO2OmOydtOyngCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAuMDEtMDEnLCBocmVmOiAnI3Byb2R1Y3QnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxyXG4vLyAgIHsgbGFiZWw6ICfsg4Htkogg7Lm07Yq4JywgZGVzY3JpcHRpb24gOicnLCBkYXRlIDonMjAyMC0wMS0wMScsIGhyZWY6ICcjY2FydCcsIHRhZ3M6IFsn6riw7ZqNJywgJ+uUlOyekOyduCddIH0sXHJcbi8vICAgeyBsYWJlbDogJ+uhnOq3uOyduCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2xvZ2luJywgdGFnczogWyfquLDtmo0nLCAn65SU7J6Q7J24J10gfSxcclxuLy8gICB7IGxhYmVsOiAn67mE67CA67KI7Zi4IOywvuq4sCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2ZvcmdvdCcsIHRhZ3M6IFsn6riw7ZqNJywgJ+uUlOyekOyduCddIH1cclxuLy8gXVxyXG4vLyBjb25zdCBjY2M6IGFueSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KCcuanMtdWknKTtcclxuLy8gaWYoY2NjKSB7XHJcbi8vICAgY29uc3QgdGVtcCA9IHVpRGF0YS5tYXAoaXRlbSA9PiB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhpdGVtKTtcclxuLy8gICAgIGNvbnN0IHR0dCA9IGl0ZW0udGFncy5tYXAoaSA9PiBgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke2l9PC9zcGFuPmApLmpvaW4oJycpXHJcbi8vICAgICBjb25zdCB1aVRlbXBsYXRlID0gYDxhIGNsYXNzPVwiY2FyZFwiIGhyZWY9XCIke2l0ZW0uaHJlZn1cIj5cclxuLy8gICAgICAgICA8ZmlndXJlIGNsYXNzPVwiY2FyZC10aHVtYm5haWxcIiBzdHlsZT1cImZvbnQtZmFtaWx5OidEdW5rZWxTYW5zJztkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7XCI+JHtpdGVtLmxhYmVsfTwvZmlndXJlPlxyXG4vLyAgICAgICAgIDxoMyBjbGFzcz1cImNhcmQtdGl0bGVcIj4ke2l0ZW0ubGFiZWx9PC9oMz5cclxuLy8gICAgICAgICA8dGltZSBjbGFzcz1cImNhcmQtZGF0ZVwiPiR7aXRlbS5kYXRlfTx0aW1lPlxyXG4vLyAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLXRhZ3NcIiByb2xlPVwiZ3JvdXBcIj5cclxuLy8gICAgICAgICAgICR7dHR0fVxyXG4vLyAgICAgICAgIDwvZGl2PlxyXG4vLyAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjYXJkLW1vcmUgaWNvbi1idXR0b25cIj48aSBjbGFzcz1cImljb24tbW9yZVwiPjwvaT48L2J1dHRvbj5cclxuLy8gICAgICAgPC9hPmBcclxuLy8gICAgIHJldHVybiB1aVRlbXBsYXRlO1xyXG4vLyAgIH0pLmpvaW4oJycpXHJcbi8vICAgY29uc29sZS5sb2codGVtcCk7XHJcbi8vICAgY2NjLmlubmVySFRNTCA9IHRlbXA7XHJcbi8vIH1cclxuLy8gdmFyIGkgPSAwO1xyXG4vLyB2YXIgaW1hZ2VzID0gWydjb3ZlcjEuanBnJywnY292ZXIyLmpwZyddO1xyXG4vLyB2YXIgaW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvdmVyX2ltYWdlJyk7XHJcbi8vIC8vIGltYWdlLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoL2ltZy9jb3ZlcjEuanBnKScpO1xyXG4vLyBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xyXG4vLyBcdGltYWdlRWxlbWVudC5mYWRlT3V0KDEwMDAsICgpID0+IHtcclxuLy8gXHRcdGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKCR7aW1hZ2VzW2krK119KWApO1xyXG4vLyBcdFx0aW1hZ2VFbGVtZW50LmZhZGVJbigxMDAwKTtcclxuLy8gXHR9KTtcclxuLy8gXHRpZihpID09PSBpbWFnZXMubGVuZ3RoKSBpID0gMDtcclxuLy8gfSwgNTAwMCk7XHJcbi8vIHZhciBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2l0ZW0tMycpO1xyXG4vLyB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG4vLyB2YXIgcGFyZW50Tm9kZXMgPSBwYXJlbnQuY2hpbGRyZW47XHJcbi8vIHZhciBwYXJlbnROb2Rlc0FycmF5ID0gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pO1xyXG4vLyB2YXIgc2libGluZ3MgPSBwYXJlbnROb2Rlc0FycmF5LmZpbHRlcihmdW5jdGlvbiAoc2libGluZykge1xyXG4vLyBcdHJldHVybiBzaWJsaW5nICE9PSBlbGVtO1xyXG4vLyB9KTtcclxuLy8gdmFyIGNvdW50ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY291bnRlcicpO1xyXG4vLyB2YXIgbnVtYmVyID0gMDtcclxuLy8gdmFyIGNvdW50VXAgPSBmdW5jdGlvbiAoKSB7XHJcbi8vIFx0Ly8gSW5jcmVhc2UgbnVtYmVyIGJ5IDFcclxuLy8gXHRudW1iZXIrKztcclxuLy8gXHQvLyBVcGRhdGUgdGhlIFVJXHJcbi8vIFx0Y291bnRlci50ZXh0Q29udGVudCA9IG51bWJlcjtcclxuLy8gXHQvLyBpZiB0aGUgbnVtYmVyIGlzIGxlc3MgdGhhbiA1MDAsIHJ1biBpdCBhZ2FpblxyXG4vLyBcdGlmIChudW1iZXIgPCA1MDApIHtcclxuLy8gXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY291bnRVcCk7XHJcbi8vIFx0fVxyXG4vLyB9O1xyXG4vLyAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXHJcbi8vIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY291bnRVcCk7XHJcbi8vIC8vIFNldHVwIHRoZSBhbmltYXRpb25cclxuLy8gdmFyIGFuaW1hdGlvbiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4vLyBcdGNvbnNvbGUubG9nKCdyYW4hJyk7XHJcbi8vIH0pO1xyXG4vLyB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uKTtcclxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhZFRpbWUoKSB7XHJcbiAgICB2YXIgcmVhZFRpbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QtaGVhZCcpO1xyXG4gICAgdmFyIHBvc3RDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QtYm9keS1wYXJhZ3JhcGgnKTtcclxuICAgIGlmICghcG9zdENvbnRlbnQgfHwgIXJlYWRUaW1lRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgdGV4dCA9IChwb3N0Q29udGVudCA9PT0gbnVsbCB8fCBwb3N0Q29udGVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9zdENvbnRlbnQudGV4dENvbnRlbnQpIHx8IChwb3N0Q29udGVudCA9PT0gbnVsbCB8fCBwb3N0Q29udGVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9zdENvbnRlbnQuaW5uZXJUZXh0KTtcclxuICAgIHZhciB0ZXh0TGVuZ3RoID0gdGV4dC5zcGxpdCgnICcpLmxlbmd0aCB8fCAxO1xyXG4gICAgdmFyIHdvcmRzUGVyTWludXRlID0gMjAwO1xyXG4gICAgdmFyIHZhbHVlID0gTWF0aC5jZWlsKHRleHRMZW5ndGggLyB3b3Jkc1Blck1pbnV0ZSk7XHJcbiAgICB2YXIgcmVzdWx0ID0gdmFsdWUgKyBcIiBtaW4gcmVhZFwiO1xyXG4gICAgY29uc29sZS5sb2cocmVzdWx0KTtcclxuICAgIHJlYWRUaW1lRWxlbWVudC5pbm5lclRleHQgPSByZXN1bHQ7XHJcbn1cclxuLy8gZnVuY3Rpb24gYnVzdENhY2hlKCkge1xyXG4vLyAgIGNvbnN0IGxpbmtFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKVxyXG4vLyAgIGxpbmtFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4vLyAgICAgY29uc3QgaXNTdHlsZXNoZWV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JlbCcpID09PSAnc3R5bGVzaGVldCdcclxuLy8gICAgIGlmICghaXNTdHlsZXNoZWV0KSByZXR1cm5cclxuLy8gICAgIGNvbnN0IGhyZWYgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpXHJcbi8vICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4vLyAgICAgY29uc3QgY2FjaGVCdXN0ZXIgPSBgJHtocmVmfT9jYWNoZUJ1c3Rlcj0ke3RpbWVzdGFtcH1gXHJcbi8vICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsIGNhY2hlQnVzdGVyKVxyXG4vLyAgIH0pXHJcbi8vIH1cclxuZnVuY3Rpb24gZm9jdXNDb21tZW50KCkge1xyXG4gICAgdmFyIGNvbW1lbnRXcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb21tZW50LXdyaXRlJyk7XHJcbiAgICB2YXIgY29tbWVudFRleHRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1jb21tZW50LXRleHRmaWVsZCcpO1xyXG4gICAgY29tbWVudFRleHRGaWVsZC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbW1lbnRXcml0ZS5jbGFzc0xpc3QuYWRkKCdpcy1mb2N1c2VkJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4WlFVRlpMRU5CUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUlZvc2IwTkJRV2xETzBGQlJXcERMR2RGUVVFMFF6dEJRVU0xUXl3eVEwRkJiMFU3UVVGRGNFVXNlVVJCUVdsRk8wRkJRMnBGTERKRVFVRXlSRHRCUVVNelJDeHZSVUZCTmtNN1FVRkROME1zYjBWQlFUWkRPMEZCUlRkRExESkZRVUZuUlR0QlFVVm9SU3cyUkVGQk5rUTdRVUZETjBRc2NVVkJRWEZGTzBGQlEzSkZMRFJHUVVFMFJqdEJRVVUxUml4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzVlVGQlF5eExRVUZWTzBsQlF5OURMRWxCUVVFc2IwTkJRVlVzUTBGQmFVSTdTVUZEYmtNc2JVTkJRVzFETzBsQlEyNURMRWxCUVVrc1ZVRkJWU3hMUVVGTExGTkJRVk03VVVGQlJTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xTkJRMnhFTEVsQlFVa3NWVUZCVlN4TFFVRkxMR0ZCUVdFN1VVRkJSU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMU5CUXpORUxFbEJRVWtzVlVGQlZTeExRVUZMTEZWQlFWVTdVVUZCUlN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzBGQlF6VkVMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJSVVlzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUlVGQk0wSXNRMEZCTWtJc1EwRkJReXhEUVVGQk8wRkJSWEJGTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVFN1FVRkRhRVFzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUVR0QlFVVnlSQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVTdTVUZETlVNc2IwSkJRV0VzUlVGQlJTeERRVUZCTzBsQlJXWXNkVUpCUVdkQ0xFVkJRVVVzUTBGQlFUdEpRVVZzUWl4dFFrRkJiVUk3U1VGRmJrSXNVMEZCVXl4RlFVRkZMRU5CUVVFN1NVRkZXQ3hsUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRVHRKUVVWcVJTeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTERSQ1FVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdTVUZEYWtVc1UwRkJVeXhqUVVGak8xRkJRM0pDTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRSUVVOeVJTeEpRVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxIRkNRVUZ4UWl4RFFVRkRMRU5CUVVFN1VVRkRPVVVzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhKUVVGSkxFTkJRVU1zVjBGQlZ6dFpRVUZGTEU5QlFVMDdVVUZGTjBNc1NVRkJUU3hoUVVGaExFZEJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4SFFVRkhMRU5CUVVNc1owSkJRV2xDTEVOQlFVTXNXVUZCV1N4SFFVRkhMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NUVUZCUnl4RFFVRkJPMUZCUXpsSExGZEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMR0ZCUVdFc1EwRkJRVHRKUVVNeFF5eERRVUZETzBGQlJVZ3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkpSaXhUUVVGbExGTkJRVk03T3p0UlFVMTBRaXhUUVVGVExFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3p0WlFVTTFRaXhMUVVGTExFVkJRVVVzUTBGQlFUdFpRVU5RTEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTTVReXhEUVVGRE8xRkJRMFFzYlVaQlFXMUdPMUZCUTI1R0xHMURRVUZ0UXp0UlFVTnVReXh0UWtGQmJVSTdVVUZGYmtJc2IwUkJRVzlFTzFGQlEzQkVMR2xFUVVGcFJEdFJRVU5xUkN3MFFrRkJORUk3VVVGRE5VSXNaMFJCUVdkRU8xRkJRMmhFTERKQ1FVRXlRanRSUVVNelFpeHJSVUZCYTBVN1VVRkRiRVVzWjBWQlFXZEZPMUZCUTJoRkxGZEJRVmM3VVVGRFdDeHBRMEZCYVVNN1VVRkRha01zYlVWQlFXMUZPMUZCUTI1RkxDdEVRVUVyUkR0UlFVTXZSQ3hYUVVGWE8xRkJRMWdzWjBKQlFXZENPMUZCUTJoQ0xHMUZRVUZ0UlR0UlFVTnVSU3hyUlVGQmEwVTdVVUZEYkVVc1YwRkJWenRSUVVWWUxHZEVRVUZuUkR0UlFVVm9SQ3hyUkVGQmEwUTdVVUZGYkVRc2RVSkJRWFZDTzFGQlEzWkNMRGhEUVVFNFF6dFJRVU01UXl3clEwRkJLME03VVVGREwwTXNWVUZCVlR0UlFVTldMRzlFUVVGdlJEdFJRVU53UkN4VFFVRlRPMUZCUTFRc1QwRkJUenRSUVVOUUxFdEJRVXM3VVVGRlRDeG5Ra0ZCWjBJN1VVRkZhRUlzVTBGQlV5eFhRVUZYTzFsQlEyeENMRWxCUVVrc2MwSkJRWE5DTEVsQlFVa3NUVUZCVFN4SlFVRkpMREpDUVVFeVFpeEpRVUZKTEUxQlFVMHNTVUZCU1N4dFFrRkJiVUlzU1VGQlNTeE5RVUZOTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTzJkQ1FVTnNTaXhKUVVGTkxHVkJRV1VzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlFUdG5Ra0ZET1VVc1NVRkJUU3hQUVVGUExFZEJRVWM3YjBKQlEyUXNTVUZCU1N4RlFVRkZMRWxCUVVrN2IwSkJRMVlzVlVGQlZTeEZRVUZGTEdsQ1FVRnBRanR2UWtGRE4wSXNVMEZCVXl4RlFVRkZMRWRCUVVjN2FVSkJRMllzUTBGQlFUdG5Ra0ZEUkN4SlFVRkpMRlZCUVZFc1IwRkJSeXhKUVVGSkxHOUNRVUZ2UWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlFUdG5Ra0ZGTVVRc1pVRkJaU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEU5QlFVOHNTVUZCU1N4UFFVRkJMRlZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFYcENMRU5CUVhsQ0xFTkJRVU1zUTBGQlFUdGhRVU01UkR0WlFVVkVMRk5CUVZNc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeFJRVUZSTzJkQ1FVTnFReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTMEZCU3p0dlFrRkRia0lzYTBSQlFXdEVPMjlDUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR05CUVdNN2QwSkJRVVVzVDBGQlRUdHZRa0ZEYWtNc2FVSkJRV2xDTzI5Q1FVTnFRaXh2UTBGQmIwTTdiMEpCUTNCRExGTkJRVk1zUlVGQlJTeERRVUZCTzI5Q1FVVllMSGREUVVGM1F6dHZRa0ZEZUVNc0swTkJRU3RETzI5Q1FVTXZReXhwUkVGQmFVUTdaMEpCUTI1RUxFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEwb3NRMEZCUXp0WlFVVkVMRk5CUVdVc1UwRkJVenM3T3pzN096dG5RMEZGWkN4UlFVRk5MQ3RKUVVFclNTeERRVUZCTzJkRFFVTXhTU3h4UWtGQlRTeExRVUZMTEVOQlFVTXNTMEZCUnl4RFFVRkRMRVZCUVVFN08yZERRVUV6UWl4UlFVRlJMRWRCUVVjc1UwRkJaMEk3WjBOQlEycERMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJUdHZRMEZCUlN4TlFVRk5MSFZDUVVGMVFpeERRVUZCTzJkRFFVVndReXh4UWtGQlRTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVFN08yZERRVUUxUWl4SlFVRkpMRWRCUVVjc1UwRkJjVUk3WjBOQlEyaERMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1R0dlEwRkRja0lzU1VGQlRTeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlFUdHZRMEZEYmtRc1NVRkJTU3hEUVVGRExFbEJRVWs3ZDBOQlFVVXNUMEZCVFR0dlEwRkZha0lzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUlVGQlJTeHRTRUZCZDBZc1EwRkJReXhEUVVGQk8yZERRVU5vU1N4RFFVRkRMRU5CUVVNc1EwRkJRVHM3T3pzN096czdPMkZCUlV3N1VVRkRTQ3hEUVVGRE8xRkJOa0pFTEZOQlFWTXNWMEZCVnp0WlFVTnNRaXhuUTBGQlowTTdXVUZEYUVNc1NVRkJUU3hWUVVGVkxFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExIVkNRVUYxUWl4RFFVRkRMRU5CUVVFN1dVRkRja1VzU1VGQlNTeERRVUZETEZWQlFWVTdaMEpCUVVVc1QwRkJUVHRaUVVWMlFpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenRuUWtGRGVFSXNTVUZCVFN4WlFVRlpMRWRCUVVjc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQll5eHBRa0ZCYVVJc1EwRkJReXhEUVVGQk8yZENRVU14UlN4SlFVRk5MR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZqTEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3WjBKQlF6bEZMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eGpRVUZqTzI5Q1FVRkZMRTlCUVUwN1owSkJSVFZETEVsQlFVMHNWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdaMEpCUlhKRUxGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRk5MRlZCUVZVc1QwRkJTU3hEUVVGQk8yZENRVU0zUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlRTeFZRVUZWTEU5QlFVa3NRMEZCUVR0WlFVTnFSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU5LTEVOQlFVTTdPenM3ZDBKQmJrbEVMSEZDUVVGTkxHZENRVUZUTEVWQlFVVXNSVUZCUVRzN2IwSkJRV3BDTEZOQlFXbENMRU5CUVVFN2IwSkJSV3BDTEhsQ1FVRlhMRVZCUVVVc1EwRkJRVHR2UWtGRllpeE5RVUZCTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNNRU5CUVVVc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMR05CUVUwc1QwRkJRU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRjBRaXhEUVVGelFpeEZRVUZETzI5Q1FYTkdlRWNzWlVGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEdOQlFXTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUVR0dlFrRkROMFlzWlVGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkJPMjlDUVVOYUxHVkJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUVR0dlFrRkRhRUlzWlVGQlN5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkJPMjlDUVVWa0xHbEVRVUZwUkR0dlFrRkRha1FzWlVGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkJPMjlDUVVWdVJDeGxRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVFN2IwSkJSVEZFTEdWQlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1EwRkJReXhEUVVGQk8yOUNRVU53UkN4bFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVUU3YjBKQlEyWXNaVUZCU3l4RFFVRkRMR3RDUVVGclFpeERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVUU3YjBKQlEyNUVMR1ZCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNXVUZCV1N4RlFVRkZMRU5CUVVNc1EwRkJRVHR2UWtGRGRrTXNaVUZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhGUVVGRkxHRkJRV0VzUlVGQlJTeFpRVUZaTEVWQlFVVXNVVUZCVVN4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGQk8yOUNRVU51Unl4bFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExFVkJRVVVzWVVGQllTeEZRVUZGTEdWQlFXVXNSVUZCUlN4UlFVRlJMRVZCUVVVc2NVSkJRWEZDTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVUU3YjBKQlJUVkhMR1ZCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlFUdHZRa0ZEZGtJc2JVZEJRVzFITzI5Q1FVVnVSeXhYUVVGWExFVkJRVVVzUTBGQlFUdHZRa0ZEWWl3MlFrRkJOa0k3YjBKQlF6ZENMSE5DUVVGUkxFVkJRVVVzUTBGQlFUdHZRa0ZEVml4alFVRmpMRVZCUVVVc1EwRkJRVHR2UWtGRGFFSXNXVUZCV1N4RlFVRkZMRU5CUVVFN2IwSkJjVUpTTEZOQlFWTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGdFFpeG5Ra0ZCWjBJc1EwRkJReXhEUVVGQk8yOUNRVU0xUlN4SlFVRkpMRk5CUVZNc1JVRkJSVHQzUWtGRFlpeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEZWQlFVRXNTMEZCU3pzMFFrRkRNVU1zU1VGQlRTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZCT3pSQ1FVTjRReXhKUVVGTkxGZEJRVmNzUjBGQlJ5eEhRVUZITEVkQlFVY3NSVUZCUlN4SlFVRkpMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVUVzUTBGQlF5eHJRMEZCYTBNN05FSkJRek5GTEVsQlFVMHNWVUZCVlN4SFFVRkhMRWRCUVVjc1MwRkJTeXhGUVVGRkxFTkJRVUU3TkVKQlJUZENMRWxCUVVrc1EwRkJReXhWUVVGVkxFbEJRVWtzVjBGQlZ6dG5RMEZCUlN4TFFVRkxMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVUU3ZDBKQlEzaEVMRU5CUVVNc1EwRkJReXhEUVVGQk8zZENRVWRGTEdsQ1FVRmxMRk5CUVZNc1EwRkJReXhMUVVGTExFbEJRVWtzUlVGQlJTeERRVUZCTzNkQ1FVTjRReXhUUVVGVExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUTBGQlF6czBRa0ZEYmtNc1NVRkJUU3hOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFUQkNMRU5CUVVFN05FSkJRek5ETEVsQlFVa3NXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzJkRFFVRkZMR05CUVZrc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZCT3p0blEwRkRNMFFzVFVGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl4alFVRlpMRU5CUVVFN05FSkJRMmhETERSRVFVRTBSRHMwUWtGRk5VUXNkMEpCUVhkQ096UkNRVU40UWl4M1EwRkJkME03TkVKQlEzaERMR2REUVVGblF6czBRa0ZEYUVNc1YwRkJWenMwUWtGRFdDeG5RMEZCWjBNN05FSkJRMmhETERaRVFVRTJSRHMwUWtGRE4wUXNTVUZCU1R0M1FrRkRUaXhEUVVGRExFTkJRVU1zUTBGQlFUdDNRa0ZGUml4elFrRkJjMEk3ZDBKQlEzUkNMSE5FUVVGelJEdDNRa0ZEZEVRc2FVUkJRV2xFTzNkQ1FVTnFSQ3cwUlVGQk5FVTdkMEpCUXpWRkxFMUJRVTA3Y1VKQlExQTdiMEpCUjBzc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdHZRa0ZEYWtRc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdHZRa0ZEYWtRc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVFN2IwSkJSWEpFTEVsQlFVa3NZVUZCU2l4SlFVRkpMSFZDUVVGS0xFbEJRVWtzUTBGQlJTeG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVU3ZDBKQlF6bENMRWxCUVVrc1lVRkJTaXhKUVVGSkxIVkNRVUZLTEVsQlFVa3NRMEZCUlN4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHRkJRV0VzUlVGQlF6dDNRa0ZEYkVNc1NVRkJTU3hoUVVGS0xFbEJRVWtzZFVKQlFVb3NTVUZCU1N4RFFVRkZMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeEZRVUZETzNkQ1FVTnlReXhMUVVGTExHRkJRVXdzUzBGQlN5eDFRa0ZCVEN4TFFVRkxMRU5CUVVVc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVTTdiMEpCUXpsQ0xFTkJRVU1zUlVGQlF6dHZRa0ZEUml4SlFVRkpMR0ZCUVVvc1NVRkJTU3gxUWtGQlNpeEpRVUZKTEVOQlFVVXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTzNkQ1FVTTVRaXhKUVVGSkxHRkJRVW9zU1VGQlNTeDFRa0ZCU2l4SlFVRkpMRU5CUVVVc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVWQlFVTTdkMEpCUTNKRExFbEJRVWtzWVVGQlNpeEpRVUZKTEhWQ1FVRktMRWxCUVVrc1EwRkJSU3hUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNSVUZCUXp0M1FrRkRiRU1zUzBGQlN5eGhRVUZNTEV0QlFVc3NkVUpCUVV3c1MwRkJTeXhEUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkRPMjlDUVVOcVF5eERRVUZETEVWQlFVTTdPenM3TzBOQlEwZzdRVUZKUkN4VFFVRlRMR05CUVdNN1NVRkRja0lzU1VGQlRTeHBRa0ZCYVVJc1IwRkJSeXh0UWtGQmJVSXNRMEZCUVR0SlFVTTNReXhKUVVGTkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRV01zYVVKQlFXbENMRU5CUVVNc1EwRkJRVHRKUVVNeFJTeEpRVUZKTEZGQlFWRXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJRenRSUVVGRkxFOUJRVTA3U1VGRmFrTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFOUJRVTg3VVVGRGRFSXNUMEZCUVN4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMSE5DUVVOb1F5eFBRVUZCTEdOQlFXTXNUMEZCUXl4UFFVRlBMR0ZCUVZBc1QwRkJUeXgxUWtGQlVDeFBRVUZQTEVOQlFVVXNWVUZCVlN3d1EwRkJSU3hoUVVGaExFTkJRV01zVDBGQlR5eEZRVUZGTEVOQlFVRXNSVUZCUVN4RFFVTjZSVHRKUVVaRUxFTkJSVU1zUTBGRFJpeERRVUZCTzBsQlJVUXNVMEZCVXl4alFVRmpMRU5CUVVNc1dVRkJXVHRSUVVOc1F5eEpRVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkJMRmxCUVZrc1lVRkJXaXhaUVVGWkxIVkNRVUZhTEZsQlFWa3NRMEZCUlN4WlFVRlpMRU5CUVVNc1RVRkJUU3hQUVVGTkxGVkJRVlVzUTBGQlFUdFJRVU40UlN4SlFVRkpMRk5CUVZNc1IwRkJSeXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGQk8xRkJSWEJFTEZsQlFWa3NZVUZCV2l4WlFVRlpMSFZDUVVGYUxGbEJRVmtzUTBGQlJTeFpRVUZaTEVOQlFVTXNUVUZCVFN4RlFVRkZMRk5CUVZNc1JVRkJRenRKUVVNdlF5eERRVUZETzBGQlEwZ3NRMEZCUXp0QlFVVkVMRk5CUVZNc1kwRkJZenRKUVVOeVFpeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGQk8wbEJSV3hDTEZOQlFWTXNaMEpCUVdkQ096dFJRVU4yUWl4SlFVRk5MR2xDUVVGcFFpeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUVR0UlFVTnNSaXhKUVVGSExFTkJRVU1zYVVKQlFXbENPMWxCUVVVc1QwRkJUVHRSUVVVM1FpeEpRVUZITEdsQ1FVRnBRaXhEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVN1dVRkRjRVFzYVVKQlFXbENMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0WlFVTXZReXhOUVVGQkxHbENRVUZwUWl4RFFVRkRMR3RDUVVGclFpd3dRMEZCUlN4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUlVGQlF6dFRRVU55UlR0SlFVTklMRU5CUVVNN1NVRkRSQ3hUUVVGVExGVkJRVlU3VVVGRFdDeEpRVUZCTERKQ1FVRkpMRU5CUVc5Q08xRkJRemxDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRmRCUVZFc1NVRkJTU3hMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVFN1VVRkZkRVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGQk8xRkJRelZDTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUVR0SlFVTjRReXhEUVVGRE8wRkJRMGdzUTBGQlF6dEJRVVZFTEd0Q1FVRnJRanRCUVVOc1FpeHZRa0ZCYjBJN1FVRkRjRUlzYlVKQlFXMUNPMEZCUTI1Q0xHRkJRV0U3UVVGRFlpeDVRMEZCZVVNN1FVRkRla01zZFVOQlFYVkRPMEZCUTNaRExFOUJRVTg3UVVGRFVDeHhRa0ZCY1VJN1FVRkRja0lzTUVOQlFUQkRPMEZCUXpGRExFOUJRVTg3UVVGRFVDeEpRVUZKTzBGQlEwb3NaMFJCUVdkRU8wRkJRMmhFTERKRVFVRXlSRHRCUVVNelJDd3lRa0ZCTWtJN1FVRkZNMElzYVVSQlFXbEVPMEZCUTJwRUxEUkVRVUUwUkR0QlFVTTFSQ3c0UkVGQk9FUTdRVUZET1VRc0swTkJRU3RETzBGQlF5OURMRFJEUVVFMFF6dEJRVU0xUXl3NFJFRkJPRVE3UVVGRE9VUXNOa1ZCUVRaRk8wRkJRemRGTEV0QlFVczdRVUZGVEN3NFEwRkJPRU03UVVGRE9VTXNLMFJCUVN0RU8wRkJReTlFTERaRFFVRTJRenRCUVVNM1F5eExRVUZMTzBGQlEwd3NaMEpCUVdkQ08wRkJRMmhDTEV0QlFVczdRVUZGVEN4blFrRkJaMEk3UVVGRGFFSXNkMFJCUVhkRU8wRkJRM2hFTEhWRVFVRjFSRHRCUVVOMlJDeExRVUZMTzBGQlEwd3NkVUpCUVhWQ08wRkJRM1pDTEhORFFVRnpRenRCUVVOMFF5dzBRa0ZCTkVJN1FVRkROVUlzVDBGQlR6dEJRVVZRTEdOQlFXTTdRVUZEWkN4NVJFRkJlVVE3UVVGRGVrUXNhVU5CUVdsRE8wRkJRMnBETEdkRVFVRm5SRHRCUVVOb1JDeDNSVUZCZDBVN1FVRkRlRVVzYVVOQlFXbERPMEZCUTJwRExIRkRRVUZ4UXp0QlFVTnlReXhwUTBGQmFVTTdRVUZEYWtNc2EwTkJRV3RETzBGQlEyeERMR2xEUVVGcFF6dEJRVU5xUXl3clFrRkJLMEk3UVVGREwwSXNjMFJCUVhORU8wRkJRM1JFTEN0RVFVRXJSRHRCUVVNdlJDdzRSa0ZCT0VZN1FVRkRPVVlzTkVSQlFUUkVPMEZCUXpWRUxESkVRVUV5UkR0QlFVTXpSQ3hsUVVGbE8wRkJRMllzVVVGQlVUdEJRVU5TTEV0QlFVczdRVUZEVEN4TlFVRk5PMEZCUTA0c2NVSkJRWEZDTzBGQlEzSkNMSFZDUVVGMVFqdEJRVU4yUWl4blEwRkJaME03UVVGRGFFTXNOa0pCUVRaQ08wRkJRemRDTEc5RVFVRnZSRHRCUVVOd1JDdzJSRUZCTmtRN1FVRkROMFFzTkVaQlFUUkdPMEZCUXpWR0xEQkVRVUV3UkR0QlFVTXhSQ3g1UkVGQmVVUTdRVUZEZWtRc1lVRkJZVHRCUVVOaUxFOUJRVTg3UVVGRFVDeFhRVUZYTzBGQlJWZ3NaMFJCUVdkRU8wRkJRMmhFTEhORlFVRnpSVHRCUVVOMFJTeG5SVUZCWjBVN1FVRkRhRVVzYVVSQlFXbEVPMEZCUldwRUxEaERRVUU0UXp0QlFVTTVReXhwUkVGQmFVUTdRVUZGYWtRc0swVkJRU3RGTzBGQlF5OUZMRzFDUVVGdFFqdEJRVU51UWl4MVJFRkJkVVE3UVVGRGRrUXNLME5CUVN0RE8wRkJReTlETEhWRVFVRjFSRHRCUVVOMlJDeGhRVUZoTzBGQlEySXNORU5CUVRSRE8wRkJRelZETERaRFFVRTJRenRCUVVNM1F5eG5SVUZCWjBVN1FVRkRhRVVzYjBSQlFXOUVPMEZCUTNCRUxHOUVRVUZ2UkR0QlFVTndSQ3gzUkVGQmQwUTdRVUZEZUVRc1RVRkJUVHRCUVVOT0xFMUJRVTA3UVVGRlRpeHZRa0ZCYjBJN1FVRkRjRUlzY1VKQlFYRkNPMEZCUTNKQ0xIVkNRVUYxUWp0QlFVTjJRaXh6UlVGQmMwVTdRVUZEZEVVc1owTkJRV2RETzBGQlEyaERMRkZCUVZFN1FVRkRVaXhMUVVGTE8wRkJSVXdzVFVGQlRUdEJRVVZPTERoRlFVRTRSVHRCUVVVNVJTeDNRa0ZCZDBJN1FVRkZlRUlzTkVKQlFUUkNPMEZCUXpWQ0xHZERRVUZuUXp0QlFVVm9ReXh0UTBGQmJVTTdRVUZEYmtNc2QwbEJRWGRKTzBGQlJYaEpMR3REUVVGclF6dEJRVU5zUXl3clFrRkJLMEk3UVVGRkwwSXNiMFZCUVc5Rk8wRkJRM0JGTERKRlFVRXlSVHRCUVVNelJTd3JSRUZCSzBRN1FVRkRMMFFzTmtSQlFUWkVPMEZCUXpkRUxESkVRVUV5UkR0QlFVTXpSQ3h4UlVGQmNVVTdRVUZEY2tVc2QwVkJRWGRGTzBGQlEzaEZMSGRGUVVGM1JUdEJRVU40UlN3NFJVRkJPRVU3UVVGRk9VVXNPRVJCUVRoRU8wRkJRemxFTEV0QlFVczdRVUZGVEN4dFFrRkJiVUk3UVVGRGJrSXNkVWRCUVhWSE8wRkJRM1pITEdsSFFVRnBSenRCUVVOcVJ5eG5SMEZCWjBjN1FVRkRhRWNzYjBkQlFXOUhPMEZCUTNCSExFbEJRVWs3UVVGRFNpeHJSVUZCYTBVN1FVRkRiRVVzV1VGQldUdEJRVU5hTEhORFFVRnpRenRCUVVOMFF5eDVRa0ZCZVVJN1FVRkRla0lzSzBWQlFTdEZPMEZCUXk5RkxDdEVRVUVyUkR0QlFVTXZSQ3g1U2tGQmVVbzdRVUZEZWtvc2IwUkJRVzlFTzBGQlEzQkVMSEZFUVVGeFJEdEJRVU55UkN3clEwRkJLME03UVVGREwwTXNiVUpCUVcxQ08wRkJRMjVDTEdsQ1FVRnBRanRCUVVOcVFpeHRSa0ZCYlVZN1FVRkRia1lzWTBGQll6dEJRVU5rTEhsQ1FVRjVRanRCUVVONlFpeG5Ra0ZCWjBJN1FVRkRhRUlzZFVKQlFYVkNPMEZCUTNaQ0xEQkNRVUV3UWp0QlFVTXhRaXhKUVVGSk8wRkJSVW9zWVVGQllUdEJRVU5pTERSRFFVRTBRenRCUVVNMVF5dzJSRUZCTmtRN1FVRkROMFFzTkVSQlFUUkVPMEZCUXpWRUxEQkNRVUV3UWp0QlFVTXhRaXh6UTBGQmMwTTdRVUZEZEVNc2FVVkJRV2xGTzBGQlEycEZMQ3RDUVVFclFqdEJRVU12UWl4UFFVRlBPMEZCUTFBc2EwTkJRV3RETzBGQlEyeERMRmxCUVZrN1FVRkZXaXhuUkVGQlowUTdRVUZEYUVRc1owTkJRV2RETzBGQlEyaERMSEZEUVVGeFF6dEJRVU55UXl4elJFRkJjMFE3UVVGRGRFUXNPRVJCUVRoRU8wRkJRemxFTERSQ1FVRTBRanRCUVVNMVFpeE5RVUZOTzBGQlJVNHNiMFJCUVc5RU8wRkJRM0JFTEd0Q1FVRnJRanRCUVVOc1FpdzRRa0ZCT0VJN1FVRkRPVUlzTWtKQlFUSkNPMEZCUXpOQ0xHRkJRV0U3UVVGRFlpeHZRa0ZCYjBJN1FVRkRjRUlzYVVOQlFXbERPMEZCUTJwRExHMUVRVUZ0UkR0QlFVTnVSQ3gxUWtGQmRVSTdRVUZEZGtJc01rTkJRVEpETzBGQlF6TkRMRXRCUVVzN1FVRkRUQ3hMUVVGTE8wRkJRMHdzZVVKQlFYbENPMEZCUTNwQ0xIbERRVUY1UXp0QlFVVjZReXg1UWtGQmVVSTdRVUZEZWtJc05rUkJRVFpFTzBGQlF6ZEVMSGRDUVVGM1FqdEJRVU40UWl4TlFVRk5PMEZCUlU0c01FTkJRVEJETzBGQlJURkRMRk5CUVZNc2FVSkJRV2xDTzBsQlEzaENMRWxCUVUwc1pVRkJaU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1NVRkRla1VzU1VGQlRTeFhRVUZYTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXh6UWtGQmMwSXNRMEZCUXl4RFFVRkJPMGxCUXk5RkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVsQlFVa3NRMEZCUXl4bFFVRmxPMUZCUVVVc1QwRkJUVHRKUVVVMVF5eEpRVUZOTEVsQlFVa3NSMEZCUnl4RFFVRkJMRmRCUVZjc1lVRkJXQ3hYUVVGWExIVkNRVUZZTEZkQlFWY3NRMEZCUlN4WFFVRlhMRTFCUVVrc1YwRkJWeXhoUVVGWUxGZEJRVmNzZFVKQlFWZ3NWMEZCVnl4RFFVRkZMRk5CUVZNc1EwRkJRU3hEUVVGQk8wbEJReTlFTEVsQlFVa3NWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1EwRkJRVHRKUVVNMVF5eEpRVUZOTEdOQlFXTXNSMEZCUnl4SFFVRkhMRU5CUVVFN1NVRkRNVUlzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzWTBGQll5eERRVUZETEVOQlFVRTdTVUZEYkVRc1NVRkJUU3hOUVVGTkxFZEJRVTBzUzBGQlN5eGpRVUZYTEVOQlFVRTdTVUZEYkVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUVR0SlFVVnVRaXhsUVVGbExFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUVR0QlFVTndReXhEUVVGRE8wRkJSVVFzZVVKQlFYbENPMEZCUTNwQ0xESkVRVUV5UkR0QlFVTXpSQ3h6UTBGQmMwTTdRVUZEZEVNc2QwVkJRWGRGTzBGQlEzaEZMR2REUVVGblF6dEJRVVZvUXl4blJFRkJaMFE3UVVGRGFFUXNOa05CUVRaRE8wRkJRemRETERaRVFVRTJSRHRCUVVNM1JDeG5SRUZCWjBRN1FVRkRhRVFzVDBGQlR6dEJRVU5RTEVsQlFVazdRVUZGU2l4VFFVRlRMRmxCUVZrN1NVRkRia0lzU1VGQlRTeFpRVUZaTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXh0UWtGQmJVSXNRMEZCUXl4RFFVRkJPMGxCUXpkRkxFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRmpMSFZDUVVGMVFpeERRVUZETEVOQlFVRTdTVUZGZUVZc1owSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenRSUVVNdlFpeFBRVUZCTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVTdXVUZEYUVNc1dVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1VVRkRNME1zUTBGQlF5eERRVUZETzBsQlJrWXNRMEZGUlN4RFFVTklMRU5CUVVFN1FVRkRTQ3hEUVVGREluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gQHRzLW5vY2hlY2tcclxudmFyIGJyb3dzZXJVdGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHMvYnJvd3NlclV0aWxzXCIpO1xyXG52YXIgcm91dGVzID0gW1xyXG4gICAgeyBuYW1lOiAncm9vdCcsIHBhdGg6ICcvJyB9LFxyXG4gICAgeyBuYW1lOiAnaG9tZScsIHBhdGg6ICcvaG9tZScgfSxcclxuICAgIHsgbmFtZTogJ2Rlc2lnbicsIHBhdGg6ICcvZGVzaWduJyB9LFxyXG4gICAgeyBuYW1lOiAncHJvZmlsZScsIHBhdGg6ICcvcHJvZmlsZScgfSxcclxuICAgIHsgbmFtZTogJ3Bvc3QnLCBwYXRoOiAnL3Bvc3QnIH0sXHJcbl07XHJcbnZhciBjdXJyZW50UGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcclxuLy8gdHlwZSByb3V0ZVR5cGUgPSB7XHJcbi8vICAgbmFtZTogc3RyaW5nXHJcbi8vICAgcGF0aDogc3RyaW5nXHJcbi8vIH1cclxudmFyIHJvdXRlUGFnZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBjb25zdCBhY3RpdmVSb3V0ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbcm91dGVdJylcclxuICAgIC8vIGFjdGl2ZVJvdXRlcy5mb3JFYWNoKHJvdXRlID0+IHJvdXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmF2aWdhdGUsIGZhbHNlKSlcclxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHJvdXRlID0gZXZlbnQudGFyZ2V0LmF0dHJpYnV0ZXNbMF0udmFsdWU7XHJcbiAgICAgICAgdmFyIHJvdXRlSW5mbyA9IHJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0ucGF0aCA9PT0gcm91dGU7IH0pWzBdO1xyXG4gICAgICAgIC8vIGlmICghcm91dGVJbmZvKSB7XHJcbiAgICAgICAgLy8gICBwdXNoQnJvd3Nlckhpc3Rvcnkoe30sICcnLCAnZXJyb3InKVxyXG4gICAgICAgIC8vICAgdmlldy5pbm5lckhUTUwgPSAnbm8gcm91dGUgZXhpc3RzJ1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGNvbnN0IGlzUm9vdFBhZ2UgPSBjdXJyZW50UGF0aCA9PT0gJy8nXHJcbiAgICAgICAgYnJvd3NlclV0aWxzXzEucHVzaEJyb3dzZXJIaXN0b3J5KHt9LCAnJywgcm91dGVJbmZvLnBhdGgpO1xyXG4gICAgICAgIC8vIGlmIChpc1Jvb3RQYWdlKSB7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgIGNvbnN0IHJvdXRlID0gcm91dGVzLmZpbHRlcihpdGVtID0+IGl0ZW0ucGF0aCA9PT0gY3VycmVudFBhdGgpXHJcbiAgICAgICAgLy8gICBpZiAoIXJvdXRlKSB2aWV3LmlubmVySFRNTCA9ICc0MDQnXHJcbiAgICAgICAgLy8gICB2aWV3LmlubmVySFRNTCA9IGAke3JvdXRlLm5hbWV9YFxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgLy8gY29uc3QgcGFnZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zdWJzdHJpbmcoMSlcclxuICAgICAgICAvLyBjb25zdCB1cmkgPSBwYWdlID8gYC92aWV3cy8ke3BhZ2V9Lmh0bWxgIDogJy92aWV3cy9kZXNpZ24uaHRtbCdcclxuICAgICAgICAvLyBjb25zdCByZXNwb25zZSA9IGZldGNoKHVyaSlcclxuICAgICAgICAvLyAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcclxuICAgICAgICAvLyAgIC50aGVuKGh0bWwgPT4gdmlldy5pbm5lckhUTUwgPSBodG1sKVxyXG4gICAgfVxyXG4gICAgdmFyIHZpZXcsIGhhc2gsIHVyaSwgcmVzcG9uc2U7XHJcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB2aWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXcnKTtcclxuICAgICAgICAgICAgICAgIGlmICghdmlldylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgdXJpID0gaGFzaCA/IFwiL3ZpZXdzL1wiICsgaGFzaCArIFwiLmh0bWxcIiA6ICcvdmlld3MvZGVzaWduLmh0bWwnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godXJpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGh0bWwpIHsgcmV0dXJuIHZpZXcuaW5uZXJIVE1MID0gaHRtbDsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gY29uc29sZS53YXJuKCdyb3V0ZXI6ICcsIGVycm9yKTsgfSldO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7IH07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHJvdXRlUGFnZTtcclxuLy8gY29uc3QgbmF2aWdhdGUgPSAoZXZlbnQpID0+IHtcclxuLy8gXHRjb25zdCByb3V0ZSA9IGZpbmRDdXJyZW50VGFyZ2V0LmF0dHJpYnV0ZXNbMF0udmFsdWU7XHJcbi8vIFx0Y29uc3Qgcm91dGVJbmZvID0gbXlGaXJzdFJvdXRlci5yb3V0ZXMuZmluZChyID0+IHIucGF0aCA9PT0gcm91dGUpO1xyXG4vLyBcdGlmKCFyb3V0ZUluZm8pIHtcclxuLy8gXHRcdHZpZXcuaW5uZXJIVE1MID0gJ05vIHJvdXRlIGV4aXN0cyB3aXRoIHRoaXMgcGF0aCc7XHJcbi8vIH07XHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbi8vIFx0aWYgKGhpc3Rvcnkuc3RhdGUgJiYgaGlzdG9yeS5zdGF0ZS5pZCA9PT0gJ2hvbWVwYWdlJykge31cclxuLy8gfSwgZmFsc2UpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbTkxZEdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpY205MWRHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQlFVRXNZMEZCWXp0QlFVTmtMSEZFUVVGNVJEdEJRVVY2UkN4SlFVRk5MRTFCUVUwc1IwRkJSenRKUVVOaUxFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRk8wbEJRek5DTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBsQlF5OUNMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNVMEZCVXl4RlFVRkZPMGxCUTI1RExFVkJRVVVzU1VGQlNTeEZRVUZGTEZOQlFWTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wbEJRM0pETEVWQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBOQlEyaERMRU5CUVVFN1FVRkRSQ3hKUVVGTkxGZEJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJRVHRCUVVNMVF5eHhRa0ZCY1VJN1FVRkRja0lzYVVKQlFXbENPMEZCUTJwQ0xHbENRVUZwUWp0QlFVTnFRaXhKUVVGSk8wRkJRMG9zU1VGQlRTeFRRVUZUTEVkQlFVYzdTVUZoYUVJc05FUkJRVFJFTzBsQlF6VkVMR3RHUVVGclJqdEpRVU5zUml4VFFVRlRMRkZCUVZFc1EwRkJReXhMUVVGTE8xRkJRM0pDTEVsQlFVMHNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRVHRSUVVNNVF5eEpRVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVUVzU1VGQlNTeEpRVUZKTEU5QlFVRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhMUVVGTExFVkJRVzVDTEVOQlFXMUNMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU12UkN4dlFrRkJiMEk3VVVGRGNFSXNkME5CUVhkRE8xRkJRM2hETEhWRFFVRjFRenRSUVVOMlF5eFhRVUZYTzFGQlExZ3NTVUZCU1R0UlFVTklMSGxEUVVGNVF6dFJRVU14UXl4cFEwRkJhMElzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdFJRVVV4UXl4dlFrRkJiMEk3VVVGRGNFSXNWMEZCVnp0UlFVTllMRzFGUVVGdFJUdFJRVU51UlN4MVEwRkJkVU03VVVGRmRrTXNjVU5CUVhGRE8xRkJRM0pETEVsQlFVazdVVUZGU2l4NVFrRkJlVUk3VVVGRGVrSXNjVVJCUVhGRU8xRkJRM0pFTEd0RlFVRnJSVHRSUVVOc1JTdzRRa0ZCT0VJN1VVRkRPVUlzZFVOQlFYVkRPMUZCUTNaRExIbERRVUY1UXp0SlFVTXpReXhEUVVGRE96czdPenRuUWtGMlEwc3NTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdaMEpCUXpWRExFbEJRVWtzUTBGQlF5eEpRVUZKTzI5Q1FVRkZMSE5DUVVGTk8yZENRVVZpTEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1owSkJRM1JETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVlVzU1VGQlNTeFZRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRzlDUVVGdlFpeERRVUZCTzJkQ1FVTTVReXh4UWtGQlRTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRPM2xDUVVNNVFpeEpRVUZKTEVOQlFVTXNWVUZCUVN4UlFVRlJMRWxCUVVrc1QwRkJRU3hSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFXWXNRMEZCWlN4RFFVRkRPM2xDUVVOcVF5eEpRVUZKTEVOQlFVTXNWVUZCUVN4SlFVRkpMRWxCUVVrc1QwRkJRU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NSVUZCY2tJc1EwRkJjVUlzUTBGQlF6dDVRa0ZEYmtNc1MwRkJTeXhEUVVGRExGVkJRVUVzUzBGQlN5eEpRVUZKTEU5QlFVRXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZETEVWQlFTOUNMRU5CUVN0Q0xFTkJRVU1zUlVGQlFUczdaMEpCU0RWRExGRkJRVkVzUjBGQlJ5eFRRVWRwUXp0blFrRkZiRVFzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3T3pzN1MwRTRRblJDTEVOQlFVRTdRVUZGUkN4clFrRkJaU3hUUVVGVExFTkJRVUU3UVVGRmVFSXNaME5CUVdkRE8wRkJRMmhETEhkRVFVRjNSRHRCUVVONFJDeDFSVUZCZFVVN1FVRkRka1VzYjBKQlFXOUNPMEZCUTNCQ0xIVkVRVUYxUkR0QlFVTjJSQ3hMUVVGTE8wRkJSVXdzZDBSQlFYZEVPMEZCUTNoRUxEUkVRVUUwUkR0QlFVTTFSQ3hoUVVGaEluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBwdXNoQnJvd3Nlckhpc3Rvcnkoc3RhdGUsIHRpdGxlLCB1cmwpIHtcclxuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0ge307IH1cclxuICAgIGlmICh0aXRsZSA9PT0gdm9pZCAwKSB7IHRpdGxlID0gJyc7IH1cclxuICAgIGlmICh1cmwgPT09IHZvaWQgMCkgeyB1cmwgPSAnJzsgfVxyXG4gICAgaGlzdG9yeS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwpO1xyXG59XHJcbmV4cG9ydHMucHVzaEJyb3dzZXJIaXN0b3J5ID0gcHVzaEJyb3dzZXJIaXN0b3J5O1xyXG5mdW5jdGlvbiBiYWNrSGlzdG9yeSgpIHtcclxufVxyXG5leHBvcnRzLmJhY2tIaXN0b3J5ID0gYmFja0hpc3Rvcnk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVluSnZkM05sY2xWMGFXeHpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVluSnZkM05sY2xWMGFXeHpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNVMEZCWjBJc2EwSkJRV3RDTEVOQlFVTXNTMEZCVlN4RlFVRkZMRXRCUVZVc1JVRkJSU3hIUVVGUk8wbEJRV2hETEhOQ1FVRkJMRVZCUVVFc1ZVRkJWVHRKUVVGRkxITkNRVUZCTEVWQlFVRXNWVUZCVlR0SlFVRkZMRzlDUVVGQkxFVkJRVUVzVVVGQlVUdEpRVU5xUlN4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVFN1FVRkRkRU1zUTBGQlF6dEJRVVpFTEdkRVFVVkRPMEZCUlVRc1UwRkJaMElzVjBGQlZ6dEJRVU16UWl4RFFVRkRPMEZCUkVRc2EwTkJRME1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaW5pdGlhbGl6ZUxvYWRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2NrQm9keUVsZW1lbnQpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB1bmxvY2tCb2R5RWxlbWVudCk7XHJcbiAgICAvLyB0b2RvIOuqqOuTiOuhnFxyXG4gICAgZnVuY3Rpb24gbG9ja0JvZHlFbGVtZW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1bmxvY2tCb2R5RWxlbWVudCgpIHtcclxuICAgICAgICB2YXIgbG9hZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sb2FkZXInKTtcclxuICAgICAgICBpZiAoIWxvYWRlckVsZW1lbnQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xyXG4gICAgICAgIGxvYWRlckVsZW1lbnQuaGlkZGVuID0gdHJ1ZTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZXRlY3RCcm93c2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIEJyb3dzZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJyb3dzZXInKTtcclxuICAgIGlmICghQnJvd3NlckVsZW1lbnQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgIHZhciBpc0lFQnJvd3NlciA9IHVzZXJBZ2VudC5pbmRleE9mKCdtc2llJykgPiAtMSB8fCB1c2VyQWdlbnQuaW5kZXhPZigndHJpZGVudCcpID4gLTE7XHJcbiAgICAvLyBjb25zdCBpc0Nocm9tZUJyb3dzZXIgPSB1c2VyQWdlbnQuaW5kZXhPZignY2hyb21lJykgIT09IC0xXHJcbiAgICAvLyBjb25zdCBpc01hY0Jyb3dzZXIgPSAvTWFjfGlQb2R8aVBob25lfGlQYWQvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcclxuICAgIEJyb3dzZXJFbGVtZW50LmhpZGRlbiA9ICFpc0lFQnJvd3NlcjtcclxuICAgIC8vIHRvZG8gcmV0dXJuIGJyb3dzZXJcclxufTtcclxudmFyIGRvd25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gPGEgaHJlZj1cIi9wYXRoL3RvL2ZpbGVcIiBkb3dubG9hZD5Eb3dubG9hZDwvYT5cclxuICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbGluay5kb3dubG9hZCA9ICdmaWxlIG5hbWUnO1xyXG4gICAgbGluay5ocmVmID0gJy9wYXRoL3RvL2ZpbGUnO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgIGxpbmsuY2xpY2soKTtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICAvLyBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoeyAnbWVzc2FnZSc6ICdIZWxsbyBXb3JkJyB9KTtcclxuICAgIC8vIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZGF0YV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xyXG4gICAgLy8gLy8gQ3JlYXRlIG5ldyBVUkxcclxuICAgIC8vIGNvbnN0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgLy8gLy8gQ3JlYXRlIGEgbGluayBhbmQgdHJpZ2dlciB0aGUgZG93bmxvYWRcclxuICAgIC8vIC4uLlxyXG4gICAgLy8gLy8gRnJlZSB0aGUgVVJMIGNyZWF0ZWQgYWJvdmVcclxuICAgIC8vIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XHJcbn07XHJcbmV4cG9ydHMuYWRqdXN0VG9wUGFkZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW5hdmJhcicpO1xyXG4gICAgaWYgKCFoZWFkZXJFbGVtZW50KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciBmbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldEJvZHlNYXJnaW5Ub3AoaGVhZGVyRWxlbWVudCk7IH07XHJcbiAgICBzZXRCb2R5TWFyZ2luVG9wKGhlYWRlckVsZW1lbnQpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7IH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7IH0pO1xyXG4gICAgZnVuY3Rpb24gc2V0Qm9keU1hcmdpblRvcChoZWFkZXJFbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIHZhciBpc0ZpeGVkSGVhZGVyID0gZ2V0Q29tcHV0ZWRTdHlsZShoZWFkZXJFbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcclxuICAgICAgICBib2R5LnN0eWxlLm1hcmdpblRvcCA9IGlzRml4ZWRIZWFkZXIgPyBoZWFkZXJFbGVtZW50LmNsaWVudEhlaWdodCArIFwicHhcIiA6IDA7XHJcbiAgICB9XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHOWhaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklteHZZV1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJZU3hSUVVGQkxHZENRVUZuUWl4SFFVRkhPMGxCUXpsQ0xGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJRVHRKUVVNNVJDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVUU3U1VGRmJFUXNWMEZCVnp0SlFVTllMRk5CUVZNc1pVRkJaVHRSUVVOMFFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdTVUZETVVNc1EwRkJRenRKUVVORUxGTkJRVk1zYVVKQlFXbENPMUZCUTNoQ0xFbEJRVTBzWVVGQllTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1dVRkJXU3hEUVVGRExFTkJRVUU3VVVGRGRrVXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1dVRkJSU3hQUVVGTk8xRkJSVEZDTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0UlFVTXpReXhoUVVGaExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUVR0SlFVTTNRaXhEUVVGRE8wRkJRMGdzUTBGQlF5eERRVUZCTzBGQlJWa3NVVUZCUVN4aFFVRmhMRWRCUVVjN1NVRkRNMElzU1VGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXhoUVVGaExFTkJRVU1zUTBGQlFUdEpRVU42UlN4SlFVRkpMRU5CUVVNc1kwRkJZenRSUVVGRkxFOUJRVTA3U1VGRk0wSXNTVUZCVFN4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUVR0SlFVTnVSQ3hKUVVGTkxGZEJRVmNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEZGtZc05rUkJRVFpFTzBsQlF6ZEVMSGRGUVVGM1JUdEpRVVY0UlN4alFVRmpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZCTzBsQlEzQkRMSE5DUVVGelFqdEJRVU40UWl4RFFVRkRMRU5CUVVFN1FVRkxSQ3hKUVVGTkxGRkJRVkVzUjBGQlJ6dEpRVU5tTEdkRVFVRm5SRHRKUVVOb1JDeEpRVUZOTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEzaERMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVjBGQlZ5eERRVUZCTzBsQlF6TkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzWlVGQlpTeERRVUZCTzBsQlJUTkNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUXk5Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUVR0SlFVVmFMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUlM5Q0xEUkVRVUUwUkR0SlFVTTFSQ3dyUkVGQkswUTdTVUZETDBRc2IwSkJRVzlDTzBsQlEzQkNMR2RFUVVGblJEdEpRVU5vUkN3MFEwRkJORU03U1VGRE5VTXNUVUZCVFR0SlFVTk9MR2REUVVGblF6dEpRVU5vUXl4dFEwRkJiVU03UVVGRGNrTXNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3huUWtGQlowSXNSMEZCUnp0SlFVTTVRaXhKUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRmxCUVZrc1EwRkJReXhEUVVGQk8wbEJRM1pGTEVsQlFVa3NRMEZCUXl4aFFVRmhPMUZCUVVVc1QwRkJUVHRKUVVVeFFpeEpRVUZOTEVWQlFVVXNSMEZCUnl4alFVRk5MRTlCUVVFc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRVZCUVM5Q0xFTkJRU3RDTEVOQlFVRTdTVUZEYUVRc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRMMElzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNjVUpCUVhGQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFYcENMRU5CUVhsQ0xFTkJRVU1zUTBGQlFUdEpRVU5zUlN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3h4UWtGQmNVSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJla0lzUTBGQmVVSXNRMEZCUXl4RFFVRkJPMGxCUld4RkxGTkJRVk1zWjBKQlFXZENMRU5CUVVNc1lVRkJZVHRSUVVNM1FpeEpRVUZCTEc5Q1FVRkpMRU5CUVd0Q08xRkJRemxDTEVsQlFVMHNZVUZCWVN4SFFVRkhMR2RDUVVGblFpeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRkZCUVZFc1MwRkJTeXhQUVVGUExFTkJRVUU3VVVGRk1VVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFZEJRVWNzWVVGQllTeERRVUZETEVOQlFVTXNRMEZCU1N4aFFVRmhMRU5CUVVNc1dVRkJXU3hQUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTTVSU3hEUVVGRE8wRkJRMGdzUTBGQlF5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY2Fyb3VzZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY2F0ZWdvcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyJyk7XHJcbiAgICBpZiAoIWNhdGVnb3J5KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciBjYXRlZ29yeUxpc3QgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXZpZXdlcicpO1xyXG4gICAgdmFyIGNhdGVnb3J5TGlzdFNsaWRlID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci12aWV3ZXIgPiBidXR0b24nKTtcclxuICAgIHZhciBjYXRlZ29yeU5hdmlnYXRpb25QcmV2ID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvcignLnNsaWRlci1hcnJvd3MtcHJldicpO1xyXG4gICAgdmFyIGNhdGVnb3J5TmF2aWdhdGlvbk5leHQgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWFycm93cy1uZXh0Jyk7XHJcbiAgICB2YXIgY2F0ZWdvcnlEb3RzID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1kb3RzLWRvdCcpO1xyXG4gICAgaWYgKCFjYXRlZ29yeUxpc3QgfHwgIWNhdGVnb3J5TGlzdFNsaWRlIHx8ICFjYXRlZ29yeU5hdmlnYXRpb25QcmV2IHx8ICFjYXRlZ29yeU5hdmlnYXRpb25OZXh0IHx8ICFjYXRlZ29yeURvdHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGNhdGVnb3J5Q29udGFpbmVyV2lkdGggPSBjYXRlZ29yeUxpc3Qub2Zmc2V0V2lkdGg7XHJcbiAgICB2YXIgc3VtID0gMDtcclxuICAgIGNhdGVnb3J5TGlzdFNsaWRlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIChzdW0gKz0gaXRlbS5vZmZzZXRXaWR0aCk7IH0pO1xyXG4gICAgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvTmV4dCk7XHJcbiAgICBjYXRlZ29yeU5hdmlnYXRpb25QcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9QcmV2KTtcclxuICAgIGNhdGVnb3J5RG90cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyB9KTsgfSk7XHJcbiAgICBjYXRlZ29yeUxpc3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQ7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3Njcm9sbC1sZWZ0Jywgc2Nyb2xsTGVmdCwgJ29mZnNldC13aWR0aCcsIGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpO1xyXG4gICAgfSk7XHJcbiAgICBmdW5jdGlvbiB0b1ByZXYoKSB7XHJcbiAgICAgICAgY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgLT0gMTAwO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdG9OZXh0KCkge1xyXG4gICAgICAgIGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0ICs9IDEwMDtcclxuICAgICAgICAvLyBpZihzdW0gPiBjYXRlZ29yeUNvbnRhaW5lcldpZHRoKSB7fVxyXG4gICAgICAgIC8vIGNvbnN0IHR0dCA9IDEwMCArICdweCc7XHJcbiAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlci12aWV3ZXInKS5zdHlsZS50cmFuc2Zvcm0gKz0gJ3RyYW5zbGF0ZVgoJyt0dHQrJyknO1xyXG4gICAgfVxyXG59O1xyXG4vLyB0b2RvXHJcbmV4cG9ydHMuc2V0RGFya21vZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZGFya21vZGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGFya21vZGUnKTtcclxuICAgIGNvbnNvbGUubG9nKGRhcmttb2RlQnV0dG9uKTtcclxuICAgIGlmICghZGFya21vZGVCdXR0b24pXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGFya21vZGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0dCk7XHJcbiAgICBsb2FkVGhlbWUoKTtcclxuICAgIGZ1bmN0aW9uIHR0KCkge1xyXG4gICAgICAgIHZhciBEQVJLX0NMQVNTID0gJ3RoZW1lLWRhcmsnO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZShEQVJLX0NMQVNTKTtcclxuICAgICAgICB2YXIgaXNEYXJrbW9kZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKERBUktfQ0xBU1MpO1xyXG4gICAgICAgIGRhcmttb2RlQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuY2hlY2tlZCA9IGlzRGFya21vZGU7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZGFya21vZGVCdXR0b24hLnBhcmVudE5vZGUhLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykhLmNoZWNrZWQpXHJcbiAgICAgICAgaWYgKGlzRGFya21vZGUpIHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgREFSS19DTEFTUyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGhlbWUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsb2FkVGhlbWUoKSB7XHJcbiAgICAgICAgdmFyIGxhc3RUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpO1xyXG4gICAgICAgIGlmICghbGFzdFRoZW1lKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGxhc3RUaGVtZSk7XHJcbiAgICAgICAgdmFyIERBUktfQ0xBU1MgPSAndGhlbWUtZGFyayc7XHJcbiAgICAgICAgdmFyIGlzRGFya21vZGUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhEQVJLX0NMQVNTKTtcclxuICAgICAgICBkYXJrbW9kZUJ1dHRvbi5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLmNoZWNrZWQgPSBpc0Rhcmttb2RlO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhcmttb2RlQnV0dG9uIS5wYXJlbnROb2RlIS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpIS5jaGVja2VkKVxyXG4gICAgfVxyXG59O1xyXG4vLyBmdW5jdGlvbiB0b2dnbGVUaGVtZSgpIHtcclxuLy8gICAvLyDsoIDsnqXrkJwg6rCS7J20IOyXhuuLpOuptCDsi5zsiqTthZwg7ISk7KCV7J2EIOq4sOykgOycvOuhnCDtlahcclxuLy8gICBjb25zdCBjdXJyZW50VGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKSB8fCAod2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKS5tYXRjaGVzID8gJ2RhcmsnIDogJ2xpZ2h0JylcclxuLy8gICBjb25zdCBuZXdUaGVtZSA9IGN1cnJlbnRUaGVtZSA9PT0gJ2RhcmsnID8gJ2xpZ2h0JyA6ICdkYXJrJ1xyXG4vLyAgIC8vIOy1nOyDgeychCDsl5jrpqzrqLztirjsl5Ag7ISk7KCVLCDroZzsu6wg7Iqk7Yag66as7KeA7JeQIOyEpOygleydhCDsoIDsnqVcclxuLy8gICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgbmV3VGhlbWUpXHJcbi8vICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgbmV3VGhlbWUpXHJcbi8vIH1cclxuLy8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbG9yLXRoZW1lLWluLXRyYW5zaXRpb24nKVxyXG4vLyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgdGhlbWUpXHJcbi8vIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4vLyAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdjb2xvci10aGVtZS1pbi10cmFuc2l0aW9uJylcclxuLy8gfSwgMTAwMClcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJWMFJHRnlhMDF2WkdVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp6WlhSRVlYSnJUVzlrWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZoTEZGQlFVRXNVVUZCVVN4SFFVRkhPMGxCUTNSQ0xFbEJRVTBzVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3U1VGRGJFUXNTVUZCU1N4RFFVRkRMRkZCUVZFN1VVRkJSU3hQUVVGTk8wbEJSWEpDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWjBKQlFXZENMRU5CUVVNc1EwRkJRVHRKUVVNeFJTeEpRVUZOTEdsQ1FVRnBRaXhIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJZeXg1UWtGQmVVSXNRMEZCUXl4RFFVRkJPMGxCUXpOR0xFbEJRVTBzYzBKQlFYTkNMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8wbEJRelZGTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBsQlF6VkZMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkJPMGxCUld4RkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRWxCUVVrc1EwRkJReXhaUVVGWk8xRkJRVVVzVDBGQlRUdEpRVVYwU0N4SlFVRk5MSE5DUVVGelFpeEhRVUZITEZsQlFWa3NRMEZCUXl4WFFVRlhMRU5CUVVFN1NVRkRka1FzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUlZnc2FVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTU3hKUVVGSkxFOUJRVUVzUTBGQlF5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGNlFpeERRVUY1UWl4RFFVRkRMRU5CUVVFN1NVRkZOVVFzYzBKQlFYTkNMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRM2hFTEhOQ1FVRnpRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdEpRVU40UkN4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR5eEpRVUZKTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4alFVRlBMRU5CUVVNc1EwRkJReXhGUVVFelF5eERRVUV5UXl4RFFVRkRMRU5CUVVFN1NVRkZOVVVzV1VGQldTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU01UWl4SlFVRkJMRzlEUVVGVkxFTkJRV2xDTzFGQlEyNURMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeEZRVUZGTEZWQlFWVXNSVUZCUlN4alFVRmpMRVZCUVVVc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0SlFVTm9SaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVVZHTEZOQlFWTXNUVUZCVFR0UlFVTmlMRmxCUVdFc1EwRkJReXhWUVVGVkxFbEJRVWtzUjBGQlJ5eERRVUZCTzBsQlEycERMRU5CUVVNN1NVRkRSQ3hUUVVGVExFMUJRVTA3VVVGRFlpeFpRVUZoTEVOQlFVTXNWVUZCVlN4SlFVRkpMRWRCUVVjc1EwRkJRVHRSUVVNdlFpeHpRMEZCYzBNN1VVRkRkRU1zTUVKQlFUQkNPMUZCUXpGQ0xIRkdRVUZ4Ump0SlFVTjJSaXhEUVVGRE8wRkJRMGdzUTBGQlF5eERRVUZCTzBGQlIwUXNUMEZCVHp0QlFVTk5MRkZCUVVFc1YwRkJWeXhIUVVGSE8wbEJRM3BDTEVsQlFVMHNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVRTdTVUZETjBRc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUVR0SlFVTXpRaXhKUVVGSExFTkJRVU1zWTBGQll6dFJRVUZGTEU5QlFVMDdTVUZGTVVJc1kwRkJZeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVVUxUXl4VFFVRlRMRVZCUVVVc1EwRkJRVHRKUVVsWUxGTkJRVk1zUlVGQlJUdFJRVU5VTEVsQlFVMHNWVUZCVlN4SFFVRkhMRmxCUVZrc1EwRkJRVHRSUVVVdlFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVRTdVVUZGTVVNc1NVRkJUU3hWUVVGVkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzFGQlJTOUVMR05CUVdVc1EwRkJReXhoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZGTEVOQlFVTXNUMEZCVHl4SFFVRkhMRlZCUVZVc1EwRkJRVHRSUVVNMVJDd3lSVUZCTWtVN1VVRkRNMFVzU1VGQlNTeFZRVUZWTEVWQlFVVTdXVUZEWkN4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUVR0VFFVTXhRenRoUVVGTk8xbEJRMHdzV1VGQldTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRUUVVOcVF6dEpRVVZJTEVOQlFVTTdTVUZGUkN4VFFVRlRMRk5CUVZNN1VVRkRhRUlzU1VGQlRTeFRRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdFJRVU12UXl4SlFVRkpMRU5CUVVNc1UwRkJVenRaUVVGRkxFOUJRVTA3VVVGRmRFSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMUZCUlhSRExFbEJRVTBzVlVGQlZTeEhRVUZITEZsQlFWa3NRMEZCUVR0UlFVTXZRaXhKUVVGTkxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVRTdVVUZETDBRc1kwRkJaU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVVXNRMEZCUXl4UFFVRlBMRWRCUVVjc1ZVRkJWU3hEUVVGQk8xRkJSVFZFTERKRlFVRXlSVHRKUVVNM1JTeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJPMEZCUlVRc01rSkJRVEpDTzBGQlF6TkNMR2xEUVVGcFF6dEJRVU5xUXl4NVNVRkJlVWs3UVVGRGVra3NaMFZCUVdkRk8wRkJSV2hGTEhGRFFVRnhRenRCUVVOeVF5eHJSVUZCYTBVN1FVRkRiRVVzTkVOQlFUUkRPMEZCUXpWRExFbEJRVWs3UVVGUFNpeHpSVUZCYzBVN1FVRkRkRVVzTmtSQlFUWkVPMEZCUXpkRUxHbERRVUZwUXp0QlFVTnFReXd5UlVGQk1rVTdRVUZETTBVc1YwRkJWeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHRvZ2dsZUNsYXNzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG9nZ2xlQ2xhc3NcIikpO1xyXG52YXIgZW50ZXJUYXJnZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lbnRlclRhcmdldFwiKSk7XHJcbnZhciB0YWJNZW51XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFiTWVudVwiKSk7XHJcbnZhciBtb2RhbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZGFsXCIpKTtcclxudmFyIHRvVG9wXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG9Ub3BcIikpO1xyXG52YXIgc3RpY2t5RWxlbWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3N0aWNreUVsZW1lbnRcIikpO1xyXG52YXIgc2Nyb2xsQW5pbWF0aW9uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsQW5pbWF0aW9uXCIpKTtcclxudmFyIGNsb3NlUGFyZW50RWxlbWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Nsb3NlUGFyZW50RWxlbWVudFwiKSk7XHJcbnZhciBjdXN0b21DdXJzb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jdXN0b21DdXJzb3JcIikpO1xyXG52YXIgc2Nyb2xsc3B5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsc3B5XCIpKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0ge1xyXG4gICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzXzEuZGVmYXVsdCxcclxuICAgIGVudGVyVGFyZ2V0OiBlbnRlclRhcmdldF8xLmRlZmF1bHQsXHJcbiAgICBtb2RhbDogbW9kYWxfMS5kZWZhdWx0LFxyXG4gICAgdGFiTWVudTogdGFiTWVudV8xLmRlZmF1bHQsXHJcbiAgICB0b1RvcDogdG9Ub3BfMS5kZWZhdWx0LFxyXG4gICAgc3RpY2t5RWxlbWVudDogc3RpY2t5RWxlbWVudF8xLmRlZmF1bHQsXHJcbiAgICBzY3JvbGxBbmltYXRpb246IHNjcm9sbEFuaW1hdGlvbl8xLmRlZmF1bHQsXHJcbiAgICBzY3JvbGxzcHk6IHNjcm9sbHNweV8xLmRlZmF1bHQsXHJcbiAgICBjbG9zZVBhcmVudEVsZW1lbnQ6IGNsb3NlUGFyZW50RWxlbWVudF8xLmRlZmF1bHQsXHJcbiAgICBjdXN0b21DdXJzb3I6IGN1c3RvbUN1cnNvcl8xLmRlZmF1bHRcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKcGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dEJRVUZCTERoRVFVRjFRenRCUVVOMlF5dzRSRUZCZFVNN1FVRkRka01zYzBSQlFTdENPMEZCUXk5Q0xHdEVRVUV5UWp0QlFVTXpRaXhyUkVGQk1rSTdRVUZETTBJc2EwVkJRVEpETzBGQlF6TkRMSE5GUVVFclF6dEJRVU12UXl3MFJVRkJjVVE3UVVGRGNrUXNaMFZCUVhsRE8wRkJRM3BETERCRVFVRnRRenRCUVVWdVF5eHJRa0ZCWlR0SlFVTmlMRmRCUVZjc2RVSkJRVUU3U1VGRFdDeFhRVUZYTEhWQ1FVRkJPMGxCUTFnc1MwRkJTeXhwUWtGQlFUdEpRVU5NTEU5QlFVOHNiVUpCUVVFN1NVRkRVQ3hMUVVGTExHbENRVUZCTzBsQlEwd3NZVUZCWVN4NVFrRkJRVHRKUVVOaUxHVkJRV1VzTWtKQlFVRTdTVUZEWml4VFFVRlRMSEZDUVVGQk8wbEJRMVFzYTBKQlFXdENMRGhDUVVGQk8wbEJRMnhDTEZsQlFWa3NkMEpCUVVFN1EwRkRZaXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgdG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgIHZhciB0cmlnZ2VyID0gX2Euc2VsZWN0b3I7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICB0cmlnZ2VyczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0cmlnZ2VyKSxcclxuICAgICAgICBBQ1RJVkVfQ0xBU1M6ICdpcy1hY3RpdmUnLFxyXG4gICAgICAgIEFDVElWRV9DTEFTUzI6ICdpcy12aXNpYmxlJyxcclxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy50cmlnZ2VycylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAvLyByZWZlY3RvcjogZm9yIDXrsogg64+E64qULi5cclxuICAgICAgICAgICAgICAgIC8vIGNsaWNrRXZlbnRUYXJnZXTsnbQg7JWE64uMIFxyXG4gICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1NlbGYgPSBldmVudC50YXJnZXQgPT09IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1NlbGYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgfSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikgeyByZXR1cm4gX3RoaXMucmVtb3ZlKHRyaWdnZXIpOyB9KTsgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyTmV4dEVsZW1lbnQgPSBlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICBpZiAoIXRyaWdnZXJOZXh0RWxlbWVudClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQUNUSVZFX0NMQVNTKTtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcIlwiICsgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5BQ1RJVkVfQ0xBU1MpKTtcclxuICAgICAgICAgICAgdHJpZ2dlck5leHRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUodGhpcy5BQ1RJVkVfQ0xBU1MyKTtcclxuICAgICAgICAgICAgdHJpZ2dlck5leHRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkFDVElWRV9DTEFTUyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuICAgICAgICAgICAgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkFDVElWRV9DTEFTUzIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xpY2tPdXRib3VuZDogZnVuY3Rpb24gKCkgeyB9XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gdG9nZ2xlQ2xhc3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHOW5aMnhsUTJ4aGMzTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMGIyZG5iR1ZEYkdGemN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEZWQlFVTXNSVUZCWjBNN1VVRkJPVUlzY1VKQlFXbENPMGxCUVd0Q0xFOUJRVUVzUTBGQlF6dFJRVU42UkN4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVNMVF5eFpRVUZaTEVWQlFVVXNWMEZCVnp0UlFVTjZRaXhoUVVGaExFVkJRVVVzV1VGQldUdFJRVU16UWl4VlFVRlZPMWxCUVZZc2FVSkJaMEpETzFsQlprTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUk8yZENRVUZGTEU5QlFVMDdXVUZGTVVJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBMRWxCUVVrc1QwRkJRU3hQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN6dG5Ra0ZEZEVVc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGQlJTeERRVUZCTzJkQ1FVTjBRaXhMUVVGTExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVRTdaMEpCUlhaQ0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1owSkJRM0JDTEhkQ1FVRjNRanRuUWtGRGVFSXNkMEpCUVhkQ08yZENRVU40UWl4TFFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEU5QlFVODdiMEpCUXpOQ0xFbEJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRXRCUVVzc1QwRkJUeXhEUVVGQk8yOUNRVU4yUXl4SlFVRkhMRU5CUVVNc1RVRkJUVHQzUWtGQlJTeExRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8yZENRVU5zUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRaUVVOS0xFTkJRVU1zUTBGQlF5eEZRVmdyUWl4RFFWY3ZRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZCTzFsQlExWXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1kwRkJUU3hQUVVGQkxFdEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUeXhKUVVGSkxFOUJRVUVzUzBGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJjRUlzUTBGQmIwSXNRMEZCUXl4RlFVRjBSQ3hEUVVGelJDeERRVUZETEVOQlFVRTdVVUZEZGtjc1EwRkJRenRSUVVORUxFMUJRVTBzUlVGQlRpeFZRVUZQTEU5QlFVODdXVUZEV2l4SlFVRk5MR3RDUVVGclFpeEhRVUZITEU5QlFVOHNZVUZCVUN4UFFVRlBMSFZDUVVGUUxFOUJRVThzUTBGQlJTeHJRa0ZCYVVNc1EwRkJRVHRaUVVOeVJTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q08yZENRVUZGTEU5QlFVMDdXVUZGTDBJc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xbEJRek5ETEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFdEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlJ5eERRVUZETEVOQlFVRTdXVUZGZWtZc2EwSkJRV3RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdXVUZEZGtRc2EwSkJRV3RDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3l4SlFVRkpMRTlCUVVFc1MwRkJTeXhEUVVGRExHVkJRV1VzUlVGQlJTeEZRVUYyUWl4RFFVRjFRaXhEUVVGRExFTkJRVUU3VVVGRGFFWXNRMEZCUXp0UlFVTkVMRTFCUVUwc1dVRkJReXhQUVVGUE8xbEJRMW9zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFsQlF6TkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMWxCUXpkRExFOUJRVThzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRSUVVOcVJTeERRVUZETzFGQlEwUXNZVUZCWVN4blFrRkJTU3hEUVVGRE8wdEJRMjVDTEVOQlFVTTdRVUZ5UTNkRUxFTkJjVU40UkN4RFFVRkJPMEZCUlVZc2EwSkJRV1VzVjBGQlZ5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBlbnRlclRhcmdldCA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIHRhcmdldEVsZW1lbnQgPSBfYS5zZWxlY3RvcjtcclxuICAgIHZhciBob3ZlckVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbGVtZW50KTtcclxuICAgIGhvdmVyRWxlbWVudHMgPT09IG51bGwgfHwgaG92ZXJFbGVtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaG92ZXJFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZW50ZXJFdmVudChlbGVtZW50KTsgfSk7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbGVhdmVFdmVudChlbGVtZW50KTsgfSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGVudGVyRXZlbnQoZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBpc05hdmlnYXRpb24gPSBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnbmF2YmFyLW1lbnUtaXRlbScpO1xyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuICAgICAgICBpc05hdmlnYXRpb24gJiYgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1zaG93bicpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbGVhdmVFdmVudChlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGlzTmF2aWdhdGlvbiA9IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCduYXZiYXItbWVudS1pdGVtJyk7XHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICBpc05hdmlnYXRpb24gJiYgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zaG93bicpO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBlbnRlclRhcmdldDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWlc1MFpYSlVZWEpuWlhRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpsYm5SbGNsUmhjbWRsZEM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEVsQlFVMHNWMEZCVnl4SFFVRkhMRlZCUVVNc1JVRkJjME03VVVGQmNFTXNNa0pCUVhWQ08wbEJRelZETEVsQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCWXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRKUVVVelJTeGhRVUZoTEdGQlFXSXNZVUZCWVN4MVFrRkJZaXhoUVVGaExFTkJRVVVzVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHp0UlFVTTFRaXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRkxHTkJRVTBzVDBGQlFTeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVc1Q0xFTkJRVzFDTEVOQlFVTXNRMEZCUVR0UlFVTnFSU3hQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRkxHTkJRVTBzVDBGQlFTeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVc1Q0xFTkJRVzFDTEVOQlFVTXNRMEZCUVR0SlFVTnVSU3hEUVVGRExFVkJRVU03U1VGRlJpeFRRVUZUTEZWQlFWVXNRMEZCUXl4UFFVRlBPMUZCUTNwQ0xFbEJRVTBzV1VGQldTeEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVFN1VVRkZia1VzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVUU3VVVGRE4wTXNXVUZCV1N4SlFVRkpMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRKUVVONlJDeERRVUZETzBsQlEwUXNVMEZCVXl4VlFVRlZMRU5CUVVNc1QwRkJUenRSUVVONlFpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGQk8xRkJSVzVGTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZCTzFGQlF6bERMRmxCUVZrc1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3U1VGRE5VUXNRMEZCUXp0QlFVTklMRU5CUVVNc1EwRkJRVHRCUVVWRUxHdENRVUZsTEZkQlFWY3NRMEZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBvcHRpbWl6YXRpb25VdGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL29wdGltaXphdGlvblV0aWxzXCIpO1xyXG52YXIgdGFiTWVudSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHZhciBpbmRpY2F0b3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtdGFibGlzdC1pbmRpY2F0b3InKTtcclxuICAgIHZhciBmaXJzdFRhYiA9IChfYSA9IGluZGljYXRvckVsZW1lbnQgPT09IG51bGwgfHwgaW5kaWNhdG9yRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5kaWNhdG9yRWxlbWVudC5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucXVlcnlTZWxlY3RvcignW3JvbGU9dGFiXScpO1xyXG4gICAgaWYgKCFpbmRpY2F0b3JFbGVtZW50IHx8ICFmaXJzdFRhYilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgZmlyc3RUYWJXaWR0aCA9IGdldENvbXB1dGVkU3R5bGUoZmlyc3RUYWIpLndpZHRoO1xyXG4gICAgaW5kaWNhdG9yRWxlbWVudC5zdHlsZS53aWR0aCA9IGZpcnN0VGFiV2lkdGg7XHJcbiAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IGluaXRpYWxpemVJbmRpY2F0b3IodGFiSW5kaWNhdG9yLCBmaXJzdFRhYldpZHRoKSlcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9wdGltaXphdGlvblV0aWxzXzEudGhyb3R0bGUoaW5pdGlhbGl6ZUluZGljYXRvcihpbmRpY2F0b3JFbGVtZW50LCBmaXJzdFRhYldpZHRoKSk7IH0pO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIHZhciB0YWJzID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9dGFiXScpO1xyXG4gICAgICAgIHZhciB0YWJQYW5lbHMgPSB0YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYnBhbmVsXScpO1xyXG4gICAgICAgIHZhciB0YWJJbmRleCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcclxuICAgICAgICBpZiAoIXRhYnMpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJ1tyb2xlPXRhYl0nKSkge1xyXG4gICAgICAgICAgICBpbmRpY2F0b3JFbGVtZW50LnN0eWxlLmxlZnQgPSB0YXJnZXQub2Zmc2V0TGVmdCArIFwicHhcIjtcclxuICAgICAgICAgICAgaW5kaWNhdG9yRWxlbWVudC5zdHlsZS53aWR0aCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS53aWR0aDtcclxuICAgICAgICAgICAgdGFicy5mb3JFYWNoKGZ1bmN0aW9uICh0YWIpIHsgcmV0dXJuIHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTsgfSk7XHJcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICB0YWJQYW5lbHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdHJ1ZSk7XHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplSW5kaWNhdG9yKHRhYkluZGljYXRvciwgZmlyc3RUYWJXaWR0aCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0YWJJbmRpY2F0b3Iuc3R5bGUud2lkdGggPSBmaXJzdFRhYldpZHRoO1xyXG4gICAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHRhYk1lbnU7XHJcbi8vIGNvbnN0IHsgcGF0aG5hbWUsIGhhc2ggfSA9IHdpbmRvdy5sb2NhdGlvblxyXG4vLyBoaXN0b3J5LnB1c2hTdGF0ZSh7IHRhYm5hbWU6ICd0ZXN0ZXInIH0sICduYW1lJywgYCR7dGFyZ2V0Lm5hbWV9YClcclxuLy8gY29uc3QgdGFiczIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PignW3JvbGU9dGFiXScpXHJcbi8vIGlmICghdGFiMikgcmV0dXJuXHJcbi8vIHRhYnMyLmZvckVhY2godGFiID0+IHtcclxuLy8gICB0YWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbi8vICAgICBjb25zdCB0YWJJbmRleCA9IHRhYi5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKVxyXG4vLyAgICAgY29uc3QgdGFiSW5kaWNhdG9yID0gdGFiPy5wYXJlbnROb2RlPy5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignLnByb2ZpbGUtdGFibGlzdC1pbmRpY2F0b3InKVxyXG4vLyAgICAgaWYgKHRhYkluZGljYXRvcikge1xyXG4vLyAgICAgICB0YWJJbmRpY2F0b3Iuc3R5bGUubGVmdCA9IGAke3RhYi5vZmZzZXRMZWZ0fXB4YFxyXG4vLyAgICAgICB0YWJJbmRpY2F0b3Iuc3R5bGUud2lkdGggPSBnZXRDb21wdXRlZFN0eWxlKHRhYikud2lkdGhcclxuLy8gICAgIH1cclxuLy8gICAgIHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpXHJcbi8vICAgfSlcclxuLy8gfSlcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEdGaVRXVnVkUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkluUmhZazFsYm5VdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4blJVRkJjVVE3UVVGRmNrUXNTVUZCVFN4UFFVRlBMRWRCUVVjN08wbEJRMlFzU1VGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZqTERSQ1FVRTBRaXhEUVVGRExFTkJRVUU3U1VGRE1VWXNTVUZCVFN4UlFVRlJMRk5CUVVjc1owSkJRV2RDTEdGQlFXaENMR2RDUVVGblFpeDFRa0ZCYUVJc1owSkJRV2RDTEVOQlFVVXNWVUZCVlN3d1EwRkJSU3hoUVVGaExFTkJRV01zV1VGQldTeERRVUZETEVOQlFVRTdTVUZEZGtZc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4SlFVRkpMRU5CUVVNc1VVRkJVVHRSUVVGRkxFOUJRVTA3U1VGRk1VTXNTVUZCU1N4aFFVRmhMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGQk8wbEJRM0JFTEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NZVUZCWVN4RFFVRkJPMGxCUlRWRExEQkdRVUV3Ump0SlFVTXhSaXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHTkJRVTBzVDBGQlFTdzBRa0ZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxHRkJRV0VzUTBGQlF5eERRVUZETEVWQlFUbEVMRU5CUVRoRUxFTkJRVU1zUTBGQlFUdEpRVU42Unl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVFc1MwRkJTenRSUVVNNVFpeEpRVUZCTEhGQ1FVRk5MRU5CUVdVN1VVRkROMElzU1VGQlRTeEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRSUVVNM1JDeEpRVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkJPMUZCUTJ4R0xFbEJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VVVGRmJFUXNTVUZCU1N4RFFVRkRMRWxCUVVrN1dVRkJSU3hQUVVGTk8xRkJSV3BDTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJUdFpRVU5vUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRk5MRTFCUVUwc1EwRkJReXhWUVVGVkxFOUJRVWtzUTBGQlFUdFpRVU4wUkN4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMR2RDUVVGblFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRVHRaUVVVM1JDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1IwRkJSeXhKUVVGSkxFOUJRVUVzUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1QwRkJUeXhEUVVGRExFVkJRVEZETEVOQlFUQkRMRU5CUVVNc1EwRkJRVHRaUVVNdlJDeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVWMxUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dG5Ra0ZEZGtJc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN1owSkJReTlDTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzJkQ1FVVXpReXhKUVVGSkxGRkJRVkVzUzBGQlN5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRk8yOUNRVU51UkN4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0dlFrRkRiRU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVUU3YVVKQlF6bERPMWxCUTBnc1EwRkJReXhEUVVGRExFTkJRVUU3VTBGRFNEdEpRVU5JTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRKUVVWU0xGTkJRVk1zYlVKQlFXMUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxHRkJRV0U3VVVGRGRFUXNWVUZCVlN4RFFVRkRPMWxCUTFRc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NZVUZCWVN4RFFVRkJPMUZCUXpGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUVR0SlFVTlVMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4UFFVRlBMRU5CUVVFN1FVRkpkRUlzTmtOQlFUWkRPMEZCUXpkRExIRkZRVUZ4UlR0QlFVVnlSU3h4UlVGQmNVVTdRVUZEY2tVc2IwSkJRVzlDTzBGQlJYQkNMSGxDUVVGNVFqdEJRVU42UWl3MlEwRkJOa003UVVGRE4wTXNjMFJCUVhORU8wRkJRM1JFTEhGSFFVRnhSenRCUVVOeVJ5d3dRa0ZCTUVJN1FVRkRNVUlzZDBSQlFYZEVPMEZCUTNoRUxDdEVRVUVyUkR0QlFVTXZSQ3hSUVVGUk8wRkJSVklzWjBSQlFXZEVPMEZCUTJoRUxFOUJRVTg3UVVGRFVDeExRVUZMSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgdGltZXI7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aW1lcilcclxuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVyKTtcclxuICAgICAgICB0aW1lciA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2soKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYjNCMGFXMXBlbUYwYVc5dVZYUnBiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnZjSFJwYldsNllYUnBiMjVWZEdsc2N5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxGTkJRV2RDTEZGQlFWRXNRMEZCUXl4UlFVRlJPMGxCUXk5Q0xFbEJRVWtzUzBGQmVVSXNRMEZCUVR0SlFVVTNRaXhQUVVGUE8xRkJRMHdzU1VGQlJ5eExRVUZMTzFsQlFVVXNUVUZCVFN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMUZCUXpWRExFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zWTBGQlRTeFBRVUZCTEZGQlFWRXNSVUZCUlN4RlFVRldMRU5CUVZVc1EwRkJReXhEUVVGQk8wbEJRM2hFTEVOQlFVTXNRMEZCUVR0QlFVTklMRU5CUVVNN1FVRlFSQ3cwUWtGUFF5SjkiLCJcInVzZSBzdHJpY3RcIjtcclxuLy9UT0RPOiDrqqjri6wg67CW7J2YIOy7qO2FkOy4oOyXkCBhcmlhLWhpZGRlbiDrqqjri6zsnZgg7JyE7LmY64qUIOuwlOuUlCDslYjsl5A/XHJcbi8vdmFyIGFiYyA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcclxuLy8gcmVxdWlyZSgnLi9tb2RhbC5zY3NzJyk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGJyb3dzZXJVdGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2Jyb3dzZXJVdGlsc1wiKTtcclxudmFyIGdldE9wdGlvbnMgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhIHx8IHt9KSxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn07XHJcbnZhciBnZXREYXRhID0gZnVuY3Rpb24gKHVybCwgZGF0YSkge1xyXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcclxuICAgICAgICB9LFxyXG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uub2spXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgbW9kYWwgPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgIHZhciB0cmlnZ2VyID0gX2Euc2VsZWN0b3I7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBtb2RhbFRyaWdnZXJzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRyaWdnZXIpLFxyXG4gICAgICAgIG1vZGFsQ29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kYWwnKSxcclxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tb2RhbFRyaWdnZXJzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYmFja0hpc3RvcnkpO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGFsVHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kYWxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kYWxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJZCA9IG1vZGFsRWxlbWVudC5kYXRhc2V0Lm1vZGFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmkgPSBcIi92aWV3cy9cIiArIG1vZGFsSWQgKyBcIi5odG1sXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmkpXHJcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2godXJpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tb2RhbENvbnRhaW5lcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubW9kYWxDb250YWluZXIuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2hvd01vZGFsKHdpbmRvdy5wYWdlWU9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3dzZXJVdGlsc18xLnB1c2hCcm93c2VySGlzdG9yeSh7fSwgJycsIG1vZGFsSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNTaG93biA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1tb2RhbC12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNTaG93bilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb3NlRWxlbWVudCA9IF90aGlzLm1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5qcy1tb2RhbC1jbG9zZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGltRWxlbWVudCA9IF90aGlzLm1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1kaW0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VFbGVtZW50ID09PSBudWxsIHx8IGNsb3NlRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlRWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZUVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3NlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzLmJhY2tIaXN0b3J5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGltRWxlbWVudCA9PT0gbnVsbCB8fCBkaW1FbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaW1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX3RoaXMuYmFja0hpc3RvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jbGVhck1vZGFsKF90aGlzLm1vZGFsQ29udGFpbmVyLCBwYWdlWU9mZnNldCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNLZXlFc2MgPSBldmVudC5rZXlDb2RlID09PSAyNztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0tleUVzYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5iYWNrSGlzdG9yeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGNvbnNvbGUud2FybignbW9kYWwgRXJyb3InKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaG93TW9kYWw6IGZ1bmN0aW9uIChwYWdlWU9mZnNldCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLW1vZGFsLXZpc2libGUnKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTsgLy8gdG9kbyBpbXBvcnQgXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gXCItXCIgKyBwYWdlWU9mZnNldCArIFwicHhcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsZWFyTW9kYWw6IGZ1bmN0aW9uIChjb250YWluZXIsIHBhZ2VZT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbW9kYWwtdmlzaWJsZScpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpOyAvLyB0b2RvIGltcG9ydCBcclxuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcGFnZVlPZmZzZXQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmFja0hpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaGlzdG9yeS5iYWNrKCk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBtb2RhbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYlc5a1lXd3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKdGIyUmhiQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRXNOa05CUVRaRE8wRkJRemRETERCRVFVRXdSRHRCUVVNeFJDd3lRa0ZCTWtJN08wRkJSVE5DTEhORVFVRXdSRHRCUVUweFJDeEpRVUZOTEZWQlFWVXNSMEZCUnl4VlFVRkJMRWxCUVVrN1NVRkRja0lzVDBGQlR6dFJRVU5NTEUxQlFVMHNSVUZCUlN4TlFVRk5PMUZCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVOb1F5eFBRVUZQTEVWQlFVVTdXVUZEVUN4alFVRmpMRVZCUVVVc2FVTkJRV2xETzFOQlEyeEVPMHRCUTBZc1EwRkJRVHRCUVVOSUxFTkJRVU1zUTBGQlFUdEJRVVZFTEVsQlFVMHNUMEZCVHl4SFFVRkhMRlZCUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWs3U1VGRGVFSXNUMEZCVHl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRk8xRkJRMmhDTEUxQlFVMHNSVUZCUlN4TlFVRk5PMUZCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUXpGQ0xFOUJRVThzUlVGQlJUdFpRVU5RTEdOQlFXTXNSVUZCUlN4cFEwRkJhVU03VTBGRGJFUTdTMEZEUml4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVUVzVVVGQlVUdFJRVU5rTEVsQlFVa3NVVUZCVVN4RFFVRkRMRVZCUVVVN1dVRkJSU3hQUVVGUExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUVR0UlFVTjJReXhQUVVGUExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN1NVRkRha01zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hKUVVGTkxFdEJRVXNzUjBGQlJ5eFZRVUZETEVWQlFXZERPMUZCUVRsQ0xIRkNRVUZwUWp0SlFVRnJRaXhQUVVGQkxFTkJRVU03VVVGRGJrUXNZVUZCWVN4RlFVRkZMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCWXl4UFFVRlBMRU5CUVVNN1VVRkRPVVFzWTBGQll5eEZRVUZGTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1VVRkJVU3hEUVVGRE8xRkJRemRFTEZWQlFWVTdXVUZCVml4cFFrRjVRME03V1VGNFEwTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaE8yZENRVUZGTEU5QlFVMDdXVUZGTDBJc1VVRkJVU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdXVUZGZGtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4WlFVRlpPMmRDUVVOeVF5eFBRVUZCTEZsQlFWa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCUVN4TFFVRkxPMjlDUVVNeFF5eExRVUZMTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVFN2IwSkJRM1pDTEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRVHR2UWtGRmRFSXNTVUZCVFN4UFFVRlBMRWRCUVVjc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVRTdiMEpCUXpGRExFbEJRVTBzUjBGQlJ5eEhRVUZITEZsQlFWVXNUMEZCVHl4VlFVRlBMRU5CUVVFN2IwSkJRM0JETEc5RFFVRnZRenR2UWtGRGNFTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZCTEZGQlFWRTdkMEpCUTNSQ0xFbEJRVWtzVVVGQlVTeERRVUZETEVWQlFVVTdORUpCUVVVc1QwRkJUeXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVRTdPelJDUVVOc1F5eFBRVUZQTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3YjBKQlEzUkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZCTEVsQlFVazdkMEpCUTFZc1NVRkJTU3hEUVVGRExFdEJRVWtzUTBGQlF5eGpRVUZqT3pSQ1FVRkZMRTlCUVUwN2QwSkJSV2hETEV0QlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlFUdDNRa0ZEY0VNc1MwRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN2QwSkJRMnhETEdsRFFVRnJRaXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVFN2QwSkJSVzVETEVsQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZCTzNkQ1FVTndSU3hKUVVGSExFTkJRVU1zVDBGQlR6czBRa0ZCUlN4UFFVRk5PM2RDUVVWdVFpeEpRVUZOTEZsQlFWa3NSMEZCUnl4TFFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGQk8zZENRVU42UlN4SlFVRk5MRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHQzUWtGRmJFVXNXVUZCV1N4aFFVRmFMRmxCUVZrc2RVSkJRVm9zV1VGQldTeERRVUZGTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZCTEV0QlFVc3NTVUZCU1N4UFFVRkJMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUlVGQmRrSXNRMEZCZFVJc1JVRkJRenQzUWtGRGVrVXNXVUZCV1N4aFFVRmFMRmxCUVZrc2RVSkJRVm9zV1VGQldTeERRVUZGTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkRPM2RDUVVONlJDeFZRVUZWTEdGQlFWWXNWVUZCVlN4MVFrRkJWaXhWUVVGVkxFTkJRVVVzWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVTTdkMEpCUTNaRUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhWUVVGVkxFVkJRVVVzWTBGQlRTeFBRVUZCTEV0QlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTU3hEUVVGRExHTkJRV01zUlVGQlJTeFhRVUZYTEVOQlFVTXNSVUZCYWtRc1EwRkJhVVFzUTBGQlF5eERRVUZCTzNkQ1FVTTFSaXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhGUVVGRkxGVkJRVUVzUzBGQlN6czBRa0ZEZUVNc1NVRkJUU3hSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZMRU5CUVVFN05FSkJRM0pETEVsQlFVa3NVVUZCVVR0blEwRkJSU3hMUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVRTdkMEpCUTJ4RExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUVR0dlFrRkZWaXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCUVN4TFFVRkxMRWxCUVVrc1QwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRXpRaXhEUVVFeVFpeERRVUZETEVOQlFVRTdaMEpCUTJoRUxFTkJRVU1zUTBGQlF6dFpRV3BEUml4RFFXbERSU3hEUVVOSUxFTkJRVUU3VVVGRFNDeERRVUZETzFGQlEwUXNVMEZCVXl4WlFVRkRMRmRCUVZjN1dVRkRia0lzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVFN1dVRkRMME1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTEVOQlFVTXNaVUZCWlR0WlFVTjRSQ3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJTU3hYUVVGWExFOUJRVWtzUTBGQlFUdFJRVU12UXl4RFFVRkRPMUZCUTBRc1ZVRkJWU3haUVVGRExGTkJRVk1zUlVGQlJTeFhRVUZYTzFsQlF5OUNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZCTzFsQlEyeEVMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRU3hEUVVGRkxHVkJRV1U3V1VGRk5VUXNVMEZCVXl4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVUU3V1VGRGVFSXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVRTdVVUZEYWtNc1EwRkJRenRSUVVORUxGZEJRVmM3V1VGRFZDeFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN1VVRkRhRUlzUTBGQlF6dExRVU5HTEVOQlFVTTdRVUUxUkd0RUxFTkJORVJzUkN4RFFVRkJPMEZCUlVZc2EwSkJRV1VzUzBGQlN5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciB0b1RvcCA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIHRhcmdldCA9IF9hLnNlbGVjdG9yO1xyXG4gICAgdmFyIHRvVG9wRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcclxuICAgIGlmICghdG9Ub3BFbGVtZW50KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHRvVG9wRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdG9Ub3BFbGVtZW50Lm5hbWUgfHwgdG9Ub3BFbGVtZW50LmhyZWZcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSB0b1RvcDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEc5VWIzQXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMGIxUnZjQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1MwRkJTeXhIUVVGSExGVkJRVU1zUlVGQkswSTdVVUZCTjBJc2IwSkJRV2RDTzBsQlF5OUNMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXdENMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRM0JGTEVsQlFVa3NRMEZCUXl4WlFVRlpPMUZCUVVVc1QwRkJUVHRKUVVWNlFpeFpRVUZaTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3p0UlFVTXhReXhMUVVGTExFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVRTdVVUZEZEVJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkZja0lzWjBWQlFXZEZPMGxCUTJ4RkxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzUzBGQlN5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyDsiqTti7DtgqTsoITsnZjsmLXshYvquLDslrXtlbTso7zquLBcclxuLy8gcGFzc2Vk7JmAIOuwlOuhnC4gaGVhZGVyIC8gcG9zdC1oZWFkXHJcbi8vIOyWuOygnCBjYW5jZWxcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgb3B0aW1pemF0aW9uVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9vcHRpbWl6YXRpb25VdGlsc1wiKTtcclxudmFyIHN0aWNreUVsZW1lbnQgPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgIHZhciB0YXJnZXRFbGVtZW50ID0gX2EudGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MgPSBfYS5hZGRDbGFzcywgcG9zaXRpb24gPSBfYS5wb3NpdGlvbjtcclxuICAgIHZhciBzdGlja3lFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbGVtZW50KTtcclxuICAgIGlmICghc3RpY2t5RWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgZWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9wdGltaXphdGlvblV0aWxzXzEudGhyb3R0bGUoaGFzU2Nyb2xsZWQpLCBmYWxzZSk7XHJcbiAgICBmdW5jdGlvbiBoYXNTY3JvbGxlZCgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudE9mZnNldFRvcCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0VG9wO1xyXG4gICAgICAgIHZhciBlbGVtZW50T2Zmc2V0Qm90dG9tID0gc3RpY2t5RWxlbWVudC5vZmZzZXRUb3AgKyBlbGVtZW50SGVpZ2h0O1xyXG4gICAgICAgIHZhciBpc1N0dWNrID0gd2luZG93LnBhZ2VZT2Zmc2V0ID4gKHBvc2l0aW9uID09PSAndG9wJyA/IGVsZW1lbnRPZmZzZXRUb3AgOiBlbGVtZW50T2Zmc2V0Qm90dG9tKTtcclxuICAgICAgICBpZiAoaXNTdHVjaykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoYWRkQ2xhc3MpO1xyXG4gICAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdUb3AgPSBgJHtlbGVtZW50SGVpZ2h0fXB4YFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGFkZENsYXNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbGFzdFNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gc3RpY2t5RWxlbWVudDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzNScFkydDVSV3hsYldWdWRDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW5OMGFXTnJlVVZzWlcxbGJuUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxHVkJRV1U3UVVGRFppeHBRMEZCYVVNN1FVRkRha01zV1VGQldUczdRVUZGV2l4blJVRkJjVVE3UVVGRmNrUXNTVUZCVFN4aFFVRmhMRWRCUVVjc1ZVRkJReXhGUVVGeFF6dFJRVUZ1UXl4blEwRkJZU3hGUVVGRkxITkNRVUZSTEVWQlFVVXNjMEpCUVZFN1NVRkRlRVFzU1VGQlRTeGhRVUZoTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFUdEpRVU16UkN4SlFVRkpMRU5CUVVNc1lVRkJZVHRSUVVGRkxFOUJRVTA3U1VGRk1VSXNTVUZCU1N4aFFVRmhMRWRCUVVjc1lVRkJZU3hEUVVGRExGbEJRVmtzUTBGQlFUdEpRVVU1UXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRFJDUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVFN1NVRkZMMFFzVTBGQlV5eFhRVUZYTzFGQlEyeENMRWxCUVUwc1owSkJRV2RDTEVkQlFVY3NZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJRVHRSUVVOb1JDeEpRVUZOTEcxQ1FVRnRRaXhIUVVGSExHRkJRV0VzUTBGQlF5eFRRVUZUTEVkQlFVY3NZVUZCWVN4RFFVRkJPMUZCUTI1RkxFbEJRVTBzVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXl4WFFVRlhMRWRCUVVjc1EwRkJReXhSUVVGUkxFdEJRVXNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlFUdFJRVU5zUnl4SlFVRkpMRTlCUVU4c1JVRkJSVHRaUVVOWUxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlFUdFpRVU55UXl4M1JFRkJkMFE3VTBGRGVrUTdZVUZCVFR0WlFVTk1MRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRUUVVONlF6dFJRVU5FTEhORFFVRnpRenRKUVVONFF5eERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzWVVGQllTeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBvcHRpbWl6YXRpb25VdGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL29wdGltaXphdGlvblV0aWxzXCIpO1xyXG52YXIgc2Nyb2xsQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNjcm9sbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcclxuICAgIGlmICghc2Nyb2xsRWxlbWVudHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIFNDUk9MTEVEX0NMQVNTID0gJ2lzLXNjcm9sbGVkJztcclxuICAgIHNjcm9sbEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgaXNTY3JvbGxlZCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICBpZiAoIWlzU2Nyb2xsZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoU0NST0xMRURfQ0xBU1MpO1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb3B0aW1pemF0aW9uVXRpbHNfMS50aHJvdHRsZShzY3JvbGxBbmkpLCBmYWxzZSk7XHJcbiAgICBmdW5jdGlvbiBzY3JvbGxBbmkoKSB7XHJcbiAgICAgICAgc2Nyb2xsRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICB2YXIgaXNTY3JvbGxlZCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQgKiAwLjUgPD0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyBjb25zdCBpc1Njcm9sbGVkID0gd2luZG93LnBhZ2VZT2Zmc2V0ID4gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgKyA1MFxyXG4gICAgICAgICAgICBpZiAoIWlzU2Nyb2xsZWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChTQ1JPTExFRF9DTEFTUyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbEFuaW1hdGlvbjtcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIChldmVudCkgPT4ge1xyXG4vLyBcdHZhciB0aW1lcjtcclxuLy8gXHRpZiAoIXRpbWVyKSB7XHJcbi8vIFx0XHR0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbi8vIFx0XHRcdHRpbWVyPW51bGw7XHJcbi8vIFx0XHRcdGNvbnN0IHRhcmdldFN0aWNreSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zdGlja3knKTtcclxuLy8gXHRcdFx0Y29uc3QgdGFyZ2V0U3RpY2t5SGVpZ2h0ID0gdGFyZ2V0U3RpY2t5LmNsaWVudEhlaWdodDtcclxuLy8gXHRcdFx0aWYod2luZG93LnBhZ2VZT2Zmc2V0ID4gdGFyZ2V0U3RpY2t5Lm9mZnNldFRvcCl7XHJcbi8vIFx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuc3R5bGUucGFkZGluZ1RvcCA9IHRhcmdldFN0aWNreUhlaWdodCArICdweCc7XHJcbi8vIFx0XHRcdFx0XHR0YXJnZXRTdGlja3kuY2xhc3NMaXN0LmFkZCgnaXMtc3RpY2t5Jyk7XHJcbi8vIFx0XHRcdH0gZWxzZSB7XHJcbi8vIFx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuc3R5bGUucGFkZGluZ1RvcCA9ICcwcHgnO1xyXG4vLyBcdFx0XHRcdFx0dGFyZ2V0U3RpY2t5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXN0aWNreScpO1xyXG4vLyBcdFx0XHR9XHJcbi8vIFx0XHR9LCA0MDApO1xyXG4vLyBcdH1cclxuLy8gfSk7XHJcbi8vIGNvbnN0IGFic29sdXRlVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyTnliMnhzUVc1cGJXRjBhVzl1TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2ljMk55YjJ4c1FXNXBiV0YwYVc5dUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1owVkJRWEZFTzBGQlJYSkVMRWxCUVUwc1pVRkJaU3hIUVVGSE8wbEJRM1JDTEVsQlFVMHNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZCTzBsQlEzaEZMRWxCUVVrc1EwRkJReXhqUVVGak8xRkJRVVVzVDBGQlRUdEpRVVV6UWl4SlFVRk5MR05CUVdNc1IwRkJSeXhoUVVGaExFTkJRVUU3U1VGRmNFTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFOUJRVTg3VVVGRE5VSXNTVUZCVFN4VlFVRlZMRWRCUVVjc1QwRkJUeXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVRTdVVUZETlVVc1NVRkJTU3hEUVVGRExGVkJRVlU3V1VGQlJTeFBRVUZOTzFGQlJYWkNMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkJPMGxCUTNaRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlJVWXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN3MFFrRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkJPMGxCUnpkRUxGTkJRVk1zVTBGQlV6dFJRVU5vUWl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dFpRVU0xUWl4SlFVRk5MRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlFUdFpRVU42Unl3MlNFRkJOa2c3V1VGRE4wZ3NTVUZCU1N4RFFVRkRMRlZCUVZVN1owSkJRVVVzVDBGQlRUdFpRVVYyUWl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUVR0UlFVTjJReXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5LTEVOQlFVTTdRVUZGU0N4RFFVRkRMRU5CUVVFN1FVRkZSQ3hyUWtGQlpTeGxRVUZsTEVOQlFVRTdRVUZGT1VJc2FVUkJRV2xFTzBGQlEycEVMR05CUVdNN1FVRkRaQ3hwUWtGQmFVSTdRVUZEYWtJc2IwTkJRVzlETzBGQlEzQkRMR2xDUVVGcFFqdEJRVU5xUWl4blJVRkJaMFU3UVVGRGFFVXNNa1JCUVRKRU8wRkJRek5FTEhORVFVRnpSRHRCUVVOMFJDeHZSa0ZCYjBZN1FVRkRjRVlzWjBSQlFXZEVPMEZCUTJoRUxHTkJRV003UVVGRFpDeG5SVUZCWjBVN1FVRkRhRVVzYlVSQlFXMUVPMEZCUTI1RUxFOUJRVTg3UVVGRFVDeGhRVUZoTzBGQlEySXNTMEZCU3p0QlFVTk1MRTFCUVUwN1FVRkZUaXhuUmtGQlowWWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNsb3NlUGFyZW50RWxlbWVudCA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIHRhcmdldEVsZW1lbnQgPSBfYS5zZWxlY3RvcjtcclxuICAgIHZhciBjbG9zZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbGVtZW50KTtcclxuICAgIGlmIChjbG9zZUVsZW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjbG9zZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIGlzSGlkZGVuID0gSFRNTEVsZW1lbnQuaGlkZGVuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2xvc2VQYXJlbnRFbGVtZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnh2YzJWUVlYSmxiblJGYkdWdFpXNTBMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVkyeHZjMlZRWVhKbGJuUkZiR1Z0Wlc1MExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCU1VFc1NVRkJUU3hyUWtGQmEwSXNSMEZCUnl4VlFVRkRMRVZCUVhORE8xRkJRWEJETERKQ1FVRjFRanRKUVVOdVJDeEpRVUZOTEdGQlFXRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRNMFVzU1VGQlNTeGhRVUZoTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNN1VVRkJSU3hQUVVGTk8wbEJSWFJETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xRkJRek5DTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTnNRaXhQUVVGUExFTkJRVU1zVlVGQlZ5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVFN1dVRkROME1zWjBOQlFXZERPMUZCUTNCRExFTkJRVU1zUTBGQlF6dEpRVWhHTEVOQlIwVXNRMEZEU0N4RFFVRkJPMEZCUTBnc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNhMEpCUVd0Q0xFTkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBjdXN0b21DdXJzb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY3Vyc29yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRlci1zcGlubmVyJyk7XHJcbiAgICBpZiAoIWN1cnNvcilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgaG92ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBhJyk7XHJcbiAgICBpZiAoIWhvdmVyRWxlbWVudClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBzZXRDdXJzb3IoZXZlbnQsIHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pOyB9KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gc2V0Q3Vyc29yKGV2ZW50LCB7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFJpcHBsZSh7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XHJcbiAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZCgnaXMtZGVmYXVsdCcpO1xyXG4gICAgaG92ZXJFbGVtZW50LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xpY2thYmxlJyk7XHJcbiAgICB9KTsgfSk7XHJcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1jbGlja2FibGUnKTtcclxuICAgIH0pOyB9KTtcclxuICAgIGZ1bmN0aW9uIHNldEN1cnNvcihldmVudCwgX2EpIHtcclxuICAgICAgICB2YXIgY3Vyc29yID0gX2EuY3Vyc29yRWxlbWVudDtcclxuICAgICAgICB2YXIgeCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgICAgdmFyIHkgPSBldmVudC5jbGllbnRZO1xyXG4gICAgICAgIGN1cnNvci5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcclxuICAgICAgICBjdXJzb3Iuc3R5bGUudG9wID0geSArIFwicHhcIjtcclxuICAgICAgICAvLyBjdXJzb3Iuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3ggLSAxNX1weCwgJHt5IC0gMTV9cHhgO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0UmlwcGxlKF9hKSB7XHJcbiAgICAgICAgdmFyIGN1cnNvciA9IF9hLmN1cnNvckVsZW1lbnQ7XHJcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZCcpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kJyk7XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY3VzdG9tQ3Vyc29yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZM1Z6ZEc5dFEzVnljMjl5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lZM1Z6ZEc5dFEzVnljMjl5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeFpRVUZaTEVkQlFVYzdTVUZEYmtJc1NVRkJUU3hOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4dlFrRkJiMElzUTBGQlF5eERRVUZETzBsQlEzcEZMRWxCUVVjc1EwRkJReXhOUVVGTk8xRkJRVVVzVDBGQlR6dEpRVVZ3UWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVdNc1YwRkJWeXhEUVVGRExFTkJRVU03U1VGRGVrVXNTVUZCUnl4RFFVRkRMRmxCUVZrN1VVRkJSU3hQUVVGUE8wbEJSWHBDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hWUVVGQkxFdEJRVXNzU1VGQlNTeFBRVUZCTEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCTTBNc1EwRkJNa01zUTBGQlF5eERRVUZETzBsQlEzQkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1ZVRkJRU3hMUVVGTExFbEJRVWtzVDBGQlFTeFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1lVRkJZU3hGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFUTkRMRU5CUVRKRExFTkJRVU1zUTBGQlF6dEpRVU0zUml4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMR05CUVUwc1QwRkJRU3hUUVVGVExFTkJRVU1zUlVGQlJTeGhRVUZoTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJjRU1zUTBGQmIwTXNRMEZCUXl4RFFVRkRPMGxCUlM5RkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJRMjVETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUExFbEJRVWtzVDBGQlFTeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTzFGQlEzUkZMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMGxCUTNwRExFTkJRVU1zUTBGQlF5eEZRVVk0UWl4RFFVVTVRaXhEUVVGRExFTkJRVU03U1VGRFNpeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUeXhKUVVGSkxFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUlVGQlJUdFJRVU4wUlN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTjBReXhEUVVGRExFTkJRVU1zUlVGR09FSXNRMEZGT1VJc1EwRkJReXhEUVVGRE8wbEJSVW9zVTBGQlV5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVRoQ08xbEJRVFZDTEhsQ1FVRnhRanRSUVVOb1JDeEpRVUZOTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRE8xRkJRM2hDTEVsQlFVMHNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03VVVGRmVFSXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVTBzUTBGQlF5eFBRVUZKTEVOQlFVTTdVVUZETjBJc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVkQlFVMHNRMEZCUXl4UFFVRkpMRU5CUVVNN1VVRkROVUlzYVVWQlFXbEZPMGxCUTJwRkxFTkJRVU03U1VGRlJpeFRRVUZUTEZOQlFWTXNRMEZCUXl4RlFVRjVRanRaUVVGMlFpeDVRa0ZCY1VJN1VVRkRla01zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGREwwSXNWVUZCVlN4RFFVRkRPMWxCUTFZc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkRia01zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTFRc1EwRkJRenRCUVVOR0xFTkJRVU1zUTBGQlF6dEJRVVZHTEd0Q1FVRmxMRmxCUVZrc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIG9wdGltaXphdGlvblV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvb3B0aW1pemF0aW9uVXRpbHNcIik7XHJcbnZhciBzY3JvbGxzcHkgPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgIHZhciBtZW51c0NsYXNzID0gX2EubWVudXNTZWxlY3Rvciwgc2VjdGlvbnNDbGFzcyA9IF9hLnNlY3Rpb25zU2VsZWN0b3I7XHJcbiAgICB2YXIgc2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG1lbnVzQ2xhc3MpO1xyXG4gICAgdmFyIG1lbnVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWN0aW9uc0NsYXNzKTtcclxuICAgIGlmICghc2VjdGlvbnMgfHwgIW1lbnVzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIG1lbnVzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBocmVmID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxyXG4gICAgICAgICAgICAvLyBjb25zdCB0YXJnZXRPZmZzZXRZID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihocmVmKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcclxuICAgICAgICAgICAgdmFyIHRhcmdldE9mZnNldFkgPSBzZWN0aW9uc1tpbmRleF0ub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgdGFyZ2V0T2Zmc2V0WSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvcHRpbWl6YXRpb25VdGlsc18xLnRocm90dGxlKHRlbXApLCBmYWxzZSk7XHJcbiAgICBmdW5jdGlvbiB0ZW1wKCkge1xyXG4gICAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHNlY3Rpb24sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWN0aW9uLm9mZnNldFRvcCA8PSB3aW5kb3cucGFnZVlPZmZzZXQgKyAyMDApIHtcclxuICAgICAgICAgICAgICAgIG1lbnVzLmZvckVhY2goZnVuY3Rpb24gKG1lbnUpIHsgcmV0dXJuIG1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7IH0pO1xyXG4gICAgICAgICAgICAgICAgbWVudXNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbHNweTtcclxuLy8gY29uc3QgYWJzb2x1dGVUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuLy8gZnVuY3Rpb24gZ2V0QWJzb2x1dGVUb3AoZWxlbWVudCkge1xyXG4vLyAgIHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuLy8gfVxyXG4vLyDigItcclxuLy8gY29uc3QgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuLy8gY29uc3QgcGFyZW50QWJzb2x1dGVUb3AgPSBnZXRBYnNvbHV0ZVRvcChwYXJlbnRFbGVtZW50KTtcclxuLy8gY29uc3QgYWJzb3VsdGVUb3AgPSBnZXRBYnNvbHV0ZVRvcChlbGVtZW50KTtcclxuLy8g4oCLXHJcbi8vIGNvbnN0IHJlbGF0aXZlVG9wID0gYWJzb2x1dGVUb3AgLSBwYXJlbnRBYnNvbHV0ZVRvcDtcclxuLy8g7Lac7LKYOiBodHRwczovL21vbW1vby50aXN0b3J5LmNvbS84NSBb6rCc67Cc7J6Q66GcIO2ZgOuhnCDshJzquLBdXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyTnliMnhzYzNCNUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNjM0I1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzWjBWQlFYRkVPMEZCVDNKRUxFbEJRVTBzVTBGQlV5eEhRVUZITEZWQlFVTXNSVUZCZVVVN1VVRkJka1VzTmtKQlFYbENMRVZCUVVVc2JVTkJRU3RDTzBsQlF6ZEZMRWxCUVUwc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJhMElzVlVGQlZTeERRVUZETEVOQlFVRTdTVUZEZGtVc1NVRkJUU3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGclFpeGhRVUZoTEVOQlFVTXNRMEZCUVR0SlFVTjJSU3hKUVVGSExFTkJRVU1zVVVGQlVTeEpRVUZKTEVOQlFVTXNTMEZCU3p0UlFVRkZMRTlCUVUwN1NVRkZPVUlzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTE8xRkJRek5DTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCUVN4TFFVRkxPMWxCUTNKRExFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUVR0WlFVTjBRaXcwUTBGQk5FTTdXVUZETlVNc2FVWkJRV2xHTzFsQlEycEdMRWxCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVFN1dVRkRMME1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVUU3VVVGRGJrTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRTaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5HTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNORUpCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUVR0SlFVVjRSQ3hUUVVGVExFbEJRVWs3VVVGRFdDeFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXM3V1VGRE9VSXNTVUZCUnl4UFFVRlBMRU5CUVVNc1UwRkJVeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NSMEZCUnl4RlFVRkZPMmRDUVVOb1JDeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTU3hKUVVGSkxFOUJRVUVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRV3hETEVOQlFXdERMRU5CUVVNc1EwRkJRVHRuUWtGRGVrUXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1lVRkRlRU03VVVGRFNDeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4VFFVRlRMRU5CUVVFN1FVRkplRUlzWjBaQlFXZEdPMEZCUTJoR0xIRkRRVUZ4UXp0QlFVTnlReXh4UlVGQmNVVTdRVUZEY2tVc1NVRkJTVHRCUVVOS0xFbEJRVWs3UVVGRFNpd3JRMEZCSzBNN1FVRkRMME1zTWtSQlFUSkVPMEZCUXpORUxDdERRVUVyUXp0QlFVTXZReXhKUVVGSk8wRkJRMG9zZFVSQlFYVkVPMEZCUjNaRUxHbEVRVUZwUkNKOSIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBjaGVja2JveF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NoZWNrYm94XCIpKTtcclxudmFyIHRleHRhcmVhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGV4dGFyZWFcIikpO1xyXG52YXIgZmlsZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbGVcIikpO1xyXG52YXIgbnVtYmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbnVtYmVyXCIpKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0ge1xyXG4gICAgY2hlY2tib3g6IGNoZWNrYm94XzEuZGVmYXVsdCxcclxuICAgIHRleHRhcmVhOiB0ZXh0YXJlYV8xLmRlZmF1bHQsXHJcbiAgICBmaWxlOiBmaWxlXzEuZGVmYXVsdCxcclxuICAgIG51bWJlcjogbnVtYmVyXzEuZGVmYXVsdCxcclxufTtcclxuZnVuY3Rpb24gY2xlYXJUZXh0ZmllbGQoKSB7XHJcbiAgICAvLyBldmVudC50YXJnZXQuc2libGluZ3MuaW5wdXQudmFsdWUgPSAnJ1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQkxIZEVRVUZwUXp0QlFVTnFReXgzUkVGQmFVTTdRVUZEYWtNc1owUkJRWGxDTzBGQlEzcENMRzlFUVVFMlFqdEJRVVUzUWl4clFrRkJaVHRKUVVOaUxGRkJRVkVzYjBKQlFVRTdTVUZEVWl4UlFVRlJMRzlDUVVGQk8wbEJRMUlzU1VGQlNTeG5Ra0ZCUVR0SlFVTktMRTFCUVUwc2EwSkJRVUU3UTBGRFVDeERRVUZCTzBGQlJVUXNVMEZCVXl4alFVRmpPMGxCUTNKQ0xIbERRVUY1UXp0QlFVTXpReXhEUVVGREluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgY2hlY2tib3ggPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgIHZhciBjaGVja0FsbFNlbGVjdG9yID0gX2EuY2hlY2tBbGxTZWxlY3RvciwgY2hlY2tTZWxlY3RvciA9IF9hLmNoZWNrU2VsZWN0b3I7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBjaGVja0FsbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjaGVja0FsbFNlbGVjdG9yKSxcclxuICAgICAgICBjaGVja0l0ZW1zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNoZWNrU2VsZWN0b3IpLFxyXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWxsIHx8ICF0aGlzLmNoZWNrSXRlbXMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tlZEFsbChfdGhpcy5jaGVja0l0ZW1zLCBfdGhpcy5jaGVja0FsbCk7IH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoY2hlY2tJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tlZEVhY2goX3RoaXMuY2hlY2tJdGVtcywgX3RoaXMuY2hlY2tBbGwpOyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRDaGVja2VkRWFjaDogZnVuY3Rpb24gKGNoZWNrSXRlbXMsIGNoZWNrQWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2JveEVsZW1lbnRzID0gQXJyYXkuZnJvbShjaGVja0l0ZW1zKTtcclxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZEV2ZXJ5ID0gY2hlY2tib3hFbGVtZW50cy5ldmVyeShmdW5jdGlvbiAoY2hlY2tJdGVtKSB7IHJldHVybiBjaGVja0l0ZW0uY2hlY2tlZDsgfSk7XHJcbiAgICAgICAgICAgIHZhciBpc0NoZWNrZWRTb21lID0gY2hlY2tib3hFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChjaGVja0l0ZW0pIHsgcmV0dXJuIGNoZWNrSXRlbS5jaGVja2VkOyB9KTtcclxuICAgICAgICAgICAgdmFyIGlzSW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xyXG4gICAgICAgICAgICBjaGVja0FsbC5jaGVja2VkID0gaXNDaGVja2VkRXZlcnk7XHJcbiAgICAgICAgICAgIGNoZWNrQWxsLmluZGV0ZXJtaW5hdGUgPSBpc0luZGV0ZXJtaW5hdGU7XHJcbiAgICAgICAgICAgIGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGlzSW5kZXRlcm1pbmF0ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldENoZWNrZWRBbGw6IGZ1bmN0aW9uIChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xyXG4gICAgICAgICAgICBjaGVja0l0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGNoZWNrSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tBbGwuZGF0YXNldC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tib3g7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyaGxZMnRpYjNndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpqYUdWamEySnZlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVdEJMRWxCUVUwc1VVRkJVU3hIUVVGSExGVkJRVU1zUlVGQk9FTTdVVUZCTlVNc2MwTkJRV2RDTEVWQlFVVXNaME5CUVdFN1NVRkJhMElzVDBGQlFTeERRVUZETzFGQlEzQkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZ0UWl4blFrRkJaMElzUTBGQlF6dFJRVU53UlN4VlFVRlZMRVZCUVVVc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRnRRaXhoUVVGaExFTkJRVU03VVVGRGRFVXNWVUZCVlR0WlFVRldMR2xDUVU5RE8xbEJUa01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdG5Ra0ZCUlN4UFFVRk5PMWxCUlRsRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEdOQlFVMHNUMEZCUVN4TFFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNTMEZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGc1JDeERRVUZyUkN4RFFVRkRMRU5CUVVFN1dVRkRiRWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hUUVVGVE8yZENRVU12UWl4VFFVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3hMUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1MwRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZ1UkN4RFFVRnRSQ3hEUVVGRExFTkJRVUU3V1VGRGFrY3NRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRTaXhEUVVGRE8xRkJRMFFzWTBGQll5eEZRVUZrTEZWQlFXVXNWVUZCVlN4RlFVRkZMRkZCUVZFN1dVRkRha01zU1VGQlRTeG5Ra0ZCWjBJc1IwRkJkVUlzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRaUVVWdVJTeEpRVUZKTEdOQlFXTXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCUVN4VFFVRlRMRWxCUVVrc1QwRkJRU3hUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZxUWl4RFFVRnBRaXhEUVVGRExFTkJRVUU3V1VGRE0wVXNTVUZCU1N4aFFVRmhMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVFc1UwRkJVeXhKUVVGSkxFOUJRVUVzVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCYWtJc1EwRkJhVUlzUTBGQlF5eERRVUZCTzFsQlEzcEZMRWxCUVVrc1pVRkJaU3hIUVVGSExHRkJRV0VzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUVR0WlFVVjBSQ3hSUVVGUkxFTkJRVU1zVDBGQlR5eEhRVUZITEdOQlFXTXNRMEZCUVR0WlFVTnFReXhSUVVGUkxFTkJRVU1zWVVGQllTeEhRVUZITEdWQlFXVXNRMEZCUVR0WlFVTjRReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNSMEZCUnl4bFFVRmxMRU5CUVVFN1VVRkRiRVFzUTBGQlF6dFJRVU5FTEdGQlFXRXNXVUZCUXl4VlFVRlZMRVZCUVVVc1VVRkJVVHRaUVVOb1F5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1UwRkJVenRuUWtGRE1VSXNVMEZCVXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZCTzJkQ1FVTndReXhSUVVGUkxFTkJRVU1zWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUVR0blFrRkRPVUlzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGQk8xbEJRM2hETEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTBvc1EwRkJRenRMUVVOR0xFTkJRVU03UVVFM1FtMUZMRU5CTmtKdVJTeERRVUZCTzBGQlJVWXNhMEpCUVdVc1VVRkJVU3hEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgaW5wdXRUZXh0YXJlYSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIHRhZ05hbWXqs7wgbm9kZU5hbWXsnYAg7YWN7Iqk7Yq4IOuFuOuTnOulvCDqsIHqsIEgdW5kZWZpbmVk7JmAICN0ZXh0IOuwmO2ZmO2VnOuLpC5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBpZiAodGFyZ2V0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGlzVGV4dGFyZWEgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJztcclxuICAgICAgICBpZiAoIWlzVGV4dGFyZWEpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgQllURV9NQVhJTVVNID0gMzA7XHJcbiAgICAgICAgdmFyIGJ5dGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRleHRmaWVsZC1ieXRlIGInKTtcclxuICAgICAgICBpZiAoIWJ5dGVFbGVtZW50KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIHN0cmluZ0J5dGVMZW5ndGggPSAodGFyZ2V0ID09PSBudWxsIHx8IHRhcmdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGFyZ2V0LnZhbHVlLnJlcGxhY2UoL1tcXDAtXFx4N2ZdfChbMC1cXHUwN2ZmXXwoLikpL2csICckJiQxJDInKS5sZW5ndGgpIHx8IDA7IC8vIHx8IDAg7J6E7IucXHJcbiAgICAgICAgYnl0ZUVsZW1lbnQuaW5uZXJUZXh0ID0gc3RyaW5nQnl0ZUxlbmd0aDtcclxuICAgICAgICB2YXIgaXNNYXhpbXVtID0gc3RyaW5nQnl0ZUxlbmd0aCA+IEJZVEVfTUFYSU1VTTtcclxuICAgICAgICBpZiAoaXNNYXhpbXVtKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXV0b0V4cGFuZCh0YXJnZXQpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBhdXRvRXhwYW5kID0gZnVuY3Rpb24gKGZpZWxkKSB7XHJcbiAgICBmaWVsZC5zdHlsZS5oZWlnaHQgPSAnaW5oZXJpdCc7XHJcbiAgICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShmaWVsZCk7XHJcbiAgICB2YXIgaGVpZ2h0ID0gZmllbGQuc2Nyb2xsSGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcclxuICAgIGZpZWxkLnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwicHhcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gaW5wdXRUZXh0YXJlYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEdWNGRHRnlaV0V1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBaWGgwWVhKbFlTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVTBzWVVGQllTeEhRVUZITzBsQlEzQkNMSFZFUVVGMVJEdEpRVU4yUkN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVFc1MwRkJTenRSUVVNNVFpeEpRVUZCTEhGQ1FVRk5MRU5CUVdVN1VVRkROMElzU1VGQlNTeE5RVUZOTzFsQlFVVXNUMEZCVFR0UlFVVnNRaXhKUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1JVRkJSU3hMUVVGTExGVkJRVlVzUTBGQlFUdFJRVU12UkN4SlFVRkpMRU5CUVVNc1ZVRkJWVHRaUVVGRkxFOUJRVTA3VVVGRmRrSXNTVUZCVFN4WlFVRlpMRWRCUVVjc1JVRkJSU3hEUVVGQk8xRkJSWFpDTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zYlVKQlFXMUNMRU5CUVVNc1EwRkJRVHRSUVVNMVJTeEpRVUZKTEVOQlFVTXNWMEZCVnp0WlFVRkZMRTlCUVUwN1VVRkZlRUlzU1VGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGQkxFMUJRVTBzWVVGQlRpeE5RVUZOTEhWQ1FVRk9MRTFCUVUwc1EwRkJSU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETERaQ1FVRTJRaXhGUVVGRkxGRkJRVkVzUlVGQlJTeE5RVUZOTEV0QlFVa3NRMEZCUXl4RFFVRkJMRU5CUVVNc1ZVRkJWVHRSUVVNNVJ5eFhRVUZYTEVOQlFVTXNVMEZCVXl4SFFVRkhMR2RDUVVGblFpeERRVUZCTzFGQlJYaERMRWxCUVUwc1UwRkJVeXhIUVVGSExHZENRVUZuUWl4SFFVRkhMRmxCUVZrc1EwRkJRVHRSUVVOcVJDeEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTmlMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRUUVVNNVF6dGhRVUZOTzFsQlEwd3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMU5CUTJwRU8xRkJSVVFzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUTNCQ0xFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJPMEZCUlVRc1NVRkJUU3hWUVVGVkxFZEJRVWNzVlVGQlFTeExRVUZMTzBsQlEzUkNMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEZOQlFWTXNRMEZCUVR0SlFVVTVRaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdTVUZETDBNc1NVRkJUU3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTXpSaXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCVFN4TlFVRk5MRTlCUVVrc1EwRkJRVHRCUVVOd1F5eERRVUZETEVOQlFVRTdRVUZGUkN4clFrRkJaU3hoUVVGaExFTkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFRPRE86IOyXrOufrOuyiCDrsJjrs7XtlbTshJwg7Jis66C47J2EIOuVjCBmaWxlbGlzdCDriITsoIHrkJjripTsp4A/XHJcbi8vIFRPRE86IOuPmeydvO2VnCDtjIzsnbzsnYQg7JeF66Gc65OcIO2WiOydhCDrlYwg7LK07YGsLCDsgq3soJztlojsnYQg65WMIGZpbGVMaXN07JeQ7IScIOyCreygnCwgZmlsZUlucHV0LmZpbGVz64qUIOyMk+ydtOyngCDslYrsnYwuXHJcbnZhciBhdHRhY2hGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWlucHV0Jyk7XHJcbiAgICBpZiAoIWZpbGVJbnB1dClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBjb25zdCBmaWxlU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtc3VibWl0Jyk7XHJcbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gYXR0YWNoKGZpbGVJbnB1dCk7IH0pO1xyXG59O1xyXG5mdW5jdGlvbiBhdHRhY2goZmlsZUlucHV0KSB7XHJcbiAgICB2YXIgZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XHJcbiAgICB2YXIgYXR0YWNobWVudExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1hdHRhY2htZW50LWxpc3QnKTtcclxuICAgIHZhciBhdHRhY2htZW50SGVscGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1oZWxwZXInKTtcclxuICAgIGlmICghZmlsZXMgfHwgIWF0dGFjaG1lbnRMaXN0IHx8ICFhdHRhY2htZW50SGVscGVyKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGF0dGFjaG1lbnRIZWxwZXIuc3R5bGUuZGlzcGxheSA9IGZpbGVzLmxlbmd0aCAhPT0gMCA/ICdub25lJyA6ICdibG9jayc7XHJcbiAgICBBcnJheS5mcm9tKGZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgaWYgKCF2YWxpZEZpbGVUeXBlKGZpbGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxlcnQoJ+2MjOydvO2DgOyehSBqcGVnIHBqcGVnIHBuZyDspJEg7ZWY64KY6rCAIOyVhOuLiOyVvH4nKTtcclxuICAgICAgICB2YXIgZmlsZVRlbXBsYXRlID0gXCJcXG5cXHRcXHRcXHQ8YSBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW1cXFwiIGhyZWY9XFxcIlxcXCI+XFxuXFx0XFx0XFx0XFx0PGZpZ3VyZSBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0taW1hZ2VcXFwiPjxpbWcgc3JjPVwiICsgd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSkgKyBcIiBhbHQ9XCIgKyBmaWxlLm5hbWUgKyBcIj48L2ZpZ3VyZT5cXG5cXHRcXHRcXHRcXHQ8YiBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0tbmFtZVxcXCIgaHJlZj1cXFwiI1xcXCI+XCIgKyBmaWxlLm5hbWUgKyBcIjwvYj5cXG5cXHRcXHRcXHRcXHQ8c21hbGwgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLXNpemVcXFwiID5cIiArIHJldHVybkZpbGVTaXplKGZpbGUuc2l6ZSkgKyBcIjwvc21hbGw+XFxuXFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0tZGVsZXRlIGpzLXJlbW92ZS10aGlzXFxcIj48aSBjbGFzcz1cXFwiaWNvbi1jbG9zZVxcXCI+PC9pPjwvYnV0dG9uPlxcblxcdFxcdFxcdDwvYT5cIjtcclxuICAgICAgICBhdHRhY2htZW50TGlzdC5pbm5lckhUTUwgKz0gZmlsZVRlbXBsYXRlO1xyXG4gICAgICAgIC8vIGF0dGFjaG1lbnRMaXN0LmFwcGVuZChmaWxlVGVtcGxhdGUpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRGaWxlVHlwZShmaWxlKSB7XHJcbiAgICB2YXIgZmlsZVR5cGVzID0gWydpbWFnZS9qcGVnJywgJ2ltYWdlL2dpZicsICdpbWFnZS9wbmcnXTtcclxuICAgIHZhciBpc1ZhbGlkID0gZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSA+IC0xO1xyXG4gICAgLy8gY29uc3QgaXNWYWxpZCA9IGZpbGVUeXBlcy5pbmNsdWRlcyhmaWxlLnR5cGUpO1xyXG4gICAgaWYgKGlzVmFsaWQpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmV0dXJuRmlsZVNpemUoc2l6ZSkge1xyXG4gICAgdmFyIGlzQnl0ZXMgPSBzaXplIDwgMTAyNDtcclxuICAgIHZhciBpc0tpbG9CeXRlcyA9IHNpemUgPj0gMTAyNCAmJiBzaXplIDwgMTA0ODU3NjtcclxuICAgIGlmIChpc0J5dGVzKVxyXG4gICAgICAgIHJldHVybiBzaXplICsgXCJieXRlc1wiO1xyXG4gICAgZWxzZSBpZiAoaXNLaWxvQnl0ZXMpXHJcbiAgICAgICAgcmV0dXJuIChzaXplIC8gMTAyNCkudG9GaXhlZCgyKSArIFwiS0JcIjtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gKHNpemUgLyAxMDQ4NTc2KS50b0ZpeGVkKDIpICsgXCJNQlwiO1xyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGF0dGFjaEZpbGU7XHJcbi8vIGZpbGVTdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XHJcbi8vIFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuLy8gXHRmaWxlTGlzdC5mb3JFYWNoKGZpbGUgPT4ge1xyXG4vLyBcdFx0c2VuZEZpbGUoZmlsZSk7XHJcbi8vIFx0fSk7XHJcbi8vIH0pO1xyXG4vLyBmdW5jdGlvbiB2YWxpZEZpbGVTaXplKGZpbGUpIHtcclxuLy8gXHRhdHRhY2hlZGZpbGVzID0gZmlsZS5maWxlcztcclxuLy8gXHRpZihhdHRhY2hlZGZpbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4vLyBcdGlmKGF0dGFjaGVkZmlsZXNbMF0uc2l6ZSA+IDc1ICogMTAyNCkge1xyXG4vLyBcdFx0ZmlsZUlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCdUaGUgc2VsZWN0ZWQgZmlsZSBtdXN0IG5vdCBiZSBsYXJnZXIgdGhhbiA3NSBrQicpO1xyXG4vLyBcdFx0cmV0dXJuO1xyXG4vLyBcdH1cclxuLy8gXHRmaWxlSW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xyXG4vLyB9XHJcbi8vIGZ1bmN0aW9uIHNlbmRGaWxlKGZpbGUpIHtcclxuLy8gXHRjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4vLyBcdGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuLy8gXHRmb3JtRGF0YS5zZXQoJ2ZpbGUnLCBmaWxlKTtcclxuLy8gXHRyZXF1ZXN0Lm9wZW4oJ3Bvc3QnLCAnJyk7XHJcbi8vIFx0cmVxdWVzdC5zZW5kKGZvcm1EYXRhKTtcclxuLy8gfVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labWxzWlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbVpwYkdVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4MVEwRkJkVU03UVVGRGRrTXNORVZCUVRSRk8wRkJRelZGTEVsQlFVMHNWVUZCVlN4SFFVRkhPMGxCUTJwQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVcxQ0xHZENRVUZuUWl4RFFVRkRMRU5CUVVFN1NVRkROVVVzU1VGQlNTeERRVUZETEZOQlFWTTdVVUZCUlN4UFFVRk5PMGxCUTNSQ0xHZEZRVUZuUlR0SlFVTm9SU3hUUVVGVExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHTkJRVTBzVDBGQlFTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVdwQ0xFTkJRV2xDTEVOQlFVTXNRMEZCUVR0QlFVTXZSQ3hEUVVGRExFTkJRVUU3UVVGRlJDeFRRVUZUTEUxQlFVMHNRMEZCUXl4VFFVRXlRanRKUVVOcVF5eEpRVUZCTEhWQ1FVRkxMRU5CUVdNN1NVRkRNMElzU1VGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXd3UWtGQk1FSXNRMEZCUXl4RFFVRkJPMGxCUTNSR0xFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5dzBRa0ZCTkVJc1EwRkJReXhEUVVGQk8wbEJRekZHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJN1VVRkJSU3hQUVVGTk8wbEJSVEZFTEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGQk8wbEJSWFJGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1R0UlFVTTFRaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVRkZMRTlCUVU4c1MwRkJTeXhEUVVGRExHZERRVUZuUXl4RFFVRkRMRU5CUVVFN1VVRkZlRVVzU1VGQlRTeFpRVUZaTEVkQlFVY3NlVWhCUldsRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTERoRlFVTjJSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeHJSVUZEWWl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHhTVUZGYWtVc1EwRkJRVHRSUVVWS0xHTkJRV01zUTBGQlF5eFRRVUZUTEVsQlFVa3NXVUZCV1N4RFFVRkJPMUZCUTNoRExIVkRRVUYxUXp0SlFVTjZReXhEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhKUVVGSk8wbEJRM3BDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUVR0SlFVTXhSQ3hKUVVGTkxFOUJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTnFSQ3hwUkVGQmFVUTdTVUZGYWtRc1NVRkJTU3hQUVVGUE8xRkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVRTdRVUZETVVJc1EwRkJRenRCUVVWRUxGTkJRVk1zWTBGQll5eERRVUZETEVsQlFVazdTVUZETVVJc1NVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUVR0SlFVTXpRaXhKUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVUU3U1VGRmJFUXNTVUZCU1N4UFFVRlBPMUZCUVVVc1QwRkJWU3hKUVVGSkxGVkJRVThzUTBGQlFUdFRRVU0zUWl4SlFVRkpMRmRCUVZjN1VVRkJSU3hQUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlNTeERRVUZCT3p0UlFVTjJSQ3hQUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlNTeERRVUZCTzBGQlEyaEVMRU5CUVVNN1FVRkZSQ3hyUWtGQlpTeFZRVUZWTEVOQlFVRTdRVUZGZWtJc2NVUkJRWEZFTzBGQlEzSkVMREpDUVVFeVFqdEJRVU16UWl3NFFrRkJPRUk3UVVGRE9VSXNiMEpCUVc5Q08wRkJRM0JDTEU5QlFVODdRVUZEVUN4TlFVRk5PMEZCUlU0c2FVTkJRV2xETzBGQlEycERMQ3RDUVVFclFqdEJRVU12UWl3d1EwRkJNRU03UVVGRk1VTXNNa05CUVRKRE8wRkJRek5ETEc5R1FVRnZSanRCUVVOd1JpeFpRVUZaTzBGQlExb3NTMEZCU3p0QlFVTk1MRzlEUVVGdlF6dEJRVU53UXl4SlFVRkpPMEZCUlVvc05FSkJRVFJDTzBGQlF6VkNMRzlEUVVGdlF6dEJRVU53UXl4NVEwRkJlVU03UVVGRmVrTXNLMEpCUVN0Q08wRkJReTlDTERaQ1FVRTJRanRCUVVNM1Fpd3lRa0ZCTWtJN1FVRkRNMElzU1VGQlNTSjkiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgaW5wdXROdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5ZG93biAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5cHJlc3M6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzcyAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5dXA6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXl1cCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZSAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xyXG4gICAgLy8gXHRjb25zb2xlLmxvZygnaW5wdXQ6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdpbnB1dCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyDrsKntlqXtgqTroZwg7KGw7KCI7ZWgIOuVjCBtaW4gbWF4IOyhsOqxtOyXkCDqsbjrprDri6QuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICB2YXIgaXNOdW1iZXJJbnB1dCA9IHRhcmdldC5jbG9zZXN0KCcuanMtbnVtYmVyLWlucHV0Jyk7XHJcbiAgICAgICAgaWYgKCFpc051bWJlcklucHV0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBzZXRMaW1pdE51bWJlcik7XHJcbiAgICAgICAgc2V0SW5wdXRPbmx5TnVtYmVycygpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0T25seU51bWJlcnMoKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcclxuICAgICAgICAgICAgdmFyIGtleUNvZGVzID0gWzY5LCAxODksIDE4NywgMTkwXTtcclxuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBrZXlDb2Rlcy5pbmNsdWRlcyhrZXlDb2RlKTtcclxuICAgICAgICAgICAgaWYgKGlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyB0YXJnZXQudmFsdWUubGVuZ3RoID09PSAwICYmIGtleUNvZGUgPT09IDQ4ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPj0gNDggfHwga2V5Q29kZSA8PSA1NyB8fCBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSA2OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSAxODkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gMTg3ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDE5MCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBzZXRMaW1pdE51bWJlcigpIHtcclxuICAgICAgICAgICAgdmFyIE1BWElNVU0gPSAzMDA7XHJcbiAgICAgICAgICAgIHZhciBNSU5JTVVOID0gMDtcclxuICAgICAgICAgICAgdmFyIGlzRmlyc3RQbGFjZWRaZXJvID0gLyheMCspLy50ZXN0KHRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICAgIHZhciBpc01heGltdW0gPSBOdW1iZXIodGFyZ2V0LnZhbHVlKSA+PSBNQVhJTVVNO1xyXG4gICAgICAgICAgICB2YXIgaXNMZW5ndGggPSB0YXJnZXQudmFsdWUubGVuZ3RoID4gTUlOSU1VTjtcclxuICAgICAgICAgICAgaWYgKGlzRmlyc3RQbGFjZWRaZXJvKVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gTUlOSU1VTjtcclxuICAgICAgICAgICAgaWYgKGlzTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnNsaWNlKDAsIDMpO1xyXG4gICAgICAgICAgICBpZiAoaXNNYXhpbXVtKVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gTUFYSU1VTTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gaW5wdXROdW1iZXI7XHJcbi8vIGV4cG9ydCBjb25zdCBpbnB1dHF1YW50aXR5ID0gKCkgPT4ge1xyXG4vLyBcdGNvbnN0IHF1YW50aXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXF1YW50aXR5Jyk7XHJcbi8vIFx0Y29uc3QgaW5wdXQgPSBxdWFudGl0eS5xdWVyeVNlbGVjdG9yKCcuanMtcXVhbnRpdHktaW5wdXQnKTtcclxuLy8gXHRjb25zdCBkZWNyZW1lbnQgPSBxdWFudGl0eS5xdWVyeVNlbGVjdG9yKCcuanMtcXVhbnRpdHktZGVjcmVtZW50Jyk7XHJcbi8vIFx0Y29uc3QgaW5jcmVtZW50ID0gcXVhbnRpdHkucXVlcnlTZWxlY3RvcignLmpzLXF1YW50aXR5LWluY3JlbWVudCcpO1xyXG4vLyBcdGxldCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xyXG4vLyBcdGNvbnN0IE1JTl9WQUxVRSA9IDA7XHJcbi8vIFx0Y29uc3QgTUFYX1ZBTFVFID0gMTA7XHJcbi8vIFx0bGV0XHRpc01pbmltdW47XHJcbi8vIFx0bGV0IGlzTWF4aW11bTtcclxuLy8gXHQvLyBjb25zdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XHJcbi8vIFx0Ly8gY29uc3QgaXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XHJcbi8vIFx0Ly8gaWYoaXNNaW5pbXVuKSBzZXREaXNhYmxlRGVjcmVtZW50KCk7XHJcbi8vIFx0Ly8gaWYoaXNNYXhpbXVtKSBzZXREaXNhYmxlSWVjcmVtZW50KCk7XHJcbi8vIFx0ZGVjcmVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4vLyBcdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XHJcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcclxuLy8gXHRcdGlmKGlzTWluaW11bikge1xyXG4vLyBcdFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuLy8gXHRcdFx0cmV0dXJuO1xyXG4vLyBcdFx0fVxyXG4vLyBcdFx0aWYoIWlzTWF4aW11bSkge1xyXG4vLyBcdFx0XHRpbmNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcclxuLy8gXHRcdH1cclxuLy8gXHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKSAtIDE7XHJcbi8vIFx0fSk7XHJcbi8vIFx0aW5jcmVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4vLyBcdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XHJcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcclxuLy8gXHRcdGNvbnNvbGUubG9nKGlzTWluaW11biwgaXNNYXhpbXVtLCB2YWx1ZSk7XHJcbi8vIFx0XHRpZihpc01heGltdW0pIHtcclxuLy8gXHRcdFx0aW5jcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcbi8vIFx0XHRcdHJldHVybjtcclxuLy8gXHRcdH1cclxuLy8gXHRcdGlmKCFpc01pbmltdW4pIHtcclxuLy8gXHRcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XHJcbi8vIFx0XHR9XHJcbi8vIFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSkgKyAxO1xyXG4vLyBcdH0pO1xyXG4vLyBcdGZ1bmN0aW9uIHNldERpc2FibGVEZWNyZW1lbnQoKSB7XHJcbi8vIFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuLy8gXHRcdHJldHVybjtcclxuLy8gXHR9XHJcbi8vIFx0ZnVuY3Rpb24gc2V0RGlzYWJsZUllY3JlbWVudCgpIHtcclxuLy8gXHRcdGRlY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG4vLyBcdFx0cmV0dXJuO1xyXG4vLyBcdH1cclxuLy8gfTtcclxuLy8gdmFsdWUgPSBpc05hTih2YWx1ZSkgPyAwIDogdmFsdWU7XHJcbi8vIHZhbHVlIDwgMSA/IHZhbHVlID0gMSA6ICcnO1xyXG4vLyB2YWx1ZS0tO1xyXG4vLyBwYXJzZUludCB2cyBOdW1iZXIgPT4g7Iir7J6Q66GcIOyLnOyeke2VmOuptCDsiKvsnpDrpbwg7KCA7J6lIOyVhOuLiOuptCBOYU5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICB2YXIgaW5wdXRFbGVtZW50ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXF1YW50aXR5LWlucHV0Jyk7XHJcbiAgICB2YXIgZGVjcmVtZW50RWxlbWVudCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy1xdWFudGl0eS1kZWNyZW1lbnQnKTtcclxuICAgIHZhciBpbmNyZW1lbnRFbGVtZW50ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXF1YW50aXR5LWluY3JlbWVudCcpO1xyXG4gICAgdmFyIE1JTl9WQUxVRSA9IDA7XHJcbiAgICB2YXIgTUFYX1ZBTFVFID0gMTA7XHJcbiAgICB2YXIgRElTQUJMRURfQ0xBU1MgPSAnaXMtZGlzYWJsZWQnO1xyXG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuanMtcXVhbnRpdHktZGVjcmVtZW50JykpIHtcclxuICAgICAgICAtLWlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbHVlIDw9IE1JTl9WQUxVRSlcclxuICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIGlmIChpbnB1dEVsZW1lbnQudmFsdWUgPCBNQVhfVkFMVUUpXHJcbiAgICAgICAgICAgIGluY3JlbWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuanMtcXVhbnRpdHktaW5jcmVtZW50JykpIHtcclxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbHVlID09PSBNQVhfVkFMVUUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICArK2lucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbHVlID49IE1BWF9WQUxVRSlcclxuICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIGlmIChpbnB1dEVsZW1lbnQudmFsdWUgPiBNSU5fVkFMVUUpXHJcbiAgICAgICAgICAgIGRlY3JlbWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgfVxyXG59KTtcclxuLy8gZnVuY3Rpb24gc2V0U3RyaW5nQnl0ZXMoKSB7fVxyXG4vLyBleHBvcnQgY29uc3QgaW5wdXQgPSB7XHJcbi8vIFx0dGV4dGFyZWE6IGlucHV0VGV4dGFyZWEoKSxcclxuLy8gXHRudW1iZXI6IGlucHV0TnVtYmVyKClcclxuLy8gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYm5WdFltVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWJuVnRZbVZ5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeFhRVUZYTEVkQlFVYzdTVUZEYkVJc2IwUkJRVzlFTzBsQlEzQkVMR2xFUVVGcFJEdEpRVU5xUkN4elJFRkJjMFE3U1VGRGRFUXNUVUZCVFR0SlFVTk9MSEZFUVVGeFJEdEpRVU55UkN4clJFRkJhMFE3U1VGRGJFUXNkVVJCUVhWRU8wbEJRM1pFTEUxQlFVMDdTVUZEVGl4clJFRkJhMFE3U1VGRGJFUXNLME5CUVN0RE8wbEJReTlETEc5RVFVRnZSRHRKUVVOd1JDeE5RVUZOTzBsQlEwNHNiVVJCUVcxRU8wbEJRMjVFTEdkRVFVRm5SRHRKUVVOb1JDeHhSRUZCY1VRN1NVRkRja1FzVFVGQlRUdEpRVU5PTEd0RVFVRnJSRHRKUVVOc1JDd3JRMEZCSzBNN1NVRkRMME1zYjBSQlFXOUVPMGxCUTNCRUxFMUJRVTA3U1VGRlRpdzRRa0ZCT0VJN1NVRkRPVUlzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGTkJRVk1zUlVGQlJTeFZRVUZCTEV0QlFVczdVVUZEYUVNc1NVRkJRU3h4UWtGQlRTeERRVUZsTzFGQlJUZENMRWxCUVUwc1lVRkJZU3hIUVVGSExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdFJRVU40UkN4SlFVRkpMRU5CUVVNc1lVRkJZVHRaUVVGRkxFOUJRVTA3VVVGRk1VSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4alFVRmpMRU5CUVVNc1EwRkJRVHRSUVVOc1JDeHRRa0ZCYlVJc1JVRkJSU3hEUVVGQk8xRkJSWEpDTEZOQlFWTXNiVUpCUVcxQ08xbEJRMnhDTEVsQlFVRXNkVUpCUVU4c1EwRkJWVHRaUVVONlFpeEpRVUZOTEZGQlFWRXNSMEZCUnl4RFFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMWxCUTNCRExFbEJRVTBzVDBGQlR5eEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3V1VGRE1VTXNTVUZCU1N4UFFVRlBPMmRDUVVGRkxFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUVR0WlFVTnVReXg1UlVGQmVVVTdXVUZEZWtVc05FUkJRVFJFTzFsQlF6VkVMRFJEUVVFMFF6dFpRVU0xUXl3MlEwRkJOa003V1VGRE4wTXNOa05CUVRaRE8xbEJRemRETERaRFFVRTJRenRSUVVNdlF5eERRVUZETzFGQlEwUXNVMEZCVXl4alFVRmpPMWxCUTNKQ0xFbEJRVTBzVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUVR0WlFVTnVRaXhKUVVGTkxFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVRTdXVUZEYWtJc1NVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0WlFVTndSQ3hKUVVGTkxGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlFUdFpRVU5xUkN4SlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVFN1dVRkZPVU1zU1VGQlNTeHBRa0ZCYVVJN1owSkJRVVVzVFVGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVFN1dVRkROME1zU1VGQlNTeFJRVUZSTzJkQ1FVRkZMRTFCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEzSkVMRWxCUVVrc1UwRkJVenRuUWtGQlJTeE5RVUZOTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJRVHRSUVVOMlF5eERRVUZETzBsQlEwZ3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4WFFVRlhMRU5CUVVFN1FVRkZNVUlzZFVOQlFYVkRPMEZCUTNaRExEUkVRVUUwUkR0QlFVTTFSQ3dyUkVGQkswUTdRVUZETDBRc2RVVkJRWFZGTzBGQlEzWkZMSFZGUVVGMVJUdEJRVVYyUlN3MFFrRkJORUk3UVVGRE5VSXNkMEpCUVhkQ08wRkJRM2hDTEhsQ1FVRjVRanRCUVVONlFpeHJRa0ZCYTBJN1FVRkRiRUlzYTBKQlFXdENPMEZCUTJ4Q0xHOUVRVUZ2UkR0QlFVTndSQ3h2UkVGQmIwUTdRVUZGY0VRc01rTkJRVEpETzBGQlF6TkRMREpEUVVFeVF6dEJRVVV6UXl4clJFRkJhMFE3UVVGRGJFUXNORU5CUVRSRE8wRkJRelZETERSRFFVRTBRenRCUVVNMVF5eHZRa0ZCYjBJN1FVRkRjRUlzTmtOQlFUWkRPMEZCUXpkRExHRkJRV0U3UVVGRFlpeE5RVUZOTzBGQlEwNHNjVUpCUVhGQ08wRkJRM0pDTEdkRVFVRm5SRHRCUVVOb1JDeE5RVUZOTzBGQlJVNHNLMEpCUVN0Q08wRkJReTlDTEU5QlFVODdRVUZEVUN4clJFRkJhMFE3UVVGRGJFUXNORU5CUVRSRE8wRkJRelZETERSRFFVRTBRenRCUVVNMVF5dzRRMEZCT0VNN1FVRkRPVU1zYjBKQlFXOUNPMEZCUTNCQ0xEWkRRVUUyUXp0QlFVTTNReXhoUVVGaE8wRkJRMklzVFVGQlRUdEJRVU5PTEhGQ1FVRnhRanRCUVVOeVFpeG5SRUZCWjBRN1FVRkRhRVFzVFVGQlRUdEJRVVZPTEN0Q1FVRXJRanRCUVVNdlFpeFBRVUZQTzBGQlJWQXNiME5CUVc5RE8wRkJRM0JETERSRFFVRTBRenRCUVVNMVF5eFpRVUZaTzBGQlExb3NTMEZCU3p0QlFVTk1MRzlEUVVGdlF6dEJRVU53UXl3MFEwRkJORU03UVVGRE5VTXNXVUZCV1R0QlFVTmFMRXRCUVVzN1FVRkRUQ3hMUVVGTE8wRkJSVXdzYjBOQlFXOURPMEZCUTNCRExEaENRVUU0UWp0QlFVTTVRaXhYUVVGWE8wRkJSVmdzWjBSQlFXZEVPMEZCUTJoRUxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlFTeExRVUZMTzBsQlF6bENMRWxCUVVFc2NVSkJRVTBzUTBGQlpUdEpRVU0zUWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEdGQlFXRXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVUZCTzBsQlF6RkZMRWxCUVUwc1owSkJRV2RDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhoUVVGaExFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1EwRkJRVHRKUVVOc1JpeEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVOQlFVRTdTVUZEYkVZc1NVRkJUU3hUUVVGVExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEyNUNMRWxCUVUwc1UwRkJVeXhIUVVGSExFVkJRVVVzUTBGQlFUdEpRVU53UWl4SlFVRk5MR05CUVdNc1IwRkJSeXhoUVVGaExFTkJRVUU3U1VGRmNFTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExIZENRVUYzUWl4RFFVRkRMRVZCUVVVN1VVRkROVU1zUlVGQlJTeFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkJPMUZCUlhCQ0xFbEJRVWtzV1VGQldTeERRVUZETEV0QlFVc3NTVUZCU1N4VFFVRlRPMWxCUVVVc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1VVRkROVVVzU1VGQlNTeFpRVUZaTEVOQlFVTXNTMEZCU3l4SFFVRkhMRk5CUVZNN1dVRkJSU3huUWtGQlowSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3UzBGRGFrWTdTVUZEUkN4SlFVRkpMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1JVRkJSVHRSUVVNMVF5eEpRVUZKTEZsQlFWa3NRMEZCUXl4TFFVRkxMRXRCUVVzc1UwRkJVenRaUVVGRkxFOUJRVTA3VVVGRk5VTXNSVUZCUlN4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGQk8xRkJSWEJDTEVsQlFVa3NXVUZCV1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hUUVVGVE8xbEJRVVVzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVUU3VVVGRE5VVXNTVUZCU1N4WlFVRlpMRU5CUVVNc1MwRkJTeXhIUVVGSExGTkJRVk03V1VGQlJTeG5Ra0ZCWjBJc1EwRkJReXhsUVVGbExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVRTdTMEZEYWtZN1FVRkRTQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEJRVVZHTEN0Q1FVRXJRanRCUVVVdlFpeDVRa0ZCZVVJN1FVRkRla0lzT0VKQlFUaENPMEZCUXpsQ0xIbENRVUY1UWp0QlFVTjZRaXhMUVVGTEluMD0iXSwic291cmNlUm9vdCI6IiJ9