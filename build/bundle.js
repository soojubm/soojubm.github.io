!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=57)}([function(e,t,n){},function(e,t,n){"use strict";var r=n(2),o=n(4),i=n(6),c=n(7),a=n(8),s=n(10),u=Math.max,l=Math.min,d=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(19)("replace",2,(function(e,t,n,v){return[function(r,o){var i=e(this),c=null==r?void 0:r[t];return void 0!==c?c.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=v(n,e,this,t);if(o.done)return o.value;var d=r(e),f=String(this),p="function"==typeof t;p||(t=String(t));var m=d.global;if(m){var h=d.unicode;d.lastIndex=0}for(var y=[];;){var b=s(d,f);if(null===b)break;if(y.push(b),!m)break;""===String(b[0])&&(d.lastIndex=a(f,i(d.lastIndex),h))}for(var x,L="",S=0,w=0;w<y.length;w++){b=y[w];for(var E=String(b[0]),j=u(l(c(b.index),f.length),0),k=[],O=1;O<b.length;O++)k.push(void 0===(x=b[O])?x:String(x));var A=b.groups;if(p){var T=[E].concat(k,j,f);void 0!==A&&T.push(A);var q=String(t.apply(void 0,T))}else q=g(E,f,j,k,A,t);j>=S&&(L+=f.slice(S,j)+q,S=j+E.length)}return L+f.slice(S)}];function g(e,t,r,i,c,a){var s=r+e.length,u=i.length,l=p;return void 0!==c&&(c=o(c),l=f),n.call(a,l,(function(n,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(s);case"<":a=c[o.slice(1,-1)];break;default:var l=+o;if(0===l)return n;if(l>u){var f=d(l/10);return 0===f?n:f<=u?void 0===i[f-1]?o.charAt(1):i[f-1]+o.charAt(1):n}a=i[l-1]}return void 0===a?"":a}))}}))},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(5);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(7),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";var r=n(9)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r=n(7),o=n(5);e.exports=function(e){return function(t,n){var i,c,a=String(o(t)),s=r(n),u=a.length;return s<0||s>=u?e?"":void 0:(i=a.charCodeAt(s))<55296||i>56319||s+1===u||(c=a.charCodeAt(s+1))<56320||c>57343?e?a.charAt(s):i:e?a.slice(s,s+2):c-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(11),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){var r=n(12),o=n(13)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,c;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(c=r(t))&&"function"==typeof t.callee?"Arguments":c}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(14)("wks"),o=n(18),i=n(16).Symbol,c="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=c&&i[e]||(c?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(15),o=n(16),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=!1},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){"use strict";n(20);var r=n(32),o=n(24),i=n(28),c=n(5),a=n(13),s=n(21),u=a("species"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),d=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var f=a(e),p=!i((function(){var t={};return t[f]=function(){return 7},7!=""[e](t)})),v=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[u]=function(){return n}),n[f](""),!t})):void 0;if(!p||!v||"replace"===e&&!l||"split"===e&&!d){var g=/./[f],m=n(c,f,""[e],(function(e,t,n,r,o){return t.exec===s?p&&!o?{done:!0,value:g.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),h=m[0],y=m[1];r(String.prototype,e,h),o(RegExp.prototype,f,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){"use strict";var r=n(21);n(23)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){"use strict";var r,o,i=n(22),c=RegExp.prototype.exec,a=String.prototype.replace,s=c,u=(r=/a/,o=/b*/g,c.call(r,"a"),c.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(s=function(e){var t,n,r,o,s=this;return l&&(n=new RegExp("^"+s.source+"$(?!\\s)",i.call(s))),u&&(t=s.lastIndex),r=c.call(s,e),u&&r&&(s.lastIndex=s.global?r.index+r[0].length:t),l&&r&&r.length>1&&a.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=s},function(e,t,n){"use strict";var r=n(2);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(16),o=n(15),i=n(24),c=n(32),a=n(35),s=function(e,t,n){var u,l,d,f,p=e&s.F,v=e&s.G,g=e&s.S,m=e&s.P,h=e&s.B,y=v?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,b=v?o:o[t]||(o[t]={}),x=b.prototype||(b.prototype={});for(u in v&&(n=t),n)d=((l=!p&&y&&void 0!==y[u])?y:n)[u],f=h&&l?a(d,r):m&&"function"==typeof d?a(Function.call,d):d,y&&c(y,u,d,e&s.U),b[u]!=d&&i(b,u,f),m&&x[u]!=d&&(x[u]=d)};r.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t,n){var r=n(25),o=n(31);e.exports=n(27)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(2),o=n(26),i=n(30),c=Object.defineProperty;t.f=n(27)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(27)&&!n(28)((function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){e.exports=!n(28)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(3),o=n(16).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(3);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(16),o=n(24),i=n(33),c=n(18)("src"),a=n(34),s=(""+a).split("toString");n(15).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,c)||o(n,c,e[t]?""+e[t]:s.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[c]||a.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){e.exports=n(14)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(36);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){for(var r=n(38),o=n(48),i=n(32),c=n(16),a=n(24),s=n(41),u=n(13),l=u("iterator"),d=u("toStringTag"),f=s.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(p),g=0;g<v.length;g++){var m,h=v[g],y=p[h],b=c[h],x=b&&b.prototype;if(x&&(x[l]||a(x,l,f),x[d]||a(x,d,h),s[h]=f,y))for(m in r)x[m]||i(x,m,r[m],!0)}},function(e,t,n){"use strict";var r=n(39),o=n(40),i=n(41),c=n(42);e.exports=n(44)(Array,"Array",(function(e,t){this._t=c(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(13)("unscopables"),o=Array.prototype;null==o[r]&&n(24)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports={}},function(e,t,n){var r=n(43),o=n(5);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(12);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(17),o=n(23),i=n(32),c=n(24),a=n(41),s=n(45),u=n(55),l=n(56),d=n(13)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,v,g,m,h){s(n,t,v);var y,b,x,L=function(e){if(!f&&e in j)return j[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},S=t+" Iterator",w="values"==g,E=!1,j=e.prototype,k=j[d]||j["@@iterator"]||g&&j[g],O=k||L(g),A=g?w?L("entries"):O:void 0,T="Array"==t&&j.entries||k;if(T&&(x=l(T.call(new e)))!==Object.prototype&&x.next&&(u(x,S,!0),r||"function"==typeof x[d]||c(x,d,p)),w&&k&&"values"!==k.name&&(E=!0,O=function(){return k.call(this)}),r&&!h||!f&&!E&&j[d]||c(j,d,O),a[t]=O,a[S]=p,g)if(y={values:w?O:L("values"),keys:m?O:L("keys"),entries:A},h)for(b in y)b in j||i(j,b,y[b]);else o(o.P+o.F*(f||E),t,y);return y}},function(e,t,n){"use strict";var r=n(46),o=n(31),i=n(55),c={};n(24)(c,n(13)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(c,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(2),o=n(47),i=n(53),c=n(52)("IE_PROTO"),a=function(){},s=function(){var e,t=n(29)("iframe"),r=i.length;for(t.style.display="none",n(54).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;r--;)delete s.prototype[i[r]];return s()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[c]=e):n=s(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(25),o=n(2),i=n(48);e.exports=n(27)?Object.defineProperties:function(e,t){o(e);for(var n,c=i(t),a=c.length,s=0;a>s;)r.f(e,n=c[s++],t[n]);return e}},function(e,t,n){var r=n(49),o=n(53);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(33),o=n(42),i=n(50)(!1),c=n(52)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),s=0,u=[];for(n in a)n!=c&&r(a,n)&&u.push(n);for(;t.length>s;)r(a,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(42),o=n(6),i=n(51);e.exports=function(e){return function(t,n,c){var a,s=r(t),u=o(s.length),l=i(c,u);if(e&&n!=n){for(;u>l;)if((a=s[l++])!=a)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(7),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(14)("keys"),o=n(18);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(16).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(25).f,o=n(33),i=n(13)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(33),o=n(4),i=n(52)("IE_PROTO"),c=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},function(e,t,n){"use strict";n.r(t);n(0),n(1);"2034399002125581".slice(-4).padStart("2034399002125581".length,"*");document.addEventListener("input",e=>{const t=e.target;"textarea"===t.nodeName.toLowerCase()&&(e=>{e.style.height="inherit";const t=window.getComputedStyle(e);let n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"})(t);const n=document.querySelector(".textfield-byte b");for(var r=0;r<1e4;r++)"This is ìë¬´ìë¯¸ìë ë¬¸ìì´";var o=0;"textarea"===t.nodeName.toLowerCase()&&(o=t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length,(t.value.length>30||t.value.length>45)&&(console.log("30byteì í"),t.value=t.value.slice(0,t.value.length)),n.innerHTML=o)});const r=()=>{const e=document.body;let t=void 0;const n=document.querySelectorAll(".js-modal");n&&(n.forEach(n=>n.addEventListener("click",r=>{r.stopPropagation(),n.nextElementSibling.classList.add("is-visible"),t=window.pageYOffset,e.classList.add("body-lock"),e.style.top="-".concat(t,"px"),document.addEventListener("click",(function(){if(!n.nextElementSibling.classList.contains("is-visible"))return;n.nextElementSibling.classList.remove("is-visible"),e.classList.remove("body-lock"),window.scrollTo(0,t)}))})),document.querySelectorAll(".modal-dialog").forEach(e=>e.addEventListener("click",e=>e.stopPropagation())))},o=e=>{const t=document.querySelector(e),n=document.body;if(!t)return;const r=t===document.querySelector(".navigation li");t.addEventListener("mouseenter",()=>{t.setAttribute("aria-expanded","true"),t.classList.add("is-expanded"),r&&n.classList.add("is-shown"),t.addEventListener("mouseleave",()=>{t.setAttribute("aria-expanded","false"),t.classList.remove("is-expanded"),r&&n.classList.remove("is-shown")})})};var i=function(){const e=document.getElementById("view"),t=()=>{let{hash:t}=window.location;const n=t?"/views/".concat(t.substring(1),".html"):"/views/home.html";fetch(n).then(e=>e.ok?e.text():Promise.reject(e)).then(t=>{e.innerHTML=t,(e=>{let{checkAllElement:t,checkElements:n}=e;const r=document.querySelector(t),o=document.querySelectorAll(n);function i(){const e=Array.from(o).every(e=>e.checked);r.checked=e;const t=Array.from(o).some(e=>e.checked);r.indeterminate=t&&!e,r.dataset.indeterminate=t&&!e}r&&o&&(r.addEventListener("change",(function(){o.forEach(e=>{e.checked=r.checked,r.indeterminate=!1,r.dataset.indeterminate=!1})})),o.forEach(e=>{e.addEventListener("change",i)}),document.addEventListener("DOMContentLoaded",i))})({checkAllElement:".js-checkall",checkElements:".js-check"}),r(),(()=>{const e=document.querySelectorAll(".js-accordion");if(!e)return;let t;e.forEach(e=>{t=e.nextElementSibling,e.addEventListener("click",t=>{e.classList.toggle("is-active"),e.nextElementSibling.classList.toggle("is-visible"),console.log(e)}),t.addEventListener("click",e=>e.stopPropagation())})})(),(()=>{const e=document.querySelector(".js-file-input");if(!e)return;document.querySelector(".js-file-submit");const t=document.querySelector(".js-file-attachment-list"),n=document.querySelector(".js-file-attachment-helper");let r,o;e.addEventListener("change",(function(){r=e.files,n.style.display=0===r.length?"block":"none",console.log("attachedfiles",r),Array.from(r).forEach(e=>{if(!function(e){if(["image/jpeg","image/gif"].indexOf(e.type)>-1)return!0}(e))return alert("íì¼íì jpeg pjpeg png ì¤ íëê° ìëì¼~");o='\n\t\t\t\t<figure class="file-attachment-item">\n\t\t\t\t\t<img class="file-attachment-item-image" src='.concat(window.URL.createObjectURL(e),' alt="">\n\t\t\t\t\t<b class="file-attachment-item-name" href="#">').concat(e.name,'</b>\n\t\t\t\t\t<small class="file-attachment-item-size" >').concat(function(e){const t=e>=1024&&e<1048576;return e<1024?e+"bytes":t?(e/1024).toFixed(2)+"KB":(e/1048576).toFixed(2)+"MB"}(e.size),'</small>\n\t\t\t\t\t<button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-x"></i></button>\n\t\t\t\t</figure>'),t.innerHTML=o+t.innerHTML})}))})(),o(".js-hover-trigger"),o(".header-user-notification"),o(".header-user-account");const n=document.querySelectorAll(".js-scroll-animation");n.forEach(e=>{e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")}),window.addEventListener("scroll",()=>{n.forEach(e=>{const t=window.pageYOffset;t>t+e.getBoundingClientRect().top-window.innerHeight+50&&e.classList.add("is-scrolled")})});(()=>{const e=document.querySelector(".cursor");function t(){const t=event.clientX,n=event.clientY;e.style.left="".concat(t,"px"),e.style.top="".concat(n,"px")}document.addEventListener("DOMContentLoaded",t),document.addEventListener("mousemove",t),document.addEventListener("click",(function(){e.classList.add("expand"),setTimeout(()=>{e.classList.remove("expand")},500)}))})()}).catch(e=>console.warn("router: ",e));const i="/".concat(t.substring(1));console.log(i,window.location.pathname,window.location.history)};t(),window.addEventListener("hashchange",t),window.addEventListener("hashchange",()=>{document.querySelector(".navigation-toggle").classList.contains("is-active")&&(document.querySelector(".navigation-toggle").classList.remove("is-active"),document.querySelector(".navigation-toggle").nextElementSibling.classList.remove("is-visible"))})};n(37);const c={isRequired:e=>""==e||null==e||null==e||null!=e&&"object"==typeof e&&!Object.keys(e).length,isLength:(e,t)=>e.length<t,isNumber:e=>/[^0-9]/g.test(e)};n.d(t,"getTodayDate",(function(){return s}));document.addEventListener("DOMContentLoaded",()=>{"/"===window.location.pathname&&console.log("this is home page."),i(),(()=>{const e=document.body,t=document.querySelector(".js-loading");window.addEventListener("load",(function(){setTimeout((function(){t.classList.add("is-hidden"),e.classList.remove("body-lock")}),0)})),document.addEventListener("DOMContentLoaded",(function(){e.classList.add("body-lock")}))})(),(()=>{const e=document.querySelector(".js-browser");let t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?e.style.display="block":-1!==t.indexOf("chrome")&&console.log(t,"í¬ë¡¬")})(),(()=>{const e=document.querySelector(".header"),t="fixed"===getComputedStyle(e).position,n=document.querySelector("body");function r(){n.style.marginTop=t?e.clientHeight+"px":"0px"}r(),window.addEventListener("scroll",()=>{requestAnimationFrame(r)}),window.addEventListener("resize",()=>{requestAnimationFrame(r)})})(),document.addEventListener("click",e=>{const t=e.target,n=document.querySelector(".profile-tablist-active"),r=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index");t.closest("[role=tab]")&&(t.setAttribute("aria-selected","true"),n.style.left="".concat(t.offsetLeft,"px"),r.forEach(e=>e.setAttribute("aria-selected","false")),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach(e=>{e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")}))},!0),(()=>{document.querySelector(".js-number-input");document.addEventListener("keydown",e=>{const{target:t}=e;t.closest(".js-number-input")&&(!function(){const t=e.keyCode;t>=48||t<=57||e.preventDefault(),69===t&&e.preventDefault(),189===t&&e.preventDefault(),187===t&&e.preventDefault(),190===t&&e.preventDefault()}(),document.addEventListener("keyup",(function(){const n=/(^0+)/.test(t.value),r=Number(t.value)>=300,o=e.target.value.length>0;n&&(e.target.value=0);o&&(e.target.value=e.target.value.slice(0,3));r&&(e.target.value=300)})))}),document.addEventListener("click",e=>{const t=e.target;let n;if(t.closest(".js-variation-decrement")){if((n=t.parentNode.querySelector(".js-variation-input")).value<=0)return void t.classList.add("is-disabled");--n.value,console.log("target",t)}if(t.closest(".js-variation-increment")){if((n=t.parentNode.querySelector(".js-variation-input")).value>=10)return void t.classList.add("is-disabled");++n.value}})})(),document.addEventListener("click",e=>{const t=e.target;t.closest(".js-to-top")&&(e.preventDefault(),window.scrollTo(0,0),window.location.hash=t.name)}),a(),new Promise((function(e,t){t("Unable to say hi."),setTimeout((function(){e("Hello, World")}),5e3)})).then(e=>{console.log("res",e)}).catch(e=>{console.warn(e)}),window.addEventListener("scroll",()=>{document.querySelector(".post-head")&&(e=>{let{targetElement:t,addClass:n}=e;const r=document.querySelector(t);if(!r)return;const o=document.body;let i,c=r.offsetHeight;window.addEventListener("resize",()=>{i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame(()=>{c=r.offsetHeight},60)}),window.addEventListener("scroll",()=>{i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame(()=>{window.pageYOffset>r.offsetTop+c?o.classList.add(n):o.classList.remove(n)},60)})})(".post-head")}),document.querySelectorAll(".js-close").forEach(e=>{e.addEventListener("click",t=>{t.target.parentNode.classList.contains("notice")?document.body.classList.add("is-closed-topbanner"):e.parentNode.style.display="none"})})});const a=()=>{const e=document.querySelectorAll(".graph-item");if(!e)return;let t,n,r;e.forEach(e=>{n=e.querySelector(".graph-item-bar"),t=e.querySelector(".graph-item-value"),r=parseInt(t.innerHTML),n.style.height=r+"px",t.style.bottom=r+"px"})};document.addEventListener("blur",e=>{console.log("test",e.target.validity,e.target.form),e.target.form.submit},!0),document.addEventListener("submit",e=>{e.target===document.login&&(isInvalid&&e.preventDefault(),function(){if(!document.login)return;const e=document.login.email,t=document.login.password;document.querySelectorAll(".textfield-helper");let n={email:"",password:""};document.addEventListener("input",r=>{const o=r.target,i=o===e,a=o===t;if(c.isNumber(e.value)&&(n[o.name]=o.value,console.log(n)),console.log(r.target.value),i){if(c.isRequired(e.value))return void u({message:"íìê°ì´ì´ì"});s()}if(a){if(console.log(o,o.parentNode),c.isLength(t.value,8))return console.log("at least 8 length"),void u({message:"ëë¬´ ì§§ìì"});s()}function s(){o.parentNode.classList.remove("is-invalid"),o.nextElementSibling.style.display="none",field.removeAttribute("aria-describedby")}function u(e){let{message:t}=e;console.log(o.nextElementSibling);const n=o.id||o.name;o.parentNode.classList.add("is-invalid"),o.setAttribute("aria-describedby","error-"+n),o.nextElementSibling.style.display="block",o.nextElementSibling.innerHTML=t}})}())});const s=()=>{const e=new Date;e.getFullYear(),String(e.getMonth()+1).padStart(2,"0"),String(e.getDate()).padStart(2,"0"),e.getDay(),e.getHours(),e.getMinutes()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvcm91dGVyLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy92YWxpZGF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJhbk9iamVjdCIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJ0b0ludGVnZXIiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwibWF4IiwiTWF0aCIsIm1pbiIsImZsb29yIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsImRlZmluZWQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJtYXliZUNhbGxOYXRpdmUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIk8iLCJ0aGlzIiwiZm4iLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJyZWdleHAiLCJyZXMiLCJkb25lIiwicngiLCJTIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJnbG9iYWwiLCJmdWxsVW5pY29kZSIsInVuaWNvZGUiLCJsYXN0SW5kZXgiLCJyZXN1bHRzIiwicmVzdWx0IiwicHVzaCIsIml0IiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJsZW5ndGgiLCJtYXRjaGVkIiwicG9zaXRpb24iLCJpbmRleCIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJjb25jYXQiLCJyZXBsYWNlbWVudCIsImFwcGx5IiwiZ2V0U3Vic3RpdHV0aW9uIiwic2xpY2UiLCJzdHIiLCJ0YWlsUG9zIiwic3ltYm9scyIsIm1hdGNoIiwiY2giLCJjYXB0dXJlIiwiY2hhckF0IiwiZiIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiY2VpbCIsImlzTmFOIiwiYXQiLCJUT19TVFJJTkciLCJ0aGF0IiwicG9zIiwiYSIsImIiLCJjaGFyQ29kZUF0IiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwiUmVnRXhwIiwiZXhlYyIsIlIiLCJjb2YiLCJUQUciLCJBUkciLCJhcmd1bWVudHMiLCJUIiwiQiIsImUiLCJ0cnlHZXQiLCJjYWxsZWUiLCJ0b1N0cmluZyIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsImNvcmUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiX19lIiwid2luZG93Iiwic2VsZiIsIkZ1bmN0aW9uIiwiX19nIiwiaWQiLCJweCIsInJhbmRvbSIsInJlZGVmaW5lIiwiaGlkZSIsImZhaWxzIiwid2tzIiwicmVnZXhwRXhlYyIsIlNQRUNJRVMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwicmVwbGFjZSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsInNwbGl0IiwiS0VZIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImNvbnN0cnVjdG9yIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwic3RyaW5nIiwiYXJnIiwidGFyZ2V0IiwicHJvdG8iLCJmb3JjZWQiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5Iiwic291cmNlIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiZXhwUHJvdG8iLCJVIiwiVyIsImRQIiwiY3JlYXRlRGVzYyIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJBdHRyaWJ1dGVzIiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ2YWwiLCJ2YWx1ZU9mIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiYUZ1bmN0aW9uIiwiJGl0ZXJhdG9ycyIsImdldEtleXMiLCJJdGVyYXRvcnMiLCJJVEVSQVRPUiIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkFycmF5IiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsIk5BTUUiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJhZGRUb1Vuc2NvcGFibGVzIiwic3RlcCIsInRvSU9iamVjdCIsIml0ZXJhdGVkIiwia2luZCIsIl90IiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90byIsIklPYmplY3QiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsImtleXMiLCJyZXR1cm5UaGlzIiwiQmFzZSIsIkNvbnN0cnVjdG9yIiwibmV4dCIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJtZXRob2RzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJkZXNjcmlwdG9yIiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiJGtleXMiLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsInNoYXJlZCIsImRvY3VtZW50RWxlbWVudCIsImRlZiIsInRhZyIsInN0YXQiLCJPYmplY3RQcm90byIsInBhZFN0YXJ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImZpZWxkIiwiaGVpZ2h0IiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwic2Nyb2xsSGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYXV0b0V4cGFuZCIsImJ5dGVFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInN0cmluZ0J5dGVMZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiaW5uZXJIVE1MIiwibW9kYWwiLCJib2R5RWxlbWVudCIsImJvZHkiLCJwYWdlWSIsIm1vZGFscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwic3RvcFByb3BhZ2F0aW9uIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY2xhc3NMaXN0IiwiYWRkIiwicGFnZVlPZmZzZXQiLCJ0b3AiLCJjb250YWlucyIsInJlbW92ZSIsInNjcm9sbFRvIiwiZWxlbWVudCIsImVudGVyVGFyZ2V0IiwiaG92ZXJFbGVtZW50IiwiaXNOYXZpZ2F0aW9uIiwic2V0QXR0cmlidXRlIiwicm91dGVyIiwidmlldyIsImdldEVsZW1lbnRCeUlkIiwicm91dGVQYWdlIiwiaGFzaCIsImxvY2F0aW9uIiwicGFnZSIsInN1YnN0cmluZyIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJ0ZXh0IiwiUHJvbWlzZSIsInJlamVjdCIsImh0bWwiLCJjaGVja0FsbEVsZW1lbnQiLCJjaGVja0VsZW1lbnRzIiwiY2hlY2tBbGwiLCJjaGVja0l0ZW1zIiwic2V0Q2hlY2tFYWNoIiwiaXNDaGVja2VkRXZlcnkiLCJmcm9tIiwiZXZlcnkiLCJjaGVja0l0ZW0iLCJjaGVja2VkIiwiaXNDaGVja2VkU29tZSIsInNvbWUiLCJpbmRldGVybWluYXRlIiwiZGF0YXNldCIsImNoZWNrQWxsY2hlY2tib3giLCJ0b2dnbGVFbGVtZW50cyIsInRvZ2dsZUVsZW1lbnROZXh0IiwidG9nZ2xlIiwiZXZlbnRUb2dnbGUiLCJmaWxlSW5wdXQiLCJhdHRhY2htZW50TGlzdCIsImF0dGFjaG1lbnRIZWxwZXIiLCJhdHRhY2hlZGZpbGVzIiwiZmlsZVRlbXBsYXRlIiwiZmlsZXMiLCJmaWxlIiwiaW5kZXhPZiIsInZhbGlkRmlsZVR5cGUiLCJhbGVydCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInNpemUiLCJpc0tpbG9CeXRlcyIsInRvRml4ZWQiLCJyZXR1cm5GaWxlU2l6ZSIsImF0dGFjaEZpbGUiLCJzY3JvbGxUYXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJpbm5lckhlaWdodCIsImN1cnNvciIsInNldEN1cnNvciIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJsZWZ0Iiwic2V0VGltZW91dCIsImN1c3RvbUN1cnNvciIsImNhdGNoIiwiZXJyb3IiLCJ3YXJuIiwic2xhc2hlZEhhc2giLCJwYXRobmFtZSIsImhpc3RvcnkiLCJ2YWxpZGF0aW9ucyIsImlzUmVxdWlyZWQiLCJpc0xlbmd0aCIsImlzTnVtYmVyIiwidGVzdCIsImxvYWRlckVsZW1lbnQiLCJsb2FkZXIiLCJCcm93c2VyRWxlbWVudCIsImFnZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY2hlY2tCcm93c2VyIiwiaGVhZGVyRWxlbWVudCIsImlzRml4ZWRIZWFkZXIiLCJtYWluRWxlbWVudCIsImFkZFBhZGRpbmciLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhZGp1c3RUb3BQYWRkaW5nIiwidGFiQWN0aWNlQmFyIiwidGFicyIsInBhcmVudE5vZGUiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsImNsb3Nlc3QiLCJvZmZzZXRMZWZ0IiwidGFiIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0Iiwic2V0UHJldmVudE5vdE51bWJlciIsImlzRmlyc3RQbGFjZWRaZXJvIiwiaXNNYXhpbXVtIiwiTnVtYmVyIiwidGFyZ2V0SW5wdXQiLCJpbnB1dE51bWJlciIsInNldEdyYXBoIiwicmVzb2x2ZSIsInRhcmdldEVsZW1lbnQiLCJhZGRDbGFzcyIsInN0aWNreUVsZW1lbnQiLCJpc1Njcm9sbGluZyIsInN0aWNreUVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm9mZnNldFRvcCIsImdyYXBoSXRlbXMiLCJncmFwaEl0ZW1WYWx1ZSIsImdyYXBoSXRlbUJhciIsImdyYXBoVmFsdWUiLCJ2YWxpZGl0eSIsImZvcm0iLCJzdWJtaXQiLCJsb2dpbiIsImlzSW52YWxpZCIsImxvZ2luRW1haWwiLCJlbWFpbCIsImxvZ2luUGFzc3dvcmQiLCJwYXNzd29yZCIsImxvZ2luRGF0YSIsImlzRW1haWwiLCJpc1Bhc3N3b3JkIiwic2V0SW52YWxpZCIsIm1lc3NhZ2UiLCJzZXRWYWxpZCIsInJlbW92ZUF0dHJpYnV0ZSIsImxvZ2luRm9ybVZhbGlkYXRpb24iLCJnZXRUb2RheURhdGUiLCJ0b2RheSIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldERheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxF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LElBRUQsR0FBR0gsRUFBWSxDQUVkLEdBREE1SixRQUFRQyxJQUFJekwsRUFBUUEsRUFBTzZTLFlBQ3hCdEIsRUFBWUUsU0FBU3VELEVBQWMvZCxNQUFPLEdBRzVDLE9BRkF1VSxRQUFRQyxJQUFJLDBCQUNaNEosRUFBVyxDQUFDQyxRQUFTLFdBR3RCQyxJQUlELFNBQVNBLElBQ1J2VixFQUFPNlMsV0FBV3pHLFVBQVVLLE9BQU8sY0FDbkN6TSxFQUFPbU0sbUJBQW1CcEQsTUFBTUMsUUFBVSxPQUUxQzZCLE1BQU0ySyxnQkFBZ0Isb0JBRXZCLFNBQVNILEVBQVQsR0FBK0IsSUFBWCxRQUFDQyxHQUFVLEVBQzlCOUosUUFBUUMsSUFBSXpMLEVBQU9tTSxvQkFFbkIsTUFBTWpPLEVBQUs4QixFQUFPOUIsSUFBTThCLEVBQU96SixLQUMvQnlKLEVBQU82UyxXQUFXekcsVUFBVUMsSUFBSSxjQUVoQ3JNLEVBQU8rTSxhQUFhLG1CQUFvQixTQUFXN08sR0FFbkQ4QixFQUFPbU0sbUJBQW1CcEQsTUFBTUMsUUFBVSxRQUMxQ2hKLEVBQU9tTSxtQkFBbUJULFVBQVk0SixLQTBFeENHLE1BeUJNLE1BQU1DLEVBQWUsS0FDM0IsTUFBTUMsRUFBUSxJQUFJQyxLQUNMRCxFQUFNRSxjQUNMdmMsT0FBT3FjLEVBQU1HLFdBQWEsR0FBR3RMLFNBQVMsRUFBRyxLQUMxQ2xSLE9BQU9xYyxFQUFNSSxXQUFXdkwsU0FBUyxFQUFHLEtBQ3JDbUwsRUFBTUssU0FFSkwsRUFBTU0sV0FDSk4sRUFBTU8iLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1Nyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuOScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaE5hbWUgPSAvXlvqsIAt7Z6jXSskLztcclxudmFyIGhOYW1lMiA9ICAvXlvqsIAt7Z6jYS16QS1aXSskLztcclxudmFyIG9ubHlOdW1iZXJzID0gL15bMC05XSokLztcclxuXHJcbnZhciBlbmdsaXNoTnVtYmVyID0gL15bYS16QS1aMC05XXs0LDEyfSQvO1xyXG52YXIgcGFzc3dvcmQgPSAvXig/PS4qW2EtekEtWl0pKCg/PS4qXFxkKXwoPz0uKlxcVykpLns2LDIwfSQvOyAvLyDsmIHsiKvtirlcclxuXHJcbnZhciBlbWFpbCA9IC9eW2EtejAtOV8rLi1dK0AoW2EtejAtOS1dK1xcLikrW2EtejAtOV17Miw0fSQvO1xyXG52YXIgcGhvbmUgPSAvXlxcZHsyLDN9LVxcZHszLDR9LVxcZHs0fSQvOyAvLyAgZXgpMTIzLTEyMy0xMjM0XHJcbnZhciBwaG9uZTIgPSAgL14wMShbMHwxfDZ8N3w4fDldPyktPyhbMC05XXszLDR9KS0/KFswLTldezR9KSQvOyAvLyAwMTAtMDAwMC0wMDAwXHJcblxyXG52YXIgdXJsID0gL14oZmlsZXxnb3BoZXJ8bmV3c3xubnRwfHRlbG5ldHxodHRwcz98ZnRwcz98c2Z0cCk6XFwvXFwvKFthLXowLTktXStcXC4pK1thLXowLTldezIsNH0uKiQvO1xyXG5cclxudmFyIGlzTnVtYmVyID0gL1swLTldL2dpO1xyXG52YXIgaXNBbHBoYWJldCA9IC9bYS16XS9naTtcclxudmFyIGlzTnVtYmVyQW5kQWxwaGFiZXQgPSAvW2EtejAtOV0vO1xyXG5cclxudmFyIHN0cmluZ1RvSFRNTCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuXHR2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG5cdHZhciBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHN0ciwgJ3RleHQvaHRtbCcpO1xyXG5cdHJldHVybiBkb2MuYm9keTtcclxufTtcclxuXHJcbi8vIHRleHQucmVwbGFjZSgvW14wLTldL2dpKVxyXG4vLyB0ZXh0LnJlcGxhY2UoL1teYS16XS9naSlcclxuLy8gdGV4dC5yZXBsYWNlKC9bXmEtejAtOV0vKVxyXG5cclxuZXhwb3J0IGNvbnN0IGF1dG9FeHBhbmQgPSBmaWVsZCA9PiB7XHJcblx0ZmllbGQuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xyXG5cdFxyXG5cdGNvbnN0IGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZmllbGQpO1xyXG5cdGxldCBoZWlnaHQgPSBmaWVsZC5zY3JvbGxIZWlnaHQgKyBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItdG9wLXdpZHRoJykpO1xyXG5cdGZpZWxkLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcbn07XHJcblxyXG5cclxudmFyIGFkZCA9IGZ1bmN0aW9uKG51bTEsIG51bTIpIHtcclxuXHRudW0xID0gbnVtMSB8fCAwOyAvLyBjb25kaXRpb25hbCBvcGVyYXRvclxyXG5cdG51bTIgPSBudW0yID8gbnVtMiA6IDA7IC8vIHRlcm5hcnkgb3BlcmF0b3JcclxuXHJcblx0cmV0dXJuIG51bTEgKyBudW0yO1xyXG59O1xyXG5cclxudmFyIGdldEVsZW1lbnRIZWlnaHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcblx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHR2YXIgaGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQgKyAncHgnO1xyXG5cdFxyXG5cdHJldHVybiBoZWlnaHQ7XHJcbn07XHJcblxyXG5jb25zdCBoYXNJdGVtID0gKGFyciwgaXRlbSkgPT4gYXJyLmluY2x1ZGVzKGl0ZW0pO1xyXG5cclxuLy8gZnVuY3Rpb24gZnJhbWVTaXppbmcoKSB7XHJcbi8vIFx0dmFyICRmcmFtZSA9ICQoJy5wbGF5ZXIgaWZyYW1lJyk7XHJcbi8vIFx0dmFyIGZyYW1lV2lkdGggPSAkZnJhbWUud2lkdGgoKTtcclxuLy8gXHR2YXIgZnJhbWVIZWlnaHQgPSBmcmFtZVdpZHRoICogOSAvIDE2O1xyXG4vLyBcdCRmcmFtZS5oZWlnaHQoZnJhbWVIZWlnaHQpO1xyXG5cclxuLy8gXHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XHJcbi8vIFx0XHRcdGZyYW1lV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcclxuLy8gXHRcdFx0ZnJhbWVIZWlnaHQgPSBmcmFtZVdpZHRoICogOSAvIDE2O1xyXG4vLyBcdFx0XHQkZnJhbWUuaGVpZ2h0KGZyYW1lSGVpZ2h0KTtcclxuLy8gXHR9KTtcclxuLy8gfVxyXG5cclxuXHJcbmNsYXNzIENhbGN1bGF0b3Ige1xyXG5cdGFkZCh4LCB5KSB7XHJcblx0XHRyZXR1cm4geCArIHk7XHJcblx0fVxyXG5cdHN1YnRyYWN0KHgsIHkpIHtcclxuXHRcdHJldHVybiB4IC0geTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIGVsZW1lbnRzLmZpbHRlcigodmFsdWUsIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4KSAvLyB1bmlxXHJcblxyXG5cclxuLy8gXCJqYXZhc2NyaXBcIi5yZXBsYWNlKC9hL2dpLFwiYlwiKVxyXG5jb25zdCBmdWxsTnVtYmVyID0gJzIwMzQzOTkwMDIxMjU1ODEnO1xyXG5jb25zdCBsYXN0NERpZ2l0cyA9IGZ1bGxOdW1iZXIuc2xpY2UoLTQpO1xyXG5jb25zdCBtYXNrZWROdW1iZXIgPSBsYXN0NERpZ2l0cy5wYWRTdGFydChmdWxsTnVtYmVyLmxlbmd0aCwgJyonKTtcclxuLypcclxuXHR2YXIgaXNEYXRlU3VwcG9ydGVkID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCAneCcpO1xyXG5cdFx0cmV0dXJuIChpbnB1dC52YWx1ZSAhPT0gJ3gnKTtcclxuXHR9O1xyXG5cdGlmKGlzRGF0ZVN1cHBvcnRlZCgpKSB7XHJcblx0XHRmaWVsZC5yZW1vdmVBdHRyaWJ1dGUoJ3BhdHRlcm4nKTtcclxuXHRcdGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgncGxhY2Vob2xkZXInKTtcclxuXHRcdHZhciBoZWxwZXJUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlc2NyaXB0aW9uJyk7XHJcblx0XHRpZihoZWxwZXJUZXh0KSB7XHJcblx0XHRcdGhlbHBlclRleHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoZWxwZXJUZXh0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ki8iLCJpbXBvcnQgeyBhdXRvRXhwYW5kIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5cclxuLy8gVE9ETzog7Jes65+s67KIIOuwmOuzte2VtOyEnCDsmKzroLjsnYQg65WMIGZpbGVsaXN0IOuIhOyggeuQmOuKlOyngD9cclxuLy8gVE9ETzog64+Z7J287ZWcIO2MjOydvOydhCDsl4XroZzrk5wg7ZaI7J2EIOuVjCDssrTtgawsIOyCreygnO2WiOydhCDrlYwgZmlsZUxpc3Tsl5DshJwg7IKt7KCcLCBmaWxlSW5wdXQuZmlsZXPripQg7IyT7J207KeAIOyViuydjC5cclxuZXhwb3J0IGNvbnN0IGF0dGFjaEZpbGUgPSAoKSA9PiB7XHJcblx0Y29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtaW5wdXQnKTtcclxuXHRpZighZmlsZUlucHV0KSByZXR1cm47XHJcblx0XHJcblx0Y29uc3QgZmlsZVN1Ym1pdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLXN1Ym1pdCcpO1xyXG5cdGNvbnN0IGF0dGFjaG1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1saXN0Jyk7XHJcblx0Y29uc3QgYXR0YWNobWVudEhlbHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtaGVscGVyJyk7XHJcblx0bGV0IGF0dGFjaGVkZmlsZXM7XHJcblx0bGV0IGZpbGVUZW1wbGF0ZTtcclxuXHRsZXQgZmlsZUxpc3QgPSBbXTtcclxuXHJcblx0ZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGF0dGFjaCk7XHJcblxyXG5cdGZ1bmN0aW9uIGF0dGFjaCgpIHtcclxuXHRcdGF0dGFjaGVkZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XHJcblx0XHRhdHRhY2htZW50SGVscGVyLnN0eWxlLmRpc3BsYXkgPSBhdHRhY2hlZGZpbGVzLmxlbmd0aCA9PT0gMCA/ICdibG9jaycgOiAnbm9uZSc7XHJcblx0XHRjb25zb2xlLmxvZygnYXR0YWNoZWRmaWxlcycsIGF0dGFjaGVkZmlsZXMpO1xyXG5cdFx0XHJcblx0XHRBcnJheS5mcm9tKGF0dGFjaGVkZmlsZXMpLmZvckVhY2goKGZpbGUpID0+IHtcclxuXHRcdFx0aWYoIXZhbGlkRmlsZVR5cGUoZmlsZSkpIHJldHVybiBhbGVydCgn7YyM7J287YOA7J6FIGpwZWcgcGpwZWcgcG5nIOykkSDtlZjrgpjqsIAg7JWE64uI7JW8ficpO1xyXG5cdFx0XHRmaWxlVGVtcGxhdGUgPSBgXHJcblx0XHRcdFx0PGZpZ3VyZSBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtXCI+XHJcblx0XHRcdFx0XHQ8aW1nIGNsYXNzPVwiZmlsZS1hdHRhY2htZW50LWl0ZW0taW1hZ2VcIiBzcmM9JHt3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKX0gYWx0PVwiXCI+XHJcblx0XHRcdFx0XHQ8YiBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLW5hbWVcIiBocmVmPVwiI1wiPiR7ZmlsZS5uYW1lfTwvYj5cclxuXHRcdFx0XHRcdDxzbWFsbCBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLXNpemVcIiA+JHtyZXR1cm5GaWxlU2l6ZShmaWxlLnNpemUpfTwvc21hbGw+XHJcblx0XHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwiZmlsZS1hdHRhY2htZW50LWl0ZW0tZGVsZXRlIGpzLXJlbW92ZS10aGlzXCIgdHlwZT1cImJ1dHRvblwiPjxpIGNsYXNzPVwiaWNvbi14XCI+PC9pPjwvYnV0dG9uPlxyXG5cdFx0XHRcdDwvZmlndXJlPmA7XHJcblx0XHRcdGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTCA9IGZpbGVUZW1wbGF0ZSArIGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTDtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdmFsaWRGaWxlVHlwZShmaWxlKSB7XHJcblx0XHRjb25zdCBmaWxlVHlwZXMgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJ107XHJcblx0XHQvLyBjb25zdCBmaWxlVHlwZXMgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJywgJ2ltYWdlL3BuZyddO1xyXG5cdFx0aWYoZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSA+IC0xKSByZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gcmV0dXJuRmlsZVNpemUoc2l6ZSkge1xyXG5cdFx0Y29uc3QgaXNCeXRlcyA9IHNpemUgPCAxMDI0O1xyXG5cdFx0Y29uc3QgaXNLaWxvQnl0ZXMgPSBzaXplID49IDEwMjQgJiYgc2l6ZSA8IDEwNDg1NzY7XHJcblx0XHRpZihpc0J5dGVzKSByZXR1cm4gc2l6ZSArICdieXRlcyc7XHJcblx0XHRlbHNlIGlmKGlzS2lsb0J5dGVzKSByZXR1cm4gKHNpemUgLyAxMDI0KS50b0ZpeGVkKDIpICsgJ0tCJztcclxuXHRcdGVsc2UgcmV0dXJuIChzaXplIC8gMTA0ODU3NikudG9GaXhlZCgyKSArICdNQic7XHJcblx0fVxyXG5cclxuXHQvKlxyXG5cdC8vIDE5MDQyOCBmaWxlIGFqYXhcclxuXHRmaWxlU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24oZmlsZSl7XHJcblx0XHRcdHNlbmRGaWxlKGZpbGUpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblx0c2VuZEZpbGUgPSBmdW5jdGlvbihmaWxlKSB7XHJcblx0XHR2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuXHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG5cdFx0Zm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XHJcblx0XHRyZXF1ZXN0Lm9wZW4oJ3Bvc3QnLCAnJyk7XHJcblx0XHRyZXF1ZXN0LnNlbmQoZm9ybURhdGEpO1xyXG5cdH07XHJcblx0Ki9cclxufTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgaW5wdXRUZXh0YXJlYSA9ICgpID0+IHt9O1xyXG5cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xyXG5cdC8vIHRhZ05hbWXqs7wgbm9kZU5hbWXsnYAg7YWN7Iqk7Yq4IOuFuOuTnOulvCDqsIHqsIEgdW5kZWZpbmVk7JmAICN0ZXh0IOuwmO2ZmO2VnOuLpC5cclxuXHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0dGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScgJiYgYXV0b0V4cGFuZCh0YXJnZXQpO1xyXG5cclxuXHRjb25zdCBieXRlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0ZmllbGQtYnl0ZSBiJyk7XHJcblxyXG5cdHZhciBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcblx0Zm9yKHZhciBqPTA7IGo8MTAwMDA7IGorKykge1xyXG5cdFx0c3RyaW5nICs9ICdUaGlzIGlzIOyVhOustOydmOuvuOyXhuuKlCDrrLjsnpDsl7QnO1xyXG5cdH1cclxuXHR2YXIgc3RyaW5nQnl0ZUxlbmd0aCA9IDA7XHJcblx0aWYodGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScpIHtcclxuXHRcdHN0cmluZyA9IHRhcmdldC52YWx1ZTtcclxuXHRcdHN0cmluZ0J5dGVMZW5ndGggPSBzdHJpbmcucmVwbGFjZSgvW1xcMC1cXHg3Zl18KFswLVxcdTA3ZmZdfCguKSkvZywnJCYkMSQyJykubGVuZ3RoO1xyXG5cdFx0aWYodGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDMwIHx8IHRhcmdldC52YWx1ZS5sZW5ndGggPiA0NSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnMzBieXRl7KCc7ZWcJyk7XHJcblx0XHRcdHRhcmdldC52YWx1ZSA9IHRhcmdldC52YWx1ZS5zbGljZSgwLCB0YXJnZXQudmFsdWUubGVuZ3RoKTtcclxuXHRcdH1cclxuXHRcdGJ5dGVFbGVtZW50LmlubmVySFRNTCA9IHN0cmluZ0J5dGVMZW5ndGg7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgaW5wdXROdW1iZXIgPSAoKSA9PiB7XHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd246ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5ZG93biAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG5cdC8vIH0pO1xyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGV2ZW50KSA9PiB7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5cHJlc3M6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygna2V5cHJlc3MgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuXHQvLyB9KTtcclxuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleXVwOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleXVwIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XHJcblx0Ly8gfSk7XHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygnY2hhbmdlOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZSAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG5cdC8vIH0pO1xyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygnaW5wdXQ6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygnaW5wdXQgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuXHQvLyB9KTtcclxuXHJcblx0Y29uc3QgaW5jcmVhc2VFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW51bWJlci1pbnB1dCcpO1xyXG5cclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4ge1xyXG5cdFx0Y29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50O1xyXG5cdFx0Y29uc3QgaW5OdW1iZXJJbnB1dCA9IHRhcmdldC5jbG9zZXN0KCcuanMtbnVtYmVyLWlucHV0Jyk7XHJcblx0XHRpZiAoIWluTnVtYmVySW5wdXQpIHJldHVybjtcclxuXHJcblx0XHRzZXRQcmV2ZW50Tm90TnVtYmVyKCk7XHJcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHNldExpbWl0TnVtYmVyKTtcclxuXHJcblx0XHRmdW5jdGlvbiBzZXRQcmV2ZW50Tm90TnVtYmVyKCkge1xyXG5cdFx0XHRjb25zdCBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcclxuXHRcdFx0Ly8gdG9kbyDsoJXqt5wg7ZGc7ZiE7Iud7Jy866GcXHJcblx0XHRcdGtleUNvZGUgPj0gNDggfHwga2V5Q29kZSA8PSA1NyB8fCBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRrZXlDb2RlID09PSA2OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRrZXlDb2RlID09PSAxODkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0a2V5Q29kZSA9PT0gMTg3ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdGtleUNvZGUgPT09IDE5MCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHQvLyB0YXJnZXQudmFsdWUubGVuZ3RoID09PSAwICYmIGtleUNvZGUgPT09IDQ4ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9XHJcblx0XHRmdW5jdGlvbiBzZXRMaW1pdE51bWJlcigpIHtcclxuXHRcdFx0Y29uc3QgTUFYSU1VTSA9IDMwMDtcclxuXHRcdFx0Y29uc3QgTUlOSU1VTiA9IDA7XHJcblx0XHRcdGNvbnN0IGlzRmlyc3RQbGFjZWRaZXJvID0gLyheMCspLy50ZXN0KHRhcmdldC52YWx1ZSk7XHJcblx0XHRcdGNvbnN0IGlzTWF4aW11bSA9IE51bWJlcih0YXJnZXQudmFsdWUpID49IE1BWElNVU07XHJcblx0XHRcdGNvbnN0IGlzTGVuZ3RoID0gZXZlbnQudGFyZ2V0LnZhbHVlLmxlbmd0aCA+IE1JTklNVU47XHJcblxyXG5cdFx0XHRpZihpc0ZpcnN0UGxhY2VkWmVybykgZXZlbnQudGFyZ2V0LnZhbHVlID0gTUlOSU1VTjtcclxuXHRcdFx0aWYoaXNMZW5ndGgpIGV2ZW50LnRhcmdldC52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZS5zbGljZSgwLCAzKTtcclxuXHRcdFx0aWYoaXNNYXhpbXVtKSBldmVudC50YXJnZXQudmFsdWUgPSBNQVhJTVVNO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHRcdGNvbnN0IG1pblZhbHVlID0gMDtcclxuXHRcdGNvbnN0IG1heFZhbHVlID0gMTA7XHJcblx0XHRsZXQgdGFyZ2V0SW5wdXQ7XHJcblx0XHRpZiAodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50JykpIHtcclxuXHRcdFx0dGFyZ2V0SW5wdXQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XHJcblx0XHRcdGlmICh0YXJnZXRJbnB1dC52YWx1ZSA8PSBtaW5WYWx1ZSkge1xyXG5cdFx0XHRcdHRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHQtLXRhcmdldElucHV0LnZhbHVlO1xyXG5cdFx0XHQvLyBUT0RPOiB0YXJnZXQg7YG0656Y7IqkIO2GoOq4gOydtCDslYgg65CY66+A64uI64ukXHJcblx0XHRcdGNvbnNvbGUubG9nKCd0YXJnZXQnLCB0YXJnZXQpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRhcmdldC5jbG9zZXN0KCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpKSB7XHJcblx0XHRcdHRhcmdldElucHV0ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xyXG5cdFx0XHRpZiAodGFyZ2V0SW5wdXQudmFsdWUgPj0gbWF4VmFsdWUpIHtcclxuXHRcdFx0XHR0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0Kyt0YXJnZXRJbnB1dC52YWx1ZTtcclxuXHJcblx0XHRcdC8vIHRhcmdldElucHV0LnZhbHVlIDwgbWF4VmFsdWUgKyAxICYmIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xyXG5cdFx0XHQvKlxyXG5cdFx0XHRsZXQgdGFyZ2V0SW5wdXRWYWx1ZSA9IHBhcnNlSW50KGV2ZW50VGFyZ2V0SW5wdXQudmFsdWUpO1xyXG5cdFx0XHR0YXJnZXRJbnB1dFZhbHVlID4gbWluVmFsdWUgJiYgZXZlbnRUYXJnZXRJbnB1dC52YWx1ZS0tO1xyXG5cdFx0XHR0YXJnZXRJbnB1dFZhbHVlID09PSBtaW5WYWx1ZSArIDEgJiYgZXZlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuXHRcdFx0dGFyZ2V0SW5wdXRWYWx1ZSA8IG1heFZhbHVlICsgMSAmJiBldmVudFRhcmdldEluY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xyXG5cdFx0XHQqL1xyXG5cdFx0XHQvKlxyXG5cdFx0XHRjb25zdCBldmVudFRhcmdldFBhcmVudEVsZW1lbnQgPSBldmVudFRhcmdldC5wYXJlbnROb2RlO1xyXG5cdFx0XHRjb25zdCBldmVudFRhcmdldElucHV0ID0gZXZlbnRUYXJnZXRQYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcclxuXHRcdFx0Y29uc3QgZXZlbnRUYXJnZXREZWNyZW1lbnQgPSBldmVudFRhcmdldFBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1kZWNyZW1lbnQnKTtcclxuXHRcdFx0Y29uc3QgZXZlbnRUYXJnZXRJbmNyZW1lbnQgPSBldmVudFRhcmdldFBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKTtcclxuXHRcdFx0bGV0IHRhcmdldElucHV0VmFsdWUgPSBwYXJzZUludChldmVudFRhcmdldElucHV0LnZhbHVlKTtcclxuXHRcdFx0dGFyZ2V0SW5wdXRWYWx1ZSA8IG1heFZhbHVlID8gZXZlbnRUYXJnZXRJbnB1dC52YWx1ZSsrIDogdGFyZ2V0SW5wdXRWYWx1ZTtcclxuXHRcdFx0dGFyZ2V0SW5wdXRWYWx1ZSA9PT0gbWF4VmFsdWUgLSAxICYmIGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcblx0XHRcdHRhcmdldElucHV0VmFsdWUgPiBtaW5WYWx1ZSAtIDEgPyBldmVudFRhcmdldERlY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpIDogdGFyZ2V0SW5wdXRWYWx1ZTtcclxuXHRcdFx0Ki9cclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0FsbGNoZWNrYm94ID0gKHtjaGVja0FsbEVsZW1lbnQsIGNoZWNrRWxlbWVudHN9KSA9PiB7XHJcblx0Y29uc3QgY2hlY2tBbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsRWxlbWVudCk7XHJcblx0Y29uc3QgY2hlY2tJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tFbGVtZW50cyk7XHJcblx0aWYoIWNoZWNrQWxsIHx8ICFjaGVja0l0ZW1zKSByZXR1cm47XHJcblxyXG5cdGNoZWNrQWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNldENoZWNrQWxsKTtcclxuXHRjaGVja0l0ZW1zLmZvckVhY2goY2hlY2tJdGVtID0+IHtcclxuXHRcdGNoZWNrSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzZXRDaGVja0VhY2gpO1xyXG5cdH0pO1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBzZXRDaGVja0VhY2gpO1xyXG5cclxuXHRmdW5jdGlvbiBzZXRDaGVja0VhY2goKSB7XHJcblx0XHRjb25zdCBpc0NoZWNrZWRFdmVyeSA9IEFycmF5LmZyb20oY2hlY2tJdGVtcykuZXZlcnkoY2hlY2tJdGVtID0+IGNoZWNrSXRlbS5jaGVja2VkKTtcclxuXHRcdGNoZWNrQWxsLmNoZWNrZWQgPSBpc0NoZWNrZWRFdmVyeTtcclxuXHJcblx0XHRjb25zdCBpc0NoZWNrZWRTb21lID0gQXJyYXkuZnJvbShjaGVja0l0ZW1zKS5zb21lKGNoZWNrSXRlbSA9PiBjaGVja0l0ZW0uY2hlY2tlZCk7XHJcblx0XHRjaGVja0FsbC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XHJcblx0XHRjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBpc0NoZWNrZWRTb21lICYmICFpc0NoZWNrZWRFdmVyeTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gc2V0Q2hlY2tBbGwoKSB7XHJcblx0XHRjaGVja0l0ZW1zLmZvckVhY2goY2hlY2tJdGVtID0+IHtcclxuXHRcdFx0Y2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xyXG5cdFx0XHRjaGVja0FsbC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcblx0XHRcdGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59OyIsIi8vVE9ETzog66qo64usIOuwluydmCDsu6jthZDsuKDsl5AgYXJpYS1oaWRkZW4g66qo64us7J2YIOychOy5mOuKlCDrsJTrlJQg7JWI7JeQP1xyXG4vL3ZhciBhYmMgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XHJcblxyXG5leHBvcnQgY29uc3QgbW9kYWwgPSAoKSA9PiB7XHJcblx0Y29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG5cdGxldCBwYWdlWSA9IHVuZGVmaW5lZDtcclxuXHJcblx0Y29uc3QgbW9kYWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLW1vZGFsJyk7XHJcblx0aWYoIW1vZGFscykgcmV0dXJuO1xyXG5cclxuXHRtb2RhbHMuZm9yRWFjaChtb2RhbCA9PiBtb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0bW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5hZGQoJ2lzLXZpc2libGUnKTtcclxuXHRcdHBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuXHRcdHNldExvY2tCb2R5KCk7XHJcblxyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsKTtcclxuXHRcdGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XHJcblx0XHRcdGlmICghbW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnaXMtdmlzaWJsZScpKSByZXR1cm47XHJcblx0XHRcdG1vZGFsLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy12aXNpYmxlJyk7XHJcblx0XHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xyXG5cdFx0XHR3aW5kb3cuc2Nyb2xsVG8oMCwgcGFnZVkpO1xyXG5cdFx0fVxyXG5cdH0pKTtcclxuXHJcblx0Y29uc3QgbW9kYWxEaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwtZGlhbG9nJyk7XHJcblx0bW9kYWxEaWFsb2cuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSkpO1xyXG5cdFxyXG5cdGZ1bmN0aW9uIHNldExvY2tCb2R5KCkge1xyXG5cdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XHJcblx0XHRib2R5RWxlbWVudC5zdHlsZS50b3AgPSBgLSR7cGFnZVl9cHhgO1xyXG5cdH1cclxuXHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0Ly8gXHRjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XHJcblx0Ly8gXHRpZiAoIXRhcmdldC5jbG9zZXN0KCcuanMtbW9kYWwnKSkgcmV0dXJuO1xyXG5cclxuXHQvLyBcdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHQvLyBcdGNvbnN0IHRhcmdldFBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG5cdC8vIFx0bGV0IGdldFNjcm9sbFRvcDtcclxuXHQvLyBcdGxldCBmaW5kQ3VycmVudFRhcmdldCA9IG51bGw7XHJcblxyXG5cdC8vIFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0Ly8gXHRpZiAodGFyZ2V0UGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnanMtbW9kYWwnKSkge1xyXG5cdC8vIFx0XHRmaW5kQ3VycmVudFRhcmdldCA9IHRhcmdldFBhcmVudDtcclxuXHQvLyBcdH0gZWxzZSB7XHJcblx0Ly8gXHRcdGZpbmRDdXJyZW50VGFyZ2V0ID0gdGFyZ2V0UGFyZW50LnBhcmVudE5vZGU7XHJcblx0Ly8gXHR9XHJcblxyXG5cdC8vIFx0ZmluZENsYXNzUmVjdXJzaXZlKHRhcmdldCwgJ2pzLW1vZGFsJywgMCk7XHJcblxyXG5cdC8vIFx0Z2V0U2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuXHQvLyBcdGZpbmRDdXJyZW50VGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKCdpcy12aXNpYmxlJyk7XHJcblxyXG5cdC8vIFx0c2V0TG9ja0JvZHkoKTtcclxuXHJcblx0Ly8gXHRjb25zdCBtb2RhbERpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbC1kaWFsb2cnKTtcclxuXHQvLyBcdG1vZGFsRGlhbG9nLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblx0Ly8gXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSk7XHJcblx0Ly8gXHR9KTtcclxuXHJcblx0Ly8gXHRmdW5jdGlvbiBzZXRMb2NrQm9keSgpIHtcclxuXHQvLyBcdFx0Y29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG5cdC8vIFx0XHRib2R5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTtcclxuXHQvLyBcdFx0Ym9keUVsZW1lbnQuc3R5bGUudG9wID0gYC0ke2dldFNjcm9sbFRvcH1weGA7XHJcblx0Ly8gXHR9XHJcblxyXG5cdC8vIFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsKTtcclxuXHQvLyBcdGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XHJcblx0Ly8gXHRcdGlmICghZmluZEN1cnJlbnRUYXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnaXMtdmlzaWJsZScpKSByZXR1cm47XHJcblx0Ly8gXHRcdGZpbmRDdXJyZW50VGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy12aXNpYmxlJyk7XHJcblx0Ly8gXHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xyXG5cdC8vIFx0XHR3aW5kb3cuc2Nyb2xsVG8oMCwgZ2V0U2Nyb2xsVG9wKTtcclxuXHQvLyBcdH1cclxuXHQvLyB9LCB0cnVlKTtcclxuXHJcblx0Ly8gY29uc3QgZmluZENsYXNzUmVjdXJzaXZlID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZGVwdGgpID0+IHtcclxuXHQvLyAvLyBwYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygnanMtbW9kYWwnKVxyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2RlcHRoOiAnICsgZGVwdGgsIGVsZW1lbnQpO1xyXG5cdC8vIFx0aWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHJldHVybiBlbGVtZW50O1xyXG5cdC8vIFx0ZWxzZSByZXR1cm4gZmluZENsYXNzUmVjdXJzaXZlKGVsZW1lbnQucGFyZW50Tm9kZSwgY2xhc3NOYW1lLCBkZXB0aCArIDEpO1xyXG5cdC8vIH07XHJcblxyXG5cdC8vIHZhciBnZXRDbG9zZXN0ID0gZnVuY3Rpb24oZWxlbSwgc2VsZWN0b3IpIHtcclxuXHQvLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XHJcblx0Ly8gXHRcdGlmIChlbGVtLm1hdGNoZXMoc2VsZWN0b3IpKSByZXR1cm4gZWxlbTtcclxuXHQvLyBcdH1cclxuXHQvLyBcdHJldHVybiBudWxsO1xyXG5cdC8vIH07XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHRhYk1lbnUgPSAoKSA9PiB7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0XHRjb25zdCB0YWJBY3RpY2VCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS10YWJsaXN0LWFjdGl2ZScpO1xyXG5cdFx0Y29uc3QgdGFicyA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYl0nKTtcclxuXHRcdGNvbnN0IHRhYkluZGV4ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xyXG5cclxuXHRcdGlmKHRhcmdldC5jbG9zZXN0KCdbcm9sZT10YWJdJykpIHtcclxuXHRcdFx0dGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XHJcblx0XHRcdHRhYkFjdGljZUJhci5zdHlsZS5sZWZ0ID0gYCR7dGFyZ2V0Lm9mZnNldExlZnR9cHhgO1xyXG5cdFx0XHR0YWJzLmZvckVhY2godGFiID0+IHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKSk7XHJcblx0XHRcclxuXHRcdFx0dGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJwYW5lbF0nKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG5cdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblx0XHRcdFx0aWYodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jykpe1xyXG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2hpZGRlbicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fSwgdHJ1ZSk7XHJcbn07XHJcblxyXG5cclxuLy8gdmFyIGlzU2Nyb2xsaW5nO1xyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGV2ZW50KSA9PiB7XHJcbi8vIFx0aWYoaXNTY3JvbGxpbmcpIHdpbmRvdy5jbGVhclRpbWVvdXQoaXNTY3JvbGxpbmcpO1xyXG4vLyBcdGlzU2Nyb2xsaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4vLyBcdFx0c3RpY2t5VG9nZ2xlKCk7XHJcbi8vIFx0fSwgNTApO1xyXG4vLyB9KTtcclxuXHJcbmV4cG9ydCBjb25zdCBzdGlja3lFbGVtZW50ID0gKHt0YXJnZXRFbGVtZW50LCBhZGRDbGFzc30pID0+IHtcclxuXHRjb25zdCBzdGlja3lFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbGVtZW50KTtcclxuXHRpZighc3RpY2t5RWxlbWVudCkgcmV0dXJuO1xyXG5cdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHJcblx0bGV0IHN0aWNreUVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuXHRsZXQgaXNTY3JvbGxpbmc7XHJcblxyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcblx0XHRpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xyXG5cdFx0aXNTY3JvbGxpbmcgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuXHRcdFx0c3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0fSwgNjApO1xyXG5cdH0pO1xyXG5cclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0aXNTY3JvbGxpbmcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlzU2Nyb2xsaW5nKTtcclxuXHRcdGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdGlmKHdpbmRvdy5wYWdlWU9mZnNldCA+IHN0aWNreUVsZW1lbnQub2Zmc2V0VG9wICsgc3RpY2t5RWxlbWVudEhlaWdodCl7XHJcblx0XHRcdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShhZGRDbGFzcyk7XHJcblx0XHRcdH1cclxuXHRcdH0sIDYwKTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8vIGV4cG9ydCBjb25zdCBzdGlja3lIZWFkZXJFbGVtZW50ID0gKHRhcmdldEVsZW1lbnQsIGFkZENsYXNzKSA9PiB7XHJcbi8vIFx0c3RpY2t5RWxlbWVudCh7dGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MsIHRydWV9KTtcclxuLy8gfTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgcGFyYWxsYXggPSAodGFyZ2V0RWxlbWVudCkgPT4ge1xyXG5cdGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0RWxlbWVudCk7XHJcblx0aWYoIXRhcmdldCkgcmV0dXJuO1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcblx0XHR0YXJnZXQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHdpbmRvdy5wYWdlWU9mZnNldCwgZWxlbWVudC5vZmZzZXRUb3ApO1xyXG5cdFx0XHRsZXQgcmF0ZSA9IHdpbmRvdy5wYWdlWU9mZnNldCAqIC0wLjIgLSA2MDA7XHJcblx0XHRcdGxldCBhYWEgPSAod2luZG93LnBhZ2VZT2Zmc2V0IC0gZWxlbWVudC5vZmZzZXRUb3ApICogLTEuNTsgLy8gc2Nyb2xsZWQgPSB3aW5kb3cucGFnZVlPZmZzZXRcclxuXHRcdFx0Ly9sZXQgYmJiID0gYWFhID4gMCA/IC1hYWEgOiBhYWE7XHJcblx0XHRcdGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gJ2NlbnRlciAnICsgYWFhICsgJ3B4JzsgXHJcblx0XHRcdC8vIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDBweCwgJytyYXRlKydweCwgMHB4KSc7XHJcblx0XHRcdC8vIERhdGFUcmFuc2Zlckl0ZW1MaXN0LnJhdGVcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0aWNreUhlYWRlciA9ICgpID0+IHtcclxuXHRjb25zdCBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xyXG5cdGxldCBsYXN0U2Nyb2xsVG9wID0gMDtcclxuXHRcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhhc1Njcm9sbGVkKTtcclxuXHR9KTtcclxuXHJcblx0ZnVuY3Rpb24gaGFzU2Nyb2xsZWQoKSB7XHJcblx0XHRpZih3aW5kb3cucGFnZVlPZmZzZXQgPiBsYXN0U2Nyb2xsVG9wKSB7XHJcblx0XHRcdGhlYWRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmF2LXVwJyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ25hdi11cCcpO1xyXG5cdFx0fVxyXG5cdFx0bGFzdFNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZW50ZXJUYXJnZXQgPSAodGFyZ2V0KSA9PiB7XHJcblx0Y29uc3QgaG92ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xyXG5cdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHRpZighaG92ZXJFbGVtZW50KSByZXR1cm47XHJcblxyXG5cdGNvbnN0IGlzTmF2aWdhdGlvbiA9IGhvdmVyRWxlbWVudCA9PT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24gbGknKTtcclxuXHJcblx0aG92ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcblx0XHRob3ZlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuXHRcdGhvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xyXG5cdFx0aXNOYXZpZ2F0aW9uICYmIGJvZHlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNob3duJyk7XHJcblxyXG5cdFx0aG92ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcblx0XHRcdGhvdmVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuXHRcdFx0aG92ZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWV4cGFuZGVkJyk7XHJcblxyXG5cdFx0XHRpc05hdmlnYXRpb24gJiYgYm9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2hvd24nKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBldmVudFRvZ2dsZSA9ICgpID0+IHtcclxuXHRjb25zdCB0b2dnbGVFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1hY2NvcmRpb24nKTtcclxuXHRpZighdG9nZ2xlRWxlbWVudHMpIHJldHVybjtcclxuXHJcblx0bGV0IHRvZ2dsZUVsZW1lbnROZXh0O1xyXG5cdHRvZ2dsZUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblx0XHR0b2dnbGVFbGVtZW50TmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0ZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtdmlzaWJsZScpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhlbGVtZW50KTtcclxuXHRcdFx0Ly8gaWYoZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XHJcblx0XHRcdC8vIFx0YWxlcnQoKTtcclxuXHRcdFx0Ly8gfVxyXG5cdFx0fSk7XHJcblx0XHR0b2dnbGVFbGVtZW50TmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpKTtcclxuXHR9KTtcclxufTtcclxuXHJcblxyXG5jb25zdCB0b2dnbGVFdmVudCA9IGZ1bmN0aW9uKHRhcmdldCwgdG9nZ2xlKSB7XHJcblx0Y29uc3QgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcclxuXHRjb25zdCB0b2dnbGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0b2dnbGUpO1xyXG5cclxuXHR0YXJnZXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG5cdFx0dGFyZ2V0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcclxuXHRcdHRvZ2dsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldEVsZW1lbnQpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuXHRcdFx0aWYoZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XHJcblx0XHRcdFx0ZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuLy8gXHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbi8vIFx0Y29uc3QgdGFyZ2V0TmV4dEVsZW1lbnQgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4vLyBcdGNvbnN0IGlzVGFyZ2V0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5qcy1hY2NvcmRpb24nKTtcclxuLy8gXHRpZiAoIWlzVGFyZ2V0KSByZXR1cm47XHJcbi8vIFx0Ly8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCkg66GcIO2GteydvC5cclxuXHJcbi8vIFx0aWYoaXNUYXJnZXQpIHtcclxuLy8gXHRcdHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuLy8gXHRcdHRhcmdldE5leHRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcclxuLy8gXHR9XHJcbi8vIH0pO1xyXG5cclxuLy8gY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXHJcbi8vIFRPRE86IO2GoOq4gCDslYjsl5Ag7Yag6riAIOydtOuypO2KuCDsobTsnqwg7IucXHJcbi8vIFRPRE86IOuPhO2BkOuovO2KuOqwgCDslYTri4jrnbwgZXZlbnQudGFyZ2V0LnBhcmVudCDqsIAg7JWE64uMIOqyg+ydhCDtgbTrpq3tlojsnYQg65WMIOuLpOuLueyVvCDtlZjrgpgiLCJpbXBvcnQgeyBjaGVja0FsbGNoZWNrYm94LCBhdHRhY2hGaWxlIH0gZnJvbSAnLi9pbnB1dCc7XG5pbXBvcnQgeyBlbnRlclRhcmdldCwgc3RpY2t5SGVhZGVyLCBtb2RhbCwgZXZlbnRUb2dnbGUgfSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7IGxvZ2luRm9ybVZhbGlkYXRpb24gfSBmcm9tICcuLi9pbmRleCc7XG5cbmNvbnN0IHJvdXRlciA9IGZ1bmN0aW9uKCkge1xuXHRjb25zdCB2aWV3ID0gbnVsbCB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlldycpO1xuXG5cdGNvbnN0IHJvdXRlUGFnZSA9ICgpID0+IHtcblxuXHRcdGxldCB7IGhhc2ggfSA9IHdpbmRvdy5sb2NhdGlvbjtcblx0XHRjb25zdCBwYWdlID0gaGFzaCA/IGAvdmlld3MvJHtoYXNoLnN1YnN0cmluZygxKX0uaHRtbGAgOiAnL3ZpZXdzL2hvbWUuaHRtbCc7XG5cdFx0ZmV0Y2gocGFnZSlcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0Ly8gNDA0IHx8IDUwMFxuXHRcdFx0XHRpZihyZXNwb25zZS5vaykgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcblx0XHRcdFx0ZWxzZSByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1x0XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oaHRtbCA9PiB7XG5cdFx0XHRcdHZpZXcuaW5uZXJIVE1MID0gaHRtbDtcblxuXHRcdFx0XHRjaGVja0FsbGNoZWNrYm94KHtcblx0XHRcdFx0XHRjaGVja0FsbEVsZW1lbnQ6ICcuanMtY2hlY2thbGwnLCBcblx0XHRcdFx0XHRjaGVja0VsZW1lbnRzOiAnLmpzLWNoZWNrJ1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBzdGlja3lIZWFkZXIoKTtcblx0XHRcdFx0bW9kYWwoKTtcblx0XHRcdFx0ZXZlbnRUb2dnbGUoKTtcblxuXHRcdFx0XHRhdHRhY2hGaWxlKCk7XG5cblxuXHRcdFx0XHRlbnRlclRhcmdldCgnLmpzLWhvdmVyLXRyaWdnZXInKTtcblx0XHRcdFx0ZW50ZXJUYXJnZXQoJy5oZWFkZXItdXNlci1ub3RpZmljYXRpb24nKTtcblx0XHRcdFx0ZW50ZXJUYXJnZXQoJy5oZWFkZXItdXNlci1hY2NvdW50Jyk7XG5cblx0XHRcdFx0Y29uc3Qgc2Nyb2xsVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcblx0XHRcdFx0c2Nyb2xsVGFyZ2V0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRjb25zdCBpc0NvbnRhaW5lZFdpbmRvd0hlaWdodCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0XHRcdFx0XHRpZihpc0NvbnRhaW5lZFdpbmRvd0hlaWdodCkge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zY3JvbGxlZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG5cdFx0XHRcdFx0c2Nyb2xsVGFyZ2V0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdFx0XHRcdFx0Y29uc3QgaXNTY3JvbGxlZCA9IHBhZ2VZID4gcGFnZVkgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodCArIDUwO1xuXHRcdFx0XHRcdFx0aWYoaXNTY3JvbGxlZCl7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2Nyb2xsZWQnKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Y29uc3QgY3VzdG9tQ3Vyc29yID0gKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGN1cnNvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXJzb3InKTtcblx0XHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0Q3Vyc29yKTtcblx0XHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZXRDdXJzb3IpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0UmlwcGxlKTtcblxuXHRcdFx0XHRcdGZ1bmN0aW9uIHNldEN1cnNvcigpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHggPSBldmVudC5jbGllbnRYO1xuXHRcdFx0XHRcdFx0Y29uc3QgeSA9IGV2ZW50LmNsaWVudFk7XG5cdFx0XHRcdFx0XHRjdXJzb3Iuc3R5bGUubGVmdCA9IGAke3h9cHhgO1xuXHRcdFx0XHRcdFx0Y3Vyc29yLnN0eWxlLnRvcCA9IGAke3l9cHhgO1xuXHRcdFx0XHRcdFx0Ly8gY3Vyc29yLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4IC0gMTV9cHgsICR7eSAtIDE1fXB4YDtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmdW5jdGlvbiBzZXRSaXBwbGUoKXtcblx0XHRcdFx0XHRcdGN1cnNvci5jbGFzc0xpc3QuYWRkKCdleHBhbmQnKTtcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kJyk7XG5cdFx0XHRcdFx0XHR9LCA1MDApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdFx0XG5cdFx0XHRcdGN1c3RvbUN1cnNvcigpO1xuXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGVycm9yID0+IGNvbnNvbGUud2Fybigncm91dGVyOiAnLCBlcnJvcikpO1xuXG5cdFx0Ly8gZ29nb1xuXHRcdGNvbnN0IHNsYXNoZWRIYXNoID0gYC8ke2hhc2guc3Vic3RyaW5nKDEpfWA7XG5cdFx0Y29uc29sZS5sb2coc2xhc2hlZEhhc2gsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwgd2luZG93LmxvY2F0aW9uLmhpc3RvcnkpO1xuXHRcdC8vIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9IHNsYXNoZWRIYXNoO1xuXG5cdH07XG5cblx0cm91dGVQYWdlKCk7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgcm91dGVQYWdlKTtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCAoKSA9PiB7XG5cdFx0aWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24tdG9nZ2xlJykuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSkge1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24tdG9nZ2xlJykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbi10b2dnbGUnKS5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuXHRcdH1cblx0fSk7XG59O1xuXG4vLyB7XG4vLyBcdG1ldGhvZDogJ1BPU1QnLFxuLy8gXHRib2R5OiAndGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnTXkgYXdlc29tZSBuZXcgYXJ0aWNsZScpICsgJyZib2R5PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1RoaXMgaXMgdGhlIHRleHQgb2YgbXkgYXJ0aWNsZScpLFxuLy8gXHRoZWFkZXI6IHtcbi8vIFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4vLyBcdH0sXG4vLyBcdHJlZmVycmVyOiAnbm8tcmVmZXJyZXInXG4vLyB9XG4vLyBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4vLyBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKTtcbi8vIHZpZXcuaW5uZXJIVE1MID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xuLy8gcmVzcG9uc2UudGV4dCgpIC8vIHJlc3BvbnNlLmpzb24oKVxuLy8gdG9Mb3dlckNhc2UoKSDtlbTso7zquLBcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuXG4vKlxuXHRjb25zdCBSb3V0ZXIgPSAobmFtZSwgcm91dGVzKSA9PiB7XG5cdFx0cmV0dXJuIHsgbmFtZTogbmFtZSwgcm91dGVzOiByb3V0ZXMgfVxuXHR9O1xuXHR2YXIgYWN0aXZlUm91dGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaHJlZl0nKSk7XG5cdGFjdGl2ZVJvdXRlcy5mb3JFYWNoKChyb3V0ZSkge1xuXHRcdHJvdXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmF2aWdhdGUpO1xuXHR9KTtcblx0Y29uc3QgbXlGaXJzdFJvdXRlciA9IG5ldyBSb3V0ZXIoJ215Rmlyc3RSb3V0ZXInLCBbXG5cdFx0eyBwYXRoOiAnLycsIG5hbWU6ICdpbmRleCcgfSxcblx0XSk7XG5cdGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Y29uc3Qgcm91dGUgPSBmaW5kQ3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzBdLnZhbHVlO1xuXHRcdGNvbnN0IHJvdXRlSW5mbyA9IG15Rmlyc3RSb3V0ZXIucm91dGVzLmZpbmQociA9PiByLnBhdGggPT09IHJvdXRlKTtcblx0XHRpZighcm91dGVJbmZvKSB7XG5cdFx0XHQvL3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsICdlcnJvcicpO1xuXHRcdFx0dmlldy5pbm5lckhUTUwgPSAnTm8gcm91dGUgZXhpc3RzIHdpdGggdGhpcyBwYXRoJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJycsIHJvdXRlSW5mby5wYXRoKTtcblx0XHRcdGZldGNoKGAvdmlld3MvJHtyb3V0ZUluZm8ubmFtZX0uaHRtbGApXG5cdFx0XHRcdC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuXHRcdFx0XHQudGhlbihodG1sID0+IHZpZXcuaW5uZXJIVE1MID0gaHRtbClcblx0XHRcdFx0LmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gZmV0Y2ggcGFnZTogJywgZXJyb3IpKTtcblx0XHR9XG5cdH1cbiovIiwiLy8gdmFsaWRhdGlvbnNcclxuLy8gaXNWYWxpZCAvLyB0b29Mb25nXHJcbi8vXHJcblxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvbnMgPSB7XHJcblx0aXNSZXF1aXJlZCh2YWx1ZSkge1xyXG5cdFx0cmV0dXJuIHZhbHVlID09ICcnIHx8IHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT0gdW5kZWZpbmVkIHx8ICggdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgIU9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpO1xyXG5cdH0sXHJcblx0Ly8gaXNFbWFpbCh2YWx1ZSl7XHJcblx0Ly8gXHRyZXR1cm4gIS9eKFteXFx4MDAtXFx4MjBcXHgyMlxceDI4XFx4MjlcXHgyY1xceDJlXFx4M2EtXFx4M2NcXHgzZVxceDQwXFx4NWItXFx4NWRcXHg3Zi1cXHhmZl0rfFxceDIyKFteXFx4MGRcXHgyMlxceDVjXFx4ODAtXFx4ZmZdfFxceDVjW1xceDAwLVxceDdmXSkqXFx4MjIpKFxceDJlKFteXFx4MDAtXFx4MjBcXHgyMlxceDI4XFx4MjlcXHgyY1xceDJlXFx4M2EtXFx4M2NcXHgzZVxceDQwXFx4NWItXFx4NWRcXHg3Zi1cXHhmZl0rfFxceDIyKFteXFx4MGRcXHgyMlxceDVjXFx4ODAtXFx4ZmZdfFxceDVjW1xceDAwLVxceDdmXSkqXFx4MjIpKSpcXHg0MChbXlxceDAwLVxceDIwXFx4MjJcXHgyOFxceDI5XFx4MmNcXHgyZVxceDNhLVxceDNjXFx4M2VcXHg0MFxceDViLVxceDVkXFx4N2YtXFx4ZmZdK3xcXHg1YihbXlxceDBkXFx4NWItXFx4NWRcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHg1ZCkoXFx4MmUoW15cXHgwMC1cXHgyMFxceDIyXFx4MjhcXHgyOVxceDJjXFx4MmVcXHgzYS1cXHgzY1xceDNlXFx4NDBcXHg1Yi1cXHg1ZFxceDdmLVxceGZmXSt8XFx4NWIoW15cXHgwZFxceDViLVxceDVkXFx4ODAtXFx4ZmZdfFxceDVjW1xceDAwLVxceDdmXSkqXFx4NWQpKSooXFwuXFx3ezIsfSkrJC8udGVzdCh2YWx1ZSk7XHJcblx0Ly8gfSxcclxuXHRpc0xlbmd0aCh2YWx1ZSwgbGVuZ3RoKXtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHZhbHVlLmxlbmd0aCwgbGVuZ3RoKTtcclxuXHRcdHJldHVybiB2YWx1ZS5sZW5ndGggPCBsZW5ndGg7XHJcblx0fSxcclxuXHRpc051bWJlcih2YWx1ZSkge1xyXG5cdFx0cmV0dXJuIC9bXjAtOV0vZy50ZXN0KHZhbHVlKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5wdXRIZWxwZXIgPSB7XHJcblx0aXNTaG9ydDogJycsXHJcbn07XHJcblxyXG4vLyB1c2VyTmFtZSAmJiBsb2dJbiAodXNlck5hbWUpIHx8IHNpZ25VcCAoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgJy4vc3R5bGVzaGVldHMvc3R5bGUuc2Nzcyc7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9qYXZhc2NyaXB0cy9yb3V0ZXInO1xyXG5pbXBvcnQgeyB0YWJNZW51LCBzdGlja3lFbGVtZW50LCBwYXJhbGxheCB9IGZyb20gJy4vamF2YXNjcmlwdHMvZXZlbnQuanMnO1xyXG5pbXBvcnQgeyBpbnB1dE51bWJlciB9IGZyb20gJy4vamF2YXNjcmlwdHMvaW5wdXQnO1xyXG5pbXBvcnQgeyBsb2FkZXIsIGNoZWNrQnJvd3NlciwgYWRqdXN0VG9wUGFkZGluZyB9IGZyb20gJy4vamF2YXNjcmlwdHMvbG9hZCc7IC8vIGxvYWRTcGlubmVyXHJcblxyXG5pbXBvcnQgeyB2YWxpZGF0aW9ucyB9IGZyb20gJy4vamF2YXNjcmlwdHMvdmFsaWRhdGlvbnMnO1xyXG4vL2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc05hbWUgKz0gJyBzdXBwb3J0cy1kYXRlJztcclxuY29uc3QgZXZlbnRUb1RvcCA9ICgpID0+IHtcclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHRcdGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXRvLXRvcCcpKSB7XHJcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuXHJcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdGFyZ2V0Lm5hbWU7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBpZih3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDo4MDBweCknKS5tYXRjaGVzKSB7fVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcdFxyXG5cdGlmKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gJy8nKSB7XHJcblx0XHRjb25zb2xlLmxvZygndGhpcyBpcyBob21lIHBhZ2UuJyk7XHJcblx0fVxyXG5cdC8vIGNvbnN0IHRvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9kbycpO1xyXG5cdC8vIGNvbnN0IHRvZG9MaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8tbGlzdCcpO1xyXG5cdC8vIGNvbnN0IHRvZG9MaXN0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9kby1pbnB1dCcpO1xyXG5cdC8vIGNvbnN0IHRvZG9TdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9kby1zdWJtaXQnKTtcclxuXHQvLyBjb25zdCB0b2RvQ2xlYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9kby1jbGVhcicpO1xyXG5cdC8vIGxldCB0b2RvSXRlbXMgPSAgW107XHJcblxyXG5cdC8vIGZ1bmN0aW9uIHJlbmRlclRvZG8odGV4dCkge1xyXG5cdC8vIFx0Y29uc3QgaXRlbSA9IHsgaWQ6IHRvZG9JdGVtcy5sZW5ndGggKyAxLCB0ZXh0OiB0ZXh0IH07XHJcblxyXG5cdC8vIFx0Y29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG5cdC8vIFx0Y29uc3QgdG9kb0RlbGV0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG5cdC8vIFx0Ly8gdG9kb0RlbGV0ZS5jbGFzc0xpc3QuYWRkKCdnaG9zdC1idXR0b24nKTtcclxuXHQvLyBcdHRvZG9EZWxldGUuc2V0QXR0cmlidXRlKCd0eXBlJywnYnV0dG9uJyk7XHJcblx0Ly8gXHR0b2RvRGVsZXRlLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImljb24tY2xvc2VcIiAvPic7XHJcblxyXG5cdC8vIFx0Y29uc3QgdG9kb0NoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuXHQvLyBcdGNvbnN0IHRvZG9DaGVja0xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuXHQvLyBcdHRvZG9DaGVjay5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnY2hlY2tib3gnKTtcclxuXHQvLyBcdHRvZG9DaGVjay5zZXRBdHRyaWJ1dGUoJ2lkJywgaXRlbS5pZCk7XHJcblx0Ly8gXHR0b2RvQ2hlY2tMYWJlbC5pbm5lclRleHQgPSBgJHtpdGVtLmlkfSA6OiAke3RleHR9YDtcclxuXHQvLyBcdHRvZG9DaGVja0xhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaXRlbS5pZCk7XHJcblxyXG5cdC8vIFx0bGkuYXBwZW5kQ2hpbGQodG9kb0RlbGV0ZSk7XHJcblx0Ly8gXHRsaS5hcHBlbmRDaGlsZCh0b2RvQ2hlY2spO1xyXG5cdC8vIFx0bGkuYXBwZW5kQ2hpbGQodG9kb0NoZWNrTGFiZWwpO1xyXG5cclxuXHQvLyBcdHRvZG9MaXN0LmFwcGVuZENoaWxkKGxpKTtcclxuXHQvLyBcdHRvZG9JdGVtcy5wdXNoKGl0ZW0pO1xyXG5cdC8vIFx0Ly8g7LK07YGs67CV7IqkIOyDge2DnCDsoIDsnqXslYjrkKhcclxuXHJcblx0Ly8gXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb0l0ZW1zJywgSlNPTi5zdHJpbmdpZnkodG9kb0l0ZW1zKSk7XHJcblx0Ly8gXHR0b2RvTGlzdElucHV0LnZhbHVlID0gJyc7XHJcblxyXG5cdC8vIFx0dG9kb0RlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRlbGV0ZVRvZG8pO1xyXG5cclxuXHQvLyBcdGZ1bmN0aW9uIGRlbGV0ZVRvZG8oKSB7XHJcblx0Ly8gXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHQvLyBcdFx0dGFyZ2V0LnBhcmVudE5vZGUucmVtb3ZlKCk7XHJcblx0Ly8gXHRcdGNvbnN0IGRlbGV0ZWRJdGVtcyA9IHRvZG9JdGVtcy5maWx0ZXIoaXRlbSA9PiB7XHJcblx0Ly8gXHRcdFx0cmV0dXJuIHBhcnNlSW50KHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaWQpICE9PSBpdGVtLmlkO1xyXG5cdC8vIFx0XHR9KTtcclxuXHQvLyBcdFx0dG9kb0l0ZW1zID0gZGVsZXRlZEl0ZW1zO1xyXG5cdFx0XHRcclxuXHQvLyBcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RvZG9JdGVtcycsIEpTT04uc3RyaW5naWZ5KHRvZG9JdGVtcykpO1xyXG5cdC8vIFx0fVxyXG5cdC8vIH1cclxuXHJcblx0Ly8gdG9kb0NsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG5cdC8vIFx0dG9kb0xpc3QuaW5uZXJIVE1MID0gJyc7XHJcblx0Ly8gXHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9kb0l0ZW1zJyk7XHJcblx0Ly8gfSk7XHJcblxyXG5cclxuXHQvLyB0b2RvLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGV2ZW50ID0+IHtcclxuXHQvLyBcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0Ly8gXHRpZih0b2RvTGlzdElucHV0LnZhbHVlLmxlbmd0aCA8IDEpIHJldHVybiBhbGVydCgn7J6F66Cl7ZW07KO87IS47JqpJyk7XHJcblx0Ly8gXHRyZW5kZXJUb2RvKHRvZG9MaXN0SW5wdXQudmFsdWUpO1xyXG5cdC8vIFx0Ly8gdG9kb0xpc3QuaW5uZXJIVE1MICs9IGA8bGk+PGlucHV0IGlkPWFiIHR5cGU9Y2hlY2tib3g+PGxhYmVsIGZvcj1hYj4ke3RvZG9MaXN0SW5wdXQudmFsdWV9PC9sYWJlbD48L2xpPmA7XHJcblx0Ly8gfSk7XHJcblxyXG5cdC8vIGNvbnN0IGdldExvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2RvTGlzdEl0ZW1zJyk7XHJcblx0Ly8gaWYoZ2V0TG9jYWxTdG9yYWdlKXtcclxuXHQvLyBcdGNvbnN0IGFiYyA9IEpTT04ucGFyc2UoZ2V0TG9jYWxTdG9yYWdlKTtcclxuXHQvLyBcdGFiYy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG5cdC8vIFx0XHRyZW5kZXJUb2RvKGl0ZW0udGV4dCk7XHJcblx0Ly8gXHR9KTtcclxuXHQvLyB9XHJcblxyXG5cdHJvdXRlcigpO1xyXG5cclxuXHRsb2FkZXIoKTtcclxuXHRjaGVja0Jyb3dzZXIoKTtcclxuXHRhZGp1c3RUb3BQYWRkaW5nKCk7XHJcblxyXG5cclxuXHR0YWJNZW51KCk7XHJcblx0aW5wdXROdW1iZXIoKTtcclxuXHJcblx0ZXZlbnRUb1RvcCgpO1xyXG5cclxuXHRzZXRHcmFwaCgpO1xyXG5cclxuXHRjb25zdCBzYXlIZWxsbyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cdFx0cmVqZWN0KCdVbmFibGUgdG8gc2F5IGhpLicpO1xyXG5cclxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXNvbHZlKCdIZWxsbywgV29ybGQnKTtcclxuXHRcdH0sIDUwMDApO1xyXG5cdH0pO1xyXG5cdHNheUhlbGxvLnRoZW4ocmVzb2x2ZSA9PiB7XHJcblx0XHRjb25zb2xlLmxvZygncmVzJywgcmVzb2x2ZSk7XHJcblx0fSkuY2F0Y2goZXJyb3IgPT4ge1xyXG5cdFx0Y29uc29sZS53YXJuKGVycm9yKTtcclxuXHR9KTtcclxuXHJcblx0Ly8gUHJvbWlzZS5hbGwoW1xyXG5cdC8vIFx0ZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycpLFxyXG5cdC8vIFx0ZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2VycycpXHJcblx0Ly8gXSlcclxuXHQvLyAudGhlbihmdW5jdGlvbiAocmVzcG9uc2VzKSB7XHJcblx0Ly8gXHRyZXR1cm4gcmVzcG9uc2VzLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHQvLyBcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuXHQvLyBcdH0pO1xyXG5cclxuXHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcclxuXHRcdGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QtaGVhZCcpKSByZXR1cm47XHJcblx0XHRzdGlja3lFbGVtZW50KCcucG9zdC1oZWFkJywgJ2lzLXN0aWNreScsIHRydWUpO1xyXG5cdH0pO1xyXG5cclxuXHJcblx0Y29uc3QgY2xvc2VFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWNsb3NlJyk7XHJcblx0Y2xvc2VFbGVtZW50LmZvckVhY2goZWxlbWVudCA9PiB7XHJcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG5cdFx0XHRpZiAoZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdub3RpY2UnKSkge1xyXG5cdFx0XHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnaXMtY2xvc2VkLXRvcGJhbm5lcicpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1lbnQucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxufSk7XHJcblxyXG5jb25zdCBzZXRHcmFwaCA9ICgpID0+IHtcclxuXHRjb25zdCBncmFwaEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdyYXBoLWl0ZW0nKTtcclxuXHRpZighZ3JhcGhJdGVtcykgcmV0dXJuO1xyXG5cclxuXHRsZXQgZ3JhcGhJdGVtVmFsdWU7XHJcblx0bGV0IGdyYXBoSXRlbUJhcjtcclxuXHRsZXQgZ3JhcGhWYWx1ZTtcclxuXHJcblx0Z3JhcGhJdGVtcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcblx0XHRncmFwaEl0ZW1CYXIgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncmFwaC1pdGVtLWJhcicpO1xyXG5cdFx0Z3JhcGhJdGVtVmFsdWUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncmFwaC1pdGVtLXZhbHVlJyk7XHJcblx0XHRncmFwaFZhbHVlID0gcGFyc2VJbnQoZ3JhcGhJdGVtVmFsdWUuaW5uZXJIVE1MKTtcclxuXHJcblx0XHQoZnVuY3Rpb24gc2V0R3JhcGgoKSB7XHJcblx0XHRcdGdyYXBoSXRlbUJhci5zdHlsZS5oZWlnaHQgPSBncmFwaFZhbHVlICsgJ3B4JztcclxuXHRcdFx0Z3JhcGhJdGVtVmFsdWUuc3R5bGUuYm90dG9tID0gZ3JhcGhWYWx1ZSArICdweCc7XHJcblx0XHR9KSgpO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuLy8gZG9jdW1lbnQuZm9ybXMuaWRcclxuZnVuY3Rpb24gbG9naW5Gb3JtVmFsaWRhdGlvbigpIHtcclxuXHRjb25zdCBsb2dpbiA9IGRvY3VtZW50LmxvZ2luO1xyXG5cdGlmKCFsb2dpbikgcmV0dXJuO1xyXG5cdFxyXG5cdGNvbnN0IGxvZ2luRW1haWwgPSBkb2N1bWVudC5sb2dpbi5lbWFpbDtcclxuXHRjb25zdCBsb2dpblBhc3N3b3JkID0gZG9jdW1lbnQubG9naW4ucGFzc3dvcmQ7XHJcblx0Y29uc3QgaGVscGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZXh0ZmllbGQtaGVscGVyJyk7XHJcblx0Ly8gaGVscGVycy5mb3JFYWNoKGhlbHBlciA9PiBoZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XHJcblx0XHJcblx0bGV0IGxvZ2luRGF0YSA9IHtcclxuXHRcdGVtYWlsOiAnJyxcclxuXHRcdHBhc3N3b3JkOiAnJ1xyXG5cdH07XHJcblx0XHJcblx0bGV0IGxvZ2luVmFsaWQgPSB7XHJcblx0XHRlbWFpbDogZmFsc2UsXHJcblx0XHRwYXNzd29yZDogZmFsc2VcclxuXHR9O1xyXG5cclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcclxuXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHRcdGNvbnN0IGlzRW1haWwgPSB0YXJnZXQgPT09IGxvZ2luRW1haWw7XHJcblx0XHRjb25zdCBpc1Bhc3N3b3JkID0gdGFyZ2V0ID09PSBsb2dpblBhc3N3b3JkO1xyXG5cclxuXHRcdGlmKHZhbGlkYXRpb25zLmlzTnVtYmVyKGxvZ2luRW1haWwudmFsdWUpKSB7XHJcblx0XHRcdC8vIHJldHVybiBsb2dpbkVtYWlsLnZhbHVlID0gbnVsbDtcclxuXHRcdFx0bG9naW5EYXRhW3RhcmdldC5uYW1lXSA9IHRhcmdldC52YWx1ZTtcclxuXHRcdFx0Y29uc29sZS5sb2cobG9naW5EYXRhKTtcdFx0XHJcblx0XHRcdC8vIGxvZ2luRW1haWwudmFsdWUgPSAnJztcclxuXHRcdH1cclxuXHRcclxuXHRcdGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblx0XHQvLyBpZihpc0VtcHR5KSB7fVxyXG5cdFx0aWYoaXNFbWFpbCkge1xyXG5cdFx0XHRpZih2YWxpZGF0aW9ucy5pc1JlcXVpcmVkKGxvZ2luRW1haWwudmFsdWUpKSB7XHJcblx0XHRcdFx0c2V0SW52YWxpZCh7bWVzc2FnZTogJ+2VhOyImOqwkuydtOyWtOyalCd9KTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0c2V0VmFsaWQoKTtcclxuXHRcdH1cclxuXHRcdGlmKGlzUGFzc3dvcmQpIHtcclxuXHRcdFx0Y29uc29sZS5sb2codGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSk7XHJcblx0XHRcdGlmKHZhbGlkYXRpb25zLmlzTGVuZ3RoKGxvZ2luUGFzc3dvcmQudmFsdWUsIDgpKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ2F0IGxlYXN0IDggbGVuZ3RoJyk7XHJcblx0XHRcdFx0c2V0SW52YWxpZCh7bWVzc2FnZTogJ+uEiOustCDsp6fslYTsmpQnfSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNldFZhbGlkKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vIHRvZG8g7YWN7Iqk7Yq4IOuwlOq/lOyjvOq4sFxyXG5cdFx0ZnVuY3Rpb24gc2V0VmFsaWQoKSB7XHJcblx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcclxuXHRcdFx0dGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuXHRcdFx0ZmllbGQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XHJcblx0XHR9XHJcblx0XHRmdW5jdGlvbiBzZXRJbnZhbGlkKHttZXNzYWdlfSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyh0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuXHJcblx0XHRcdGNvbnN0IGlkID0gdGFyZ2V0LmlkIHx8IHRhcmdldC5uYW1lO1xyXG5cdFx0XHR0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XHJcblxyXG5cdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgJ2Vycm9yLScgKyBpZCk7XHJcblxyXG5cdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmlubmVySFRNTCA9IG1lc3NhZ2U7XHJcblx0XHR9XHJcblx0XHR2YXIgaGFzRXJyb3IgPSBmdW5jdGlvbiAoZmllbGQpIHtcclxuXHJcblx0XHRcdC8vIERvbid0IHZhbGlkYXRlIHN1Ym1pdHMsIGJ1dHRvbnMsIGZpbGUgYW5kIHJlc2V0IGlucHV0cywgYW5kIGRpc2FibGVkIGZpZWxkc1xyXG5cdFx0XHRpZiAoZmllbGQuZGlzYWJsZWQgfHwgZmllbGQudHlwZSA9PT0gJ2ZpbGUnIHx8IGZpZWxkLnR5cGUgPT09ICdyZXNldCcgfHwgZmllbGQudHlwZSA9PT0gJ3N1Ym1pdCcgfHwgZmllbGQudHlwZSA9PT0gJ2J1dHRvbicpIHJldHVybjtcclxuXHRcclxuXHRcdFx0Ly8gR2V0IHZhbGlkaXR5XHJcblx0XHRcdHZhciB2YWxpZGl0eSA9IGZpZWxkLnZhbGlkaXR5O1xyXG5cdFxyXG5cdFx0XHQvLyBJZiB2YWxpZCwgcmV0dXJuIG51bGxcclxuXHRcdFx0aWYgKHZhbGlkaXR5LnZhbGlkKSByZXR1cm47XHJcblx0XHJcblx0XHRcdC8vIElmIGZpZWxkIGlzIHJlcXVpcmVkIGFuZCBlbXB0eVxyXG5cdFx0XHRpZiAodmFsaWRpdHkudmFsdWVNaXNzaW5nKSByZXR1cm4gJ1BsZWFzZSBmaWxsIG91dCB0aGlzIGZpZWxkLic7XHJcblx0XHJcblx0XHRcdC8vIElmIG5vdCB0aGUgcmlnaHQgdHlwZVxyXG5cdFx0XHRpZiAodmFsaWRpdHkudHlwZU1pc21hdGNoKSByZXR1cm4gJ1BsZWFzZSB1c2UgdGhlIGNvcnJlY3QgaW5wdXQgdHlwZS4nO1xyXG5cdFxyXG5cdFx0XHQvLyBJZiB0b28gc2hvcnRcclxuXHRcdFx0aWYgKHZhbGlkaXR5LnRvb1Nob3J0KSByZXR1cm4gJ1BsZWFzZSBsZW5ndGhlbiB0aGlzIHRleHQuJztcclxuXHRcclxuXHRcdFx0Ly8gSWYgdG9vIGxvbmdcclxuXHRcdFx0aWYgKHZhbGlkaXR5LnRvb0xvbmcpIHJldHVybiAnUGxlYXNlIHNob3J0ZW4gdGhpcyB0ZXh0Lic7XHJcblx0XHJcblx0XHRcdC8vIElmIG51bWJlciBpbnB1dCBpc24ndCBhIG51bWJlclxyXG5cdFx0XHRpZiAodmFsaWRpdHkuYmFkSW5wdXQpIHJldHVybiAnUGxlYXNlIGVudGVyIGEgbnVtYmVyLic7XHJcblx0XHJcblx0XHRcdC8vIElmIGEgbnVtYmVyIHZhbHVlIGRvZXNuJ3QgbWF0Y2ggdGhlIHN0ZXAgaW50ZXJ2YWxcclxuXHRcdFx0aWYgKHZhbGlkaXR5LnN0ZXBNaXNtYXRjaCkgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgdmFsdWUuJztcclxuXHRcclxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgZmllbGQgaXMgb3ZlciB0aGUgbWF4XHJcblx0XHRcdGlmICh2YWxpZGl0eS5yYW5nZU92ZXJmbG93KSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSBzbWFsbGVyIHZhbHVlLic7XHJcblx0XHJcblx0XHRcdC8vIElmIGEgbnVtYmVyIGZpZWxkIGlzIGJlbG93IHRoZSBtaW5cclxuXHRcdFx0aWYgKHZhbGlkaXR5LnJhbmdlVW5kZXJmbG93KSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSBsYXJnZXIgdmFsdWUuJztcclxuXHRcclxuXHRcdFx0Ly8gSWYgcGF0dGVybiBkb2Vzbid0IG1hdGNoXHJcblx0XHRcdGlmICh2YWxpZGl0eS5wYXR0ZXJuTWlzbWF0Y2gpIHJldHVybiAnUGxlYXNlIG1hdGNoIHRoZSByZXF1ZXN0ZWQgZm9ybWF0Lic7XHJcblx0XHJcblx0XHRcdC8vIElmIGFsbCBlbHNlIGZhaWxzLCByZXR1cm4gYSBnZW5lcmljIGNhdGNoYWxsIGVycm9yXHJcblx0XHRcdHJldHVybiAnVGhlIHZhbHVlIHlvdSBlbnRlcmVkIGZvciB0aGlzIGZpZWxkIGlzIGludmFsaWQuJztcclxuXHRcclxuXHRcdH07XHJcblx0fSk7XHJcblxyXG59XHJcblxyXG4vLyBldmVudC50YXJnZXQudmFsaWRpdHlcclxuLy8gYmFkSW5wdXQ6IGZhbHNlXHJcbi8vIGN1c3RvbUVycm9yOiBmYWxzZVxyXG4vLyBwYXR0ZXJuTWlzbWF0Y2g6IGZhbHNlXHJcbi8vIHJhbmdlT3ZlcmZsb3c6IGZhbHNlXHJcbi8vIHJhbmdlVW5kZXJmbG93OiBmYWxzZVxyXG4vLyBzdGVwTWlzbWF0Y2g6IGZhbHNlXHJcbi8vIHRvb0xvbmc6IGZhbHNlXHJcbi8vIHRvb1Nob3J0OiBmYWxzZVxyXG4vLyB0eXBlTWlzbWF0Y2g6IGZhbHNlXHJcbi8vIHZhbGlkOiB0cnVlXHJcbi8vIHZhbHVlTWlzc2luZzogZmFsc2VcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50ID0+IHtcclxuXHRjb25zb2xlLmxvZygndGVzdCcsIGV2ZW50LnRhcmdldC52YWxpZGl0eSwgZXZlbnQudGFyZ2V0LmZvcm0pO1xyXG5cdGV2ZW50LnRhcmdldC5mb3JtLnN1Ym1pdDtcclxufSwgdHJ1ZSk7IC8vIGJsdXIgaXMgbm90IGJ1YmJsZVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZXZlbnQgPT4ge1xyXG5cdGNvbnN0IGlzU3VibWl0TG9naW4gPSBldmVudC50YXJnZXQgPT09IGRvY3VtZW50LmxvZ2luO1xyXG5cdGlmKCFpc1N1Ym1pdExvZ2luKSByZXR1cm47XHJcblxyXG5cdGlmKGlzSW52YWxpZCkge1xyXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdC8vIHRhcmdldC5mb2N1cygpO1xyXG5cdH1cclxuXHRcclxuXHRsb2dpbkZvcm1WYWxpZGF0aW9uKCk7XHJcbn0pO1xyXG5cclxuXHJcbi8qXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblx0aWYoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy50b2RvLWNvbnRyb2wtcmVtb3ZlJykpe1xyXG5cdFx0dG9kb0xpc3QuaW5uZXJIVE1MID0gJyc7XHJcblx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9kb0xpc3RJdGVtczEnKTtcclxuXHR9XHJcblx0Y29uc3QgaXRlbSA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuanMtdG9kbyBpbnB1dCcpO1xyXG5cdGlmKGl0ZW0pIHtcclxuXHRcdGlmKGl0ZW0uY2hlY2tlZCkge1xyXG5cdFx0XHRpdGVtLnBhcmVudE5vZGUuY2xhc3NOYW1lID0gJ2NvbXBsZXRlZCc7XHJcblx0XHRcdGl0ZW0uY2hlY2tlZCA9IHRydWU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpdGVtLnBhcmVudE5vZGUuY2xhc3NOYW1lID0gJyc7XHJcblx0XHRcdGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RvZG9MaXN0SXRlbXMxJywgdG9kb0xpc3QuaW5uZXJIVE1MKTtcclxuXHR9XHJcbn0pO1xyXG4qL1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRUb2RheURhdGUgPSAoKSA9PiB7XHJcblx0Y29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG5cdGNvbnN0IHllYXIgPSB0b2RheS5nZXRGdWxsWWVhcigpOyAvLyB0b1N0cmluZygpLnBhZFN0YXJ0XHJcblx0Y29uc3QgbW9udGggPSBTdHJpbmcodG9kYXkuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XHJcblx0Y29uc3QgZGF0ZSA9IFN0cmluZyh0b2RheS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XHJcblx0Y29uc3QgZGF5ID0gdG9kYXkuZ2V0RGF5KCk7IC8vIOyblCA6IDBcclxuXHJcblx0Y29uc3QgaG91cnMgPSB0b2RheS5nZXRIb3VycygpO1xyXG5cdGNvbnN0IG1pbnV0ZXMgPSB0b2RheS5nZXRNaW51dGVzKCk7XHJcblx0Ly8gY29uc3Qgc2Vjb25kcyA9IHRvZGF5LmdldFNlY29uZHMoKTtcclxuXHRjb25zdCBhbXBtID0gaG91cnMgPCAxMiA/ICdhbScgOiAncG0nO1xyXG5cclxuXHQvLyBsZXQgdGhlQmlnRGF5ID0gbmV3IERhdGUoXCJKdWx5IDEsIDE5OTlcIik7XHJcblx0Ly8gbGV0IHNhbWVBc0JpZ0RheSA9IG5ldyBEYXRlKCk7XHJcblx0Ly8gc2FtZUFzQmlnRGF5LnNldFRpbWUodGhlQmlnRGF5LmdldFRpbWUoKSk7XHJcblxyXG5cdC8qXHJcblx0Y29uc3QgZGF0ZVN0cmluZyA9IGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkuc3BsaXQoJy4nKTtcclxuXHRjb25zdCBbeWVhciwgbW9udGgsIGRheV0gPSBkYXRlU3RyaW5nO1xyXG5cdGNvbnNvbGUubG9nKGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkpOyAvLyAxOTgw64WEIDHsm5QgM+ydvCDrqqnsmpTsnbxcclxuXHRjb25zb2xlLmxvZyhkYXRlLnRvTG9jYWxlVGltZVN0cmluZygpKTsgLy8g7Jik7KCEIDE6Mjg6MzVcclxuXHRjb25zb2xlLmxvZyhkYXRlLnRvTG9jYWxlU3RyaW5nKCkpOyAvLyAxOTgw64WEIDHsm5QgM+ydvCDrqqnsmpTsnbwg7Jik7KCEIDE6Mjg6MzVcclxuXHQqL1xyXG59OyIsImV4cG9ydCBjb25zdCBsb2FkZXIgPSAoKSA9PiB7XHJcblx0Y29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG5cdGNvbnN0IGxvYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbG9hZGluZycpO1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRsb2FkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWhpZGRlbicpO1xyXG5cdFx0XHRib2R5RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdib2R5LWxvY2snKTtcclxuXHRcdH0sIDApO1xyXG5cdH0pO1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2JvZHktbG9jaycpO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNoZWNrQnJvd3NlciA9ICgpID0+IHtcclxuXHRjb25zdCBCcm93c2VyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1icm93c2VyJyk7XHJcblx0bGV0IGFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xyXG5cdGlmIChhZ2VudC5pbmRleE9mKCdtc2llJykgPiAtMSB8fCBhZ2VudC5pbmRleE9mKCd0cmlkZW50JykgPiAtMSkge1xyXG5cdFx0QnJvd3NlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0fSBlbHNlIGlmIChhZ2VudC5pbmRleE9mKCdjaHJvbWUnKSAhPT0gLTEpIHtcclxuXHRcdGNvbnNvbGUubG9nKGFnZW50LCAn7YGs66GsJyk7XHJcblx0fVxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnb29nbGVBbmFseXRpY3MgPSAoKSA9PiB7XHJcblx0Ly8gPHNjcmlwdCBhc3luYyBzcmM9XCJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTgzNTMxMjM5LTFcIj48L3NjcmlwdD5cclxuXHQvLyB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcclxuXHQvLyBmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9XHJcblx0Ly8gZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTtcclxuXHQvLyBndGFnKCdjb25maWcnLCAnVUEtODM1MzEyMzktMScpO1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBhZGp1c3RUb3BQYWRkaW5nID0gKCkgPT4ge1xyXG5cdGNvbnN0IGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcblx0Y29uc3QgaXNGaXhlZEhlYWRlciA9IGdldENvbXB1dGVkU3R5bGUoaGVhZGVyRWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCc7XHJcblx0Y29uc3QgbWFpbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcblxyXG5cdGZ1bmN0aW9uIGFkZFBhZGRpbmcoKSB7XHJcblx0XHRpZiAoaXNGaXhlZEhlYWRlcikge1xyXG5cdFx0XHRtYWluRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSBoZWFkZXJFbGVtZW50LmNsaWVudEhlaWdodCArICdweCc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYWluRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSAwICsgJ3B4JztcclxuXHRcdH1cclxuXHR9XHJcblx0YWRkUGFkZGluZygpO1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYWRkUGFkZGluZyk7XHJcblx0fSk7XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShhZGRQYWRkaW5nKTtcclxuXHR9KTtcclxufTsiXSwic291cmNlUm9vdCI6IiJ9