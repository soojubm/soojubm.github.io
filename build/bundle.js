(()=>{var e=[function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,r){function c(e){try{l(o.next(e))}catch(e){r(e)}}function i(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}l((o=o.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);const r=s(n(2)),c=n(3),i=n(4),l=s(n(5)),a=s(n(6)),d=s(n(20)),u=s(n(25)),f=s(n(27)),m=n(28);document.addEventListener("DOMContentLoaded",i.lockBodyElement),document.addEventListener("DOMContentLoaded",()=>{"customElements"in window&&window.customElements.define("close-button",h)}),window.addEventListener("load",i.detectLoad),document.addEventListener("DOMContentLoaded",v),window.addEventListener("hashchange",v),document.addEventListener("click",f.default),document.addEventListener("click",m.toggleNavbarMenu),document.addEventListener("DOMContentLoaded",()=>{c.stopAnimation()});function v(){var e;return o(this,void 0,void 0,(function*(){const t=document.querySelectorAll(".navbar-menu a"),n=window.location.hash.substring(1);document.title="이경수 "+n;["","messaging","search","filter","tokens","subscribe","components","changelog","dummies","texts","signifier","presentations"].includes(n)||m.initializeNavbar(),null==t||t.forEach(e=>{var t;e.classList.remove("is-current");(null===(t=e.getAttribute("href"))||void 0===t?void 0:t.includes(n))&&!!n&&e.classList.add("is-current")});const o=window.matchMedia("(max-width: 1080px)"),s=function(e){e.matches&&m.initializeNavbar()};o.addListener(s),s(o),u.default(),function(){!("IntersectionObserver"in window)||!("IntersectionObserverEntry"in window)||window.IntersectionObserverEntry.prototype;const e=[].slice.call(document.querySelectorAll(".footer"));let t=new IntersectionObserver((function(e,t){e.forEach(e=>{e.isIntersecting&&t.unobserve(e.target)})}),{root:null,rootMargin:"0px 0px 0px 0px",threshold:.25});e.forEach(e=>t.observe(e))}(),yield r.default();const c=document.querySelector("#ta-example-one"),i=document.querySelector("#ta-example-two");c&&i&&(c.addEventListener("mouseup",p,!1),i.addEventListener("mouseup",p,!1)),null===(e=document.querySelector(".js-default-font"))||void 0===e||e.addEventListener("click",()=>document.body.classList.toggle("font-default"));const f=document.querySelector(".js-sheet"),v=null==f?void 0:f.querySelector(".js-sheet-close");window.addEventListener("load",()=>{null==f||f.classList.add("is-visible")}),null==v||v.addEventListener("click",()=>{var e;null===(e=v.parentElement)||void 0===e||e.classList.remove("is-visible")}),d.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}),d.default.file(),d.default.quantity(),a.default.toggleElement({selector:".js-toggle"}),a.default.tab(),a.default.modal({selector:".js-modal"}),a.default.positionSticky({selector:".js-post-head",addClass:"is-sticky-post-head",isPassed:!0}),a.default.scrollAnimation({selector:".js-observer"}),a.default.scrollspy({menusSelector:".js-scrollspy-trigger",sectionsSelector:".js-scrollspy-section"}),a.default.parallax(".js-parallax"),l.default(),function(){const e=document.querySelector(".js-comment-write"),t=document.querySelectorAll(".js-comment-textfield");if(!e||!t)return;t.forEach(t=>t.addEventListener("focus",()=>e.classList.add("is-focused")))}(),document.addEventListener("click",e=>{const t=e.target;if(!t.closest(".js-test-toggle"))return;const n=t.closest(".profile-body"),o=[...t.parentElement.children];n.classList.toggle("list","list"===t.name),o.forEach(e=>e.classList.remove("is-selected")),t.classList.add("is-selected")})}))}window.addEventListener("orientationChange",()=>console.log("orientatoinChange")),window.addEventListener("load",()=>console.log("loaded!")),window.addEventListener("beforeunload",()=>"저장되지 않은 변경사항이 있습니다. 정말 페이지를 떠나실 건 가요?"),document.addEventListener("readystatechange",()=>console.log(document.readyState)),document.addEventListener("click",(function(e){if(!e.target.closest(".js-to-top"))return;e.preventDefault(),window.scrollTo(0,0)})),document.addEventListener("click",(function(e){var t;if(!e.target.closest(".js-accordion"))return;const n=e.target.closest(".js-accordion");null===(t=n.querySelector(".accordion-panel"))||void 0===t||t.addEventListener("click",e=>e.stopPropagation());let o=Boolean(n.getAttribute("aria-expanded"));n.setAttribute("aria-expanded",String(!o)),n.classList.toggle("is-active")})),document.addEventListener("click",(function(e){const t=e.target.closest(".js-view-password");if(!t)return;const n=t.parentNode.querySelector("input"),o="password"===n.getAttribute("type");n.setAttribute("type",o?"text":"password")})),document.addEventListener("click",(function(e){const t=e.target.closest(".js-close");if(!t)return;t.parentNode.hidden=!0})),document.addEventListener("mouseover",(function(e){const t=e.target.closest(".js-hover-trigger");if(t)t.setAttribute("aria-expanded","true"),document.body.classList.add("is-active");else{if(!document.body.classList.contains("is-active"))return;document.body.classList.remove("is-active")}})),document.addEventListener("DOMContentLoaded",()=>{l.default()});function p(e){const t=document.activeElement,{id:n,value:o,selectionStart:s,selectionEnd:r}=t,c=o.substring(s,r),i=document.querySelector("#output-element"),l=document.querySelector("#output-text");i.innerHTML=n,l.innerHTML=c,console.log(t.tabIndex)}class h extends HTMLElement{constructor(){super(),this.innerHTML='\n      <button class="chip">\n        <span class="material-symbols-outlined">close</span>\n      </butt>\n    ',this.addEventListener("click",()=>console.log("test"))}connectedCallback(){console.log("connected!",this)}disconnectedCallback(){console.log("disconnected",this)}}},()=>{},function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,r){function c(e){try{l(o.next(e))}catch(e){r(e)}}function i(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.routes=void 0,t.routes=[{name:"디자인시스템",path:"/"},{name:"홈",path:"/home"},{name:"소개",path:"/about"},{name:"디자인시스템",path:"/design"},{name:"컴포넌트",path:"/components"},{name:"사용자프로필",path:"/profile"},{name:"포스트",path:"/post"},{name:"영화",path:"/cake"},{name:"상품명",path:"/product"},{name:"주문서",path:"/checkout"},{name:"로그인",path:"/login"},{name:"회원가입",path:"/signup"},{name:"비밀번호찾기",path:"/forgot"},{name:"설정",path:"/setting"}];window.location.pathname;t.default=()=>n(void 0,void 0,void 0,(function*(){let e=window.location.hash.substring(1),t=e?`/views/${e}.html`:"/views/design.html";try{!function(e){const t=document.querySelector("#view");if(!t)return;t.innerHTML=e,window.scrollTo(0,0)}(yield function(e){return n(this,void 0,void 0,(function*(){const t=yield fetch(e);if(!t.ok)throw"Something went wrong.";return yield t.text()}))}(t))}catch(e){console.warn("router: ",e)}}))},(e,t)=>{"use strict";function n(e){let t;return function(){t&&window.cancelAnimationFrame(t),t=window.requestAnimationFrame(()=>e())}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadLazyImages=t.stopAnimation=t.throttle=void 0,t.throttle=n,t.stopAnimation=function(){let e;window.addEventListener("resize",n(()=>{document.body.classList.add("resize-animation-stopper"),clearTimeout(e),e=setTimeout(()=>{document.body.classList.remove("resize-animation-stopper")},400)}))},t.loadLazyImages=function(){if(!("IntersectionObserver"in window))return;const e=new IntersectionObserver((t,n)=>{t.forEach(t=>{if(!t.isIntersecting)return;const n=t.target;n.src=n.dataset.src||"",console.log(n),e.unobserve(n)})});document.querySelectorAll("[data-src]").forEach(t=>e.observe(t))}},(e,t)=>{"use strict";function n(){document.body.classList.remove("lock-scroll")}Object.defineProperty(t,"__esModule",{value:!0}),t.detectLoad=t.unlockBodyElement=t.lockBodyElement=void 0,t.lockBodyElement=function(){document.body.classList.add("lock-scroll")},t.unlockBodyElement=n,t.detectLoad=function(){document.body.classList.remove("is-loading");const e=document.querySelector(".js-loader");e&&(n(),e.hidden=!0)}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{const e=document.querySelector(".carousel");if(!e)return;const t=e.querySelector(".carousel-viewer"),n=e.querySelectorAll(".carousel-viewer > button"),o=e.querySelector(".carousel-arrows-prev"),s=e.querySelector(".carousel-arrows-next"),r=e.querySelectorAll(".carousel-dots-dot");if(!(t&&n&&o&&s&&r))return;const c=t.offsetWidth;let i=0;0===t.scrollLeft&&(o.style.display="none"),n.forEach(e=>i+=e.offsetWidth),s.addEventListener("click",(function(){t.scrollLeft+=100})),o.addEventListener("click",(function(){t.scrollLeft-=100})),r.forEach(e=>e.addEventListener("click",()=>{})),t.addEventListener("scroll",()=>{const{scrollLeft:e}=t;console.log("scroll-left",e,"offset-width",c);const n=0===e;o.style.display=n?"none":"flex"})}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(n(7)),r=o(n(8)),c=o(n(9)),i=o(n(11)),l=o(n(13)),a=o(n(14)),d=o(n(15)),u=o(n(16)),f=o(n(17)),m=o(n(18)),v=o(n(19));t.default={toggleElement:s.default,enterTarget:r.default,modal:i.default,tab:c.default,toTop:l.default,positionSticky:a.default,scrollAnimation:d.default,scrollspy:m.default,closeParentElement:u.default,customCursor:f.default,parallax:v.default}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});function n(e){e.classList.remove("is-active"),e.setAttribute("aria-expanded","true")}t.default=function({selector:e}){const t=document.querySelectorAll(e);t.forEach(e=>e.addEventListener("click",o=>{o.preventDefault(),o.stopPropagation();const s=o.target;t.forEach(e=>{s!==e&&n(e)}),function(e){e.classList.toggle("is-active"),e.setAttribute("aria-expanded",""+e.classList.contains("is-active")),null==e||e.nextElementSibling.addEventListener("click",e=>e.stopPropagation())}(e)})),document.addEventListener("click",()=>t.forEach(e=>n(e)))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=document.querySelectorAll(e);null==t||t.forEach(e=>{e.addEventListener("mouseenter",()=>function e(t){t.setAttribute("aria-expanded","true"),document.body.classList.add("is-shown"),t.removeEventListener("mouseenter",()=>e(t))}(e)),e.addEventListener("mouseleave",()=>function e(t){t.setAttribute("aria-expanded","false"),document.body.classList.remove("is-shown"),t.removeEventListener("mouseleave",()=>e(t))}(e))})}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3),s=n(10);t.default=function(){const e=document.querySelector(".js-tab");if(!e)return;const t=e.querySelectorAll("[role=tab]"),n=e.querySelectorAll("[role=tabpanel]");let r=t[0];function c(e){r=e.target,i(),t.forEach(e=>e.setAttribute("aria-selected","false")),r.setAttribute("aria-selected","true"),n.forEach(t=>t.setAttribute("aria-hidden",String(e.target.dataset.index!==t.dataset.index)))}function i(){if(!e)return;const t=e.querySelector(".profile-tablist-indicator");t&&(t.style.left=r.offsetLeft+"px",t.style.width=s.getElementWidth(r))}i(),t.forEach(e=>e.addEventListener("click",c)),window.addEventListener("resize",o.throttle(i),!0)}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getElementWidth=t.getWindowScrollTop=t.getElementOffsetTop=t.addClassname=t.removeClassname=void 0,t.removeClassname=(e,t)=>e.classList.remove(t),t.addClassname=(e,t)=>e.classList.add(t),t.getElementOffsetTop=function(e){let t=e.offsetTop;return e.offsetParent&&(t+=e.offsetParent.offsetTop),t},t.getWindowScrollTop=function(){return window.scrollY||window.pageYOffset},t.getElementWidth=function(e){return getComputedStyle(e).width}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,r){function c(e){try{l(o.next(e))}catch(e){r(e)}}function i(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(12);t.default=function({selector:e}){const t=document.querySelectorAll(e),n=document.querySelector("#modal");let r,c;function i(e){const t=e.target;(t.classList.contains("modal")||t.classList.contains("js-modal-close"))&&(document.body.classList.remove("is-modal-visible","lock-scroll"),n.innerHTML="",window.scrollTo(0,c),r.focus(),document.removeEventListener("keydown",l),null==n||n.removeEventListener("click",i))}function l(e){27===e.keyCode&&s.backHistory()}document.body.classList.contains("is-modal-visible"),t.forEach(e=>e.addEventListener("click",t=>{t.preventDefault();!function(e){o(this,void 0,void 0,(function*(){try{const t=`/views/${e}.html`,o=yield fetch(t);if(!o.ok)throw"Something went wrong.";const s=yield o.text();n.innerHTML=s,r=document.activeElement}catch(e){}}))}(e.dataset.modal),c=window.pageYOffset,document.body.classList.add("is-modal-visible","lock-scroll"),document.body.style.top=`-${c}px`,document.addEventListener("keydown",l),n.addEventListener("click",i)}))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backHistory=t.pushBrowserHistory=void 0,t.pushBrowserHistory=function(e={},t="",n=""){history.pushState(e,t,n)},t.backHistory=function(){history.back()}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=document.querySelector(e);t&&t.addEventListener("click",e=>{e.preventDefault(),window.scrollTo(0,0)})}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3),s=n(10);t.default=({selector:e,addClass:t,isPassed:n})=>{const r=document.querySelector(e);if(!r)return;let c=s.getElementOffsetTop(r);const i=r.offsetHeight;let l=n?c+i:c;window.addEventListener("scroll",o.throttle((function(){const n=s.getWindowScrollTop()+i>l;document.body.classList.toggle(t,n),document.body.style.paddingTop=n?i+"px":"0",".hero"===e&&(document.body.style.paddingTop="0")})),!1),window.addEventListener("resize",o.throttle((function(){c=s.getElementOffsetTop(r)})),!1)}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=Array.from(document.querySelectorAll(e));let n=new IntersectionObserver((function(e,t){e.forEach(e=>{e.isIntersecting?e.target.classList.add("is-observed"):e.target.classList.remove("is-observed")})}),{root:null,rootMargin:"-100px 0px -100px 0px",threshold:0});t.forEach(e=>n.observe(e))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=({selector:e})=>{const t=document.querySelectorAll(e);0!==t.length&&t.forEach(e=>e.addEventListener("click",()=>{e.parentNode.hidden=!0}))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{const e=document.querySelector(".js-loader-spinner"),t=document.querySelectorAll("button, a");function n(e,{cursorElement:t}){const n=e.clientX,o=e.clientY;t.style.left=n+"px",t.style.top=o+"px"}e&&t&&(document.addEventListener("DOMContentLoaded",t=>n(t,{cursorElement:e})),document.addEventListener("mousemove",t=>n(t,{cursorElement:e})),document.addEventListener("click",()=>function({cursorElement:e}){e.classList.add("expand"),setTimeout(()=>{e.classList.remove("expand")},500)}({cursorElement:e})),e.classList.add("is-default"),t.forEach(t=>t.addEventListener("mouseleave",()=>{e.classList.remove("is-clickable")})),t.forEach(t=>t.addEventListener("mouseenter",()=>{e.classList.add("is-clickable")})))}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3);t.default=({menusSelector:e,sectionsSelector:t})=>{const n=document.querySelectorAll(t),s=document.querySelectorAll(e);n&&s&&(s.forEach((e,t)=>{e.addEventListener("click",e=>{e.preventDefault();const o=n[t].offsetTop-64;window.scrollTo(0,o)})}),window.addEventListener("scroll",o.throttle((function(){var e;let t;n.forEach((e,n)=>{if(!(e.offsetTop<=window.pageYOffset+100))return;const o=s[n];o&&(s.forEach(e=>e.classList.remove("is-active")),o.classList.add("is-active"),t=o.offsetLeft+o.clientWidth/2)});const o=null===(e=s[0])||void 0===e?void 0:e.parentElement;if(!o)return;o.scroll({left:t-o.offsetWidth/2,top:0,behavior:"smooth"})})),!1))}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(10);t.default=e=>{console.log("parallax",e);const t=document.querySelectorAll(e);t&&window.addEventListener("scroll",(function(){t.forEach(e=>{let t=o.getWindowScrollTop()+window.innerHeight-o.getElementOffsetTop(e);.002*t>=1.5||(e.style.transform=`scale(${.0015*t})`)})}))}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(n(21)),r=o(n(22)),c=o(n(23)),i=o(n(24));t.default={checkbox:s.default,textarea:r.default,file:c.default,quantity:i.default}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function({checkAllSelector:e,checkSelector:t}){const n=document.querySelector(e),o=document.querySelectorAll(t);n&&o&&(n.addEventListener("change",()=>function(e,t){e.forEach(e=>{e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1})}(o,n)),o.forEach(e=>{e.addEventListener("change",()=>function(e,t){const n=Array.from(e);let o=n.every(e=>e.checked),s=n.some(e=>e.checked)&&!o;t.checked=o,t.indeterminate=s,t.dataset.indeterminate=s}(o,n))}))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{document.addEventListener("input",e=>{const{target:t}=e;if(t)return;if(!("textarea"===t.nodeName.toLowerCase()))return;const n=document.querySelector(".textfield-byte b");if(!n)return;const o=(null==t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;n.innerText=o;const s=o>30;t.parentNode.classList.toggle("is-invalid",s)})}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{const e=document.querySelector(".js-file-input");e&&e.addEventListener("change",()=>function(e){const{files:t}=e,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach(e=>{if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");const t=`\n\t\t\t<div class="file-attachment-item">\n\t\t\t\t<figure class="file-attachment-item-image"><img src=${window.URL.createObjectURL(e)} alt=${e.name}></figure>\n\t\t\t\t<b class="file-attachment-item-name">${e.name}</b>\n\t\t\t\t<small class="file-attachment-item-size" >${function(e){const t=e>=1024&&e<1048576;return e<1024?e+"bytes":t?(e/1024).toFixed(2)+"KB":(e/1048576).toFixed(2)+"MB"}(e.size)}</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><span class="material-symbols-outlined">close</span></button>\n\t\t\t</div>`;n.innerHTML+=t})}(e))}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=()=>{document.addEventListener("keydown",e=>{const{target:t}=e;t.closest(".js-number-input")&&document.addEventListener("keyup",(function(){const e=/(^0+)/.test(t.value),n=Number(t.value)>=300,o=t.value.length>0;e&&(t.value=0);o&&(t.value=t.value.slice(0,3));n&&(t.value=300)}))})};const n=document.querySelector(".js-input-test");if(n){n.addEventListener("keypress",e=>{const t=e.which||e.keyCode;!(32===t)&&(t<48||t>57)&&e.preventDefault()});let e=n.value||"";n.addEventListener("input",t=>{const n=t.target;/^[0-9\s]*$/.test(n.value)?e=n.value:n.value=e})}},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(26);t.default=function(){if(!localStorage.getItem("theme"))return;document.body.classList.add(o.DARK_THEME_CLASS);const e=document.querySelectorAll(o.DARKTHEME_SELECTOR);null==e||e.forEach(e=>{e.querySelector("input").checked=!0})}},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isDarkTheme=t.DARKTHEME_SELECTOR=t.LIGHT_THEME_CLASS=t.DARK_THEME_CLASS=void 0,t.DARK_THEME_CLASS="theme-dark",t.LIGHT_THEME_CLASS="",t.DARKTHEME_SELECTOR=".js-darkmode",t.isDarkTheme=()=>document.body.classList.contains(t.DARK_THEME_CLASS)},(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleDarkTheme=void 0;const o=n(26);function s(e){if(!e.target.closest(o.DARKTHEME_SELECTOR))return;document.body.classList.toggle(o.DARK_THEME_CLASS);const t=document.querySelectorAll(o.DARKTHEME_SELECTOR);null==t||t.forEach(e=>{e.querySelector("input").checked=o.isDarkTheme()}),localStorage.setItem("theme",o.isDarkTheme()?o.DARK_THEME_CLASS:o.LIGHT_THEME_CLASS)}t.toggleDarkTheme=s,t.default=s},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleNavbarMenu=t.initializeNavbar=void 0;const n=()=>document.body.classList.contains("is-opened-menu");t.initializeNavbar=function(){const e=document.querySelector(".js-navbar-toggle");null==e||e.classList.remove("is-active"),document.body.classList.remove("is-opened-menu")},t.toggleNavbarMenu=function(e){const t=e.target.closest(".js-navbar-toggle");if(!t)return;const o=t.nextElementSibling;document.body.classList.toggle("is-opened-menu",!n()),null==t||t.setAttribute("aria-expanded",String(n())),null==o||o.setAttribute("aria-hidden",String(!n()));const s=String(n()?"0":"-1");null==o||o.querySelectorAll("a").forEach(e=>{e.setAttribute("tabindex",s)})}}],t={};(function n(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,n),r.exports})(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,