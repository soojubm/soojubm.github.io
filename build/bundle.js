!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function c(e){try{s(r.next(e))}catch(e){i(e)}}function a(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,r=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!(o=(o=c.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var c=i(n(2)),a=n(3),s=n(4),l=n(5),u=n(6),d=i(n(7)),f=i(n(16));window.addEventListener("offline",(function(){var e=document.querySelector(".js-offline");e&&(e.style.display="block")})),window.addEventListener("hashchange",c.default),window.addEventListener("hashchange",(function(){var e,t,n=document.querySelector(".navbar-burger");if(!n)return;n.classList.remove("is-active"),null===(t=null===(e=n)||void 0===e?void 0:e.nextElementSibling)||void 0===t||t.classList.remove("is-visible")})),document.addEventListener("DOMContentLoaded",(function(){return r(void 0,void 0,void 0,(function(){var e;return o(this,(function(t){return a.checkBrowser(),l.setDarkmode(),c.default().then((function(){a.adjustTopPadding();var e=document.querySelector(".js-display-list"),t=document.querySelector(".js-display-grid"),n=document.querySelector(".profile-body");e&&t&&n&&(e.addEventListener("click",(function(r){e.classList.add("is-selected"),t.classList.remove("is-selected"),n.classList.add("list")})),t.addEventListener("click",(function(r){e.classList.remove("is-selected"),t.classList.add("is-selected"),n.classList.remove("list")})));var r,o;r=document.querySelector(".js-comment-write"),o=document.querySelectorAll(".js-comment-textfield"),(r||o)&&o.forEach((function(e){return e.addEventListener("focus",(function(){r&&r.classList.add("is-focused")}))})),s.setGraph(),u.countDownClock(20,"days"),d.default.modal({selector:".js-modal"}),d.default.toggleClass({selector:".js-toggle"}),d.default.enterTarget({selector:".js-hover-trigger"}),d.default.tabMenu(),d.default.close({selector:".js-close"}),d.default.toTop({selector:".js-to-top"}),d.default.scrollAnimation(),f.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),f.default.file(),f.default.textarea(),f.default.number();window.addEventListener("scroll",(function(){d.default.stickyElement({targetElement:".post-head",addClass:"is-sticky"})})),window.addEventListener("scroll",(function(){var e=document.querySelector(".post-head-progress");if(e){var t=window.pageYOffset/(document.body.scrollHeight-window.innerHeight)*100+"%";e.style.width=t}}),!0)})),(e=document.querySelector(".header"))?(["#design","#contact"].includes(window.location.hash)?e.classList.add("--white"):e.classList.remove("--white"),[2]):[2]}))}))})),document.addEventListener("submit",(function(e){return e.preventDefault()}))},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=window.location.hash,t=e?"/views/"+e.substring(1)+".html":"/views/profile.html";return fetch(t).then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(e){var t=document.getElementById("view");t&&(t.innerHTML=e)})).catch((function(e){return console.warn("router: ",e)}))}},function(e,t,n){"use strict";function r(e){var t=document.body;"fixed"===getComputedStyle(e).position?t.style.marginTop=e.clientHeight+"px":t.style.marginTop=0}Object.defineProperty(t,"__esModule",{value:!0}),t.loader=function(){var e=document.querySelector(".js-loading");if(e){var t=document.body;window.addEventListener("load",(function(){setTimeout((function(){e.classList.add("is-hidden"),t.classList.remove("body-lock")}),0)})),document.addEventListener("DOMContentLoaded",(function(){t.classList.add("body-lock")}))}},t.checkBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?(e.style.display="block",console.log(t)):-1!==t.indexOf("chrome")&&console.log(t,"크롬")}},t.googleAnalytics=function(){},t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return r(e)};r(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGraph=function(){var e=document.querySelectorAll(".js-graph .graph-item");e&&e.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var r=parseInt(n.innerText);t.style.height=r+"px",n.style.bottom=r+"px"}}))}},function(e,t,n){"use strict";function r(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),r=e.querySelector(".slider-arrows-prev"),o=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&r&&o&&i){var c=t.offsetWidth,a=0;n.forEach((function(e){return a+=e.offsetWidth})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",c)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",r))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.countDownClock=function(e,t){void 0===e&&(e=100),void 0===t&&(t="seconds");var n=document.querySelector(".js-days"),r=document.querySelector(".js-hours"),o=document.querySelector(".js-minutes"),i=document.querySelector(".js-seconds");function c(e){var t=Date.now()+1e3*e,c=setInterval((function(){var e=Math.round((t-Date.now())/1e3);e<=0?clearInterval(c):n&&r&&o&&i&&(n.innerHTML=""+Math.floor(e/86400),r.innerText=""+Math.floor(e%86400/3600),o.innerText=""+Math.floor(e%86400%3600/60),i.innerText=""+(e%60<10?"0"+e%60:e%60))}),1e3)}n&&function(t){switch(t){case"seconds":return c(e);case"minutes":return c(60*e);case"hours":return c(60*e*60);case"days":c(60*e*60*24)}}(t)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(8)),i=r(n(9)),c=r(n(10)),a=r(n(11)),s=r(n(12)),l=r(n(13)),u=r(n(14)),d=r(n(15));t.default={toggleClass:o.default,enterTarget:i.default,modal:a.default,tabMenu:c.default,toTop:s.default,stickyElement:l.default,scrollAnimation:u.default,close:d.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){e.setAttribute("aria-expanded","true"),e.classList.remove("is-active"),e.nextSibling.nextSibling.classList.remove("is-visible")};t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&(n.forEach((function(e){return e.addEventListener("click",(function(t){t.stopPropagation(),e.classList.toggle("is-active"),e.setAttribute("aria-expanded",""+e.classList.contains("is-active"));var o=e.nextSibling&&e.nextSibling.nextSibling;o&&(o.classList.toggle("is-visible"),o.addEventListener("click",(function(e){return e.stopPropagation()})),n.forEach((function(e){t.target!==e&&r(e)})))}))})),document.body.addEventListener("click",(function(){return n.forEach((function(e){return r(e)}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,r=document.querySelectorAll(t);r&&r.forEach((function(e){var t=e===document.querySelector(".js-navbar .navbar-menu-item");e.addEventListener("mouseenter",(function(){e.setAttribute("aria-expanded","true"),e.classList.add("is-expanded"),t&&n.classList.add("is-shown"),e.addEventListener("mouseleave",(function(){return e.setAttribute("aria-expanded","false"),e.classList.remove("is-expanded"),void(t&&n.classList.remove("is-shown"))}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),r=t.getAttribute("data-index"),o=document.querySelector(".profile-tablist-active");n&&o&&t.closest("[role=tab]")&&(o.style.left=t.offsetLeft+"px",n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach((function(e){e.setAttribute("aria-hidden","true"),r===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")})))}),!0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,r=0,o=document.querySelectorAll(t);o&&(o.forEach((function(e){return e.addEventListener("click",(function(t){t.stopPropagation(),t.preventDefault(),e.nextElementSibling.classList.add("is-visible"),r=window.pageYOffset,n.classList.add("body-lock"),n.style.top="-"+r+"px",document.addEventListener("click",(function(){if(!e.nextElementSibling.classList.contains("is-visible"))return;e.nextElementSibling.classList.remove("is-visible"),n.classList.remove("body-lock"),window.scrollTo(0,r)}))}))})),document.querySelectorAll(".modal-dialog").forEach((function(e){return e.addEventListener("click",(function(e){return e.stopPropagation()}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0),window.location.hash=n.name||n.href}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,r=document.body,o=document.querySelector(t);if(o){var i,c=o.offsetHeight;window.addEventListener("resize",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){c=o.offsetHeight}))})),window.addEventListener("scroll",(function(){console.log(c),i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){window.pageYOffset>o.offsetTop+c?r.classList.add(n):r.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelectorAll(".js-scroll-animation");e&&(e.forEach((function(e){e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){e.forEach((function(e){var t=window.pageYOffset,n=t>t+e.getBoundingClientRect().top-window.innerHeight+50;console.log(e.getBoundingClientRect().bottom,window.innerHeight),n&&e.classList.add("is-scrolled")}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.style.display="none"}))}))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(17)),i=r(n(18)),c=r(n(19)),a=r(n(20));t.default={checkbox:o.default,textarea:i.default,file:c.default,number:a.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),r=n.every((function(e){return e.checked})),o=n.some((function(e){return e.checked}));t.checked=r,t.indeterminate=o&&!r,t.dataset.indeterminate=o&&!r},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,n=e.target;if(!n&&"textarea"===n.nodeName.toLowerCase()){var o=document.querySelector(".textfield-byte b");if(o){var i=(null===(t=n)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;o.innerText=i,i>30?n.parentNode.classList.add("is-invalid"):n.parentNode.classList.remove("is-invalid"),r(n)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),r=document.querySelector(".js-file-attachment-helper");if(!t||!n||!r)return;r.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,r,o='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,r=t>=1024&&t<1048576,t<1024?t+"bytes":r?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=o}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,r=n.value.length>0;e&&(n.value=0);r&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t,n=e.target;if(n.closest(".js-variation-decrement")){if((t=n.parentNode.querySelector(".js-variation-input")).value<=0)return void n.classList.add("is-disabled");--t.value}if(n.closest(".js-variation-increment")){if((t=n.parentNode.querySelector(".js-variation-input")).value>=10)return void n.classList.add("is-disabled");++t.value}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3VpLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvY291bnRkb3duLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9nZ2xlQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2VudGVyVGFyZ2V0LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC90YWJNZW51LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9tb2RhbC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3N0aWNreUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2xvc2UudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9jaGVja2JveC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvdGV4dGFyZWEudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L2ZpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L251bWJlci50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fYXdhaXRlciIsInRoaXMiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsInJvdXRlcl8xIiwibG9hZF8xIiwidWlfMSIsInNldERhcmtNb2RlXzEiLCJjb3VudGRvd25fMSIsImluZGV4XzEiLCJpbmRleF8yIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9mZmxpbmVFbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJkaXNwbGF5IiwiZGVmYXVsdCIsIl9hIiwiX2IiLCJuYXZpZ2F0aW9uVHJpZ2dlciIsImNsYXNzTGlzdCIsInJlbW92ZSIsIm5leHRFbGVtZW50U2libGluZyIsInBhZ2VIZWFkRWxlbWVudCIsImNoZWNrQnJvd3NlciIsInNldERhcmttb2RlIiwiYWRqdXN0VG9wUGFkZGluZyIsImxpc3QiLCJncmlkIiwid29ya3MiLCJldmVudCIsImFkZCIsImNvbW1lbnRXcml0ZSIsImNvbW1lbnRUZXh0RmllbGQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJzZXRHcmFwaCIsImNvdW50RG93bkNsb2NrIiwibW9kYWwiLCJzZWxlY3RvciIsInRvZ2dsZUNsYXNzIiwiZW50ZXJUYXJnZXQiLCJ0YWJNZW51IiwiY2xvc2UiLCJ0b1RvcCIsInNjcm9sbEFuaW1hdGlvbiIsImNoZWNrYm94IiwiY2hlY2tBbGxTZWxlY3RvciIsImNoZWNrU2VsZWN0b3IiLCJzZXRFdmVudCIsImZpbGUiLCJ0ZXh0YXJlYSIsIm51bWJlciIsInN0aWNreUVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwiYWRkQ2xhc3MiLCJwcm9ncmVzc0JhciIsInNjcm9sbFBlcmNlbnQiLCJwYWdlWU9mZnNldCIsInNjcm9sbEhlaWdodCIsImlubmVySGVpZ2h0Iiwid2lkdGgiLCJpbmNsdWRlcyIsImxvY2F0aW9uIiwiaGFzaCIsInByZXZlbnREZWZhdWx0IiwicGFnZSIsInN1YnN0cmluZyIsImZldGNoIiwicmVzcG9uc2UiLCJvayIsInRleHQiLCJodG1sIiwidmlldyIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwic2V0Qm9keU1hcmdpblRvcCIsImhlYWRlckVsZW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJsb2FkZXIiLCJsb2FkZXJFbGVtZW50Iiwic2V0VGltZW91dCIsIkJyb3dzZXJFbGVtZW50IiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwibG9nIiwiZ29vZ2xlQW5hbHl0aWNzIiwiZm4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJncmFwaEl0ZW1zIiwiZ3JhcGhJdGVtQmFyIiwiZ3JhcGhJdGVtVmFsdWUiLCJncmFwaFZhbHVlIiwicGFyc2VJbnQiLCJpbm5lclRleHQiLCJoZWlnaHQiLCJib3R0b20iLCJ0dCIsInRvZ2dsZSIsImNvbnRhaW5zIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjYXJvdXNlbCIsImNhdGVnb3J5IiwiY2F0ZWdvcnlMaXN0IiwiY2F0ZWdvcnlMaXN0U2xpZGUiLCJjYXRlZ29yeU5hdmlnYXRpb25QcmV2IiwiY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCIsImNhdGVnb3J5RG90cyIsImNhdGVnb3J5Q29udGFpbmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsInN1bSIsIml0ZW0iLCJzY3JvbGxMZWZ0IiwiZGFya21vZGVCdXR0b24iLCJsYXN0VGhlbWUiLCJnZXRJdGVtIiwibG9hZFRoZW1lIiwiZm9ybWF0IiwiZGF5c0VsZW1lbnQiLCJob3Vyc0VsZW1lbnQiLCJtaW51dGVzRWxlbWVudCIsInNlY29uZHNFbGVtZW50IiwidGltZXIiLCJzZWNvbmRzIiwiRGF0ZSIsIm5vdyIsImNvdW50ZG93biIsInNldEludGVydmFsIiwic2Vjb25kc0xlZnQiLCJNYXRoIiwicm91bmQiLCJjbGVhckludGVydmFsIiwiZmxvb3IiLCJjb252ZXJ0Rm9ybWF0IiwidG9nZ2xlQ2xhc3NfMSIsImVudGVyVGFyZ2V0XzEiLCJ0YWJNZW51XzEiLCJtb2RhbF8xIiwidG9Ub3BfMSIsInN0aWNreUVsZW1lbnRfMSIsInNjcm9sbEFuaW1hdGlvbl8xIiwiY2xvc2VfMSIsInJlbW92ZUFsbENsYXNzIiwic2V0QXR0cmlidXRlIiwibmV4dFNpYmxpbmciLCJ0cmlnZ2VyIiwidHJpZ2dlcnMiLCJzdG9wUHJvcGFnYXRpb24iLCJ0cmlnZ2VyTmV4dEVsZW1lbnQiLCJ0YXJnZXQiLCJob3ZlckVsZW1lbnRzIiwiaXNOYXZpZ2F0aW9uIiwidGFicyIsInBhcmVudE5vZGUiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsInRhYkFjdGljZUJhciIsImNsb3Nlc3QiLCJsZWZ0Iiwib2Zmc2V0TGVmdCIsInRhYiIsInBhZ2VZIiwibW9kYWxzIiwidG9wIiwic2Nyb2xsVG8iLCJ0b1RvcEVsZW1lbnQiLCJocmVmIiwiaXNTY3JvbGxpbmciLCJzdGlja3lFbGVtZW50SGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvZmZzZXRUb3AiLCJzY3JvbGxUYXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc1Njcm9sbGVkIiwiY2xvc2VFbGVtZW50cyIsImNoZWNrYm94XzEiLCJ0ZXh0YXJlYV8xIiwiZmlsZV8xIiwibnVtYmVyXzEiLCJjaGVja0FsbCIsImNoZWNrSXRlbXMiLCJfdGhpcyIsInNldENoZWNrQWxsIiwiY2hlY2tJdGVtIiwic2V0Q2hlY2tFYWNoIiwiY2hlY2tzIiwiQXJyYXkiLCJmcm9tIiwiaXNDaGVja2VkRXZlcnkiLCJldmVyeSIsImNoZWNrZWQiLCJpc0NoZWNrZWRTb21lIiwic29tZSIsImluZGV0ZXJtaW5hdGUiLCJkYXRhc2V0IiwiYXV0b0V4cGFuZCIsImZpZWxkIiwiY29tcHV0ZWQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibm9kZU5hbWUiLCJieXRlRWxlbWVudCIsInN0cmluZ0J5dGVMZW5ndGgiLCJyZXBsYWNlIiwiZmlsZUlucHV0IiwiZmlsZXMiLCJhdHRhY2htZW50TGlzdCIsImF0dGFjaG1lbnRIZWxwZXIiLCJ0eXBlIiwidmFsaWRGaWxlVHlwZSIsImFsZXJ0Iiwic2l6ZSIsImlzS2lsb0J5dGVzIiwiZmlsZVRlbXBsYXRlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwidG9GaXhlZCIsImF0dGFjaCIsImtleUNvZGUiLCJpc0ZpcnN0UGxhY2VkWmVybyIsInRlc3QiLCJpc01heGltdW0iLCJOdW1iZXIiLCJpc0xlbmd0aCIsInNsaWNlIiwidGFyZ2V0SW5wdXQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0Es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LGNBQWMsd0JBQzlCaEUsT0FMTCxFQU9QLFlBREFvTixFQUFPN0ksVUFBVVcsSUFBSSxpQkFHdkI4TSxFQUFZaFMsTUFFbEIsR0FBSW9OLEVBQU9RLFFBQVEsMkJBQTRCLENBRTNDLElBREFvRSxFQUFjNUUsRUFBT0ksV0FBV3hKLGNBQWMsd0JBQzlCaEUsT0FaTCxHQWNQLFlBREFvTixFQUFPN0ksVUFBVVcsSUFBSSxpQkFHdkI4TSxFQUFZaFMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5yZXF1aXJlKFwiLi9zdHlsZXNoZWV0cy9zdHlsZS5zY3NzXCIpO1xuLy8gaW1wb3J0IHBvbHlmaWxsIGZyb20gJy4vamF2YXNjcmlwdHMvcG9seWZpbGwnO1xudmFyIHJvdXRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3JvdXRlclwiKSk7XG52YXIgbG9hZF8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvbG9hZFwiKTtcbnZhciB1aV8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvdWlcIik7XG52YXIgc2V0RGFya01vZGVfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3NldERhcmtNb2RlXCIpO1xuLy8gaW1wb3J0IHsgZmlsbXMgfSBmcm9tICcuLi92aWV3cy9maWxtcyc7XG52YXIgY291bnRkb3duXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9jb3VudGRvd25cIik7XG52YXIgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9ldmVudC9pbmRleFwiKSk7XG52YXIgaW5kZXhfMiA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9pbnB1dC9pbmRleFwiKSk7XG4vL2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc05hbWUgKz0gJyBzdXBwb3J0cy1kYXRlJztcbi8vIGlmKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOjgwMHB4KScpLm1hdGNoZXMpIHt9XG4vLyBkaXYuY2xhc3NMaXN0LnJlcGxhY2UoXCJmb29cIiwgXCJiYXJcIik7XG4vLyBlbGVtZW50LmhpZGRlbiA9ICF2aXNpYmxlXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2ZmbGluZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtb2ZmbGluZScpO1xuICAgIGlmICghb2ZmbGluZUVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICBvZmZsaW5lRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn0pO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCByb3V0ZXJfMS5kZWZhdWx0KTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaW5pdGFpbGl6ZVBhZ2UpO1xuZnVuY3Rpb24gaW5pdGFpbGl6ZVBhZ2UoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgbmF2aWdhdGlvblRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2YmFyLWJ1cmdlcicpO1xuICAgIC8vIGNvbnN0IGlzT3BlbmVkTmF2aWdhdGlvbiA9IG5hdmlnYXRpb25UcmlnZ2VyLmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJyk7XG4gICAgaWYgKCFuYXZpZ2F0aW9uVHJpZ2dlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIG5hdmlnYXRpb25UcmlnZ2VyLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgIChfYiA9IChfYSA9IG5hdmlnYXRpb25UcmlnZ2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dEVsZW1lbnRTaWJsaW5nKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xufVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhZ2VIZWFkRWxlbWVudCwgcGFnZXMsIGlzV2hpdGU7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAvLyBwb2x5ZmlsbCgpXG4gICAgICAgIC8vIGxvYWRlcigpXG4gICAgICAgIGxvYWRfMS5jaGVja0Jyb3dzZXIoKTtcbiAgICAgICAgc2V0RGFya01vZGVfMS5zZXREYXJrbW9kZSgpO1xuICAgICAgICByb3V0ZXJfMS5kZWZhdWx0KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsb2FkXzEuYWRqdXN0VG9wUGFkZGluZygpO1xuICAgICAgICAgICAgLy8gY29uc3QgdWlEYXRhID0gW1xuICAgICAgICAgICAgLy8gICB7IGxhYmVsOiAn7IOB7ZKIIOyDgeyEuO2OmOydtOyngCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAuMDEtMDEnLCBocmVmOiAnI3Byb2R1Y3QnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuICAgICAgICAgICAgLy8gICB7IGxhYmVsOiAn7IOB7ZKIIOy5tO2KuCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2NhcnQnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuICAgICAgICAgICAgLy8gICB7IGxhYmVsOiAn66Gc6re47J24JywgZGVzY3JpcHRpb24gOicnLCBkYXRlIDonMjAyMC0wMS0wMScsIGhyZWY6ICcjbG9naW4nLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuICAgICAgICAgICAgLy8gICB7IGxhYmVsOiAn67mE67CA67KI7Zi4IOywvuq4sCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2ZvcmdvdCcsIHRhZ3M6IFsn6riw7ZqNJywgJ+uUlOyekOyduCddIH1cbiAgICAgICAgICAgIC8vIF1cbiAgICAgICAgICAgIC8vIGNvbnN0IGNjYzogYW55ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJy5qcy11aScpO1xuICAgICAgICAgICAgLy8gaWYoY2NjKSB7XG4gICAgICAgICAgICAvLyAgIGNvbnN0IHRlbXAgPSB1aURhdGEubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAgICAgICAgLy8gICAgIGNvbnN0IHR0dCA9IGl0ZW0udGFncy5tYXAoaSA9PiBgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke2l9PC9zcGFuPmApLmpvaW4oJycpXG4gICAgICAgICAgICAvLyAgICAgY29uc3QgdWlUZW1wbGF0ZSA9IGA8YSBjbGFzcz1cImNhcmRcIiBocmVmPVwiJHtpdGVtLmhyZWZ9XCI+XG4gICAgICAgICAgICAvLyAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJjYXJkLXRodW1ibmFpbFwiIHN0eWxlPVwiZm9udC1mYW1pbHk6J0R1bmtlbFNhbnMnO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtcIj4ke2l0ZW0ubGFiZWx9PC9maWd1cmU+XG4gICAgICAgICAgICAvLyAgICAgICAgIDxoMyBjbGFzcz1cImNhcmQtdGl0bGVcIj4ke2l0ZW0ubGFiZWx9PC9oMz5cbiAgICAgICAgICAgIC8vICAgICAgICAgPHRpbWUgY2xhc3M9XCJjYXJkLWRhdGVcIj4ke2l0ZW0uZGF0ZX08dGltZT5cbiAgICAgICAgICAgIC8vICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtdGFnc1wiIHJvbGU9XCJncm91cFwiPlxuICAgICAgICAgICAgLy8gICAgICAgICAgICR7dHR0fVxuICAgICAgICAgICAgLy8gICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIC8vICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhcmQtbW9yZSBpY29uLWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIj48aSBjbGFzcz1cImljb24tbW9yZVwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgIC8vICAgICAgIDwvYT5gXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHVpVGVtcGxhdGU7XG4gICAgICAgICAgICAvLyAgIH0pLmpvaW4oJycpXG4gICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKHRlbXApO1xuICAgICAgICAgICAgLy8gICBjY2MuaW5uZXJIVE1MID0gdGVtcDtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIOyehOyLnFxuICAgICAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlzcGxheS1saXN0Jyk7XG4gICAgICAgICAgICB2YXIgZ3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kaXNwbGF5LWdyaWQnKTtcbiAgICAgICAgICAgIHZhciB3b3JrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLWJvZHknKTtcbiAgICAgICAgICAgIGlmIChsaXN0ICYmIGdyaWQgJiYgd29ya3MpIHtcbiAgICAgICAgICAgICAgICBsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICB3b3Jrcy5jbGFzc0xpc3QuYWRkKCdsaXN0Jyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya3MuY2xhc3NMaXN0LnJlbW92ZSgnbGlzdCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZvY3VzQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29tbWVudFdyaXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNvbW1lbnQtd3JpdGUnKTtcbiAgICAgICAgICAgICAgICB2YXIgY29tbWVudFRleHRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1jb21tZW50LXRleHRmaWVsZCcpO1xuICAgICAgICAgICAgICAgIGlmIChjb21tZW50V3JpdGUgfHwgY29tbWVudFRleHRGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50VGV4dEZpZWxkLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRXcml0ZSAmJiBjb21tZW50V3JpdGUuY2xhc3NMaXN0LmFkZCgnaXMtZm9jdXNlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb2N1c0NvbW1lbnQoKTtcbiAgICAgICAgICAgIHVpXzEuc2V0R3JhcGgoKTtcbiAgICAgICAgICAgIGNvdW50ZG93bl8xLmNvdW50RG93bkNsb2NrKDIwLCAnZGF5cycpO1xuICAgICAgICAgICAgLy8gY2Fyb3VzZWwoKTtcbiAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC5tb2RhbCh7IHNlbGVjdG9yOiAnLmpzLW1vZGFsJyB9KTtcbiAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC50b2dnbGVDbGFzcyh7IHNlbGVjdG9yOiAnLmpzLXRvZ2dsZScgfSk7XG4gICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQuZW50ZXJUYXJnZXQoeyBzZWxlY3RvcjogJy5qcy1ob3Zlci10cmlnZ2VyJyB9KTtcbiAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC50YWJNZW51KCk7XG4gICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQuY2xvc2UoeyBzZWxlY3RvcjogJy5qcy1jbG9zZScgfSk7XG4gICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQudG9Ub3AoeyBzZWxlY3RvcjogJy5qcy10by10b3AnIH0pO1xuICAgICAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnNjcm9sbEFuaW1hdGlvbigpO1xuICAgICAgICAgICAgLy8gZXZlbnQuY3VzdG9tQ3Vyc29yKCk7XG4gICAgICAgICAgICBpbmRleF8yLmRlZmF1bHQuY2hlY2tib3goeyBjaGVja0FsbFNlbGVjdG9yOiAnLmpzLWNoZWNrYWxsJywgY2hlY2tTZWxlY3RvcjogJy5qcy1jaGVjaycgfSkuc2V0RXZlbnQoKTtcbiAgICAgICAgICAgIGluZGV4XzIuZGVmYXVsdC5maWxlKCk7XG4gICAgICAgICAgICBpbmRleF8yLmRlZmF1bHQudGV4dGFyZWEoKTtcbiAgICAgICAgICAgIGluZGV4XzIuZGVmYXVsdC5udW1iZXIoKTtcbiAgICAgICAgICAgIC8vICEgY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXG4gICAgICAgICAgICAvLyBUT0RPOiDrj4TtgZDrqLztirjqsIAg7JWE64uI6528IGV2ZW50LnRhcmdldC5wYXJlbnQg6rCAIOyVhOuLjCDqsoPsnYQg7YG066at7ZaI7J2EIOuVjCDri6Tri7nslbwg7ZWY64KYXG4gICAgICAgICAgICAvLyBjb25zdCBmaW5kQ2xhc3NSZWN1cnNpdmUgPSAoZWxlbWVudCwgY2xhc3NOYW1lLCBkZXB0aCkgPT4ge1xuICAgICAgICAgICAgLy8gLy8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcbiAgICAgICAgICAgIC8vIFx0Y29uc29sZS5sb2coJ2RlcHRoOiAnICsgZGVwdGgsIGVsZW1lbnQpO1xuICAgICAgICAgICAgLy8gXHRpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcbiAgICAgICAgICAgIC8vIH07XG4gICAgICAgICAgICAvLyB2YXIgZ2V0Q2xvc2VzdCA9IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAvLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAvLyBcdFx0aWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHJldHVybiBlbGVtO1xuICAgICAgICAgICAgLy8gXHR9XG4gICAgICAgICAgICAvLyBcdHJldHVybiBudWxsO1xuICAgICAgICAgICAgLy8gfTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRvY3VtZW50LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xuICAgICAgICAgICAgdmFyIHNjcm9sbFByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzc0JhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0LWhlYWQtcHJvZ3Jlc3MnKTtcbiAgICAgICAgICAgICAgICBpZiAoIXByb2dyZXNzQmFyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFBlcmNlbnQgPSAod2luZG93LnBhZ2VZT2Zmc2V0IC8gKGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0KSkgKiAxMDAgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNjcm9sbFBlcmNlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbmRleF8xLmRlZmF1bHQuc3RpY2t5RWxlbWVudCh7IHRhcmdldEVsZW1lbnQ6ICcucG9zdC1oZWFkJywgYWRkQ2xhc3M6ICdpcy1zdGlja3knIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsUHJvZ3Jlc3MsIHRydWUpO1xuICAgICAgICAgICAgLy8gdmFyIGkgPSAwO1xuICAgICAgICAgICAgLy8gdmFyIGltYWdlcyA9IFsnY292ZXIxLmpwZycsJ2NvdmVyMi5qcGcnXTtcbiAgICAgICAgICAgIC8vIHZhciBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY292ZXJfaW1hZ2UnKTtcbiAgICAgICAgICAgIC8vIC8vIGltYWdlLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoL2ltZy9jb3ZlcjEuanBnKScpO1xuICAgICAgICAgICAgLy8gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIFx0aW1hZ2VFbGVtZW50LmZhZGVPdXQoMTAwMCwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gXHRcdGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKCR7aW1hZ2VzW2krK119KWApO1xuICAgICAgICAgICAgLy8gXHRcdGltYWdlRWxlbWVudC5mYWRlSW4oMTAwMCk7XG4gICAgICAgICAgICAvLyBcdH0pO1xuICAgICAgICAgICAgLy8gXHRpZihpID09PSBpbWFnZXMubGVuZ3RoKSBpID0gMDtcbiAgICAgICAgICAgIC8vIH0sIDUwMDApO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFnZUhlYWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuICAgICAgICBpZiAoIXBhZ2VIZWFkRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgcGFnZXMgPSBbJyNkZXNpZ24nLCAnI2NvbnRhY3QnXTtcbiAgICAgICAgaXNXaGl0ZSA9IHBhZ2VzLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcbiAgICAgICAgaWYgKGlzV2hpdGUpIHtcbiAgICAgICAgICAgIHBhZ2VIZWFkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCctLXdoaXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYWdlSGVhZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnLS13aGl0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICB9KTtcbn0pOyB9KTtcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuLy8gXHQvLyBjb25zdCBoZWxwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRleHRmaWVsZC1oZWxwZXInKTtcbi8vIFx0Ly8gaGVscGVycy5mb3JFYWNoKGhlbHBlciA9PiBoZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XG4vLyBcdC8vIGxldCBsb2dpbkRhdGEgPSB7ZW1haWw6ICcnLCBwYXNzd29yZDogJyd9O1xuLy8gXHRjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gZG9jdW1lbnQubG9naW47XG4vLyBcdGNvbnNvbGUubG9nKGVtYWlsKTtcbi8vIFx0aWYoIWRvY3VtZW50KSByZXR1cm47XG4vLyBcdC8vIGNvbnN0IGlzRW1haWwgPSBldmVudC50YXJnZXQgPT09IGVtYWlsO1xuLy8gXHRjb25zdCBpc1Bhc3N3b3JkID0gZXZlbnQudGFyZ2V0ID09PSBwYXNzd29yZDtcbi8vIFx0Y29uc3QgaGFuZGxlVmFsaWRhdGUgPSAoeyB0YXJnZXQ6IGFueSwgdmFsaWRhdGU6IHZvaWQsIG1lc3NhZ2U6IGFueSB9KSA9PiB7XG4vLyBcdFx0aWYodmFsaWRhdGUpIHtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gJyc7XG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4vLyBcdFx0fSBlbHNlIHtcbi8vIFx0XHRcdGlmKCF0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm47XG4vLyBcdFx0XHQvLyBjb25zdCBpZCA9IHRhcmdldC5pZCB8fCB0YXJnZXQubmFtZTtcbi8vIFx0XHRcdC8vIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnZXJyb3ItJyArIGlkKTtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gbWVzc2FnZTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4vLyBcdFx0fVxuLy8gXHR9O1xuLy8gXHRpZihpc1Bhc3N3b3JkKSB7XG4vLyBcdFx0aGFuZGxlVmFsaWRhdGUoe1xuLy8gXHRcdFx0dGFyZ2V0OiBwYXNzd29yZCxcbi8vIFx0XHRcdHZhbGlkYXRlOiBpc1Bhc3N3b3JkICYmICEodmFsaWRpdHkuaXNMZW5ndGgocGFzc3dvcmQudmFsdWUsIDgpKSxcbi8vIFx0XHRcdG1lc3NhZ2U6ICfruYTrsIDrsojtmLjrpbwg65iR67CU66GcIOyeheugpe2VtOudvC4nXG4vLyBcdFx0fSk7XG4vLyBcdH1cbi8vIH0pO1xuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50ID0+IHt9LCB0cnVlKTsgLy8gYmx1ciBpcyBub3QgYnViYmxlXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKcGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFpRVUZaTEVOQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQlJWb3NiME5CUVdsRE8wRkJRMnBETEdsRVFVRnBSRHRCUVVOcVJDeG5SVUZCTkVNN1FVRkROVU1zTWtOQlFUSkZPMEZCUXpORkxIVkRRVUV5UXp0QlFVTXpReXg1UkVGQmRVUTdRVUZIZGtRc01FTkJRVEJETzBGQlF6RkRMSEZFUVVGM1JEdEJRVU40UkN4dlJVRkJOa003UVVGRE4wTXNiMFZCUVRaRE8wRkJSVGRETEhsRVFVRjVSRHRCUVVONlJDeDNSRUZCZDBRN1FVRkRlRVFzZFVOQlFYVkRPMEZCUlhaRExEUkNRVUUwUWp0QlFVVTFRaXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhGUVVGRk8wbEJRMnBETEVsQlFVMHNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWVVGQllTeERRVUZETEVOQlFVRTdTVUZEZWtVc1NVRkJTU3hEUVVGRExHTkJRV003VVVGQlJTeFBRVUZOTzBsQlJUTkNMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUVR0QlFVTjRReXhEUVVGRExFTkJRVU1zUTBGQlFUdEJRVVZHTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNaMEpCUVZNc1EwRkJReXhEUVVGQk8wRkJRMmhFTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVFN1FVRkZja1FzVTBGQlV5eGpRVUZqT3p0SlFVTnlRaXhKUVVGTkxHbENRVUZwUWl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWjBKQlFXZENMRU5CUVVNc1EwRkJRVHRKUVVNdlJTeG5Sa0ZCWjBZN1NVRkRhRVlzU1VGQlNTeERRVUZETEdsQ1FVRnBRanRSUVVGRkxFOUJRVTA3U1VGRk9VSXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRKUVVNdlF5eFpRVUZCTEdsQ1FVRnBRaXd3UTBGQlJTeHJRa0ZCYTBJc01FTkJRVVVzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRVZCUVVNN1FVRkRka1VzUTBGQlF6dEJRVVZFTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHM3TzFGQlF6VkRMR0ZCUVdFN1VVRkRZaXhYUVVGWE8xRkJRMWdzYlVKQlFWa3NSVUZCUlN4RFFVRkJPMUZCUTJRc2VVSkJRVmNzUlVGQlJTeERRVUZCTzFGQlIySXNaMEpCUVZNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVU5tTEhWQ1FVRm5RaXhGUVVGRkxFTkJRVUU3V1VGRmJFSXNiVUpCUVcxQ08xbEJRMjVDTEhWSFFVRjFSenRaUVVOMlJ5eHBSMEZCYVVjN1dVRkRha2NzWjBkQlFXZEhPMWxCUTJoSExHOUhRVUZ2Unp0WlFVTndSeXhKUVVGSk8xbEJRMG9zYTBWQlFXdEZPMWxCUTJ4RkxGbEJRVms3V1VGRFdpeHpRMEZCYzBNN1dVRkRkRU1zZVVKQlFYbENPMWxCUTNwQ0xDdEZRVUVyUlR0WlFVTXZSU3dyUkVGQkswUTdXVUZETDBRc2VVcEJRWGxLTzFsQlEzcEtMRzlFUVVGdlJEdFpRVU53UkN4eFJFRkJjVVE3V1VGRGNrUXNLME5CUVN0RE8xbEJReTlETEcxQ1FVRnRRanRaUVVOdVFpeHBRa0ZCYVVJN1dVRkRha0lzYVVkQlFXbEhPMWxCUTJwSExHTkJRV003V1VGRFpDeDVRa0ZCZVVJN1dVRkRla0lzWjBKQlFXZENPMWxCUTJoQ0xIVkNRVUYxUWp0WlFVTjJRaXd3UWtGQk1FSTdXVUZETVVJc1NVRkJTVHRaUVVWS0xFdEJRVXM3V1VGRFRDeEpRVUZOTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVFN1dVRkRka1FzU1VGQlRTeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkJPMWxCUTNaRUxFbEJRVTBzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVUU3V1VGRGNrUXNTVUZCU1N4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFdEJRVXNzUlVGQlJUdG5Ra0ZEZWtJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGQkxFdEJRVXM3YjBKQlEyeERMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMjlDUVVOcVF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFUdHZRa0ZEY0VNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1owSkJRemRDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMmRDUVVOR0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlFTeExRVUZMTzI5Q1FVTnNReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHR2UWtGRGNFTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdiMEpCUTJwRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8yZENRVU5vUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRoUVVOSU8xbEJSVVFzU1VGQlRTeFpRVUZaTEVkQlFVYzdaMEpCUTI1Q0xFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUVR0blFrRkRhRVVzU1VGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNRMEZCUVR0blFrRkRNMFVzU1VGQlNTeFpRVUZaTEVsQlFVa3NaMEpCUVdkQ0xFVkJRVVU3YjBKQlEzQkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4N2QwSkJRemxDTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlRzMFFrRkRhRU1zV1VGQldTeEpRVUZKTEZsQlFWa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzNkQ1FVTXhSQ3hEUVVGRExFTkJRVU03YjBKQlJrWXNRMEZGUlN4RFFVTklMRU5CUVVFN2FVSkJRMFk3V1VGRFNDeERRVUZETEVOQlFVRTdXVUZEUkN4WlFVRlpMRVZCUVVVc1EwRkJRVHRaUVVOa0xHRkJRVkVzUlVGQlJTeERRVUZCTzFsQlExWXNNRUpCUVdNc1EwRkJReXhGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdXVUZETVVJc1kwRkJZenRaUVVWa0xHVkJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFpRVU4wUXl4bFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEZsQlFWa3NSVUZCUlN4RFFVRkRMRU5CUVVFN1dVRkROME1zWlVGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRU5CUVVFN1dVRkRjRVFzWlVGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkJPMWxCUTJZc1pVRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGQk8xbEJRM1JETEdWQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzV1VGQldTeEZRVUZGTEVOQlFVTXNRMEZCUVR0WlFVTjJReXhsUVVGTExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVRTdXVUZEZGtJc2QwSkJRWGRDTzFsQlEzaENMR1ZCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hqUVVGakxFVkJRVVVzWVVGQllTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVUU3V1VGRE0wWXNaVUZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8xbEJRMW9zWlVGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkJPMWxCUTJoQ0xHVkJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUVR0WlFVVmtMR2xFUVVGcFJEdFpRVU5xUkN3MFJFRkJORVE3V1VGRE5VUXNPRVJCUVRoRU8xbEJRemxFTEN0RFFVRXJRenRaUVVNdlF5dzBRMEZCTkVNN1dVRkROVU1zT0VSQlFUaEVPMWxCUXpsRUxEWkZRVUUyUlR0WlFVTTNSU3hMUVVGTE8xbEJSVXdzT0VOQlFUaERPMWxCUXpsRExDdEVRVUVyUkR0WlFVTXZSQ3cyUTBGQk5rTTdXVUZETjBNc1MwRkJTenRaUVVOTUxHZENRVUZuUWp0WlFVTm9RaXhMUVVGTE8xbEJSVXdzYTBWQlFXdEZPMWxCUld4RkxFbEJRVTBzWTBGQll5eEhRVUZITzJkQ1FVTnlRaXhKUVVGTkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMSEZDUVVGeFFpeERRVUZETEVOQlFVRTdaMEpCUXpsRkxFbEJRVWtzUTBGQlF5eFhRVUZYTzI5Q1FVRkZMRTlCUVUwN1owSkJSWGhDTEVsQlFVMHNZVUZCWVN4SFFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJSeXhEUVVGQk8yZENRVU14Unl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUjBGQlJ5eGhRVUZoTEVOQlFVRTdXVUZEZWtNc1EwRkJReXhEUVVGQk8xbEJSVVFzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJUdG5Ra0ZEYUVNc1pVRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTEdGQlFXRXNSVUZCUlN4WlFVRlpMRVZCUVVVc1VVRkJVU3hGUVVGRkxGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVRTdXVUZETjBVc1EwRkJReXhEUVVGRExFTkJRVUU3V1VGRFJpeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEdOQlFXTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRaUVVOMlJDeGhRVUZoTzFsQlEySXNORU5CUVRSRE8xbEJRelZETERaRVFVRTJSRHRaUVVNM1JDdzBSRUZCTkVRN1dVRkROVVFzTUVKQlFUQkNPMWxCUXpGQ0xITkRRVUZ6UXp0WlFVTjBReXhwUlVGQmFVVTdXVUZEYWtVc0swSkJRU3RDTzFsQlF5OUNMRTlCUVU4N1dVRkRVQ3hyUTBGQmEwTTdXVUZEYkVNc1dVRkJXVHRSUVVWa0xFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlIwa3NaVUZCWlN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zVTBGQlV5eERRVUZETEVOQlFVRTdVVUZEZEVVc1NVRkJTU3hEUVVGRExHVkJRV1U3V1VGQlJTeHpRa0ZCVFR0UlFVVjBRaXhMUVVGTExFZEJRVWNzUTBGQlF5eFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVFN1VVRkRMMElzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0UlFVTndSQ3hKUVVGSkxFOUJRVThzUlVGQlJUdFpRVU5ZTEdWQlFXVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzFOQlEzcERPMkZCUVUwN1dVRkRUQ3hsUVVGbExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRUUVVNMVF6czdPMHRCZDBSR0xFTkJRVU1zUTBGQlFUdEJRVVZHTEdkRVFVRm5SRHRCUVVOb1JDeHpSVUZCYzBVN1FVRkRkRVVzWjBWQlFXZEZPMEZCUTJoRkxHbEVRVUZwUkR0QlFVVnFSQ3dyUTBGQkswTTdRVUZETDBNc2RVSkJRWFZDTzBGQlEzWkNMSGxDUVVGNVFqdEJRVVY2UWl3NFEwRkJPRU03UVVGRE9VTXNhVVJCUVdsRU8wRkJSV3BFTEN0RlFVRXJSVHRCUVVNdlJTeHRRa0ZCYlVJN1FVRkRia0lzZFVSQlFYVkVPMEZCUTNaRUxDdERRVUVyUXp0QlFVTXZReXgxUkVGQmRVUTdRVUZEZGtRc1lVRkJZVHRCUVVOaUxEUkRRVUUwUXp0QlFVTTFReXcyUTBGQk5rTTdRVUZETjBNc1owVkJRV2RGTzBGQlEyaEZMRzlFUVVGdlJEdEJRVU53UkN4dlJFRkJiMFE3UVVGRGNFUXNkMFJCUVhkRU8wRkJRM2hFTEUxQlFVMDdRVUZEVGl4TlFVRk5PMEZCUlU0c2IwSkJRVzlDTzBGQlEzQkNMSEZDUVVGeFFqdEJRVU55UWl4MVFrRkJkVUk3UVVGRGRrSXNjMFZCUVhORk8wRkJRM1JGTEdkRFFVRm5RenRCUVVOb1F5eFJRVUZSTzBGQlExSXNTMEZCU3p0QlFVVk1MRTFCUVUwN1FVRkZUaXc0UlVGQk9FVTdRVUZET1VVc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGQkxFdEJRVXNzU1VGQlNTeFBRVUZCTEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1JVRkJkRUlzUTBGQmMwSXNRMEZCUXl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyDruYTrj5nquLAg7ZWo7IiY64qUIOumrO2EtOydhCDtlbTslbztlZzri6QuIO2UhOuhnOuvuOyKpOulvCDrsJjtmZguXG52YXIgcm91dGVQYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhZ2UgPSBoYXNoID8gXCIvdmlld3MvXCIgKyBoYXNoLnN1YnN0cmluZygxKSArIFwiLmh0bWxcIiA6ICcvdmlld3MvcHJvZmlsZS5odG1sJztcbiAgICByZXR1cm4gZmV0Y2gocGFnZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIDQwNCB8fCA1MDBcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKTtcbiAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoaHRtbCkge1xuICAgICAgICB2YXIgdmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3Jyk7XG4gICAgICAgIGlmICghdmlldylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmlldy5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAvLyB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoeyBuYW1lOiAndGVzdGVyJyB9LCAnZGQnLCBoYXNoLnN1YnN0cmluZygxKSk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gY29uc29sZS53YXJuKCdyb3V0ZXI6ICcsIGVycm9yKTsgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gcm91dGVQYWdlO1xuLy8gaGFzaCDrp5Dqs6Ag7YG066at7ZWY64qUIOyInOqwhOyXkCDqsJLsnYQg7JWM7JWE7JW8IO2VqC4gZGF0YSBhdHRyIG9yIGhhc2hcbi8vIGNvbnN0IFJvdXRlciA9IChuYW1lLCByb3V0ZXMpID0+IHtcbi8vIFx0cmV0dXJuIHsgbmFtZTogbmFtZSwgcm91dGVzOiByb3V0ZXMgfTtcbi8vIH07XG4vLyB2YXIgYWN0aXZlUm91dGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaHJlZl0nKSk7XG4vLyBhY3RpdmVSb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiByb3V0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5hdmlnYXRlKSk7XG4vLyBjb25zdCBteUZpcnN0Um91dGVyID0gbmV3IFJvdXRlcignbXlGaXJzdFJvdXRlcicsIFtcbi8vIFx0eyBwYXRoOiAnLycsIG5hbWU6ICdpbmRleCcgfSxcbi8vIF0pO1xuLy8gY29uc3QgbmF2aWdhdGUgPSAoZXZlbnQpID0+IHtcbi8vIFx0Y29uc3Qgcm91dGUgPSBmaW5kQ3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzBdLnZhbHVlO1xuLy8gXHRjb25zdCByb3V0ZUluZm8gPSBteUZpcnN0Um91dGVyLnJvdXRlcy5maW5kKHIgPT4gci5wYXRoID09PSByb3V0ZSk7XG4vLyBcdGlmKCFyb3V0ZUluZm8pIHtcbi8vIFx0XHQvL3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsICdlcnJvcicpO1xuLy8gXHRcdHZpZXcuaW5uZXJIVE1MID0gJ05vIHJvdXRlIGV4aXN0cyB3aXRoIHRoaXMgcGF0aCc7XG4vLyBcdH0gZWxzZSB7XG4vLyBcdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJycsIHJvdXRlSW5mby5wYXRoKTtcbi8vIFx0XHRmZXRjaChgL3ZpZXdzLyR7cm91dGVJbmZvLm5hbWV9Lmh0bWxgKVxuLy8gXHRcdFx0LnRoZW4ocmVzID0+IHJlcy50ZXh0KCkpXG4vLyBcdFx0XHQudGhlbihodG1sID0+IHZpZXcuaW5uZXJIVE1MID0gaHRtbClcbi8vIFx0XHRcdC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGZldGNoIHBhZ2U6ICcsIGVycm9yKSk7XG4vLyBcdH1cbi8vIH07XG4vLyB7XG4vLyBcdG1ldGhvZDogJ1BPU1QnLFxuLy8gXHRib2R5OiAndGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnTXkgYXdlc29tZSBuZXcgYXJ0aWNsZScpICsgJyZib2R5PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1RoaXMgaXMgdGhlIHRleHQgb2YgbXkgYXJ0aWNsZScpLFxuLy8gXHRoZWFkZXI6IHtcbi8vIFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4vLyBcdH0sXG4vLyBcdHJlZmVycmVyOiAnbm8tcmVmZXJyZXInXG4vLyB9XG4vLyBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4vLyBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKTtcbi8vIHZpZXcuaW5uZXJIVE1MID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xuLy8gcmVzcG9uc2UudGV4dCgpIC8vIHJlc3BvbnNlLmpzb24oKVxuLy8gdG9Mb3dlckNhc2UoKSDtlbTso7zquLBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2ljbTkxZEdWeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc09FSkJRVGhDTzBGQlF6bENMRWxCUVUwc1UwRkJVeXhIUVVGSE8wbEJRMWdzU1VGQlFTd3lRa0ZCU1N4RFFVRnhRanRKUVVNdlFpeEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVlVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRKUVVVdlJTeFBRVUZQTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNN1UwRkRhRUlzU1VGQlNTeERRVUZETEZWQlFVRXNVVUZCVVR0UlFVTmlMR0ZCUVdFN1VVRkRZaXhKUVVGSExGRkJRVkVzUTBGQlF5eEZRVUZGTzFsQlFVVXNUMEZCVHl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03TzFsQlEyeERMRTlCUVU4c1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTjBReXhEUVVGRExFTkJRVU03VTBGRFJDeEpRVUZKTEVOQlFVTXNWVUZCUVN4SlFVRkpPMUZCUTFRc1NVRkJUU3hKUVVGSkxFZEJRVWNzVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVNM1F5eEpRVUZITEVOQlFVTXNTVUZCU1R0WlFVRkZMRTlCUVU4N1VVRkZha0lzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkRkRUlzZVVWQlFYbEZPMGxCUXpGRkxFTkJRVU1zUTBGQlF6dFRRVU5FTEV0QlFVc3NRMEZCUXl4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhGUVVFdlFpeERRVUVyUWl4RFFVRkRMRU5CUVVNN1FVRkRia1FzUTBGQlF5eERRVUZETzBGQlJVWXNhMEpCUVdVc1UwRkJVeXhEUVVGRE8wRkJSWHBDTEN0RFFVRXJRenRCUVVNdlF5eHhRMEZCY1VNN1FVRkRja01zTUVOQlFUQkRPMEZCUXpGRExFdEJRVXM3UVVGRFRDeHpSVUZCYzBVN1FVRkRkRVVzTkVWQlFUUkZPMEZCUXpWRkxITkVRVUZ6UkR0QlFVTjBSQ3hwUTBGQmFVTTdRVUZEYWtNc1RVRkJUVHRCUVVOT0xHZERRVUZuUXp0QlFVTm9ReXgzUkVGQmQwUTdRVUZEZUVRc2RVVkJRWFZGTzBGQlEzWkZMRzlDUVVGdlFqdEJRVU53UWl4cFJFRkJhVVE3UVVGRGFrUXNkVVJCUVhWRU8wRkJRM1pFTEZsQlFWazdRVUZEV2l4elJVRkJjMFU3UVVGRGRFVXNNa05CUVRKRE8wRkJRek5ETERoQ1FVRTRRanRCUVVNNVFpd3dRMEZCTUVNN1FVRkRNVU1zYjBWQlFXOUZPMEZCUTNCRkxFdEJRVXM3UVVGRFRDeExRVUZMTzBGQlJVd3NTVUZCU1R0QlFVTktMRzFDUVVGdFFqdEJRVU51UWl4dlNVRkJiMGs3UVVGRGNFa3NZVUZCWVR0QlFVTmlMSFZEUVVGMVF6dEJRVU4yUXl4TlFVRk5PMEZCUTA0c01rSkJRVEpDTzBGQlF6TkNMRWxCUVVrN1FVRkRTaXhyUTBGQmEwTTdRVUZEYkVNc2VVUkJRWGxFTzBGQlEzcEVMQ3RFUVVFclJEdEJRVU12UkN4eFEwRkJjVU03UVVGRGNrTXNiMEpCUVc5Q0luMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRpbmcnKTtcbiAgICBpZiAoIWxvYWRlckVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbG9hZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XG4gICAgICAgIH0sIDApO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5jaGVja0Jyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEJyb3dzZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJyb3dzZXInKTtcbiAgICBpZiAoIUJyb3dzZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodXNlckFnZW50LmluZGV4T2YoJ21zaWUnKSA+IC0xIHx8IHVzZXJBZ2VudC5pbmRleE9mKCd0cmlkZW50JykgPiAtMSkge1xuICAgICAgICBCcm93c2VyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgY29uc29sZS5sb2codXNlckFnZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2Nocm9tZScpICE9PSAtMSkge1xuICAgICAgICBjb25zb2xlLmxvZyh1c2VyQWdlbnQsICftgazroawnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5nb29nbGVBbmFseXRpY3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gPHNjcmlwdCBhc3luYyBzcmM9XCJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTgzNTMxMjM5LTFcIj48L3NjcmlwdD5cbiAgICAvLyB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcbiAgICAvLyBmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9XG4gICAgLy8gZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTtcbiAgICAvLyBndGFnKCdjb25maWcnLCAnVUEtODM1MzEyMzktMScpO1xufTtcbmV4cG9ydHMuYWRqdXN0VG9wUGFkZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1uYXZiYXInKTtcbiAgICBpZiAoIWhlYWRlckVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgZm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRCb2R5TWFyZ2luVG9wKGhlYWRlckVsZW1lbnQpOyB9O1xuICAgIHNldEJvZHlNYXJnaW5Ub3AoaGVhZGVyRWxlbWVudCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7IH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pOyB9KTtcbiAgICAvLyDsiqTsvZTtlIRcbiAgICAvLyDtlajsiJjripQg7J247J6Q66W8IOuwm+uKlCDqsoPsnbQg7KKL64ukLi4uXG4gICAgLy8g7J247ZKL7J20IOyeiOqzoCDrpqzthLTsnbQg7J6I64ukLi4uXG59O1xuZnVuY3Rpb24gc2V0Qm9keU1hcmdpblRvcChoZWFkZXJFbGVtZW50KSB7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBpc0ZpeGVkSGVhZGVyID0gZ2V0Q29tcHV0ZWRTdHlsZShoZWFkZXJFbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcbiAgICBpZiAoaXNGaXhlZEhlYWRlcikge1xuICAgICAgICBib2R5LnN0eWxlLm1hcmdpblRvcCA9IGhlYWRlckVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGJvZHkuc3R5bGUubWFyZ2luVG9wID0gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHOWhaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklteHZZV1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJZU3hSUVVGQkxFMUJRVTBzUjBGQlJ6dEpRVU53UWl4SlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUXpORUxFbEJRVWtzUTBGQlF5eGhRVUZoTzFGQlFVVXNUMEZCVFR0SlFVTnNRaXhKUVVGQkxHOUNRVUZKTEVOQlFXRTdTVUZGZWtJc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVNNVFpeFZRVUZWTEVOQlFVTTdXVUZEVkN4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0WlFVTjRReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRSUVVOd1F5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5HTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRSUVVNMVF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdEpRVU5xUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNXVUZCV1N4SFFVRkhPMGxCUXpGQ0xFbEJRVTBzWTBGQll5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRGVrVXNTVUZCU1N4RFFVRkRMR05CUVdNN1VVRkJSU3hQUVVGTk8wbEJSVE5DTEVsQlFVMHNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVRTdTVUZGYmtRc1NVRkJTU3hUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3VVVGRGRrVXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZCTzFGQlEzUkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdTMEZEZGtJN1UwRkJUU3hKUVVGSkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3VVVGRE4wTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdTMEZETjBJN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRldTeFJRVUZCTEdWQlFXVXNSMEZCUnp0SlFVTTNRaXd3UmtGQk1FWTdTVUZETVVZc05rTkJRVFpETzBsQlF6ZERMRGhEUVVFNFF6dEpRVU01UXl3d1FrRkJNRUk3U1VGRE1VSXNiVU5CUVcxRE8wRkJRM0pETEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1owSkJRV2RDTEVkQlFVYzdTVUZET1VJc1NVRkJUU3hoUVVGaExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRKUVVNeFJDeEpRVUZKTEVOQlFVTXNZVUZCWVR0UlFVRkZMRTlCUVUwN1NVRkZNVUlzU1VGQlRTeEZRVUZGTEVkQlFVY3NZMEZCVFN4UFFVRkJMR2RDUVVGblFpeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRXZRaXhEUVVFclFpeERRVUZCTzBsQlJXaEVMR2RDUVVGblFpeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUXk5Q0xFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVVzWTBGQlRTeFBRVUZCTEhGQ1FVRnhRaXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUY2UWl4RFFVRjVRaXhEUVVGRExFTkJRVUU3U1VGRGJFVXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4alFVRk5MRTlCUVVFc2NVSkJRWEZDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVhwQ0xFTkJRWGxDTEVOQlFVTXNRMEZCUVR0SlFVVnNSU3hOUVVGTk8wbEJRMDRzYzBKQlFYTkNPMGxCUTNSQ0xHMUNRVUZ0UWp0QlFVTnlRaXhEUVVGRExFTkJRVUU3UVVGRlJDeFRRVUZUTEdkQ1FVRm5RaXhEUVVGRExHRkJRV0U3U1VGRE4wSXNTVUZCUVN4dlFrRkJTU3hEUVVGclFqdEpRVU01UWl4SlFVRk5MR0ZCUVdFc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhSUVVGUkxFdEJRVXNzVDBGQlR5eERRVUZCTzBsQlJURkZMRWxCUVVrc1lVRkJZU3hGUVVGRk8xRkJRMnBDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGTkxHRkJRV0VzUTBGQlF5eFpRVUZaTEU5QlFVa3NRMEZCUVR0UlFVTjRSQ3hQUVVGTk8wdEJRMUE3U1VGRFJDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVUU3UVVGRE1VSXNRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRHcmFwaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZ3JhcGhJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1ncmFwaCAuZ3JhcGgtaXRlbScpO1xuICAgIGlmICghZ3JhcGhJdGVtcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGdyYXBoSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgZ3JhcGhJdGVtQmFyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS1iYXInKTtcbiAgICAgICAgdmFyIGdyYXBoSXRlbVZhbHVlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGgtaXRlbS12YWx1ZScpO1xuICAgICAgICBpZiAoIWdyYXBoSXRlbUJhciB8fCAhZ3JhcGhJdGVtVmFsdWUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBncmFwaFZhbHVlID0gcGFyc2VJbnQoZ3JhcGhJdGVtVmFsdWUuaW5uZXJUZXh0KTtcbiAgICAgICAgZ3JhcGhJdGVtQmFyLnN0eWxlLmhlaWdodCA9IGdyYXBoVmFsdWUgKyBcInB4XCI7XG4gICAgICAgIGdyYXBoSXRlbVZhbHVlLnN0eWxlLmJvdHRvbSA9IGdyYXBoVmFsdWUgKyBcInB4XCI7XG4gICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZFdrdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUoxYVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZoTEZGQlFVRXNVVUZCVVN4SFFVRkhPMGxCUTNSQ0xFbEJRVTBzVlVGQlZTeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGQk8wbEJRM0pGTEVsQlFVa3NRMEZCUXl4VlFVRlZPMUZCUVVVc1QwRkJUVHRKUVVWMlFpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenRSUVVONFFpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGakxHbENRVUZwUWl4RFFVRkRMRU5CUVVFN1VVRkRNVVVzU1VGQlRTeGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJZeXh0UWtGQmJVSXNRMEZCUXl4RFFVRkJPMUZCUXpsRkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4alFVRmpPMWxCUVVVc1QwRkJUVHRSUVVVMVF5eEpRVUZOTEZWQlFWVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzFGQlJYSkVMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZOTEZWQlFWVXNUMEZCU1N4RFFVRkJPMUZCUXpkRExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRk5MRlZCUVZVc1QwRkJTU3hEUVVGQk8wbEJRMnBFTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1EwRkJReXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2Fyb3VzZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhdGVnb3J5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcicpO1xuICAgIGlmICghY2F0ZWdvcnkpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgY2F0ZWdvcnlMaXN0ID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvcignLnNsaWRlci12aWV3ZXInKTtcbiAgICB2YXIgY2F0ZWdvcnlMaXN0U2xpZGUgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyLXZpZXdlciA+IGJ1dHRvbicpO1xuICAgIHZhciBjYXRlZ29yeU5hdmlnYXRpb25QcmV2ID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvcignLnNsaWRlci1hcnJvd3MtcHJldicpO1xuICAgIHZhciBjYXRlZ29yeU5hdmlnYXRpb25OZXh0ID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvcignLnNsaWRlci1hcnJvd3MtbmV4dCcpO1xuICAgIHZhciBjYXRlZ29yeURvdHMgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyLWRvdHMtZG90Jyk7XG4gICAgaWYgKCFjYXRlZ29yeUxpc3QgfHwgIWNhdGVnb3J5TGlzdFNsaWRlIHx8ICFjYXRlZ29yeU5hdmlnYXRpb25QcmV2IHx8ICFjYXRlZ29yeU5hdmlnYXRpb25OZXh0IHx8ICFjYXRlZ29yeURvdHMpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgY2F0ZWdvcnlDb250YWluZXJXaWR0aCA9IGNhdGVnb3J5TGlzdC5vZmZzZXRXaWR0aDtcbiAgICB2YXIgc3VtID0gMDtcbiAgICBjYXRlZ29yeUxpc3RTbGlkZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAoc3VtICs9IGl0ZW0ub2Zmc2V0V2lkdGgpOyB9KTtcbiAgICBjYXRlZ29yeU5hdmlnYXRpb25OZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9OZXh0KTtcbiAgICBjYXRlZ29yeU5hdmlnYXRpb25QcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9QcmV2KTtcbiAgICBjYXRlZ29yeURvdHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgfSk7IH0pO1xuICAgIGNhdGVnb3J5TGlzdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQ7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzY3JvbGwtbGVmdCcsIHNjcm9sbExlZnQsICdvZmZzZXQtd2lkdGgnLCBjYXRlZ29yeUNvbnRhaW5lcldpZHRoKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiB0b1ByZXYoKSB7XG4gICAgICAgIGlmICghY2F0ZWdvcnlMaXN0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXRlZ29yeUxpc3Quc2Nyb2xsTGVmdCAtPSAxMDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvTmV4dCgpIHtcbiAgICAgICAgaWYgKCFjYXRlZ29yeUxpc3QpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0ICs9IDEwMDtcbiAgICAgICAgLy8gaWYoc3VtID4gY2F0ZWdvcnlDb250YWluZXJXaWR0aCkge31cbiAgICAgICAgLy8gY29uc3QgdHR0ID0gMTAwICsgJ3B4JztcbiAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlci12aWV3ZXInKS5zdHlsZS50cmFuc2Zvcm0gKz0gJ3RyYW5zbGF0ZVgoJyt0dHQrJyknO1xuICAgIH1cbn07XG5leHBvcnRzLnNldERhcmttb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkYXJrbW9kZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kYXJrbW9kZScpO1xuICAgIGlmICghZGFya21vZGVCdXR0b24pXG4gICAgICAgIHJldHVybjtcbiAgICBsb2FkVGhlbWUoKTtcbiAgICBkYXJrbW9kZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHR0KTtcbn07XG5mdW5jdGlvbiB0dCgpIHtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2Rhcmttb2RlJyk7XG4gICAgdmFyIGlzRGFya21vZGUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygnZGFya21vZGUnKTtcbiAgICBpZiAoaXNEYXJrbW9kZSkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCAnZGFya21vZGUnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0aGVtZScpO1xuICAgICAgICAvLyBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsb2FkVGhlbWUoKSB7XG4gICAgdmFyIGxhc3RUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpO1xuICAgIGlmICghbGFzdFRoZW1lKVxuICAgICAgICByZXR1cm47XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGxhc3RUaGVtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMlYwUkdGeWEwMXZaR1V1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnpaWFJFWVhKclRXOWtaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRmhMRkZCUVVFc1VVRkJVU3hIUVVGSE8wbEJRM1JDTEVsQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdTVUZEYkVRc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZOTzBsQlJYSkNMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlFUdEpRVU14UlN4SlFVRk5MR2xDUVVGcFFpeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQll5eDVRa0ZCZVVJc1EwRkJReXhEUVVGQk8wbEJRek5HTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBsQlF6VkZMRWxCUVUwc2MwSkJRWE5DTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkJPMGxCUXpWRkxFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGQk8wbEJSV3hGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFbEJRVWtzUTBGQlF5eFpRVUZaTzFGQlFVVXNUMEZCVFR0SlFVVjBTQ3hKUVVGTkxITkNRVUZ6UWl4SFFVRkhMRmxCUVZrc1EwRkJReXhYUVVGWExFTkJRVUU3U1VGRGRrUXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJSVmdzYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzU1VGQlNTeEpRVUZKTEU5QlFVRXNRMEZCUXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUY2UWl4RFFVRjVRaXhEUVVGRExFTkJRVUU3U1VGRk5VUXNjMEpCUVhOQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzBsQlEzaEVMSE5DUVVGelFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0SlFVTjRSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHl4SlFVRkpMRTlCUVVFc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hqUVVGUExFTkJRVU1zUTBGQlF5eEZRVUV6UXl4RFFVRXlReXhEUVVGRExFTkJRVUU3U1VGRk5VVXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlR0UlFVTTVRaXhKUVVGQkxHOURRVUZWTEVOQlFXbENPMUZCUTI1RExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RlFVRkZMRlZCUVZVc1JVRkJSU3hqUVVGakxFVkJRVVVzYzBKQlFYTkNMRU5CUVVNc1EwRkJRVHRKUVVOb1JpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVVkdMRk5CUVZNc1RVRkJUVHRSUVVOaUxFbEJRVWtzUTBGQlF5eFpRVUZaTzFsQlFVVXNUMEZCVFR0UlFVTjZRaXhaUVVGWkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVkQlFVY3NRMEZCUVR0SlFVTm9ReXhEUVVGRE8wbEJRMFFzVTBGQlV5eE5RVUZOTzFGQlEySXNTVUZCU1N4RFFVRkRMRmxCUVZrN1dVRkJSU3hQUVVGTk8xRkJRM3BDTEZsQlFWa3NRMEZCUXl4VlFVRlZMRWxCUVVrc1IwRkJSeXhEUVVGQk8xRkJRemxDTEhORFFVRnpRenRSUVVOMFF5d3dRa0ZCTUVJN1VVRkRNVUlzY1VaQlFYRkdPMGxCUTNaR0xFTkJRVU03UVVGRFNDeERRVUZETEVOQlFVRTdRVUZGV1N4UlFVRkJMRmRCUVZjc1IwRkJSenRKUVVONlFpeEpRVUZOTEdOQlFXTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZCTzBsQlF6ZEVMRWxCUVVrc1EwRkJReXhqUVVGak8xRkJRVVVzVDBGQlRUdEpRVVV6UWl4VFFVRlRMRVZCUVVVc1EwRkJRVHRKUVVOWUxHTkJRV01zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZET1VNc1EwRkJReXhEUVVGQk8wRkJSVVFzVTBGQlV5eEZRVUZGTzBsQlExUXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkJPMGxCUlRGRExFbEJRVTBzVlVGQlZTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVTXZSQ3hKUVVGSkxGVkJRVlVzUlVGQlJUdFJRVU5rTEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZCTzB0QlF6RkRPMU5CUVUwN1VVRkRUQ3haUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMUZCUTJoRExIZENRVUYzUWp0TFFVTjZRanRCUVVOSUxFTkJRVU03UVVGRlJDeFRRVUZUTEZOQlFWTTdTVUZEYUVJc1NVRkJUU3hUUVVGVExFZEJRVWNzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRKUVVNdlF5eEpRVUZKTEVOQlFVTXNVMEZCVXp0UlFVRkZMRTlCUVUwN1NVRkZkRUlzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzBGQlEzaERMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY291bnREb3duQ2xvY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBmb3JtYXQpIHtcbiAgICBpZiAobnVtYmVyID09PSB2b2lkIDApIHsgbnVtYmVyID0gMTAwOyB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdm9pZCAwKSB7IGZvcm1hdCA9ICdzZWNvbmRzJzsgfVxuICAgIHZhciBkYXlzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kYXlzJyk7XG4gICAgdmFyIGhvdXJzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1ob3VycycpO1xuICAgIHZhciBtaW51dGVzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1taW51dGVzJyk7XG4gICAgdmFyIHNlY29uZHNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNlY29uZHMnKTtcbiAgICBpZiAoIWRheXNFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgY29udmVydEZvcm1hdChmb3JtYXQpO1xuICAgIGZ1bmN0aW9uIGNvbnZlcnRGb3JtYXQoZm9ybWF0KSB7XG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZXIobnVtYmVyKTtcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcihudW1iZXIgKiA2MCk7XG4gICAgICAgICAgICBjYXNlICdob3Vycyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVyKG51bWJlciAqIDYwICogNjApO1xuICAgICAgICAgICAgY2FzZSAnZGF5cyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVyKG51bWJlciAqIDYwICogNjAgKiAyNCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGltZXIoc2Vjb25kcykge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIHRoZW4gPSBub3cgKyBzZWNvbmRzICogMTAwMDtcbiAgICAgICAgdmFyIGNvdW50ZG93biA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWNvbmRzTGVmdCA9IE1hdGgucm91bmQoKHRoZW4gLSBEYXRlLm5vdygpKSAvIDEwMDApO1xuICAgICAgICAgICAgaWYgKHNlY29uZHNMZWZ0IDw9IDApIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGNvdW50ZG93bik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkYXlzRWxlbWVudCB8fCAhaG91cnNFbGVtZW50IHx8ICFtaW51dGVzRWxlbWVudCB8fCAhc2Vjb25kc0VsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZGF5c0VsZW1lbnQuaW5uZXJIVE1MID0gXCJcIiArIE1hdGguZmxvb3Ioc2Vjb25kc0xlZnQgLyA4NjQwMCk7XG4gICAgICAgICAgICBob3Vyc0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIiArIE1hdGguZmxvb3IoKHNlY29uZHNMZWZ0ICUgODY0MDApIC8gMzYwMCk7XG4gICAgICAgICAgICBtaW51dGVzRWxlbWVudC5pbm5lclRleHQgPSBcIlwiICsgTWF0aC5mbG9vcigoKHNlY29uZHNMZWZ0ICUgODY0MDApICUgMzYwMCkgLyA2MCk7XG4gICAgICAgICAgICBzZWNvbmRzRWxlbWVudC5pbm5lclRleHQgPSBcIlwiICsgKHNlY29uZHNMZWZ0ICUgNjAgPCAxMCA/IFwiMFwiICsgc2Vjb25kc0xlZnQgJSA2MCA6IHNlY29uZHNMZWZ0ICUgNjApO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5MWJuUmtiM2R1TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lZMjkxYm5Sa2IzZHVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFXRXNVVUZCUVN4alFVRmpMRWRCUVVjc1ZVRkJReXhOUVVGWkxFVkJRVVVzVFVGQmEwSTdTVUZCYUVNc2RVSkJRVUVzUlVGQlFTeFpRVUZaTzBsQlFVVXNkVUpCUVVFc1JVRkJRU3hyUWtGQmEwSTdTVUZETjBRc1NVRkJUU3hYUVVGWExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRKUVVOdVJTeEpRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxGZEJRVmNzUTBGQlF5eERRVUZCTzBsQlEzSkZMRWxCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRla1VzU1VGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXhoUVVGaExFTkJRVU1zUTBGQlFUdEpRVU42UlN4SlFVRkpMRU5CUVVNc1YwRkJWenRSUVVGRkxFOUJRVTA3U1VGRmVFSXNZVUZCWVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJSWEpDTEZOQlFWTXNZVUZCWVN4RFFVRkRMRTFCUVUwN1VVRkRNMElzVVVGQlVTeE5RVUZOTEVWQlFVVTdXVUZEWkN4TFFVRkxMRk5CUVZNN1owSkJRMW9zVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1dVRkRkRUlzUzBGQlN5eFRRVUZUTzJkQ1FVTmFMRTlCUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUVR0WlFVTXpRaXhMUVVGTExFOUJRVTg3WjBKQlExWXNUMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUVR0WlFVTm9ReXhMUVVGTExFMUJRVTA3WjBKQlExUXNUMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVFN1UwRkRkRU03U1VGRFNDeERRVUZETzBsQlJVUXNVMEZCVXl4TFFVRkxMRU5CUVVNc1QwRkJUenRSUVVOd1FpeEpRVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVUU3VVVGRGRFSXNTVUZCVFN4SlFVRkpMRWRCUVVjc1IwRkJSeXhIUVVGSExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVRTdVVUZEYWtNc1NVRkJUU3hUUVVGVExFZEJRVWNzVjBGQlZ5eERRVUZETzFsQlF6VkNMRWxCUVUwc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVFN1dVRkRNVVFzU1VGQlNTeFhRVUZYTEVsQlFVa3NRMEZCUXl4RlFVRkZPMmRDUVVOd1FpeGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVFN1owSkJRM2hDTEU5QlFVMDdZVUZEVUR0WlFVTkVMRWxCUVVrc1EwRkJReXhYUVVGWExFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4alFVRmpMRWxCUVVrc1EwRkJReXhqUVVGak8yZENRVUZGTEU5QlFVMDdXVUZETDBVc1YwRkJWeXhEUVVGRExGTkJRVk1zUjBGQlJ5eExRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhIUVVGSExFdEJRVXNzUTBGQlJ5eERRVUZCTzFsQlF6VkVMRmxCUVZrc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1YwRkJWeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUnl4RFFVRkJPMWxCUTNSRkxHTkJRV01zUTBGQlF5eFRRVUZUTEVkQlFVY3NTMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZITEVOQlFVRTdXVUZETDBVc1kwRkJZeXhEUVVGRExGTkJRVk1zUjBGQlJ5eE5RVUZITEZkQlFWY3NSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZKTEZkQlFWY3NSMEZCUnl4RlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVVXNRMEZCUVR0UlFVTnVSeXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdTVUZEVml4RFFVRkRPMEZCUTBnc1EwRkJReXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0b2dnbGVDbGFzc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RvZ2dsZUNsYXNzXCIpKTtcbnZhciBlbnRlclRhcmdldF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2VudGVyVGFyZ2V0XCIpKTtcbnZhciB0YWJNZW51XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFiTWVudVwiKSk7XG52YXIgbW9kYWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2RhbFwiKSk7XG52YXIgdG9Ub3BfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90b1RvcFwiKSk7XG52YXIgc3RpY2t5RWxlbWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3N0aWNreUVsZW1lbnRcIikpO1xudmFyIHNjcm9sbEFuaW1hdGlvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbEFuaW1hdGlvblwiKSk7XG52YXIgY2xvc2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jbG9zZVwiKSk7XG4vLyBpbXBvcnQgY3VzdG9tQ3Vyc29yIGZyb20gJy4vY3VzdG9tQ3Vyc29yJztcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3NfMS5kZWZhdWx0LFxuICAgIGVudGVyVGFyZ2V0OiBlbnRlclRhcmdldF8xLmRlZmF1bHQsXG4gICAgbW9kYWw6IG1vZGFsXzEuZGVmYXVsdCxcbiAgICB0YWJNZW51OiB0YWJNZW51XzEuZGVmYXVsdCxcbiAgICB0b1RvcDogdG9Ub3BfMS5kZWZhdWx0LFxuICAgIHN0aWNreUVsZW1lbnQ6IHN0aWNreUVsZW1lbnRfMS5kZWZhdWx0LFxuICAgIHNjcm9sbEFuaW1hdGlvbjogc2Nyb2xsQW5pbWF0aW9uXzEuZGVmYXVsdCxcbiAgICBjbG9zZTogY2xvc2VfMS5kZWZhdWx0LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQkxEaEVRVUYxUXp0QlFVTjJReXc0UkVGQmRVTTdRVUZEZGtNc2MwUkJRU3RDTzBGQlF5OUNMR3RFUVVFeVFqdEJRVU16UWl4clJFRkJNa0k3UVVGRE0wSXNhMFZCUVRKRE8wRkJRek5ETEhORlFVRXJRenRCUVVNdlF5eHJSRUZCTWtJN1FVRkRNMElzTmtOQlFUWkRPMEZCUlRkRExHdENRVUZsTzBsQlEySXNWMEZCVnl4MVFrRkJRVHRKUVVOWUxGZEJRVmNzZFVKQlFVRTdTVUZEV0N4TFFVRkxMR2xDUVVGQk8wbEJRMHdzVDBGQlR5eHRRa0ZCUVR0SlFVTlFMRXRCUVVzc2FVSkJRVUU3U1VGRFRDeGhRVUZoTEhsQ1FVRkJPMGxCUTJJc1pVRkJaU3d5UWtGQlFUdEpRVU5tTEV0QlFVc3NhVUpCUVVFN1EwRkZUaXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHNlbGVjdG9yXG52YXIgdG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdHJpZ2dlciA9IF9hLnNlbGVjdG9yO1xuICAgIHZhciB0cmlnZ2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlcik7XG4gICAgaWYgKCF0cmlnZ2VycylcbiAgICAgICAgcmV0dXJuO1xuICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJcIiArIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSk7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlck5leHRFbGVtZW50ID0gZWxlbWVudC5uZXh0U2libGluZyAmJiBlbGVtZW50Lm5leHRTaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKCF0cmlnZ2VyTmV4dEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdHJpZ2dlck5leHRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgICAgIHRyaWdnZXJOZXh0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICAgICAgICAgICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICByZW1vdmVBbGxDbGFzcyhlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikgeyByZXR1cm4gcmVtb3ZlQWxsQ2xhc3ModHJpZ2dlcik7IH0pOyB9KTtcbn07XG52YXIgcmVtb3ZlQWxsQ2xhc3MgPSBmdW5jdGlvbiAodGFyZ2V0RWxlbWVudCkge1xuICAgIHRhcmdldEVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgIHRhcmdldEVsZW1lbnQubmV4dFNpYmxpbmcubmV4dFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvZ2dsZUNsYXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEc5bloyeGxRMnhoYzNNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowYjJkbmJHVkRiR0Z6Y3k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEZkQlFWYzdRVUZEV0N4SlFVRk5MRmRCUVZjc1IwRkJSeXhWUVVGRExFVkJRV2RETzFGQlFUbENMSEZDUVVGcFFqdEpRVU4wUXl4SlFVRk5MRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRGJrUXNTVUZCU1N4RFFVRkRMRkZCUVZFN1VVRkJSU3hQUVVGTk8wbEJSWEpDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xRkJRM1JDTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN1dVRkRja01zUzBGQlN5eERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkJPMWxCUlhaQ0xFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8xbEJRM0pETEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFdEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1YwRkJWeXhEUVVGSExFTkJRVU1zUTBGQlFUdFpRVVZ1Uml4SlFVRk5MR3RDUVVGclFpeEhRVUZITEU5QlFVOHNRMEZCUXl4WFFVRlhMRWxCUVVzc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eFhRVUV5UWl4RFFVRkJPMWxCUTJ4SExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJN1owSkJRVVVzVDBGQlRUdFpRVVV2UWl4clFrRkJhMElzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xbEJRMnBFTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGQkxFdEJRVXNzU1VGQlNTeFBRVUZCTEV0QlFVc3NRMEZCUXl4bFFVRmxMRVZCUVVVc1JVRkJka0lzUTBGQmRVSXNRMEZCUXl4RFFVRkJPMWxCUlRsRkxGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMmRDUVVOMFFpeEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRXRCUVVzc1QwRkJUenR2UWtGQlJTeFBRVUZOTzJkQ1FVTndReXhqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdXVUZEZWtJc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFNpeERRVUZETEVOQlFVTTdTVUZvUWtZc1EwRm5Ra1VzUTBGRFNDeERRVUZCTzBsQlJVUXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1kwRkJUU3hQUVVGQkxGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBMRWxCUVVrc1QwRkJRU3hqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFYWkNMRU5CUVhWQ0xFTkJRVU1zUlVGQmNFUXNRMEZCYjBRc1EwRkJReXhEUVVGQk8wRkJRM0pITEVOQlFVTXNRMEZCUVR0QlFVVkVMRWxCUVUwc1kwRkJZeXhIUVVGSExGVkJRVUVzWVVGQllUdEpRVU5zUXl4aFFVRmhMRU5CUVVNc1dVRkJXU3hEUVVGRExHVkJRV1VzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0SlFVTnVSQ3hoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRKUVVVelF5eGhRVUZoTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMEZCUTNSRkxFTkJRVU1zUTBGQlFUdEJRVVZFTEd0Q1FVRmxMRmRCUVZjc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW50ZXJUYXJnZXQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBob3ZlckVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpO1xuICAgIGlmICghaG92ZXJFbGVtZW50cylcbiAgICAgICAgcmV0dXJuO1xuICAgIGhvdmVyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAvLyB0b2RvXG4gICAgICAgIHZhciBpc05hdmlnYXRpb24gPSBlbGVtZW50ID09PSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyIC5uYXZiYXItbWVudS1pdGVtJyk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVudGVyRXZlbnQoKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxlYXZlRXZlbnQoKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBlbnRlckV2ZW50KCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xuICAgICAgICAgICAgaXNOYXZpZ2F0aW9uICYmIGJvZHkuY2xhc3NMaXN0LmFkZCgnaXMtc2hvd24nKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsZWF2ZUV2ZW50KCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgIGlzTmF2aWdhdGlvbiAmJiBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNob3duJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBlbnRlclRhcmdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpXNTBaWEpVWVhKblpYUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKbGJuUmxjbFJoY21kbGRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEZWQlFVTXNSVUZCSzBJN1VVRkJOMElzYjBKQlFXZENPMGxCUXpkQ0xFbEJRVUVzYjBKQlFVa3NRMEZCWVR0SlFVTjZRaXhKUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdTVUZEZGtRc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJURkNMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzFGQlF6TkNMRTlCUVU4N1VVRkRVQ3hKUVVGTkxGbEJRVmtzUjBGQlJ5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RFFVRkJPMUZCUlhaR0xFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGNrTXNWVUZCVlN4RlFVRkZMRU5CUVVFN1dVRkRXaXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRkxHTkJRVTBzVDBGQlFTeFZRVUZWTEVWQlFVVXNSVUZCV2l4RFFVRlpMRU5CUVVNc1EwRkJRVHRSUVVNMVJDeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVVkdMRk5CUVZNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVU0zUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTndReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGFFUXNRMEZCUXp0UlFVTkVMRk5CUVZNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlFUdFpRVU01UXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTjJReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGJrUXNRMEZCUXp0SlFVTklMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1YwRkJWeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIOumrO2Mqe2GoOunge2VmOq4lFxudmFyIHRhYk1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIHRhYnMgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJdJyk7XG4gICAgICAgIHZhciB0YWJJbmRleCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcbiAgICAgICAgdmFyIHRhYkFjdGljZUJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLXRhYmxpc3QtYWN0aXZlJyk7XG4gICAgICAgIGlmICghdGFicyB8fCAhdGFiQWN0aWNlQmFyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJ1tyb2xlPXRhYl0nKSkge1xuICAgICAgICAgICAgLy8gY29uc3QgdGFyZ2V0V2lkdGggPSB0YXJnZXQuZ2V0U3R5cXFcbiAgICAgICAgICAgIHRhYkFjdGljZUJhci5zdHlsZS5sZWZ0ID0gdGFyZ2V0Lm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICB0YWJzLmZvckVhY2goZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpOyB9KTtcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJwYW5lbF0nKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgdHJ1ZSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gdGFiTWVudTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHRmlUV1Z1ZFM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJblJoWWsxbGJuVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeFRRVUZUTzBGQlExUXNTVUZCVFN4UFFVRlBMRWRCUVVjN1NVRkRaQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUTNaQ0xFOUJRVThzUlVGRFVDeFZRVUZCTEV0QlFVczdVVUZEU3l4SlFVRkJMSEZDUVVGTkxFTkJRV1U3VVVGRE4wSXNTVUZCVFN4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdFJRVU0zUkN4SlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMUZCUTJ4RUxFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUVR0UlFVVnVSaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1R0WlFVRkZMRTlCUVUwN1VVRkZiRU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRk8xbEJRMmhETEhORFFVRnpRenRaUVVWMFF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJUU3hOUVVGTkxFTkJRVU1zVlVGQlZTeFBRVUZKTEVOQlFVRTdXVUZEYkVRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVkQlFVY3NTVUZCU1N4UFFVRkJMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RlFVRXhReXhEUVVFd1F5eERRVUZETEVOQlFVRTdXVUZETDBRc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1dVRkZOVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMmRDUVVNNVJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdG5Ra0ZETTBNc1NVRkJTU3hSUVVGUkxFdEJRVXNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSVHR2UWtGRGJrUXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhoUVVGaExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVRTdhVUpCUXpsRE8xbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdVMEZEU0R0SlFVTklMRU5CUVVNc1JVRkRSQ3hKUVVGSkxFTkJRMHdzUTBGQlFUdEJRVU5JTEVOQlFVTXNRMEZCUVR0QlFVVkVMR3RDUVVGbExFOUJRVThzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtb2RhbCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0cmlnZ2VyID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBwYWdlWSA9IDA7XG4gICAgdmFyIG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlcik7XG4gICAgaWYgKCFtb2RhbHMpXG4gICAgICAgIHJldHVybjtcbiAgICBtb2RhbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kYWwpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBtb2RhbC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnaXMtdmlzaWJsZScpO1xuICAgICAgICAgICAgcGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICBzZXRMb2NrQm9keSgpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzT3BlbmVkID0gbW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnaXMtdmlzaWJsZScpO1xuICAgICAgICAgICAgICAgIGlmICghaXNPcGVuZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBtb2RhbC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHBhZ2VZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIG1vZGFsRGlhbG9nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsLWRpYWxvZycpO1xuICAgIG1vZGFsRGlhbG9nLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyB9KTsgfSk7XG4gICAgZnVuY3Rpb24gc2V0TG9ja0JvZHkoKSB7XG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XG4gICAgICAgIGJvZHkuc3R5bGUudG9wID0gXCItXCIgKyBwYWdlWSArIFwicHhcIjtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gbW9kYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liVzlrWVd3dWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp0YjJSaGJDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVUxQkxFbEJRVTBzUzBGQlN5eEhRVUZITEZWQlFVTXNSVUZCY1VJN1VVRkJia0lzY1VKQlFXbENPMGxCUTNoQ0xFbEJRVUVzYjBKQlFVa3NRMEZCWVR0SlFVTjZRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEWWl4SlFVRk5MRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRGFrUXNTVUZCU1N4RFFVRkRMRTFCUVUwN1VVRkJSU3hQUVVGTk8wbEJSVzVDTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hMUVVGTE8xRkJRMnhDTEU5QlFVRXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN1dVRkRia01zUzBGQlN5eERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkJPMWxCUTNaQ0xFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUVR0WlFVVjBRaXhMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0WlFVTndSQ3hMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUVR0WlFVTXhRaXhYUVVGWExFVkJRVVVzUTBGQlFUdFpRVU5pTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVFN1dVRkZPVU1zVTBGQlV5eFZRVUZWTzJkQ1FVTnFRaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRuUWtGRE1VVXNTVUZCU1N4RFFVRkRMRkZCUVZFN2IwSkJRVVVzVDBGQlRUdG5Ra0ZGY2tJc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVRTdaMEpCUTNaRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8yZENRVU5zUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUVR0WlFVTXpRaXhEUVVGRE8xRkJRMGdzUTBGQlF5eERRVUZETzBsQmFrSkdMRU5CYVVKRkxFTkJRMGdzUTBGQlFUdEpRVVZFTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRVHRKUVVNNVJDeFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUeXhKUVVGSkxFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZCTEV0QlFVc3NTVUZCU1N4UFFVRkJMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUlVGQmRrSXNRMEZCZFVJc1EwRkJReXhGUVVGdVJTeERRVUZ0UlN4RFFVRkRMRU5CUVVFN1NVRkZia2NzVTBGQlV5eFhRVUZYTzFGQlEyeENMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SFFVRkhMRTFCUVVrc1MwRkJTeXhQUVVGSkxFTkJRVUU3U1VGRGFFTXNRMEZCUXp0QlFVTklMRU5CUVVNc1EwRkJRVHRCUVVWRUxHdENRVUZsTEV0QlFVc3NRMEZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRvVG9wID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRhcmdldCA9IF9hLnNlbGVjdG9yO1xuICAgIHZhciB0b1RvcEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gICAgaWYgKCF0b1RvcEVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB0b1RvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHRvVG9wRWxlbWVudC5uYW1lIHx8IHRvVG9wRWxlbWVudC5ocmVmO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvVG9wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEc5VWIzQXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMGIxUnZjQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1MwRkJTeXhIUVVGSExGVkJRVU1zUlVGQkswSTdVVUZCTjBJc2IwSkJRV2RDTzBsQlF5OUNMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXdENMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRM0JGTEVsQlFVa3NRMEZCUXl4WlFVRlpPMUZCUVVVc1QwRkJUVHRKUVVWNlFpeFpRVUZaTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3p0UlFVTXhReXhMUVVGTExFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVRTdVVUZEZEVJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkZja0lzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWtzU1VGQlNTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkJPMGxCUXk5RUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzUzBGQlN5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN0aWNreUVsZW1lbnQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IF9hLnRhcmdldEVsZW1lbnQsIGFkZENsYXNzID0gX2EuYWRkQ2xhc3M7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBzdGlja3lFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbGVtZW50KTtcbiAgICBpZiAoIXN0aWNreUVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgc3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciBpc1Njcm9sbGluZztcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xuICAgICAgICBpc1Njcm9sbGluZyA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhzdGlja3lFbGVtZW50SGVpZ2h0KTsgLy8gMTMzXG4gICAgICAgIGlzU2Nyb2xsaW5nICYmIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpc1Njcm9sbGluZyk7XG4gICAgICAgIGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gc3RpY2t5RWxlbWVudC5vZmZzZXRUb3AgKyBzdGlja3lFbGVtZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKGFkZENsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZShhZGRDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbi8vIHZhciBpc1Njcm9sbGluZztcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZXZlbnQpID0+IHtcbi8vIFx0aWYoaXNTY3JvbGxpbmcpIHdpbmRvdy5jbGVhclRpbWVvdXQoaXNTY3JvbGxpbmcpO1xuLy8gXHRpc1Njcm9sbGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbi8vIFx0XHRzdGlja3lUb2dnbGUoKTtcbi8vIFx0fSwgNTApO1xuLy8gfSk7XG4vLyBleHBvcnQgY29uc3Qgc3RpY2t5SGVhZGVyRWxlbWVudCA9ICh0YXJnZXRFbGVtZW50LCBhZGRDbGFzcykgPT4ge1xuLy8gXHRzdGlja3lFbGVtZW50KHt0YXJnZXRFbGVtZW50LCBhZGRDbGFzcywgdHJ1ZX0pO1xuLy8gfTtcbi8vIGNvbnN0IHN0aWNreUhlYWRlciA9ICgpID0+IHtcbi8vIFx0Y29uc3QgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcbi8vIFx0bGV0IGxhc3RTY3JvbGxUb3AgPSAwO1xuLy8gXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuLy8gXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShoYXNTY3JvbGxlZCk7XG4vLyBcdH0pO1xuLy8gXHRmdW5jdGlvbiBoYXNTY3JvbGxlZCgpIHtcbi8vIFx0XHRpZih3aW5kb3cucGFnZVlPZmZzZXQgPiBsYXN0U2Nyb2xsVG9wKSB7XG4vLyBcdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdi11cCcpO1xuLy8gXHRcdH0gZWxzZSB7XG4vLyBcdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ25hdi11cCcpO1xuLy8gXHRcdH1cbi8vIFx0XHRsYXN0U2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuLy8gXHR9XG4vLyB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RpY2t5RWxlbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzUnBZMnQ1Uld4bGJXVnVkQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkluTjBhV05yZVVWc1pXMWxiblF1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGTkxHRkJRV0VzUjBGQlJ5eFZRVUZETEVWQlFUSkNPMUZCUVhwQ0xHZERRVUZoTEVWQlFVVXNjMEpCUVZFN1NVRkRkRU1zU1VGQlFTeHZRa0ZCU1N4RFFVRmhPMGxCUTNwQ0xFbEJRVTBzWVVGQllTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRE0wUXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1VVRkJSU3hQUVVGTk8wbEJSVEZDTEVsQlFVa3NiVUpCUVcxQ0xFZEJRVWNzWVVGQllTeERRVUZETEZsQlFWa3NRMEZCUVR0SlFVTndSQ3hKUVVGSkxGZEJRVmNzUTBGQlFUdEpRVVZtTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEYUVNc1YwRkJWeXhKUVVGSkxFMUJRVTBzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdFJRVU4yUkN4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMWxCUTNwRExHMUNRVUZ0UWl4SFFVRkhMR0ZCUVdFc1EwRkJReXhaUVVGWkxFTkJRVUU3VVVGRGJFUXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRTaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVVZHTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEYUVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGQkxFTkJRVU1zVFVGQlRUdFJRVU4yUXl4WFFVRlhMRWxCUVVrc1RVRkJUU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8xRkJRM1pFTEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdXVUZEZWtNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEdGQlFXRXNRMEZCUXl4VFFVRlRMRWRCUVVjc2JVSkJRVzFDTEVWQlFVVTdaMEpCUTNSRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGQk8yRkJRemRDTzJsQ1FVRk5PMmRDUVVOTUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGQk8yRkJRMmhETzFGQlEwZ3NRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRTaXhEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5LTEVOQlFVTXNRMEZCUVR0QlFVVkVMRzFDUVVGdFFqdEJRVU51UWl4cFJFRkJhVVE3UVVGRGFrUXNjVVJCUVhGRU8wRkJRM0pFTEhkRFFVRjNRenRCUVVONFF5eHZRa0ZCYjBJN1FVRkRjRUlzVjBGQlZ6dEJRVU5ZTEUxQlFVMDdRVUZGVGl4dlJVRkJiMFU3UVVGRGNFVXNiVVJCUVcxRU8wRkJRMjVFTEV0QlFVczdRVUZGVEN3clFrRkJLMEk3UVVGREwwSXNORVJCUVRSRU8wRkJRelZFTERCQ1FVRXdRanRCUVVVeFFpdzJRMEZCTmtNN1FVRkROME1zZDBOQlFYZERPMEZCUTNoRExFOUJRVTg3UVVGRlVDdzBRa0ZCTkVJN1FVRkROVUlzTmtOQlFUWkRPMEZCUXpkRExEUkRRVUUwUXp0QlFVTTFReXhoUVVGaE8wRkJRMklzSzBOQlFTdERPMEZCUXk5RExFMUJRVTA3UVVGRFRpeDNRMEZCZDBNN1FVRkRlRU1zUzBGQlN6dEJRVU5NTEV0QlFVczdRVUZGVEN4clFrRkJaU3hoUVVGaExFTkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGV2ZW50U2Nyb2xsQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtc2Nyb2xsLWFuaW1hdGlvbicpO1xuICAgIGlmICghc2Nyb2xsVGFyZ2V0KVxuICAgICAgICByZXR1cm47XG4gICAgc2Nyb2xsVGFyZ2V0LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlzU2Nyb2xsZWQgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIGlmICghaXNTY3JvbGxlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zY3JvbGxlZCcpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcm9sbFRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgcGFnZVlPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICB2YXIgaXNTY3JvbGxlZCA9IHBhZ2VZT2Zmc2V0ID4gcGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodCArIDUwO1xuICAgICAgICAgICAgLy8gY29uc3QgaXNTY3JvbGxlZCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgICAgICAgaWYgKCFpc1Njcm9sbGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2Nyb2xsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXZlbnRTY3JvbGxBbmltYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMk55YjJ4c1FXNXBiV0YwYVc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNRVzVwYldGMGFXOXVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFN4dlFrRkJiMElzUjBGQlJ6dEpRVU16UWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0SlFVTjBSU3hKUVVGSkxFTkJRVU1zV1VGQldUdFJRVUZGTEU5QlFVMDdTVUZGZWtJc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEU5QlFVODdVVUZETVVJc1NVRkJUU3hWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU1zVFVGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVFN1VVRkRMMFVzU1VGQlNTeERRVUZETEZWQlFWVTdXVUZCUlN4UFFVRk5PMUZCUlhaQ0xFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8wbEJRM1JETEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUlVZc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRSUVVOb1F5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenRaUVVOc1FpeEpRVUZCTEdkRFFVRlhMRU5CUVZjN1dVRkRPVUlzU1VGQlRTeFZRVUZWTEVkQlFVY3NWMEZCVnl4SFFVRkhMRmRCUVZjc1IwRkJSeXhQUVVGUExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4RlFVRkZMRU5CUVVFN1dVRkROVWNzYlVaQlFXMUdPMWxCUTI1R0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdFpRVU4yUlN4SlFVRkpMRU5CUVVNc1ZVRkJWVHRuUWtGQlJTeFBRVUZOTzFsQlJYWkNMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMUZCUTNSRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4dlFrRkJiMElzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjbG9zZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0YXJnZXQgPSBfYS5zZWxlY3RvcjtcbiAgICB2YXIgY2xvc2VFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KTtcbiAgICBpZiAoIWNsb3NlRWxlbWVudHMpXG4gICAgICAgIHJldHVybjtcbiAgICBjbG9zZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2xvc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnh2YzJVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpqYkc5elpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzUzBGQlN5eEhRVUZITEZWQlFVTXNSVUZCSzBJN1VVRkJOMElzYjBKQlFXZENPMGxCUXk5Q0xFbEJRVTBzWVVGQllTeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQmEwSXNUVUZCVFN4RFFVRkRMRU5CUVVFN1NVRkRlRVVzU1VGQlNTeERRVUZETEdGQlFXRTdVVUZCUlN4UFFVRk5PMGxCUlRGQ0xHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMUZCUXpOQ0xFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJUdFpRVU5vUXl4RFFVRkRPMWxCUVdNc1QwRkJUeXhEUVVGRExGVkJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRVHRSUVVNelJDeERRVUZETEVOQlFVTTdTVUZHUml4RFFVVkZMRU5CUTBnc1EwRkJRVHRCUVVOSUxFTkJRVU1zUTBGQlFUdEJRVVZFTEd0Q1FVRmxMRXRCUVVzc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2hlY2tib3hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jaGVja2JveFwiKSk7XG52YXIgdGV4dGFyZWFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90ZXh0YXJlYVwiKSk7XG52YXIgZmlsZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbGVcIikpO1xudmFyIG51bWJlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL251bWJlclwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgY2hlY2tib3g6IGNoZWNrYm94XzEuZGVmYXVsdCxcbiAgICB0ZXh0YXJlYTogdGV4dGFyZWFfMS5kZWZhdWx0LFxuICAgIGZpbGU6IGZpbGVfMS5kZWZhdWx0LFxuICAgIG51bWJlcjogbnVtYmVyXzEuZGVmYXVsdCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMSGRFUVVGcFF6dEJRVU5xUXl4M1JFRkJhVU03UVVGRGFrTXNaMFJCUVhsQ08wRkJRM3BDTEc5RVFVRTJRanRCUVVVM1FpeHJRa0ZCWlR0SlFVTmlMRkZCUVZFc2IwSkJRVUU3U1VGRFVpeFJRVUZSTEc5Q1FVRkJPMGxCUTFJc1NVRkJTU3huUWtGQlFUdEpRVU5LTEUxQlFVMHNhMEpCUVVFN1EwRkRVQ3hEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIO2MjOydvOuhnCDrrLbsl6zsnojslrTshJwg7Jm467aA7JeQ7IScIOygkeq3vO2VoCDsiJgg7JeG7Ja07IScIOuCmOumhCDqtJzsuIhcbi8vIOOEsuyytOuCmCDtgbTrnpjsiqTroZxcbi8vIO2VqOyImOuKlCDroIjsnbTsp4Bcbi8vIOyVlOusteyggeydtOuLpC5cbnZhciBjaGVja2JveCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGVja0FsbFNlbGVjdG9yID0gX2EuY2hlY2tBbGxTZWxlY3RvciwgY2hlY2tTZWxlY3RvciA9IF9hLmNoZWNrU2VsZWN0b3I7XG4gICAgcmV0dXJuICh7XG4gICAgICAgIGNoZWNrQWxsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsU2VsZWN0b3IpLFxuICAgICAgICBjaGVja0l0ZW1zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNoZWNrU2VsZWN0b3IpLFxuICAgICAgICBzZXRFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGVja0FsbCB8fCAhdGhpcy5jaGVja0l0ZW1zKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tBbGwoX3RoaXMuY2hlY2tJdGVtcywgX3RoaXMuY2hlY2tBbGwpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGVja0l0ZW0pIHtcbiAgICAgICAgICAgICAgICBjaGVja0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tFYWNoKF90aGlzLmNoZWNrSXRlbXMsIF90aGlzLmNoZWNrQWxsKTsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q2hlY2tFYWNoOiBmdW5jdGlvbiAoY2hlY2tJdGVtcywgY2hlY2tBbGwpIHtcbiAgICAgICAgICAgIHZhciBjaGVja3MgPSBBcnJheS5mcm9tKGNoZWNrSXRlbXMpO1xuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZEV2ZXJ5ID0gY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVja0l0ZW0pIHsgcmV0dXJuIGNoZWNrSXRlbS5jaGVja2VkOyB9KTtcbiAgICAgICAgICAgIHZhciBpc0NoZWNrZWRTb21lID0gY2hlY2tzLnNvbWUoZnVuY3Rpb24gKGNoZWNrSXRlbSkgeyByZXR1cm4gY2hlY2tJdGVtLmNoZWNrZWQ7IH0pO1xuICAgICAgICAgICAgY2hlY2tBbGwuY2hlY2tlZCA9IGlzQ2hlY2tlZEV2ZXJ5O1xuICAgICAgICAgICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xuICAgICAgICAgICAgY2hlY2tBbGwuZGF0YXNldC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENoZWNrQWxsOiBmdW5jdGlvbiAoY2hlY2tJdGVtcywgY2hlY2tBbGwpIHtcbiAgICAgICAgICAgIGNoZWNrSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoY2hlY2tJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xuICAgICAgICAgICAgICAgIGNoZWNrQWxsLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbi8vIGNsYXNzIENoZWNrYm94IHtcbi8vICAgY29uc3RydWN0b3IoKSB7XG4vLyAgICAgdGhpcy5jaGVja0FsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2hlY2tBbGxTZWxlY3RvciksXG4vLyAgICAgdGhpcy5jaGVja0l0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjaGVja1NlbGVjdG9yKVxuLy8gICB9XG4vLyB9XG4vLyBjb25zdCBjaGVja2JveCA9ICh7IGNoZWNrQWxsU2VsZWN0b3IsIGNoZWNrU2VsZWN0b3IgfTogUGFyYW1ldGVyKSA9PiB7XG4vLyAgIGNvbnN0IGNoZWNrQWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjaGVja0FsbFNlbGVjdG9yKTtcbi8vICAgY29uc3QgY2hlY2tJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tTZWxlY3Rvcik7XG4vLyAgIGlmICghY2hlY2tBbGwgfHwgIWNoZWNrSXRlbXMpIHJldHVybjtcbi8vICAgY2hlY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4gc2V0Q2hlY2tBbGwoY2hlY2tJdGVtcywgY2hlY2tBbGwpKTtcbi8vICAgY2hlY2tJdGVtcy5mb3JFYWNoKGNoZWNrSXRlbSA9PiB7XG4vLyAgICAgY2hlY2tJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHNldENoZWNrRWFjaChjaGVja0l0ZW1zLCBjaGVja0FsbCkpO1xuLy8gICB9KTtcbi8vIH07XG4vLyBmdW5jdGlvbiBzZXRDaGVja0VhY2goY2hlY2tJdGVtcywgY2hlY2tBbGwpIHtcbi8vICAgY29uc3QgY2hlY2tzOiBIVE1MSW5wdXRFbGVtZW50W10gPSBBcnJheS5mcm9tKGNoZWNrSXRlbXMpO1xuLy8gICBjb25zdCBpc0NoZWNrZWRFdmVyeSA9IGNoZWNrcy5ldmVyeShjaGVja0l0ZW0gPT4gY2hlY2tJdGVtLmNoZWNrZWQpO1xuLy8gICBjb25zdCBpc0NoZWNrZWRTb21lID0gY2hlY2tzLnNvbWUoY2hlY2tJdGVtID0+IGNoZWNrSXRlbS5jaGVja2VkKTtcbi8vICAgY2hlY2tBbGwuY2hlY2tlZCA9IGlzQ2hlY2tlZEV2ZXJ5O1xuLy8gICBjaGVja0FsbC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XG4vLyAgIGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xuLy8gfVxuLy8gZnVuY3Rpb24gc2V0Q2hlY2tBbGwoY2hlY2tJdGVtcywgY2hlY2tBbGwpIHtcbi8vICAgY2hlY2tJdGVtcy5mb3JFYWNoKGNoZWNrSXRlbSA9PiB7XG4vLyAgICAgY2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xuLy8gICAgIGNoZWNrQWxsLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbi8vICAgICBjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbi8vICAgfSk7XG4vLyB9XG5leHBvcnRzLmRlZmF1bHQgPSBjaGVja2JveDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyaGxZMnRpYjNndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpqYUdWamEySnZlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMR2xEUVVGcFF6dEJRVU5xUXl4WFFVRlhPMEZCUTFnc1ZVRkJWVHRCUVVOV0xGTkJRVk03UVVGRlZDeEpRVUZOTEZGQlFWRXNSMEZCUnl4VlFVRkRMRVZCUVRoRE8xRkJRVFZETEhORFFVRm5RaXhGUVVGRkxHZERRVUZoTzBsQlFXdENMRTlCUVVFc1EwRkJRenRSUVVOd1JTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0UlFVTnNSQ3hWUVVGVkxFVkJRVVVzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHRkJRV0VzUTBGQlF6dFJRVU53UkN4UlFVRlJPMWxCUVZJc2FVSkJUVU03V1VGTVF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTzJkQ1FVRkZMRTlCUVUwN1dVRkRPVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNZMEZCVFN4UFFVRkJMRXRCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4TFFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRV2hFTEVOQlFXZEVMRU5CUVVNc1EwRkJRVHRaUVVOb1J5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxGTkJRVk03WjBKQlF5OUNMRk5CUVZNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1kwRkJUU3hQUVVGQkxFdEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hMUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFXcEVMRU5CUVdsRUxFTkJRVU1zUTBGQlFUdFpRVU12Uml4RFFVRkRMRU5CUVVNc1EwRkJRVHRSUVVOS0xFTkJRVU03VVVGRFJDeFpRVUZaTEVWQlFWb3NWVUZCWVN4VlFVRlZMRVZCUVVVc1VVRkJVVHRaUVVNdlFpeEpRVUZOTEUxQlFVMHNSMEZCZFVJc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0WlFVTjZSQ3hKUVVGTkxHTkJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVVFc1UwRkJVeXhKUVVGSkxFOUJRVUVzVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCYWtJc1EwRkJhVUlzUTBGQlF5eERRVUZCTzFsQlEyNUZMRWxCUVUwc1lVRkJZU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUVN4VFFVRlRMRWxCUVVrc1QwRkJRU3hUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZxUWl4RFFVRnBRaXhEUVVGRExFTkJRVUU3V1VGRmFrVXNVVUZCVVN4RFFVRkRMRTlCUVU4c1IwRkJSeXhqUVVGakxFTkJRVUU3V1VGRGFrTXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1IwRkJSeXhoUVVGaExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVRTdXVUZEZWtRc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVkQlFVY3NZVUZCWVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGQk8xRkJRMjVGTEVOQlFVTTdVVUZEUkN4WFFVRlhMRmxCUVVNc1ZVRkJWU3hGUVVGRkxGRkJRVkU3V1VGRE9VSXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxGTkJRVk03WjBKQlF6RkNMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUVR0blFrRkRjRU1zVVVGQlVTeERRVUZETEdGQlFXRXNSMEZCUnl4TFFVRkxMRU5CUVVFN1owSkJRemxDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlFUdFpRVU40UXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRSUVVOS0xFTkJRVU03UzBGRFJpeERRVUZETzBGQk1VSnRSU3hEUVRCQ2JrVXNRMEZCUVR0QlFVVkdMRzFDUVVGdFFqdEJRVU51UWl4dlFrRkJiMEk3UVVGRGNFSXNaMFZCUVdkRk8wRkJRMmhGTEdsRlFVRnBSVHRCUVVOcVJTeE5RVUZOTzBGQlEwNHNTVUZCU1R0QlFVVktMSGxGUVVGNVJUdEJRVU42UlN3clJFRkJLMFE3UVVGREwwUXNhVVZCUVdsRk8wRkJRMnBGTERCRFFVRXdRenRCUVVVeFF5eHJSa0ZCYTBZN1FVRkRiRVlzYzBOQlFYTkRPMEZCUTNSRExITkdRVUZ6Ump0QlFVTjBSaXhSUVVGUk8wRkJRMUlzUzBGQlN6dEJRVVZNTEdkRVFVRm5SRHRCUVVOb1JDd3JSRUZCSzBRN1FVRkRMMFFzZVVWQlFYbEZPMEZCUTNwRkxIVkZRVUYxUlR0QlFVVjJSU3gxUTBGQmRVTTdRVUZEZGtNc0swUkJRU3RFTzBGQlF5OUVMSFZGUVVGMVJUdEJRVU4yUlN4SlFVRkpPMEZCUlVvc0swTkJRU3RETzBGQlF5OURMSE5EUVVGelF6dEJRVU4wUXl3MFEwRkJORU03UVVGRE5VTXNjME5CUVhORE8wRkJRM1JETERoRFFVRTRRenRCUVVNNVF5eFJRVUZSTzBGQlExSXNTVUZCU1R0QlFVVktMR3RDUVVGbExGRkJRVkVzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbnB1dFRleHRhcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHRhZ05hbWXqs7wgbm9kZU5hbWXsnYAg7YWN7Iqk7Yq4IOuFuOuTnOulvCDqsIHqsIEgdW5kZWZpbmVk7JmAICN0ZXh0IOuwmO2ZmO2VnOuLpC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpc1RleHRhcmVhID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYSc7XG4gICAgICAgIGlmICghaXNUZXh0YXJlYSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIEJZVEVfTUFYSU1VTSA9IDMwO1xuICAgICAgICB2YXIgYnl0ZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGV4dGZpZWxkLWJ5dGUgYicpO1xuICAgICAgICBpZiAoIWJ5dGVFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgc3RyaW5nQnl0ZUxlbmd0aCA9ICgoX2EgPSB0YXJnZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZS5yZXBsYWNlKC9bXFwwLVxceDdmXXwoWzAtXFx1MDdmZl18KC4pKS9nLCAnJCYkMSQyJykubGVuZ3RoKSB8fCAwOyAvLyB8fCAwIOyehOyLnFxuICAgICAgICBieXRlRWxlbWVudC5pbm5lclRleHQgPSBzdHJpbmdCeXRlTGVuZ3RoO1xuICAgICAgICB2YXIgaXNNYXhpbXVtID0gc3RyaW5nQnl0ZUxlbmd0aCA+IEJZVEVfTUFYSU1VTTtcbiAgICAgICAgaWYgKGlzTWF4aW11bSkge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnaXMtaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGF1dG9FeHBhbmQodGFyZ2V0KTtcbiAgICB9KTtcbn07XG52YXIgYXV0b0V4cGFuZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIGZpZWxkLnN0eWxlLmhlaWdodCA9ICdpbmhlcml0JztcbiAgICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShmaWVsZCk7XG4gICAgdmFyIGhlaWdodCA9IGZpZWxkLnNjcm9sbEhlaWdodCArIHBhcnNlSW50KGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSk7XG4gICAgZmllbGQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlucHV0VGV4dGFyZWE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR1Y0ZEdGeVpXRXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMFpYaDBZWEpsWVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVsQlFVMHNZVUZCWVN4SFFVRkhPMGxCUTNCQ0xIVkVRVUYxUkR0SlFVTjJSQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN6czdVVUZET1VJc1NVRkJRU3h4UWtGQlRTeERRVUZsTzFGQlF6ZENMRWxCUVVrc1RVRkJUVHRaUVVGRkxFOUJRVTA3VVVGRmJFSXNTVUZCVFN4VlFVRlZMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4VlFVRlZMRU5CUVVFN1VVRkRMMFFzU1VGQlNTeERRVUZETEZWQlFWVTdXVUZCUlN4UFFVRk5PMUZCUlhaQ0xFbEJRVTBzV1VGQldTeEhRVUZITEVWQlFVVXNRMEZCUVR0UlFVVjJRaXhKUVVGTkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRzFDUVVGdFFpeERRVUZETEVOQlFVRTdVVUZETlVVc1NVRkJTU3hEUVVGRExGZEJRVmM3V1VGQlJTeFBRVUZOTzFGQlJYaENMRWxCUVUwc1owSkJRV2RDTEVkQlFVY3NUMEZCUVN4TlFVRk5MREJEUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNOa0pCUVRaQ0xFVkJRVVVzVVVGQlVTeEZRVUZGTEUxQlFVMHNTMEZCU1N4RFFVRkRMRU5CUVVFc1EwRkJReXhWUVVGVk8xRkJRemxITEZkQlFWY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1owSkJRV2RDTEVOQlFVRTdVVUZGZUVNc1NVRkJUU3hUUVVGVExFZEJRVWNzWjBKQlFXZENMRWRCUVVjc1dVRkJXU3hEUVVGQk8xRkJRMnBFTEVsQlFVa3NVMEZCVXl4RlFVRkZPMWxCUTJJc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xTkJRemxETzJGQlFVMDdXVUZEVEN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1UwRkRha1E3VVVGRlJDeFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1NVRkRjRUlzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hKUVVGTkxGVkJRVlVzUjBGQlJ5eFZRVUZCTEV0QlFVczdTVUZEZEVJc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkJPMGxCUlRsQ0xFbEJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0SlFVTXZReXhKUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUXpOR0xFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRk5MRTFCUVUwc1QwRkJTU3hEUVVGQk8wRkJRM0JETEVOQlFVTXNRMEZCUVR0QlFVVkVMR3RDUVVGbExHRkJRV0VzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFRPRE86IOyXrOufrOuyiCDrsJjrs7XtlbTshJwg7Jis66C47J2EIOuVjCBmaWxlbGlzdCDriITsoIHrkJjripTsp4A/XG4vLyBUT0RPOiDrj5nsnbztlZwg7YyM7J287J2EIOyXheuhnOuTnCDtlojsnYQg65WMIOyytO2BrCwg7IKt7KCc7ZaI7J2EIOuVjCBmaWxlTGlzdOyXkOyEnCDsgq3soJwsIGZpbGVJbnB1dC5maWxlc+uKlCDsjJPsnbTsp4Ag7JWK7J2MLlxudmFyIGF0dGFjaEZpbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWlucHV0Jyk7XG4gICAgaWYgKCFmaWxlSW5wdXQpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBjb25zdCBmaWxlU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtc3VibWl0Jyk7XG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF0dGFjaChmaWxlSW5wdXQpOyB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2goZmlsZUlucHV0KSB7XG4gICAgdmFyIGZpbGVzID0gZmlsZUlucHV0LmZpbGVzO1xuICAgIHZhciBhdHRhY2htZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtbGlzdCcpO1xuICAgIHZhciBhdHRhY2htZW50SGVscGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1oZWxwZXInKTtcbiAgICBpZiAoIWZpbGVzIHx8ICFhdHRhY2htZW50TGlzdCB8fCAhYXR0YWNobWVudEhlbHBlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGF0dGFjaG1lbnRIZWxwZXIuc3R5bGUuZGlzcGxheSA9IGZpbGVzLmxlbmd0aCAhPT0gMCA/ICdub25lJyA6ICdibG9jayc7XG4gICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICBpZiAoIXZhbGlkRmlsZVR5cGUoZmlsZSkpXG4gICAgICAgICAgICByZXR1cm4gYWxlcnQoJ+2MjOydvO2DgOyehSBqcGVnIHBqcGVnIHBuZyDspJEg7ZWY64KY6rCAIOyVhOuLiOyVvH4nKTtcbiAgICAgICAgdmFyIGZpbGVUZW1wbGF0ZSA9IFwiXFxuXFx0XFx0XFx0PGEgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtXFxcIiBocmVmPVxcXCJcXFwiPlxcblxcdFxcdFxcdFxcdDxmaWd1cmUgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLWltYWdlXFxcIj48aW1nIHNyYz1cIiArIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpICsgXCIgYWx0PVwiICsgZmlsZS5uYW1lICsgXCI+PC9maWd1cmU+XFxuXFx0XFx0XFx0XFx0PGIgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLW5hbWVcXFwiIGhyZWY9XFxcIiNcXFwiPlwiICsgZmlsZS5uYW1lICsgXCI8L2I+XFxuXFx0XFx0XFx0XFx0PHNtYWxsIGNsYXNzPVxcXCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1zaXplXFxcIiA+XCIgKyByZXR1cm5GaWxlU2l6ZShmaWxlLnNpemUpICsgXCI8L3NtYWxsPlxcblxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLWRlbGV0ZSBqcy1yZW1vdmUtdGhpc1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIj48aSBjbGFzcz1cXFwiaWNvbi1jbG9zZVxcXCI+PC9pPjwvYnV0dG9uPlxcblxcdFxcdFxcdDwvYT5cIjtcbiAgICAgICAgYXR0YWNobWVudExpc3QuaW5uZXJIVE1MICs9IGZpbGVUZW1wbGF0ZTtcbiAgICAgICAgLy8gYXR0YWNobWVudExpc3QuYXBwZW5kKGZpbGVUZW1wbGF0ZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB2YWxpZEZpbGVUeXBlKGZpbGUpIHtcbiAgICB2YXIgZmlsZVR5cGVzID0gWydpbWFnZS9qcGVnJywgJ2ltYWdlL2dpZicsICdpbWFnZS9wbmcnXTtcbiAgICB2YXIgaXNWYWxpZCA9IGZpbGVUeXBlcy5pbmRleE9mKGZpbGUudHlwZSkgPiAtMTtcbiAgICAvLyBjb25zdCBpc1ZhbGlkID0gZmlsZVR5cGVzLmluY2x1ZGVzKGZpbGUudHlwZSk7XG4gICAgaWYgKGlzVmFsaWQpXG4gICAgICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gcmV0dXJuRmlsZVNpemUoc2l6ZSkge1xuICAgIHZhciBpc0J5dGVzID0gc2l6ZSA8IDEwMjQ7XG4gICAgdmFyIGlzS2lsb0J5dGVzID0gc2l6ZSA+PSAxMDI0ICYmIHNpemUgPCAxMDQ4NTc2O1xuICAgIGlmIChpc0J5dGVzKVxuICAgICAgICByZXR1cm4gc2l6ZSArIFwiYnl0ZXNcIjtcbiAgICBlbHNlIGlmIChpc0tpbG9CeXRlcylcbiAgICAgICAgcmV0dXJuIChzaXplIC8gMTAyNCkudG9GaXhlZCgyKSArIFwiS0JcIjtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiAoc2l6ZSAvIDEwNDg1NzYpLnRvRml4ZWQoMikgKyBcIk1CXCI7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBhdHRhY2hGaWxlO1xuLy8gZmlsZVN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcbi8vIFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vIFx0ZmlsZUxpc3QuZm9yRWFjaChmaWxlID0+IHtcbi8vIFx0XHRzZW5kRmlsZShmaWxlKTtcbi8vIFx0fSk7XG4vLyB9KTtcbi8vIGZ1bmN0aW9uIHZhbGlkRmlsZVNpemUoZmlsZSkge1xuLy8gXHRhdHRhY2hlZGZpbGVzID0gZmlsZS5maWxlcztcbi8vIFx0aWYoYXR0YWNoZWRmaWxlcy5sZW5ndGggPT09IDApIHJldHVybjtcbi8vIFx0aWYoYXR0YWNoZWRmaWxlc1swXS5zaXplID4gNzUgKiAxMDI0KSB7XG4vLyBcdFx0ZmlsZUlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCdUaGUgc2VsZWN0ZWQgZmlsZSBtdXN0IG5vdCBiZSBsYXJnZXIgdGhhbiA3NSBrQicpO1xuLy8gXHRcdHJldHVybjtcbi8vIFx0fVxuLy8gXHRmaWxlSW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuLy8gfVxuLy8gZnVuY3Rpb24gc2VuZEZpbGUoZmlsZSkge1xuLy8gXHRjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuLy8gXHRjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4vLyBcdGZvcm1EYXRhLnNldCgnZmlsZScsIGZpbGUpO1xuLy8gXHRyZXF1ZXN0Lm9wZW4oJ3Bvc3QnLCAnJyk7XG4vLyBcdHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7XG4vLyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labWxzWlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbVpwYkdVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4MVEwRkJkVU03UVVGRGRrTXNORVZCUVRSRk8wRkJRelZGTEVsQlFVMHNWVUZCVlN4SFFVRkhPMGxCUTJwQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVcxQ0xHZENRVUZuUWl4RFFVRkRMRU5CUVVFN1NVRkROVVVzU1VGQlNTeERRVUZETEZOQlFWTTdVVUZCUlN4UFFVRk5PMGxCUTNSQ0xHZEZRVUZuUlR0SlFVTm9SU3hUUVVGVExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHTkJRVTBzVDBGQlFTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVdwQ0xFTkJRV2xDTEVOQlFVTXNRMEZCUVR0QlFVTXZSQ3hEUVVGRExFTkJRVUU3UVVGRlJDeFRRVUZUTEUxQlFVMHNRMEZCUXl4VFFVRXlRanRKUVVOcVF5eEpRVUZCTEhWQ1FVRkxMRU5CUVdNN1NVRkRNMElzU1VGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXd3UWtGQk1FSXNRMEZCUXl4RFFVRkJPMGxCUTNSR0xFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5dzBRa0ZCTkVJc1EwRkJReXhEUVVGQk8wbEJRekZHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJN1VVRkJSU3hQUVVGTk8wbEJSVEZFTEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGQk8wbEJSWFJGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1R0UlFVTTFRaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVRkZMRTlCUVU4c1MwRkJTeXhEUVVGRExHZERRVUZuUXl4RFFVRkRMRU5CUVVFN1VVRkZlRVVzU1VGQlRTeFpRVUZaTEVkQlFVY3NlVWhCUldsRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTERoRlFVTjJSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeHJSVUZEWWl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHhTa0ZGYWtVc1EwRkJRVHRSUVVWS0xHTkJRV01zUTBGQlF5eFRRVUZUTEVsQlFVa3NXVUZCV1N4RFFVRkJPMUZCUTNoRExIVkRRVUYxUXp0SlFVTjZReXhEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhKUVVGSk8wbEJRM3BDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUVR0SlFVTXhSQ3hKUVVGTkxFOUJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTnFSQ3hwUkVGQmFVUTdTVUZGYWtRc1NVRkJTU3hQUVVGUE8xRkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVRTdRVUZETVVJc1EwRkJRenRCUVVWRUxGTkJRVk1zWTBGQll5eERRVUZETEVsQlFVazdTVUZETVVJc1NVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUVR0SlFVTXpRaXhKUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVUU3U1VGRmJFUXNTVUZCU1N4UFFVRlBPMUZCUVVVc1QwRkJWU3hKUVVGSkxGVkJRVThzUTBGQlFUdFRRVU0zUWl4SlFVRkpMRmRCUVZjN1VVRkJSU3hQUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlNTeERRVUZCT3p0UlFVTjJSQ3hQUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlNTeERRVUZCTzBGQlEyaEVMRU5CUVVNN1FVRkZSQ3hyUWtGQlpTeFZRVUZWTEVOQlFVRTdRVUZGZWtJc2NVUkJRWEZFTzBGQlEzSkVMREpDUVVFeVFqdEJRVU16UWl3NFFrRkJPRUk3UVVGRE9VSXNiMEpCUVc5Q08wRkJRM0JDTEU5QlFVODdRVUZEVUN4TlFVRk5PMEZCUlU0c2FVTkJRV2xETzBGQlEycERMQ3RDUVVFclFqdEJRVU12UWl3d1EwRkJNRU03UVVGRk1VTXNNa05CUVRKRE8wRkJRek5ETEc5R1FVRnZSanRCUVVOd1JpeFpRVUZaTzBGQlExb3NTMEZCU3p0QlFVTk1MRzlEUVVGdlF6dEJRVU53UXl4SlFVRkpPMEZCUlVvc05FSkJRVFJDTzBGQlF6VkNMRzlEUVVGdlF6dEJRVU53UXl4NVEwRkJlVU03UVVGRmVrTXNLMEpCUVN0Q08wRkJReTlDTERaQ1FVRTJRanRCUVVNM1Fpd3lRa0ZCTWtJN1FVRkRNMElzU1VGQlNTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbnB1dE51bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5ZG93bjogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzczogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlwcmVzcyAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuICAgIC8vIH0pO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5dXA6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5dXAgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2U6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgLy8gXHRjb25zb2xlLmxvZygnY2hhbmdlIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdpbnB1dDogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdpbnB1dCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuICAgIC8vIH0pO1xuICAgIC8vIOuwqe2Wpe2CpOuhnCDsobDsoIjtlaAg65WMIG1pbiBtYXgg7KGw6rG07JeQIOqxuOumsOuLpC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHZhciBpc051bWJlcklucHV0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5qcy1udW1iZXItaW5wdXQnKTtcbiAgICAgICAgaWYgKCFpc051bWJlcklucHV0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHNldExpbWl0TnVtYmVyKTtcbiAgICAgICAgc2V0SW5wdXRPbmx5TnVtYmVycygpO1xuICAgICAgICBmdW5jdGlvbiBzZXRJbnB1dE9ubHlOdW1iZXJzKCkge1xuICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgICAgICAgICAgdmFyIGtleUNvZGVzID0gWzY5LCAxODksIDE4NywgMTkwXTtcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkID0ga2V5Q29kZXMuaW5jbHVkZXMoa2V5Q29kZSk7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZClcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gdGFyZ2V0LnZhbHVlLmxlbmd0aCA9PT0gMCAmJiBrZXlDb2RlID09PSA0OCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8ga2V5Q29kZSA+PSA0OCB8fCBrZXlDb2RlIDw9IDU3IHx8IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSA2OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gMTg5ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSAxODcgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDE5MCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldExpbWl0TnVtYmVyKCkge1xuICAgICAgICAgICAgdmFyIE1BWElNVU0gPSAzMDA7XG4gICAgICAgICAgICB2YXIgTUlOSU1VTiA9IDA7XG4gICAgICAgICAgICB2YXIgaXNGaXJzdFBsYWNlZFplcm8gPSAvKF4wKykvLnRlc3QodGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIHZhciBpc01heGltdW0gPSBOdW1iZXIodGFyZ2V0LnZhbHVlKSA+PSBNQVhJTVVNO1xuICAgICAgICAgICAgdmFyIGlzTGVuZ3RoID0gdGFyZ2V0LnZhbHVlLmxlbmd0aCA+IE1JTklNVU47XG4gICAgICAgICAgICBpZiAoaXNGaXJzdFBsYWNlZFplcm8pXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gTUlOSU1VTjtcbiAgICAgICAgICAgIGlmIChpc0xlbmd0aClcbiAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSB0YXJnZXQudmFsdWUuc2xpY2UoMCwgMyk7XG4gICAgICAgICAgICBpZiAoaXNNYXhpbXVtKVxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IE1BWElNVU07XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBpbnB1dE51bWJlcjtcbi8vIGV4cG9ydCBjb25zdCBpbnB1dFZhcmlhdGlvbiA9ICgpID0+IHtcbi8vIFx0Y29uc3QgdmFyaWF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbicpO1xuLy8gXHRjb25zdCBpbnB1dCA9IHZhcmlhdGlvbi5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XG4vLyBcdGNvbnN0IGRlY3JlbWVudCA9IHZhcmlhdGlvbi5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWRlY3JlbWVudCcpO1xuLy8gXHRjb25zdCBpbmNyZW1lbnQgPSB2YXJpYXRpb24ucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKTtcbi8vIFx0bGV0IHZhbHVlID0gaW5wdXQudmFsdWU7XG4vLyBcdGNvbnN0IE1JTl9WQUxVRSA9IDA7XG4vLyBcdGNvbnN0IE1BWF9WQUxVRSA9IDEwO1xuLy8gXHRsZXRcdGlzTWluaW11bjtcbi8vIFx0bGV0IGlzTWF4aW11bTtcbi8vIFx0Ly8gY29uc3RcdGlzTWluaW11biA9IE51bWJlcih2YWx1ZSkgPD0gTUlOX1ZBTFVFO1xuLy8gXHQvLyBjb25zdCBpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0Ly8gaWYoaXNNaW5pbXVuKSBzZXREaXNhYmxlRGVjcmVtZW50KCk7XG4vLyBcdC8vIGlmKGlzTWF4aW11bSkgc2V0RGlzYWJsZUllY3JlbWVudCgpO1xuLy8gXHRkZWNyZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4vLyBcdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XG4vLyBcdFx0aXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XG4vLyBcdFx0aWYoaXNNaW5pbXVuKSB7XG4vLyBcdFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHRcdHJldHVybjtcbi8vIFx0XHR9XG4vLyBcdFx0aWYoIWlzTWF4aW11bSkge1xuLy8gXHRcdFx0aW5jcmVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0fVxuLy8gXHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKSAtIDE7XG4vLyBcdH0pO1xuLy8gXHRpbmNyZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4vLyBcdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XG4vLyBcdFx0aXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XG4vLyBcdFx0Y29uc29sZS5sb2coaXNNaW5pbXVuLCBpc01heGltdW0sIHZhbHVlKTtcbi8vIFx0XHRpZihpc01heGltdW0pIHtcbi8vIFx0XHRcdGluY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdFx0cmV0dXJuO1xuLy8gXHRcdH1cbi8vIFx0XHRpZighaXNNaW5pbXVuKSB7XG4vLyBcdFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHR9XG4vLyBcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpICsgMTtcbi8vIFx0fSk7XG4vLyBcdGZ1bmN0aW9uIHNldERpc2FibGVEZWNyZW1lbnQoKSB7XG4vLyBcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyBcdGZ1bmN0aW9uIHNldERpc2FibGVJZWNyZW1lbnQoKSB7XG4vLyBcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyB9O1xuLy8gdmFsdWUgPSBpc05hTih2YWx1ZSkgPyAwIDogdmFsdWU7XG4vLyB2YWx1ZSA8IDEgPyB2YWx1ZSA9IDEgOiAnJztcbi8vIHZhbHVlLS07XG4vLyBwYXJzZUludCB2cyBOdW1iZXJcbi8vIFRPRE86IHRhcmdldCDtgbTrnpjsiqQg7Yag6riA7J20IOyViCDrkJjrr4Dri4jri6RcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgbWluVmFsdWUgPSAwO1xuICAgIHZhciBtYXhWYWx1ZSA9IDEwO1xuICAgIHZhciB0YXJnZXRJbnB1dDtcbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50JykpIHtcbiAgICAgICAgdGFyZ2V0SW5wdXQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XG4gICAgICAgIGlmICh0YXJnZXRJbnB1dC52YWx1ZSA8PSBtaW5WYWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLS10YXJnZXRJbnB1dC52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpKSB7XG4gICAgICAgIHRhcmdldElucHV0ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xuICAgICAgICBpZiAodGFyZ2V0SW5wdXQudmFsdWUgPj0gbWF4VmFsdWUpIHtcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICsrdGFyZ2V0SW5wdXQudmFsdWU7XG4gICAgfVxufSk7XG4vLyBmdW5jdGlvbiBzZXRTdHJpbmdCeXRlcygpIHt9XG4vLyBleHBvcnQgY29uc3QgaW5wdXQgPSB7XG4vLyBcdHRleHRhcmVhOiBpbnB1dFRleHRhcmVhKCksXG4vLyBcdG51bWJlcjogaW5wdXROdW1iZXIoKVxuLy8gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJuVnRZbVZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2liblZ0WW1WeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUU3hYUVVGWExFZEJRVWM3U1VGRGJFSXNiMFJCUVc5RU8wbEJRM0JFTEdsRVFVRnBSRHRKUVVOcVJDeHpSRUZCYzBRN1NVRkRkRVFzVFVGQlRUdEpRVU5PTEhGRVFVRnhSRHRKUVVOeVJDeHJSRUZCYTBRN1NVRkRiRVFzZFVSQlFYVkVPMGxCUTNaRUxFMUJRVTA3U1VGRFRpeHJSRUZCYTBRN1NVRkRiRVFzSzBOQlFTdERPMGxCUXk5RExHOUVRVUZ2UkR0SlFVTndSQ3hOUVVGTk8wbEJRMDRzYlVSQlFXMUVPMGxCUTI1RUxHZEVRVUZuUkR0SlFVTm9SQ3h4UkVGQmNVUTdTVUZEY2tRc1RVRkJUVHRKUVVOT0xHdEVRVUZyUkR0SlFVTnNSQ3dyUTBGQkswTTdTVUZETDBNc2IwUkJRVzlFTzBsQlEzQkVMRTFCUVUwN1NVRkZUaXc0UWtGQk9FSTdTVUZET1VJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGQkxFdEJRVXM3VVVGRGFFTXNTVUZCUVN4eFFrRkJUU3hEUVVGbE8xRkJSVGRDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHRSUVVONFJDeEpRVUZKTEVOQlFVTXNZVUZCWVR0WlFVRkZMRTlCUVUwN1VVRkZNVUlzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUVR0UlFVTnNSQ3h0UWtGQmJVSXNSVUZCUlN4RFFVRkJPMUZCUlhKQ0xGTkJRVk1zYlVKQlFXMUNPMWxCUTJ4Q0xFbEJRVUVzZFVKQlFVOHNRMEZCVlR0WlFVTjZRaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzFsQlEzQkRMRWxCUVUwc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1dVRkRNVU1zU1VGQlNTeFBRVUZQTzJkQ1FVRkZMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdFpRVU51UXl4NVJVRkJlVVU3V1VGRGVrVXNORVJCUVRSRU8xbEJRelZFTERSRFFVRTBRenRaUVVNMVF5dzJRMEZCTmtNN1dVRkROME1zTmtOQlFUWkRPMWxCUXpkRExEWkRRVUUyUXp0UlFVTXZReXhEUVVGRE8xRkJRMFFzVTBGQlV5eGpRVUZqTzFsQlEzSkNMRWxCUVUwc1QwRkJUeXhIUVVGSExFZEJRVWNzUTBGQlFUdFpRVU51UWl4SlFVRk5MRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVUU3V1VGRGFrSXNTVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdFpRVU53UkN4SlFVRk5MRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRTlCUVU4c1EwRkJRVHRaUVVOcVJDeEpRVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZGT1VNc1NVRkJTU3hwUWtGQmFVSTdaMEpCUVVVc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZETjBNc1NVRkJTU3hSUVVGUk8yZENRVUZGTEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRM0pFTEVsQlFVa3NVMEZCVXp0blFrRkJSU3hOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUVR0UlFVTjJReXhEUVVGRE8wbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hyUWtGQlpTeFhRVUZYTEVOQlFVRTdRVUZGTVVJc2QwTkJRWGRETzBGQlEzaERMRGhFUVVFNFJEdEJRVU01UkN4cFJVRkJhVVU3UVVGRGFrVXNlVVZCUVhsRk8wRkJRM3BGTEhsRlFVRjVSVHRCUVVWNlJTdzBRa0ZCTkVJN1FVRkROVUlzZDBKQlFYZENPMEZCUTNoQ0xIbENRVUY1UWp0QlFVTjZRaXhyUWtGQmEwSTdRVUZEYkVJc2EwSkJRV3RDTzBGQlEyeENMRzlFUVVGdlJEdEJRVU53UkN4dlJFRkJiMFE3UVVGRmNFUXNNa05CUVRKRE8wRkJRek5ETERKRFFVRXlRenRCUVVVelF5eHJSRUZCYTBRN1FVRkRiRVFzTkVOQlFUUkRPMEZCUXpWRExEUkRRVUUwUXp0QlFVTTFReXh2UWtGQmIwSTdRVUZEY0VJc05rTkJRVFpETzBGQlF6ZERMR0ZCUVdFN1FVRkRZaXhOUVVGTk8wRkJRMDRzY1VKQlFYRkNPMEZCUTNKQ0xHZEVRVUZuUkR0QlFVTm9SQ3hOUVVGTk8wRkJSVTRzSzBKQlFTdENPMEZCUXk5Q0xFOUJRVTg3UVVGRFVDeHJSRUZCYTBRN1FVRkRiRVFzTkVOQlFUUkRPMEZCUXpWRExEUkRRVUUwUXp0QlFVTTFReXc0UTBGQk9FTTdRVUZET1VNc2IwSkJRVzlDTzBGQlEzQkNMRFpEUVVFMlF6dEJRVU0zUXl4aFFVRmhPMEZCUTJJc1RVRkJUVHRCUVVOT0xIRkNRVUZ4UWp0QlFVTnlRaXhuUkVGQlowUTdRVUZEYUVRc1RVRkJUVHRCUVVWT0xDdENRVUVyUWp0QlFVTXZRaXhQUVVGUE8wRkJSVkFzYjBOQlFXOURPMEZCUTNCRExEUkRRVUUwUXp0QlFVTTFReXhaUVVGWk8wRkJRMW9zUzBGQlN6dEJRVU5NTEc5RFFVRnZRenRCUVVOd1F5dzBRMEZCTkVNN1FVRkROVU1zV1VGQldUdEJRVU5hTEV0QlFVczdRVUZEVEN4TFFVRkxPMEZCUlV3c2IwTkJRVzlETzBGQlEzQkRMRGhDUVVFNFFqdEJRVU01UWl4WFFVRlhPMEZCUlZnc2NVSkJRWEZDTzBGQlEzSkNMRGhDUVVFNFFqdEJRVU01UWl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVFc1MwRkJTenRKUVVNNVFpeEpRVUZCTEhGQ1FVRk5MRU5CUVdVN1NVRkROMElzU1VGQlRTeFJRVUZSTEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUTJ4Q0xFbEJRVTBzVVVGQlVTeEhRVUZITEVWQlFVVXNRMEZCUVR0SlFVTnVRaXhKUVVGSkxGZEJRVmNzUTBGQlFUdEpRVVZtTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4RlFVRkZPMUZCUXpkRExGZEJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkJPMUZCUTNCRkxFbEJRVWtzVjBGQlZ5eERRVUZETEV0QlFVc3NTVUZCU1N4UlFVRlJMRVZCUVVVN1dVRkRha01zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3V1VGRGJrTXNUMEZCVFR0VFFVTlFPMUZCUTBRc1JVRkJSU3hYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZCTzB0QlEzQkNPMGxCUTBRc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEhsQ1FVRjVRaXhEUVVGRExFVkJRVVU3VVVGRE4wTXNWMEZCVnl4SFFVRkhMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zWVVGQllTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVUU3VVVGRGNFVXNTVUZCU1N4WFFVRlhMRU5CUVVNc1MwRkJTeXhKUVVGSkxGRkJRVkVzUlVGQlJUdFpRVU5xUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTnVReXhQUVVGTk8xTkJRMUE3VVVGRFJDeEZRVUZGTEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVFN1MwRkRjRUk3UVVGRFNDeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVVkdMQ3RDUVVFclFqdEJRVVV2UWl4NVFrRkJlVUk3UVVGRGVrSXNPRUpCUVRoQ08wRkJRemxDTEhsQ1FVRjVRanRCUVVONlFpeExRVUZMSW4wPSJdLCJzb3VyY2VSb290IjoiIn0=