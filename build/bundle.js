!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=o(n(2)),i=n(3),c=n(4),s=n(5),a=n(6),l=o(n(7)),u=o(n(18));window.addEventListener("unload",(function(){}));var d=new Set;window.addEventListener("beforeunload",(function(e){d.size&&(e.returnValue="There is pending work. Sure you want to leave?")})),window.addEventListener("offline",(function(){var e=document.querySelector(".js-offline");e&&(e.style.display="block")}));var f=function(){r.default().then((function(){l.default.modal({selector:".js-modal"}),u.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),l.default.toggleClass({selector:".js-toggle"}).setEvent(),l.default.enterTarget({selector:".js-hover-trigger"}),l.default.tabMenu(),l.default.close({selector:".js-close"}),l.default.toTop({selector:".js-to-top"}),l.default.scrollAnimation(),u.default.file(),u.default.textarea(),u.default.number(),l.default.scrollspy(),c.setGraph(),a.countDownClock(20,"days"),s.carousel(),document.addEventListener("scroll",(function(){var e,t,n,o,r,i,c,s,a,l,u=null===(e=document.querySelector(".pledge"))||void 0===e?void 0:e.getBoundingClientRect().top,d=null===(t=document.querySelector(".dictionary"))||void 0===t?void 0:t.getBoundingClientRect().top,f=null===(n=document.querySelector(".faq"))||void 0===n?void 0:n.getBoundingClientRect().top,v=null===(o=document.querySelector(".dictionary"))||void 0===o?void 0:o.getBoundingClientRect().bottom,m=(null===(r=document.querySelector(".newneek-subscribe"))||void 0===r?void 0:r.getBoundingClientRect().bottom)+2e3;console.log(v,m),window.pageYOffset>v&&window.pageYOffset<m?null===(i=document.querySelector(".newneek-banner"))||void 0===i||i.classList.add("is-up"):null===(c=document.querySelector(".newneek-banner"))||void 0===c||c.classList.remove("is-up"),window.pageXOffset>u&&window.pageXOffset<d?(document.querySelectorAll(".newneek-navbar-menu-item").forEach((function(e,t){e.classList.remove("is-active")})),null===(s=document.querySelector(".newneek-navbar-menu-item:first-child"))||void 0===s||s.classList.add("is-active")):window.pageXOffset>d&&window.pageXOffset<f?(document.querySelectorAll(".newneek-navbar-menu-item").forEach((function(e,t){e.classList.remove("is-active")})),null===(a=document.querySelector(".newneek-navbar-menu-item:nth-of-type(2)"))||void 0===a||a.classList.add("is-active")):window.pageXOffset>f&&(document.querySelectorAll(".newneek-navbar-menu-item").forEach((function(e,t){e.classList.remove("is-active")})),null===(l=document.querySelector(".newneek-navbar-menu-item:last-child"))||void 0===l||l.classList.add("is-active"))}));var e=new Date,t=new Date("April 16, 2020").getTime()-e.getTime();t=Math.floor(t/864e5);var n=document.querySelector(".dday");n&&(n.innerText=t);var o=document.querySelector(".js-display-list"),r=document.querySelector(".js-display-grid"),i=document.querySelector(".profile-body");o&&r&&i&&(o.addEventListener("click",(function(){o.classList.add("is-selected"),r.classList.remove("is-selected"),i.classList.add("list")})),r.addEventListener("click",(function(){o.classList.remove("is-selected"),r.classList.add("is-selected"),i.classList.remove("list")})));var d,f;d=document.querySelector(".js-comment-write"),f=document.querySelectorAll(".js-comment-textfield"),(d||f)&&f.forEach((function(e){return e.addEventListener("focus",(function(){d&&d.classList.add("is-focused")}))}))}))};function v(){var e=document.querySelector(".header");if(e){["#design","#contact"].includes(window.location.hash)?e.classList.add("is-white"):e.classList.remove("is-white")}}window.addEventListener("hashchange",f),window.addEventListener("hashchange",(function(){var e,t,n=document.querySelector(".navbar-burger");if(!n)return;n.classList.remove("is-active"),null===(t=null===(e=n)||void 0===e?void 0:e.nextElementSibling)||void 0===t||t.classList.remove("is-visible")})),window.addEventListener("hashchange",v),document.addEventListener("DOMContentLoaded",(function(){i.loader(),i.detectBrowser(),v(),s.setDarkmode(),l.default.toggleClass({selector:".js-navbar-toggle"}).setEvent(),f();window.addEventListener("scroll",(function(){l.default.stickyElement({targetElement:".post-head",addClass:"is-sticky"}),l.default.stickyElement({targetElement:".js-navbar",addClass:"is-sticky-navbar"})})),window.addEventListener("scroll",(function(){var e=document.querySelector(".post-head-progress");if(e){var t=window.pageYOffset/(document.body.scrollHeight-window.innerHeight)*100+"%";e.style.width=t}}),!0)})),document.addEventListener("submit",(function(e){return e.preventDefault()}))},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=window.location.hash,t=e?"/views/"+e.substring(1)+".html":"/views/profile.html";return fetch(t).then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(e){var t=document.getElementById("view");t&&(t.innerHTML=e,window.scrollTo(0,0))})).catch((function(e){return console.warn("router: ",e)}))}},function(e,t,n){"use strict";function o(e){var t=document.body;"fixed"===getComputedStyle(e).position?t.style.marginTop=e.clientHeight+"px":t.style.marginTop=0}Object.defineProperty(t,"__esModule",{value:!0}),t.loader=function(){var e=document.querySelector(".js-loading");if(e){var t=document.body;document.addEventListener("DOMContentLoaded",(function(){t.classList.add("body-lock")})),window.addEventListener("load",(function(){setTimeout((function(){e.classList.add("is-hidden"),t.classList.remove("body-lock")}),0)}))}},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?(e.style.display="block",console.log(t)):-1!==t.indexOf("chrome")&&console.log(t,"크롬")}},t.googleAnalytics=function(){},t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return o(e)};o(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGraph=function(){var e=document.querySelectorAll(".js-graph .graph-item");e&&e.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var o=parseInt(n.innerText);t.style.height=o+"px",n.style.bottom=o+"px"}}))}},function(e,t,n){"use strict";function o(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),o=e.querySelector(".slider-arrows-prev"),r=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&o&&r&&i){var c=t.offsetWidth,s=0;n.forEach((function(e){return s+=e.offsetWidth})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",c)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",o))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.countDownClock=function(e,t){void 0===e&&(e=100),void 0===t&&(t="seconds");var n=document.querySelector(".js-days"),o=document.querySelector(".js-hours"),r=document.querySelector(".js-minutes"),i=document.querySelector(".js-seconds");function c(e){var t=Date.now()+1e3*e,c=setInterval((function(){var e=Math.round((t-Date.now())/1e3);e<=0?clearInterval(c):n&&o&&r&&i&&(n.innerHTML=""+Math.floor(e/86400),o.innerText=""+Math.floor(e%86400/3600),r.innerText=""+Math.floor(e%86400%3600/60),i.innerText=""+(e%60<10?"0"+e%60:e%60))}),1e3)}n&&function(t){switch(t){case"seconds":return c(e);case"minutes":return c(60*e);case"hours":return c(60*e*60);case"days":c(60*e*60*24)}}(t)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=o(n(9)),c=o(n(10)),s=o(n(11)),a=o(n(12)),l=o(n(13)),u=o(n(14)),d=o(n(15)),f=o(n(16)),v=o(n(17));t.default={toggleClass:r.default,enterTarget:i.default,modal:s.default,tabMenu:c.default,toTop:a.default,stickyElement:l.default,scrollAnimation:u.default,scrollspy:v.default,close:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",setEvent:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(n){var o;n.preventDefault(),n.stopPropagation();var r=null===(o=t)||void 0===o?void 0:o.nextElementSibling;r&&(e.toggleClassTrigger(t),e.toggleClassTarget(r),e.triggers.forEach((function(t){n.target!==t&&e.removeAllClass(t)})))}))})),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.removeAllClass(t)}))})))},toggleClassTrigger:function(e){e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS))},toggleClassTarget:function(e){e.classList.toggle(this.ACTIVE_CLASS2),e.addEventListener("click",(function(e){return e.stopPropagation()}))},removeAllClass:function(e){e.setAttribute("aria-expanded","true"),e.classList.remove(this.ACTIVE_CLASS),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,o=document.querySelectorAll(t);o&&o.forEach((function(e){var t=e===document.querySelector(".js-navbar .navbar-menu-item");e.addEventListener("mouseenter",(function(){e.setAttribute("aria-expanded","true"),e.classList.add("is-expanded"),t&&n.classList.add("is-shown"),e.addEventListener("mouseleave",(function(){return e.setAttribute("aria-expanded","false"),e.classList.remove("is-expanded"),void(t&&n.classList.remove("is-shown"))}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index"),r=document.querySelector(".profile-tablist-active");n&&r&&t.closest("[role=tab]")&&(r.style.left=t.offsetLeft+"px",n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach((function(e){e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")})))}),!0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);if(n){var o=0;n.forEach((function(e){return e.addEventListener("click",(function(t){var n,i;t.stopPropagation(),t.preventDefault();var c=e.nextElementSibling,s=null===(n=c)||void 0===n?void 0:n.querySelector(".js-modal-close");o=window.pageYOffset,function(e){var t;null===(t=e)||void 0===t||t.classList.add("is-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+o+"px"}(c),history.pushState({page_id:1,user_id:5},"","hello-world.html"),window.onpopstate=history.onpushstate=function(){-1===window.location.href.split("/").pop().indexOf("modal")&&r(c)},document.addEventListener("click",(function(){return r(c)})),null===(i=s)||void 0===i||i.addEventListener("click",(function(){return r(c)}))}))})),document.querySelectorAll(".modal-dialog").forEach((function(e){return e.addEventListener("click",(function(e){return e.stopPropagation()}))}))}function r(e){var t,n;(null===(t=e)||void 0===t?void 0:t.classList.contains("is-visible"))&&(null===(n=e)||void 0===n||n.classList.remove("is-visible"),document.body.classList.remove("body-lock"),function(e){window.scrollTo(0,e)}(o))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0),window.location.hash=n.name||n.href}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,o=document.body,r=document.querySelector(t);if(r){var i,c=r.offsetHeight;window.addEventListener("resize",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){c=r.offsetHeight}))})),window.addEventListener("scroll",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){window.pageYOffset>r.offsetTop+c?o.classList.add(n):o.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelectorAll(".js-scroll-animation");console.log(e);var t;e&&(e.forEach((function(e){e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){e.forEach((function(e){e.getBoundingClientRect().top+.5*e.clientHeight<=window.innerHeight&&(e.classList.add("is-scrolled"),t&&window.cancelAnimationFrame(t),t=window.requestAnimationFrame((function(){})))}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".loading-object");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,o=e.clientX,r=e.clientY;n.style.left=o+"px",n.style.top=r+"px"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){window.addEventListener("scroll",(function(){}))}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(19)),i=o(n(20)),c=o(n(21)),s=o(n(22));t.default={checkbox:r.default,textarea:i.default,file:c.default,number:s.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),o=n.every((function(e){return e.checked})),r=n.some((function(e){return e.checked}));t.checked=o,t.indeterminate=r&&!o,t.dataset.indeterminate=r&&!o},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,n=e.target;if(!n&&"textarea"===n.nodeName.toLowerCase()){var r=document.querySelector(".textfield-byte b");if(r){var i=(null===(t=n)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;r.innerText=i,i>30?n.parentNode.classList.add("is-invalid"):n.parentNode.classList.remove("is-invalid"),o(n)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,o,r='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,o=t>=1024&&t<1048576,t<1024?t+"bytes":o?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=r}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,o=n.value.length>0;e&&(n.value=0);o&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t,n=e.target;if(n.closest(".js-variation-decrement")){if((t=n.parentNode.querySelector(".js-variation-input")).value<=0)return n.classList.add("is-disabled"),void n.setAttribute("disabled","true");--t.value}if(n.closest(".js-variation-increment")){if((t=n.parentNode.querySelector(".js-variation-input")).value>=10)return n.classList.add("is-disabled"),void n.removeAttribute("disabled");++t.value}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3VpLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvY291bnRkb3duLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9nZ2xlQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2VudGVyVGFyZ2V0LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC90YWJNZW51LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9tb2RhbC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3N0aWNreUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2xvc2UudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2N1c3RvbUN1cnNvci50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvc2Nyb2xsc3B5LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvY2hlY2tib3gudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L3RleHRhcmVhLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9maWxlLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9udW1iZXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwicm91dGVyXzEiLCJsb2FkXzEiLCJ1aV8xIiwic2V0RGFya01vZGVfMSIsImNvdW50ZG93bl8xIiwiaW5kZXhfMSIsImluZGV4XzIiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicGVuZGluZ09wcyIsIlNldCIsImV2ZW50Iiwic2l6ZSIsInJldHVyblZhbHVlIiwib2ZmbGluZUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZSIsImRpc3BsYXkiLCJkb21FdmVudHMiLCJkZWZhdWx0IiwidGhlbiIsIm1vZGFsIiwic2VsZWN0b3IiLCJjaGVja2JveCIsImNoZWNrQWxsU2VsZWN0b3IiLCJjaGVja1NlbGVjdG9yIiwic2V0RXZlbnQiLCJ0b2dnbGVDbGFzcyIsImVudGVyVGFyZ2V0IiwidGFiTWVudSIsImNsb3NlIiwidG9Ub3AiLCJzY3JvbGxBbmltYXRpb24iLCJmaWxlIiwidGV4dGFyZWEiLCJudW1iZXIiLCJzY3JvbGxzcHkiLCJzZXRHcmFwaCIsImNvdW50RG93bkNsb2NrIiwiY2Fyb3VzZWwiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJfZyIsIl9oIiwiX2oiLCJfayIsIm5hdk9mZnNldDEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJuYXZPZmZzZXQyIiwibmF2T2Zmc2V0MyIsIm9mZnNldCIsImJvdHRvbSIsIm9mZnNldDIiLCJjb25zb2xlIiwibG9nIiwicGFnZVlPZmZzZXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJwYWdlWE9mZnNldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4Iiwibm93IiwiRGF0ZSIsImdhcCIsImdldFRpbWUiLCJNYXRoIiwiZmxvb3IiLCJhYWEiLCJpbm5lclRleHQiLCJsaXN0IiwiZ3JpZCIsIndvcmtzIiwiY29tbWVudFdyaXRlIiwiY29tbWVudFRleHRGaWVsZCIsImVsZW1lbnQiLCJkZXRlY3RIZWFkZXJUaGVtZSIsInBhZ2VIZWFkRWxlbWVudCIsImluY2x1ZGVzIiwibG9jYXRpb24iLCJoYXNoIiwibmF2aWdhdGlvblRyaWdnZXIiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJsb2FkZXIiLCJkZXRlY3RCcm93c2VyIiwic2V0RGFya21vZGUiLCJzdGlja3lFbGVtZW50IiwidGFyZ2V0RWxlbWVudCIsImFkZENsYXNzIiwicHJvZ3Jlc3NCYXIiLCJzY3JvbGxQZXJjZW50IiwiYm9keSIsInNjcm9sbEhlaWdodCIsImlubmVySGVpZ2h0Iiwid2lkdGgiLCJwcmV2ZW50RGVmYXVsdCIsInBhZ2UiLCJzdWJzdHJpbmciLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJ0ZXh0IiwiUHJvbWlzZSIsInJlamVjdCIsImh0bWwiLCJ2aWV3IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJzY3JvbGxUbyIsImNhdGNoIiwiZXJyb3IiLCJ3YXJuIiwic2V0Qm9keU1hcmdpblRvcCIsImhlYWRlckVsZW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJsb2FkZXJFbGVtZW50Iiwic2V0VGltZW91dCIsIkJyb3dzZXJFbGVtZW50IiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiZ29vZ2xlQW5hbHl0aWNzIiwiYWRqdXN0VG9wUGFkZGluZyIsImZuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZ3JhcGhJdGVtcyIsImdyYXBoSXRlbUJhciIsImdyYXBoSXRlbVZhbHVlIiwiZ3JhcGhWYWx1ZSIsInBhcnNlSW50IiwiaGVpZ2h0IiwidHQiLCJ0b2dnbGUiLCJjb250YWlucyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY2F0ZWdvcnkiLCJjYXRlZ29yeUxpc3QiLCJjYXRlZ29yeUxpc3RTbGlkZSIsImNhdGVnb3J5TmF2aWdhdGlvblByZXYiLCJjYXRlZ29yeU5hdmlnYXRpb25OZXh0IiwiY2F0ZWdvcnlEb3RzIiwiY2F0ZWdvcnlDb250YWluZXJXaWR0aCIsIm9mZnNldFdpZHRoIiwic3VtIiwic2Nyb2xsTGVmdCIsImRhcmttb2RlQnV0dG9uIiwibGFzdFRoZW1lIiwiZ2V0SXRlbSIsImxvYWRUaGVtZSIsImZvcm1hdCIsImRheXNFbGVtZW50IiwiaG91cnNFbGVtZW50IiwibWludXRlc0VsZW1lbnQiLCJzZWNvbmRzRWxlbWVudCIsInRpbWVyIiwic2Vjb25kcyIsImNvdW50ZG93biIsInNldEludGVydmFsIiwic2Vjb25kc0xlZnQiLCJyb3VuZCIsImNsZWFySW50ZXJ2YWwiLCJjb252ZXJ0Rm9ybWF0IiwidG9nZ2xlQ2xhc3NfMSIsImVudGVyVGFyZ2V0XzEiLCJ0YWJNZW51XzEiLCJtb2RhbF8xIiwidG9Ub3BfMSIsInN0aWNreUVsZW1lbnRfMSIsInNjcm9sbEFuaW1hdGlvbl8xIiwiY2xvc2VfMSIsImN1c3RvbUN1cnNvcl8xIiwic2Nyb2xsc3B5XzEiLCJjdXN0b21DdXJzb3IiLCJ0cmlnZ2VyIiwidHJpZ2dlcnMiLCJBQ1RJVkVfQ0xBU1MiLCJBQ1RJVkVfQ0xBU1MyIiwiX3RoaXMiLCJzdG9wUHJvcGFnYXRpb24iLCJ0cmlnZ2VyTmV4dEVsZW1lbnQiLCJ0b2dnbGVDbGFzc1RyaWdnZXIiLCJ0b2dnbGVDbGFzc1RhcmdldCIsInRhcmdldCIsInJlbW92ZUFsbENsYXNzIiwic2V0QXR0cmlidXRlIiwiaG92ZXJFbGVtZW50cyIsImlzTmF2aWdhdGlvbiIsInRhYnMiLCJwYXJlbnROb2RlIiwidGFiSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJ0YWJBY3RpY2VCYXIiLCJjbG9zZXN0IiwibGVmdCIsIm9mZnNldExlZnQiLCJ0YWIiLCJtb2RhbHMiLCJwYWdlWSIsImNsb3NlVHJpZ2dlciIsInNob3dNb2RhbCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJvbnBvcHN0YXRlIiwib25wdXNoc3RhdGUiLCJocmVmIiwic3BsaXQiLCJwb3AiLCJjbG9zZU1vZGFsIiwic2V0U2Nyb2xsWSIsInRvVG9wRWxlbWVudCIsImlzU2Nyb2xsaW5nIiwic3RpY2t5RWxlbWVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib2Zmc2V0VG9wIiwic2Nyb2xsVGFyZ2V0IiwidGVtcCIsImNsb3NlRWxlbWVudHMiLCJoaWRkZW4iLCJjdXJzb3IiLCJob3ZlckVsZW1lbnQiLCJzZXRDdXJzb3IiLCJjdXJzb3JFbGVtZW50Iiwic2V0UmlwcGxlIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsImNoZWNrYm94XzEiLCJ0ZXh0YXJlYV8xIiwiZmlsZV8xIiwibnVtYmVyXzEiLCJjaGVja0FsbCIsImNoZWNrSXRlbXMiLCJzZXRDaGVja0FsbCIsImNoZWNrSXRlbSIsInNldENoZWNrRWFjaCIsImNoZWNrcyIsIkFycmF5IiwiZnJvbSIsImlzQ2hlY2tlZEV2ZXJ5IiwiZXZlcnkiLCJjaGVja2VkIiwiaXNDaGVja2VkU29tZSIsInNvbWUiLCJpbmRldGVybWluYXRlIiwiZGF0YXNldCIsImF1dG9FeHBhbmQiLCJmaWVsZCIsImNvbXB1dGVkIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm5vZGVOYW1lIiwiYnl0ZUVsZW1lbnQiLCJzdHJpbmdCeXRlTGVuZ3RoIiwicmVwbGFjZSIsImxlbmd0aCIsImZpbGVJbnB1dCIsImZpbGVzIiwiYXR0YWNobWVudExpc3QiLCJhdHRhY2htZW50SGVscGVyIiwidHlwZSIsInZhbGlkRmlsZVR5cGUiLCJhbGVydCIsImlzS2lsb0J5dGVzIiwiZmlsZVRlbXBsYXRlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwidG9GaXhlZCIsImF0dGFjaCIsImtleUNvZGUiLCJpc0ZpcnN0UGxhY2VkWmVybyIsInRlc3QiLCJpc01heGltdW0iLCJOdW1iZXIiLCJpc0xlbmd0aCIsInNsaWNlIiwidGFyZ2V0SW5wdXQiLCJyZW1vdmVBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxD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UixPQUpBc04sRUFBT3RJLFVBQVVDLElBQUksb0JBQ3JCcUksRUFBT0UsYUFBYSxXQUFZLFVBS2xDNEYsRUFBWXBULE1BRWxCLEdBQUlzTixFQUFPVSxRQUFRLDJCQUE0QixDQUUzQyxJQURBb0YsRUFBYzlGLEVBQU9NLFdBQVcxTCxjQUFjLHdCQUM5QmxDLE9BZkosR0FvQlIsT0FKQXNOLEVBQU90SSxVQUFVQyxJQUFJLG9CQUNyQnFJLEVBQU8rRixnQkFBZ0IsY0FLekJELEVBQVlwVCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xucmVxdWlyZShcIi4vc3R5bGVzaGVldHMvc3R5bGUuc2Nzc1wiKTtcbi8vIGltcG9ydCBwb2x5ZmlsbCBmcm9tICcuL2phdmFzY3JpcHRzL3BvbHlmaWxsJztcbnZhciByb3V0ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9yb3V0ZXJcIikpO1xudmFyIGxvYWRfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2xvYWRcIik7XG52YXIgdWlfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3VpXCIpO1xudmFyIHNldERhcmtNb2RlXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZVwiKTtcbi8vIGltcG9ydCB7IGZpbG1zIH0gZnJvbSAnLi4vdmlld3MvZmlsbXMnO1xudmFyIGNvdW50ZG93bl8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvY291bnRkb3duXCIpO1xudmFyIGluZGV4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvZXZlbnQvaW5kZXhcIikpO1xudmFyIGluZGV4XzIgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vamF2YXNjcmlwdHMvaW5wdXQvaW5kZXhcIikpO1xuLy8gY2xvc2Ug67O064ukIGRlbGV0ZeqwgCDtj6zqtITsoIHsnbgg64Sk7J2067CNXG4vLyB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuLy8gICByZXR1cm4gbiAlIDIgPT0gMDtcbi8vIH0pO1xuLy8gZnVuY3Rpb24gcmVtb3ZlSXRlbShpdGVtcywgcmVtb3ZhYmxlKSB7XG4vLyAgIGNvbnN0IGluZGV4ID0gaXRlbXMuaW5kZXhPZihyZW1vdmFibGUpO1xuLy8gICByZXR1cm4gWy4uLml0ZW1zLnNsaWNlKDAsIGluZGV4KSwgLi4uaXRlbXMuc2xpY2UoaW5kZXgrMSldO1xuLy8gfVxuLy8gbnB4IC1wIEBzdG9yeWJvb2svY2xpIHNiIGluaXQgLS10eXBlIHJlYWN0XG4vLyB0aHJvdyBuZXcgRXJyb3Jcbi8vIC5ib3g6aG92ZXIgeyB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO31cbi8vIElmIHlvdSBkbyBub3QgcmV0dXJuIGFueXRoaW5nLCBhIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCwgd2hpY2ggdmFsaWRhdGVzIGFzIGZhbHNleS5cbi8vZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIHN1cHBvcnRzLWRhdGUnO1xuLy8gaWYod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6ODAwcHgpJykubWF0Y2hlcykge31cbi8vIGRpdi5jbGFzc0xpc3QucmVwbGFjZShcImZvb1wiLCBcImJhclwiKTtcbi8vIGxldCBmb3JtQ2hhbmdlZCA9IGZhbHNlO1xuLy8gbXlGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IGZvcm1DaGFuZ2VkID0gdHJ1ZSk7XG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKGV2ZW50KSA9PiB7XG4vLyAgIGlmIChmb3JtQ2hhbmdlZCkge1xuLy8gICAgIGV2ZW50LnJldHVyblZhbHVlID0gJ1lvdSBoYXZlIHVuZmluaXNoZWQgY2hhbmdlcyEnO1xuLy8gICB9XG4vLyB9KTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCBmdW5jdGlvbiBsb2dEYXRhKCkge1xuICAgIC8vIG5hdmlnYXRvci5zZW5kQmVhY29uKCcvbG9nJywgYW5hbHl0aWNzRGF0YSlcbn0pO1xudmFyIHBlbmRpbmdPcHMgPSBuZXcgU2V0KCk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKHBlbmRpbmdPcHMuc2l6ZSkge1xuICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9ICdUaGVyZSBpcyBwZW5kaW5nIHdvcmsuIFN1cmUgeW91IHdhbnQgdG8gbGVhdmU/JztcbiAgICB9XG59KTtcbi8vIGZ1bmN0aW9uIGFkZFRvUGVuZGluZ1dvcmsocHJvbWlzZSkge1xuLy8gICBidXN5c3Bpbm5lci5oaWRkZW4gPSBmYWxzZVxuLy8gICBwZW5kaW5nT3BzLmFkZChwcm9taXNlKVxuLy8gICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuLy8gICAgIHBlbmRpbmdPcHMuZGVsZXRlKHByb21pc2UpXG4vLyAgICAgYnVzeXNwaW5uZXIuaGlkZGVuID0gcGVuZGluZ09wcy5zaXplID09PSAwXG4vLyAgIH1cbi8vICAgcHJvbWlzZS50aGVuKGNsZWFudXApLmNhdGNoKGNsZWFudXApXG4vLyB9XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2ZmbGluZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtb2ZmbGluZScpO1xuICAgIGlmICghb2ZmbGluZUVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICBvZmZsaW5lRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn0pO1xudmFyIGRvbUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByb3V0ZXJfMS5kZWZhdWx0KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5tb2RhbCh7IHNlbGVjdG9yOiAnLmpzLW1vZGFsJyB9KTtcbiAgICAgICAgaW5kZXhfMi5kZWZhdWx0LmNoZWNrYm94KHsgY2hlY2tBbGxTZWxlY3RvcjogJy5qcy1jaGVja2FsbCcsIGNoZWNrU2VsZWN0b3I6ICcuanMtY2hlY2snIH0pLnNldEV2ZW50KCk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC50b2dnbGVDbGFzcyh7IHNlbGVjdG9yOiAnLmpzLXRvZ2dsZScgfSkuc2V0RXZlbnQoKTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LmVudGVyVGFyZ2V0KHsgc2VsZWN0b3I6ICcuanMtaG92ZXItdHJpZ2dlcicgfSk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC50YWJNZW51KCk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5jbG9zZSh7IHNlbGVjdG9yOiAnLmpzLWNsb3NlJyB9KTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnRvVG9wKHsgc2VsZWN0b3I6ICcuanMtdG8tdG9wJyB9KTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnNjcm9sbEFuaW1hdGlvbigpO1xuICAgICAgICAvLyBldmVudC5jdXN0b21DdXJzb3IoKVxuICAgICAgICBpbmRleF8yLmRlZmF1bHQuZmlsZSgpO1xuICAgICAgICBpbmRleF8yLmRlZmF1bHQudGV4dGFyZWEoKTtcbiAgICAgICAgaW5kZXhfMi5kZWZhdWx0Lm51bWJlcigpO1xuICAgICAgICBpbmRleF8xLmRlZmF1bHQuc2Nyb2xsc3B5KCk7XG4gICAgICAgIHVpXzEuc2V0R3JhcGgoKTtcbiAgICAgICAgY291bnRkb3duXzEuY291bnREb3duQ2xvY2soMjAsICdkYXlzJyk7XG4gICAgICAgIHNldERhcmtNb2RlXzEuY2Fyb3VzZWwoKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rO1xuICAgICAgICAgICAgdmFyIG5hdk9mZnNldDEgPSAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxlZGdlJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICB2YXIgbmF2T2Zmc2V0MiA9IChfYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaWN0aW9uYXJ5JykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICB2YXIgbmF2T2Zmc2V0MyA9IChfYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXEnKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoX2QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGljdGlvbmFyeScpKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgICAgICAgdmFyIG9mZnNldDIgPSAoKF9lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld25lZWstc3Vic2NyaWJlJykpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pICsgMjAwMDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9mZnNldCwgb2Zmc2V0Mik7XG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gb2Zmc2V0ICYmIHdpbmRvdy5wYWdlWU9mZnNldCA8IG9mZnNldDIpIHtcbiAgICAgICAgICAgICAgICAoX2YgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3bmVlay1iYW5uZXInKSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmNsYXNzTGlzdC5hZGQoJ2lzLXVwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoX2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3bmVlay1iYW5uZXInKSkgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXVwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VYT2Zmc2V0ID4gbmF2T2Zmc2V0MSAmJiB3aW5kb3cucGFnZVhPZmZzZXQgPCBuYXZPZmZzZXQyKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5ld25lZWstbmF2YmFyLW1lbnUtaXRlbScpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgKF9oID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld25lZWstbmF2YmFyLW1lbnUtaXRlbTpmaXJzdC1jaGlsZCcpKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh3aW5kb3cucGFnZVhPZmZzZXQgPiBuYXZPZmZzZXQyICYmIHdpbmRvdy5wYWdlWE9mZnNldCA8IG5hdk9mZnNldDMpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmV3bmVlay1uYXZiYXItbWVudS1pdGVtJykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAoX2ogPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3bmVlay1uYXZiYXItbWVudS1pdGVtOm50aC1vZi10eXBlKDIpJykpID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdpbmRvdy5wYWdlWE9mZnNldCA+IG5hdk9mZnNldDMpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmV3bmVlay1uYXZiYXItbWVudS1pdGVtJykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAoX2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3bmVlay1uYXZiYXItbWVudS1pdGVtOmxhc3QtY2hpbGQnKSkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSBpZih3aW5kb3cucGFnZVhPZmZzZXQgPiBuYXZPZmZzZXQyKSB7XG4gICAgICAgICAgICAvLyAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZiYXItbWVudS1pdGVtJykuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIC8vICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpXG4gICAgICAgICAgICAvLyAgICAgaXRlbVsxXS5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKVxuICAgICAgICAgICAgLy8gICB9KSBcbiAgICAgICAgICAgIC8vIH0gZWxzZSBpZih3aW5kb3cucGFnZVhPZmZzZXQgPiBuYXZPZmZzZXQzKSB7XG4gICAgICAgICAgICAvLyAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZiYXItbWVudS1pdGVtJykuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIC8vICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpXG4gICAgICAgICAgICAvLyAgICAgaXRlbVsyXS5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKVxuICAgICAgICAgICAgLy8gICB9KSBcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGlmKHdpbmRvdy5wYWdlWU9mZnNldCA+IG9mZnNldDIpIHtcbiAgICAgICAgICAgIC8vICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld25lZWstYmFubmVyJyk/LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXVwJylcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgdGhlbiA9IG5ldyBEYXRlKFwiQXByaWwgMTYsIDIwMjBcIik7XG4gICAgICAgIHZhciBnYXAgPSB0aGVuLmdldFRpbWUoKSAtIG5vdy5nZXRUaW1lKCk7XG4gICAgICAgIGdhcCA9IE1hdGguZmxvb3IoZ2FwIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgICAgICAgdmFyIGFhYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZGF5Jyk7XG4gICAgICAgIGlmIChhYWEpIHtcbiAgICAgICAgICAgIGFhYS5pbm5lclRleHQgPSBnYXA7XG4gICAgICAgIH1cbiAgICAgICAgLy8g7J6E7IucXG4gICAgICAgIHZhciBsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRpc3BsYXktbGlzdCcpO1xuICAgICAgICB2YXIgZ3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kaXNwbGF5LWdyaWQnKTtcbiAgICAgICAgdmFyIHdvcmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtYm9keScpO1xuICAgICAgICBpZiAobGlzdCAmJiBncmlkICYmIHdvcmtzKSB7XG4gICAgICAgICAgICBsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBncmlkLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgd29ya3MuY2xhc3NMaXN0LmFkZCgnbGlzdCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncmlkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgd29ya3MuY2xhc3NMaXN0LnJlbW92ZSgnbGlzdCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvY3VzQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb21tZW50V3JpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY29tbWVudC13cml0ZScpO1xuICAgICAgICAgICAgdmFyIGNvbW1lbnRUZXh0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtY29tbWVudC10ZXh0ZmllbGQnKTtcbiAgICAgICAgICAgIGlmIChjb21tZW50V3JpdGUgfHwgY29tbWVudFRleHRGaWVsZCkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRUZXh0RmllbGQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRXcml0ZSAmJiBjb21tZW50V3JpdGUuY2xhc3NMaXN0LmFkZCgnaXMtZm9jdXNlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9jdXNDb21tZW50KCk7XG4gICAgfSk7XG59O1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBkb21FdmVudHMpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBpbml0YWlsaXplUGFnZSk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGRldGVjdEhlYWRlclRoZW1lKTtcbmZ1bmN0aW9uIGRldGVjdEhlYWRlclRoZW1lKCkge1xuICAgIHZhciBwYWdlSGVhZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XG4gICAgaWYgKCFwYWdlSGVhZEVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgcGFnZXMgPSBbJyNkZXNpZ24nLCAnI2NvbnRhY3QnXTtcbiAgICB2YXIgaXNXaGl0ZSA9IHBhZ2VzLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcbiAgICBpZiAoaXNXaGl0ZSkge1xuICAgICAgICBwYWdlSGVhZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtd2hpdGUnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhZ2VIZWFkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy13aGl0ZScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluaXRhaWxpemVQYWdlKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIG5hdmlnYXRpb25UcmlnZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmJhci1idXJnZXInKTtcbiAgICAvLyBjb25zdCBpc09wZW5lZE5hdmlnYXRpb24gPSBuYXZpZ2F0aW9uVHJpZ2dlcj8uY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKTtcbiAgICBpZiAoIW5hdmlnYXRpb25UcmlnZ2VyKVxuICAgICAgICByZXR1cm47XG4gICAgbmF2aWdhdGlvblRyaWdnZXIuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gICAgKF9iID0gKF9hID0gbmF2aWdhdGlvblRyaWdnZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0RWxlbWVudFNpYmxpbmcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jbGFzc0xpc3QucmVtb3ZlKCdpcy12aXNpYmxlJyk7XG59XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIHBvbHlmaWxsKClcbiAgICBsb2FkXzEubG9hZGVyKCk7XG4gICAgbG9hZF8xLmRldGVjdEJyb3dzZXIoKTtcbiAgICBkZXRlY3RIZWFkZXJUaGVtZSgpO1xuICAgIHNldERhcmtNb2RlXzEuc2V0RGFya21vZGUoKTtcbiAgICAvLyBhZGp1c3RUb3BQYWRkaW5nKClcbiAgICAvLyBoYXNoY2hhbmdlIOuQoCDrlYzrp4jri6Qg7J2067Kk7Yq4IOunjOuTpOyWtOynkDtcbiAgICBpbmRleF8xLmRlZmF1bHQudG9nZ2xlQ2xhc3MoeyBzZWxlY3RvcjogJy5qcy1uYXZiYXItdG9nZ2xlJyB9KS5zZXRFdmVudCgpO1xuICAgIGRvbUV2ZW50cygpO1xuICAgIC8vICEgY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXG4gICAgLy8gVE9ETzog64+E7YGQ66i87Yq46rCAIOyVhOuLiOudvCBldmVudC50YXJnZXQucGFyZW50IOqwgCDslYTri4wg6rKD7J2EIO2BtOumre2WiOydhCDrlYwg64uk64u57JW8IO2VmOuCmFxuICAgIC8vIGNvbnN0IGZpbmRDbGFzc1JlY3Vyc2l2ZSA9IChlbGVtZW50LCBjbGFzc05hbWUsIGRlcHRoKSA9PiB7XG4gICAgLy8gLy8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdkZXB0aDogJyArIGRlcHRoLCBlbGVtZW50KTtcbiAgICAvLyBcdGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSByZXR1cm4gZWxlbWVudDtcbiAgICAvLyBcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcbiAgICAvLyB9O1xuICAgIC8vIHZhciBnZXRDbG9zZXN0ID0gZnVuY3Rpb24oZWxlbSwgc2VsZWN0b3IpIHtcbiAgICAvLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG4gICAgLy8gXHRcdGlmIChlbGVtLm1hdGNoZXMoc2VsZWN0b3IpKSByZXR1cm4gZWxlbTtcbiAgICAvLyBcdH1cbiAgICAvLyBcdHJldHVybiBudWxsO1xuICAgIC8vIH07XG4gICAgLy8gY29uc29sZS5sb2coZG9jdW1lbnQuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XG4gICAgdmFyIHNjcm9sbFByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1oZWFkLXByb2dyZXNzJyk7XG4gICAgICAgIGlmICghcHJvZ3Jlc3NCYXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzY3JvbGxQZXJjZW50ID0gKHdpbmRvdy5wYWdlWU9mZnNldCAvIChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCkpICogMTAwICsgXCIlXCI7XG4gICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gc2Nyb2xsUGVyY2VudDtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5zdGlja3lFbGVtZW50KHsgdGFyZ2V0RWxlbWVudDogJy5wb3N0LWhlYWQnLCBhZGRDbGFzczogJ2lzLXN0aWNreScgfSk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5zdGlja3lFbGVtZW50KHsgdGFyZ2V0RWxlbWVudDogJy5qcy1uYXZiYXInLCBhZGRDbGFzczogJ2lzLXN0aWNreS1uYXZiYXInIH0pO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxQcm9ncmVzcywgdHJ1ZSk7XG4gICAgLy8gdmFyIGkgPSAwO1xuICAgIC8vIHZhciBpbWFnZXMgPSBbJ2NvdmVyMS5qcGcnLCdjb3ZlcjIuanBnJ107XG4gICAgLy8gdmFyIGltYWdlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb3Zlcl9pbWFnZScpO1xuICAgIC8vIC8vIGltYWdlLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoL2ltZy9jb3ZlcjEuanBnKScpO1xuICAgIC8vIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgLy8gXHRpbWFnZUVsZW1lbnQuZmFkZU91dCgxMDAwLCAoKSA9PiB7XG4gICAgLy8gXHRcdGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKCR7aW1hZ2VzW2krK119KWApO1xuICAgIC8vIFx0XHRpbWFnZUVsZW1lbnQuZmFkZUluKDEwMDApO1xuICAgIC8vIFx0fSk7XG4gICAgLy8gXHRpZihpID09PSBpbWFnZXMubGVuZ3RoKSBpID0gMDtcbiAgICAvLyB9LCA1MDAwKTtcbiAgICAvLyBjb25zdCBzYXlIZWxsbyA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyBcdHJlamVjdCgnVW5hYmxlIHRvIHNheSBoaS4nKTtcbiAgICAvLyBcdHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vIFx0XHRyZXNvbHZlKCdIZWxsbywgV29ybGQnKTtcbiAgICAvLyBcdH0sIDUwMDApO1xuICAgIC8vIH0pO1xuICAgIC8vIHNheUhlbGxvLnRoZW4ocmVzb2x2ZSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygncmVzJywgcmVzb2x2ZSk7XG4gICAgLy8gfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIC8vIFx0Y29uc29sZS53YXJuKGVycm9yKTtcbiAgICAvLyB9KTtcbiAgICAvLyBQcm9taXNlLmFsbChbXG4gICAgLy8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJyksXG4gICAgLy8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzJylcbiAgICAvLyBdKVxuICAgIC8vIC50aGVuKHJlc3BvbnNlcyA9PiB7XG4gICAgLy8gXHRyZXR1cm4gcmVzcG9uc2VzLm1hcChyZXNwb25zZSA9PiB7XG4gICAgLy8gXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgLy8gXHR9KTtcbiAgICAvLyDsl7Drj4Trs4Qg6rCQ64+F67OEIOuCmOudvOuzhFxuICAgIC8vIGNvbnN0IGJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCcpO1xuICAgIC8vIGlmKCFib2FyZEVsZW1lbnQpIHJldHVybiBudWxsO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgIC8vIFx0Y29uc3QgZmlsdGVyZWRDb3VudHJ5ID0gZmlsbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5jb3VudHJ5ID09PSAn66+46rWtJyk7XG4gICAgLy8gXHRjb25zb2xlLmxvZyhmaWx0ZXJlZENvdW50cnkpO1xuICAgIC8vIFx0aWYoZXZlbnQudGFyZ2V0Lm5hbWUgPT09ICd1c2EnKSB7XG4gICAgLy8gXHRcdGJvYXJkRWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAvLyBcdFx0ZmlsdGVyZWRDb3VudHJ5Lm1hcChpdGVtID0+IHtcbiAgICAvLyBcdFx0XHRib2FyZEVsZW1lbnQuaW5uZXJIVE1MICs9IGBcbiAgICAvLyBcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1ib2R5XCI+XG4gICAgLy8gXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLmlkfTwvZGl2PlxuICAgIC8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5yZWxlYXNlRGF0ZX08L2Rpdj5cbiAgICAvLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0udGl0bGVLb3JlYW59PGRpdj4ke2l0ZW0udGl0bGVFbmdsaXNofTwvZGl2PjwvZGl2PlxuICAgIC8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5kaXJlY3Rvcn08L2Rpdj5cbiAgICAvLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uY291bnRyeX08L2Rpdj5cbiAgICAvLyBcdFx0XHRcdDwvZGl2PmA7XG4gICAgLy8gXHRcdH0pO1xuICAgIC8vIFx0fVxuICAgIC8vIH0pO1xuICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vIFx0ZmlsbXMubWFwKGl0ZW0gPT4ge1xuICAgIC8vIFx0XHRib2FyZEVsZW1lbnQuaW5uZXJIVE1MICs9IGBcbiAgICAvLyBcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWJvZHlcIj5cbiAgICAvLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5pZH08L2Rpdj5cbiAgICAvLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5yZWxlYXNlRGF0ZX08L2Rpdj5cbiAgICAvLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS50aXRsZUtvcmVhbn08ZGl2PiR7aXRlbS50aXRsZUVuZ2xpc2h9PC9kaXY+PC9kaXY+XG4gICAgLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uZGlyZWN0b3J9PC9kaXY+XG4gICAgLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uY291bnRyeX08L2Rpdj5cbiAgICAvLyBcdFx0PC9kaXY+YDtcbiAgICAvLyBcdH0pO1xuICAgIC8vIH0sIDIwMCk7XG59KTtcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuLy8gXHQvLyBjb25zdCBoZWxwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRleHRmaWVsZC1oZWxwZXInKTtcbi8vIFx0Ly8gaGVscGVycy5mb3JFYWNoKGhlbHBlciA9PiBoZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XG4vLyBcdC8vIGxldCBsb2dpbkRhdGEgPSB7ZW1haWw6ICcnLCBwYXNzd29yZDogJyd9O1xuLy8gXHRjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gZG9jdW1lbnQubG9naW47XG4vLyBcdGNvbnNvbGUubG9nKGVtYWlsKTtcbi8vIFx0aWYoIWRvY3VtZW50KSByZXR1cm47XG4vLyBcdC8vIGNvbnN0IGlzRW1haWwgPSBldmVudC50YXJnZXQgPT09IGVtYWlsO1xuLy8gXHRjb25zdCBpc1Bhc3N3b3JkID0gZXZlbnQudGFyZ2V0ID09PSBwYXNzd29yZDtcbi8vIFx0Y29uc3QgaGFuZGxlVmFsaWRhdGUgPSAoeyB0YXJnZXQ6IGFueSwgdmFsaWRhdGU6IHZvaWQsIG1lc3NhZ2U6IGFueSB9KSA9PiB7XG4vLyBcdFx0aWYodmFsaWRhdGUpIHtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gJyc7XG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4vLyBcdFx0fSBlbHNlIHtcbi8vIFx0XHRcdGlmKCF0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm47XG4vLyBcdFx0XHQvLyBjb25zdCBpZCA9IHRhcmdldC5pZCB8fCB0YXJnZXQubmFtZTtcbi8vIFx0XHRcdC8vIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnZXJyb3ItJyArIGlkKTtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gbWVzc2FnZTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4vLyBcdFx0fVxuLy8gXHR9O1xuLy8gXHRpZihpc1Bhc3N3b3JkKSB7XG4vLyBcdFx0aGFuZGxlVmFsaWRhdGUoe1xuLy8gXHRcdFx0dGFyZ2V0OiBwYXNzd29yZCxcbi8vIFx0XHRcdHZhbGlkYXRlOiBpc1Bhc3N3b3JkICYmICEodmFsaWRpdHkuaXNMZW5ndGgocGFzc3dvcmQudmFsdWUsIDgpKSxcbi8vIFx0XHRcdG1lc3NhZ2U6ICfruYTrsIDrsojtmLjrpbwg65iR67CU66GcIOyeheugpe2VtOudvC4nXG4vLyBcdFx0fSk7XG4vLyBcdH1cbi8vIH0pO1xuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50ID0+IHt9LCB0cnVlKTsgLy8gYmx1ciBpcyBub3QgYnViYmxlXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKcGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFpRVUZaTEVOQlFVRTdPenM3TzBGQlJWb3NiME5CUVdsRE8wRkJRMnBETEdsRVFVRnBSRHRCUVVOcVJDeG5SVUZCTkVNN1FVRkROVU1zTWtOQlFUUkZPMEZCUXpWRkxIVkRRVUV5UXp0QlFVTXpReXg1UkVGQmFVVTdRVUZGYWtVc01FTkJRVEJETzBGQlF6RkRMSEZFUVVGM1JEdEJRVU40UkN4dlJVRkJOa003UVVGRE4wTXNiMFZCUVRaRE8wRkJSVGRETERSQ1FVRTBRanRCUVVNMVFpdzBRMEZCTkVNN1FVRkROVU1zZFVKQlFYVkNPMEZCUTNaQ0xFMUJRVTA3UVVGRlRpd3dRMEZCTUVNN1FVRkRNVU1zTkVOQlFUUkRPMEZCUXpWRExHZEZRVUZuUlR0QlFVTm9SU3hKUVVGSk8wRkJSVW9zTmtOQlFUWkRPMEZCUXpkRExHdENRVUZyUWp0QlFVTnNRaXgzUTBGQmQwTTdRVUZEZUVNc09FWkJRVGhHTzBGQlJUbEdMSGxFUVVGNVJEdEJRVU42UkN4M1JFRkJkMFE3UVVGRGVFUXNkVU5CUVhWRE8wRkJSWFpETERKQ1FVRXlRanRCUVVNelFpd3JSRUZCSzBRN1FVRkRMMFFzZFVSQlFYVkVPMEZCUTNaRUxIVkNRVUYxUWp0QlFVTjJRaXd3UkVGQk1FUTdRVUZETVVRc1RVRkJUVHRCUVVOT0xFMUJRVTA3UVVGRlRpeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEZOQlFWTXNUMEZCVHp0SlFVTm9SQ3c0UTBGQk9FTTdRVUZEYUVRc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRlJpeEpRVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGQk8wRkJSVFZDTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eGpRVUZqTEVWQlFVVXNWVUZCUVN4TFFVRkxPMGxCUXpORExFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTnVRaXhMUVVGTExFTkJRVU1zVjBGQlZ5eEhRVUZITEdkRVFVRm5SQ3hEUVVGQk8wdEJRM0pGTzBGQlEwZ3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkZSaXgxUTBGQmRVTTdRVUZEZGtNc0swSkJRU3RDTzBGQlF5OUNMRFJDUVVFMFFqdEJRVVUxUWl3MFFrRkJORUk3UVVGRE5VSXNhVU5CUVdsRE8wRkJRMnBETEdsRVFVRnBSRHRCUVVOcVJDeE5RVUZOTzBGQlEwNHNlVU5CUVhsRE8wRkJRM3BETEVsQlFVazdRVUZGU2l4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RlFVRkZPMGxCUTJwRExFbEJRVTBzWTBGQll5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRGVrVXNTVUZCU1N4RFFVRkRMR05CUVdNN1VVRkJSU3hQUVVGTk8wbEJSVE5DTEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlFUdEJRVU40UXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVkR0xFbEJRVTBzVTBGQlV5eEhRVUZITzBsQlEyaENMR2RDUVVGVExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEWml4bFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVFN1VVRkZkRU1zWlVGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEdOQlFXTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUVR0UlFVTXpSaXhsUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVRTdVVUZGZUVRc1pVRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlN4dFFrRkJiVUlzUlVGQlJTeERRVUZETEVOQlFVRTdVVUZEY0VRc1pVRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZCTzFGQlEyWXNaVUZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxGRkJRVkVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkJPMUZCUTNSRExHVkJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1dVRkJXU3hGUVVGRkxFTkJRVU1zUTBGQlFUdFJRVU4yUXl4bFFVRkxMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVUU3VVVGRGRrSXNkVUpCUVhWQ08xRkJRM1pDTEdWQlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRVHRSUVVOYUxHVkJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUVR0UlFVTm9RaXhsUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVRTdVVUZGWkN4bFFVRkxMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVUU3VVVGRmFrSXNZVUZCVVN4RlFVRkZMRU5CUVVFN1VVRkRWaXd3UWtGQll5eERRVUZETEVWQlFVVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRVHRSUVVNeFFpeHpRa0ZCVVN4RlFVRkZMRU5CUVVFN1VVRkZWaXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRk96dFpRVU5zUXl4SlFVRk5MRlZCUVZVc1UwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZOQlFWTXNRMEZCUXl3d1EwRkJSU3h4UWtGQmNVSXNSMEZCUnl4SFFVRkhMRU5CUVVFN1dVRkRha1lzU1VGQlRTeFZRVUZWTEZOQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhoUVVGaExFTkJRVU1zTUVOQlFVVXNjVUpCUVhGQ0xFZEJRVWNzUjBGQlJ5eERRVUZCTzFsQlEzSkdMRWxCUVUwc1ZVRkJWU3hUUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMREJEUVVGRkxIRkNRVUZ4UWl4SFFVRkhMRWRCUVVjc1EwRkJRVHRaUVVVNVJTeEpRVUZOTEUxQlFVMHNVMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGQlF5d3dRMEZCUlN4eFFrRkJjVUlzUjBGQlJ5eE5RVUZOTEVOQlFVRTdXVUZEY0VZc1NVRkJUU3hQUVVGUExFZEJRVWNzVDBGQlFTeFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRzlDUVVGdlFpeERRVUZETERCRFFVRkZMSEZDUVVGeFFpeEhRVUZITEUxQlFVMHNTVUZCUnl4SlFVRkpMRU5CUVVFN1dVRkZia2NzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVUU3V1VGRE5VSXNTVUZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhIUVVGSExFMUJRVTBzU1VGQlNTeE5RVUZOTEVOQlFVTXNWMEZCVnl4SFFVRkhMRTlCUVU4c1JVRkJSVHRuUWtGRE9VUXNUVUZCUVN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMREJEUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RlFVRkRPMkZCUTJ4Rk8ybENRVUZOTzJkQ1FVTk1MRTFCUVVFc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXd3UTBGQlJTeFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1JVRkJRenRoUVVOeVJUdFpRVVZFTEVsQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhWUVVGVkxFbEJRVWtzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4VlFVRlZMRVZCUVVVN1owSkJRM0pGTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxPMjlDUVVONlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdG5Ra0ZEY0VNc1EwRkJReXhEUVVGRExFTkJRVUU3WjBKQlEwWXNUVUZCUVN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExIVkRRVUYxUXl4RFFVRkRMREJEUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkRPMkZCUXpWR08ybENRVUZOTEVsQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhWUVVGVkxFbEJRVWtzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4VlFVRlZMRVZCUVVVN1owSkJRelZGTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxPMjlDUVVONlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdG5Ra0ZEY0VNc1EwRkJReXhEUVVGRExFTkJRVUU3WjBKQlEwWXNUVUZCUVN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExEQkRRVUV3UXl4RFFVRkRMREJEUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkRPMkZCUXk5R08ybENRVUZOTEVsQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhWUVVGVkxFVkJRVVU3WjBKQlEzcERMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTE8yOUNRVU42UlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0blFrRkRjRU1zUTBGQlF5eERRVUZETEVOQlFVRTdaMEpCUTBZc1RVRkJRU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEhORFFVRnpReXhEUVVGRExEQkRRVUZGTEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhGUVVGRE8yRkJRek5HTzFsQlEwUXNOa05CUVRaRE8xbEJRemRETERoRlFVRTRSVHRaUVVNNVJTeDVRMEZCZVVNN1dVRkRla01zZVVOQlFYbERPMWxCUTNwRExGRkJRVkU3V1VGRFVpd3JRMEZCSzBNN1dVRkRMME1zT0VWQlFUaEZPMWxCUXpsRkxIbERRVUY1UXp0WlFVTjZReXg1UTBGQmVVTTdXVUZEZWtNc1VVRkJVVHRaUVVOU0xFbEJRVWs3V1VGRFNpeHhRMEZCY1VNN1dVRkRja01zZVVWQlFYbEZPMWxCUTNwRkxFbEJRVWs3VVVGRFRpeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVbEdMRWxCUVVrc1IwRkJSeXhIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZEY2tJc1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU4wUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRM3BETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZET1VNc1NVRkJUU3hIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRSUVVNelF5eEpRVUZITEVkQlFVY3NSVUZCUlR0WlFVTk9MRWRCUVVjc1EwRkJReXhUUVVGVExFZEJRVWNzUjBGQlJ5eERRVUZCTzFOQlEzQkNPMUZCUlVRc1MwRkJTenRSUVVOTUxFbEJRVTBzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0UlFVTjJSQ3hKUVVGTkxFbEJRVWtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVRTdVVUZEZGtRc1NVRkJUU3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRVHRSUVVOeVJDeEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1MwRkJTeXhGUVVGRk8xbEJRM3BDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVTdaMEpCUXpkQ0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8yZENRVU5xUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0blFrRkRjRU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3V1VGRE4wSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1dVRkRSaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRk8yZENRVU0zUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0blFrRkRjRU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3WjBKQlEycERMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMWxCUTJoRExFTkJRVU1zUTBGQlF5eERRVUZCTzFOQlEwZzdVVUZGUkN4SlFVRk5MRmxCUVZrc1IwRkJSenRaUVVOdVFpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1dVRkRhRVVzU1VGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNRMEZCUVR0WlFVTXpSU3hKUVVGSkxGbEJRVmtzU1VGQlNTeG5Ra0ZCWjBJc1JVRkJSVHRuUWtGRGNFTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHp0dlFrRkRPVUlzVDBGQlFTeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTzNkQ1FVTm9ReXhaUVVGWkxFbEJRVWtzV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3YjBKQlF6RkVMRU5CUVVNc1EwRkJRenRuUWtGR1JpeERRVVZGTEVOQlEwZ3NRMEZCUVR0aFFVTkdPMUZCUTBnc1EwRkJReXhEUVVGQk8xRkJRMFFzV1VGQldTeEZRVUZGTEVOQlFVRTdTVUZEYUVJc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeERRVUZETEVOQlFVRTdRVUZGUkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGQk8wRkJRMmhFTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVFN1FVRkRja1FzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhEUVVGQk8wRkJSWGhFTEZOQlFWTXNhVUpCUVdsQ08wbEJRM2hDTEVsQlFVMHNaVUZCWlN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdTVUZEZWtRc1NVRkJTU3hEUVVGRExHVkJRV1U3VVVGQlJTeFBRVUZOTzBsQlJUVkNMRWxCUVUwc1MwRkJTeXhIUVVGSExFTkJRVU1zVTBGQlV5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkJPMGxCUTNKRExFbEJRVTBzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0SlFVVndSQ3hKUVVGSkxFOUJRVThzUlVGQlJUdFJRVU5ZTEdWQlFXVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzB0QlF6RkRPMU5CUVUwN1VVRkRUQ3hsUVVGbExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRMUVVNM1F6dEJRVU5JTEVOQlFVTTdRVUZGUkN4VFFVRlRMR05CUVdNN08wbEJRM0pDTEVsQlFVMHNhVUpCUVdsQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4blFrRkJaMElzUTBGQlF5eERRVUZCTzBsQlF5OUZMR2xHUVVGcFJqdEpRVU5xUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTzFGQlFVVXNUMEZCVFR0SlFVVTVRaXhwUWtGQmFVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzBsQlF5OURMRmxCUVVFc2FVSkJRV2xDTERCRFFVRkZMR3RDUVVGclFpd3dRMEZCUlN4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUlVGQlF6dEJRVU4yUlN4RFFVRkRPMEZCU1VRc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzBsQlF6VkRMR0ZCUVdFN1NVRkRZaXhoUVVGTkxFVkJRVVVzUTBGQlFUdEpRVU5TTEc5Q1FVRmhMRVZCUVVVc1EwRkJRVHRKUVVObUxHbENRVUZwUWl4RlFVRkZMRU5CUVVFN1NVRkZia0lzZVVKQlFWY3NSVUZCUlN4RFFVRkJPMGxCUldJc2NVSkJRWEZDTzBsQlJYSkNMRFpDUVVFMlFqdEpRVU0zUWl4bFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEcxQ1FVRnRRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUVR0SlFVVXZSQ3hUUVVGVExFVkJRVVVzUTBGQlFUdEpRVVZZTEdsRVFVRnBSRHRKUVVOcVJDdzBSRUZCTkVRN1NVRkROVVFzT0VSQlFUaEVPMGxCUXpsRUxDdERRVUVyUXp0SlFVTXZReXcwUTBGQk5FTTdTVUZETlVNc09FUkJRVGhFTzBsQlF6bEVMRFpGUVVFMlJUdEpRVU0zUlN4TFFVRkxPMGxCUlV3c09FTkJRVGhETzBsQlF6bERMQ3RFUVVFclJEdEpRVU12UkN3MlEwRkJOa003U1VGRE4wTXNTMEZCU3p0SlFVTk1MR2RDUVVGblFqdEpRVU5vUWl4TFFVRkxPMGxCUlV3c2EwVkJRV3RGTzBsQlJXeEZMRWxCUVUwc1kwRkJZeXhIUVVGSE8xRkJRM0pDTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zY1VKQlFYRkNMRU5CUVVNc1EwRkJRVHRSUVVNNVJTeEpRVUZKTEVOQlFVTXNWMEZCVnp0WlFVRkZMRTlCUVUwN1VVRkZlRUlzU1VGQlRTeGhRVUZoTEVkQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4TlFVRkhMRU5CUVVFN1VVRkRNVWNzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1lVRkJZU3hEUVVGQk8wbEJRM3BETEVOQlFVTXNRMEZCUVR0SlFVVkVMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVN1VVRkRhRU1zWlVGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMR0ZCUVdFc1JVRkJSU3haUVVGWkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVFN1VVRkRNMFVzWlVGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMR0ZCUVdFc1JVRkJSU3haUVVGWkxFVkJRVVVzVVVGQlVTeEZRVUZGTEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVU53Uml4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOR0xFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVVzWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUTNaRUxHRkJRV0U3U1VGRFlpdzBRMEZCTkVNN1NVRkROVU1zTmtSQlFUWkVPMGxCUXpkRUxEUkVRVUUwUkR0SlFVTTFSQ3d3UWtGQk1FSTdTVUZETVVJc2MwTkJRWE5ETzBsQlEzUkRMR2xGUVVGcFJUdEpRVU5xUlN3clFrRkJLMEk3U1VGREwwSXNUMEZCVHp0SlFVTlFMR3REUVVGclF6dEpRVU5zUXl4WlFVRlpPMGxCUjFvc2MwUkJRWE5FTzBsQlEzUkVMR2REUVVGblF6dEpRVVZvUXl4elFrRkJjMEk3U1VGRGRFSXNOa0pCUVRaQ08wbEJRemRDTEdGQlFXRTdTVUZEWWl4TlFVRk5PMGxCUTA0c05rSkJRVFpDTzBsQlF6ZENMR2REUVVGblF6dEpRVU5vUXl4elFrRkJjMEk3U1VGRGRFSXNkMEpCUVhkQ08wbEJRM2hDTEUxQlFVMDdTVUZGVGl4blFrRkJaMEk3U1VGRGFFSXNkMFJCUVhkRU8wbEJRM2hFTEhWRVFVRjFSRHRKUVVOMlJDeExRVUZMTzBsQlEwd3NkVUpCUVhWQ08wbEJRM1pDTEhORFFVRnpRenRKUVVOMFF5dzBRa0ZCTkVJN1NVRkROVUlzVDBGQlR6dEpRVVZRTEdOQlFXTTdTVUZEWkN4NVJFRkJlVVE3U1VGRGVrUXNhVU5CUVdsRE8wbEJRMnBETEdkRVFVRm5SRHRKUVVOb1JDeDNSVUZCZDBVN1NVRkRlRVVzYVVOQlFXbERPMGxCUTJwRExIRkRRVUZ4UXp0SlFVTnlReXhwUTBGQmFVTTdTVUZEYWtNc2EwTkJRV3RETzBsQlEyeERMR2xEUVVGcFF6dEpRVU5xUXl3clFrRkJLMEk3U1VGREwwSXNjMFJCUVhORU8wbEJRM1JFTEN0RVFVRXJSRHRKUVVNdlJDdzRSa0ZCT0VZN1NVRkRPVVlzTkVSQlFUUkVPMGxCUXpWRUxESkVRVUV5UkR0SlFVTXpSQ3hsUVVGbE8wbEJRMllzVVVGQlVUdEpRVU5TTEV0QlFVczdTVUZEVEN4TlFVRk5PMGxCUTA0c2NVSkJRWEZDTzBsQlEzSkNMSFZDUVVGMVFqdEpRVU4yUWl4blEwRkJaME03U1VGRGFFTXNOa0pCUVRaQ08wbEJRemRDTEc5RVFVRnZSRHRKUVVOd1JDdzJSRUZCTmtRN1NVRkROMFFzTkVaQlFUUkdPMGxCUXpWR0xEQkVRVUV3UkR0SlFVTXhSQ3g1UkVGQmVVUTdTVUZEZWtRc1lVRkJZVHRKUVVOaUxFOUJRVTg3U1VGRFVDeFhRVUZYTzBGQlEySXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkZSaXhuUkVGQlowUTdRVUZEYUVRc2MwVkJRWE5GTzBGQlEzUkZMR2RGUVVGblJUdEJRVU5vUlN4cFJFRkJhVVE3UVVGRmFrUXNLME5CUVN0RE8wRkJReTlETEhWQ1FVRjFRanRCUVVOMlFpeDVRa0ZCZVVJN1FVRkZla0lzT0VOQlFUaERPMEZCUXpsRExHbEVRVUZwUkR0QlFVVnFSQ3dyUlVGQkswVTdRVUZETDBVc2JVSkJRVzFDTzBGQlEyNUNMSFZFUVVGMVJEdEJRVU4yUkN3clEwRkJLME03UVVGREwwTXNkVVJCUVhWRU8wRkJRM1pFTEdGQlFXRTdRVUZEWWl3MFEwRkJORU03UVVGRE5VTXNOa05CUVRaRE8wRkJRemRETEdkRlFVRm5SVHRCUVVOb1JTeHZSRUZCYjBRN1FVRkRjRVFzYjBSQlFXOUVPMEZCUTNCRUxIZEVRVUYzUkR0QlFVTjRSQ3hOUVVGTk8wRkJRMDRzVFVGQlRUdEJRVVZPTEc5Q1FVRnZRanRCUVVOd1FpeHhRa0ZCY1VJN1FVRkRja0lzZFVKQlFYVkNPMEZCUTNaQ0xITkZRVUZ6UlR0QlFVTjBSU3huUTBGQlowTTdRVUZEYUVNc1VVRkJVVHRCUVVOU0xFdEJRVXM3UVVGRlRDeE5RVUZOTzBGQlJVNHNPRVZCUVRoRk8wRkJRemxGTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNWVUZCUVN4TFFVRkxMRWxCUVVrc1QwRkJRU3hMUVVGTExFTkJRVU1zWTBGQll5eEZRVUZGTEVWQlFYUkNMRU5CUVhOQ0xFTkJRVU1zUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIOu5hOuPmeq4sCDtlajsiJjripQg66as7YS07J2EIO2VtOyVvO2VnOuLpC4g7ZSE66Gc66+47Iqk66W8IOuwmO2ZmC5cbnZhciByb3V0ZVBhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGFnZSA9IGhhc2ggPyBcIi92aWV3cy9cIiArIGhhc2guc3Vic3RyaW5nKDEpICsgXCIuaHRtbFwiIDogJy92aWV3cy9wcm9maWxlLmh0bWwnO1xuICAgIHJldHVybiBmZXRjaChwYWdlKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gNDA0IHx8IDUwMFxuICAgICAgICBpZiAocmVzcG9uc2Uub2spXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChodG1sKSB7XG4gICAgICAgIHZhciB2aWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXcnKTtcbiAgICAgICAgaWYgKCF2aWV3KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2aWV3LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgLy8gd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJ2RkJywgaGFzaC5zdWJzdHJpbmcoMSkpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGNvbnNvbGUud2Fybigncm91dGVyOiAnLCBlcnJvcik7IH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJvdXRlUGFnZTtcbi8vIGhhc2gg66eQ6rOgIO2BtOumre2VmOuKlCDsiJzqsITsl5Ag6rCS7J2EIOyVjOyVhOyVvCDtlaguIGRhdGEgYXR0ciBvciBoYXNoXG4vLyBjb25zdCBSb3V0ZXIgPSAobmFtZSwgcm91dGVzKSA9PiB7XG4vLyBcdHJldHVybiB7IG5hbWU6IG5hbWUsIHJvdXRlczogcm91dGVzIH07XG4vLyB9O1xuLy8gdmFyIGFjdGl2ZVJvdXRlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2hyZWZdJykpO1xuLy8gYWN0aXZlUm91dGVzLmZvckVhY2gocm91dGUgPT4gcm91dGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuYXZpZ2F0ZSkpO1xuLy8gY29uc3QgbXlGaXJzdFJvdXRlciA9IG5ldyBSb3V0ZXIoJ215Rmlyc3RSb3V0ZXInLCBbXG4vLyBcdHsgcGF0aDogJy8nLCBuYW1lOiAnaW5kZXgnIH0sXG4vLyBdKTtcbi8vIGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XG4vLyBcdGNvbnN0IHJvdXRlID0gZmluZEN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1swXS52YWx1ZTtcbi8vIFx0Y29uc3Qgcm91dGVJbmZvID0gbXlGaXJzdFJvdXRlci5yb3V0ZXMuZmluZChyID0+IHIucGF0aCA9PT0gcm91dGUpO1xuLy8gXHRpZighcm91dGVJbmZvKSB7XG4vLyBcdFx0Ly93aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCAnZXJyb3InKTtcbi8vIFx0XHR2aWV3LmlubmVySFRNTCA9ICdObyByb3V0ZSBleGlzdHMgd2l0aCB0aGlzIHBhdGgnO1xuLy8gXHR9IGVsc2Uge1xuLy8gXHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IG5hbWU6ICd0ZXN0ZXInIH0sICcnLCByb3V0ZUluZm8ucGF0aCk7XG4vLyBcdFx0ZmV0Y2goYC92aWV3cy8ke3JvdXRlSW5mby5uYW1lfS5odG1sYClcbi8vIFx0XHRcdC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuLy8gXHRcdFx0LnRoZW4oaHRtbCA9PiB2aWV3LmlubmVySFRNTCA9IGh0bWwpXG4vLyBcdFx0XHQuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coJ0ZhaWxlZCB0byBmZXRjaCBwYWdlOiAnLCBlcnJvcikpO1xuLy8gXHR9XG4vLyB9O1xuLy8ge1xuLy8gXHRtZXRob2Q6ICdQT1NUJyxcbi8vIFx0Ym9keTogJ3RpdGxlPScgKyBlbmNvZGVVUklDb21wb25lbnQoJ015IGF3ZXNvbWUgbmV3IGFydGljbGUnKSArICcmYm9keT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdUaGlzIGlzIHRoZSB0ZXh0IG9mIG15IGFydGljbGUnKSxcbi8vIFx0aGVhZGVyOiB7XG4vLyBcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuLy8gXHR9LFxuLy8gXHRyZWZlcnJlcjogJ25vLXJlZmVycmVyJ1xuLy8gfVxuLy8gY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuLy8gY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XG4vLyB2aWV3LmlubmVySFRNTCA9IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoZG9jKTtcbi8vIHJlc3BvbnNlLnRleHQoKSAvLyByZXNwb25zZS5qc29uKClcbi8vIHRvTG93ZXJDYXNlKCkg7ZW07KO86riwXG4vLyBoaXN0b3J5LnB1c2hTdGF0ZSh7XG4vLyBcdGlkOiAnaG9tZXBhZ2UnXG4vLyB9LCAnSG9tZSB8IE15IEFwcCcsICdodHRwOi8vbXktYXBwLXVybC5jb20vP3A9aG9tZXBhZ2UnKTtcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChldmVudCkge1xuLy8gXHRpZiAoaGlzdG9yeS5zdGF0ZSAmJiBoaXN0b3J5LnN0YXRlLmlkID09PSAnaG9tZXBhZ2UnKSB7XG4vLyBcdFx0XHQvLyBSZW5kZXIgbmV3IGNvbnRlbnQgZm9yIHRoZSBob21wYWdlXG4vLyBcdH1cbi8vIH0sIGZhbHNlKTtcbi8vIHJlcGxhY2VTdGF0ZVxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4vLyBcdC8vIExvZyB0aGUgc3RhdGUgZGF0YSB0byB0aGUgY29uc29sZVxuLy8gXHRjb25zb2xlLmxvZyhldmVudC5zdGF0ZSk7XG4vLyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2ljbTkxZEdWeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc09FSkJRVGhDTzBGQlF6bENMRWxCUVUwc1UwRkJVeXhIUVVGSE8wbEJRMVlzU1VGQlFTd3lRa0ZCU1N4RFFVRnZRanRKUVVNNVFpeEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVlVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJRVHRKUVVVNVJTeFBRVUZQTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNN1UwRkRaaXhKUVVGSkxFTkJRVU1zVlVGQlFTeFJRVUZSTzFGQlExb3NZVUZCWVR0UlFVTmlMRWxCUVVrc1VVRkJVU3hEUVVGRExFVkJRVVU3V1VGQlJTeFBRVUZQTEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRVHM3V1VGRGJFTXNUMEZCVHl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzBsQlEzUkRMRU5CUVVNc1EwRkJRenRUUVVORUxFbEJRVWtzUTBGQlF5eFZRVUZCTEVsQlFVazdVVUZEVWl4SlFVRk5MRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMUZCUXpWRExFbEJRVWtzUTBGQlF5eEpRVUZKTzFsQlFVVXNUMEZCVFR0UlFVVnFRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUVR0UlFVTnlRaXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMFFpeDVSVUZCZVVVN1NVRkRNMFVzUTBGQlF5eERRVUZETzFOQlEwUXNTMEZCU3l4RFFVRkRMRlZCUVVFc1MwRkJTeXhKUVVGSkxFOUJRVUVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRUzlDTEVOQlFTdENMRU5CUVVNc1EwRkJRVHRCUVVOd1JDeERRVUZETEVOQlFVRTdRVUZGUkN4clFrRkJaU3hUUVVGVExFTkJRVUU3UVVGRmVFSXNLME5CUVN0RE8wRkJReTlETEhGRFFVRnhRenRCUVVOeVF5d3dRMEZCTUVNN1FVRkRNVU1zUzBGQlN6dEJRVU5NTEhORlFVRnpSVHRCUVVOMFJTdzBSVUZCTkVVN1FVRkROVVVzYzBSQlFYTkVPMEZCUTNSRUxHbERRVUZwUXp0QlFVTnFReXhOUVVGTk8wRkJRMDRzWjBOQlFXZERPMEZCUTJoRExIZEVRVUYzUkR0QlFVTjRSQ3gxUlVGQmRVVTdRVUZEZGtVc2IwSkJRVzlDTzBGQlEzQkNMR2xFUVVGcFJEdEJRVU5xUkN4MVJFRkJkVVE3UVVGRGRrUXNXVUZCV1R0QlFVTmFMSE5GUVVGelJUdEJRVU4wUlN3eVEwRkJNa003UVVGRE0wTXNPRUpCUVRoQ08wRkJRemxDTERCRFFVRXdRenRCUVVNeFF5eHZSVUZCYjBVN1FVRkRjRVVzUzBGQlN6dEJRVU5NTEV0QlFVczdRVUZGVEN4SlFVRkpPMEZCUTBvc2JVSkJRVzFDTzBGQlEyNUNMRzlKUVVGdlNUdEJRVU53U1N4aFFVRmhPMEZCUTJJc2RVTkJRWFZETzBGQlEzWkRMRTFCUVUwN1FVRkRUaXd5UWtGQk1rSTdRVUZETTBJc1NVRkJTVHRCUVVOS0xHdERRVUZyUXp0QlFVTnNReXg1UkVGQmVVUTdRVUZEZWtRc0swUkJRU3RFTzBGQlF5OUVMSEZEUVVGeFF6dEJRVU55UXl4dlFrRkJiMEk3UVVGRmNFSXNjMEpCUVhOQ08wRkJRM1JDTEd0Q1FVRnJRanRCUVVOc1FpdzBSRUZCTkVRN1FVRkZOVVFzZVVSQlFYbEVPMEZCUTNwRUxESkVRVUV5UkR0QlFVTXpSQ3d5UTBGQk1rTTdRVUZETTBNc1MwRkJTenRCUVVOTUxHRkJRV0U3UVVGRllpeGxRVUZsTzBGQlJXWXNlVVJCUVhsRU8wRkJRM3BFTEhkRFFVRjNRenRCUVVONFF5dzJRa0ZCTmtJN1FVRkROMElzVFVGQlRTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRpbmcnKTtcbiAgICBpZiAoIWxvYWRlckVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsb2FkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdib2R5LWxvY2snKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZXRlY3RCcm93c2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBCcm93c2VyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1icm93c2VyJyk7XG4gICAgaWYgKCFCcm93c2VyRWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdtc2llJykgPiAtMSB8fCB1c2VyQWdlbnQuaW5kZXhPZigndHJpZGVudCcpID4gLTEpIHtcbiAgICAgICAgQnJvd3NlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJBZ2VudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdjaHJvbWUnKSAhPT0gLTEpIHtcbiAgICAgICAgY29uc29sZS5sb2codXNlckFnZW50LCAn7YGs66GsJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZ29vZ2xlQW5hbHl0aWNzID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIDxzY3JpcHQgYXN5bmMgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS04MzUzMTIzOS0xXCI+PC9zY3JpcHQ+XG4gICAgLy8gd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107XG4gICAgLy8gZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fVxuICAgIC8vIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7XG4gICAgLy8gZ3RhZygnY29uZmlnJywgJ1VBLTgzNTMxMjM5LTEnKTtcbn07XG5leHBvcnRzLmFkanVzdFRvcFBhZGRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyJyk7XG4gICAgaWYgKCFoZWFkZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGZuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0Qm9keU1hcmdpblRvcChoZWFkZXJFbGVtZW50KTsgfTtcbiAgICBzZXRCb2R5TWFyZ2luVG9wKGhlYWRlckVsZW1lbnQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pOyB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsgfSk7XG4gICAgLy8g7Iqk7L2U7ZSEXG4gICAgLy8g7ZWo7IiY64qUIOyduOyekOulvCDrsJvripQg6rKD7J20IOyii+uLpC4uLlxuICAgIC8vIOyduO2Si+ydtCDsnojqs6Ag66as7YS07J20IOyeiOuLpC4uLlxufTtcbmZ1bmN0aW9uIHNldEJvZHlNYXJnaW5Ub3AoaGVhZGVyRWxlbWVudCkge1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgaXNGaXhlZEhlYWRlciA9IGdldENvbXB1dGVkU3R5bGUoaGVhZGVyRWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCc7XG4gICAgaWYgKGlzRml4ZWRIZWFkZXIpIHtcbiAgICAgICAgYm9keS5zdHlsZS5tYXJnaW5Ub3AgPSBoZWFkZXJFbGVtZW50LmNsaWVudEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBib2R5LnN0eWxlLm1hcmdpblRvcCA9IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liRzloWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbXh2WVdRdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCWVN4UlFVRkJMRTFCUVUwc1IwRkJSenRKUVVOd1FpeEpRVUZOTEdGQlFXRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzBsQlF6TkVMRWxCUVVrc1EwRkJReXhoUVVGaE8xRkJRVVVzVDBGQlRUdEpRVVZzUWl4SlFVRkJMRzlDUVVGSkxFTkJRV0U3U1VGRmVrSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEd0Q1FVRnJRaXhGUVVGRk8xRkJRelZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzBsQlEycERMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRMFlzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUlVGQlJUdFJRVU01UWl4VlFVRlZMRU5CUVVNN1dVRkRWQ3hoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRaUVVONFF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdFJRVU53UXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFVDeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVVktMRU5CUVVNc1EwRkJRVHRCUVVWWkxGRkJRVUVzWVVGQllTeEhRVUZITzBsQlF6TkNMRWxCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRla1VzU1VGQlNTeERRVUZETEdOQlFXTTdVVUZCUlN4UFFVRk5PMGxCUlROQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVUU3U1VGRmJrUXNTVUZCU1N4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkRka1VzWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGQk8xRkJRM1JETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3UzBGRGRrSTdVMEZCVFN4SlFVRkpMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkROME1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3UzBGRE4wSTdRVUZEU0N4RFFVRkRMRU5CUVVFN1FVRkZXU3hSUVVGQkxHVkJRV1VzUjBGQlJ6dEpRVU0zUWl3d1JrRkJNRVk3U1VGRE1VWXNOa05CUVRaRE8wbEJRemRETERoRFFVRTRRenRKUVVNNVF5d3dRa0ZCTUVJN1NVRkRNVUlzYlVOQlFXMURPMEZCUTNKRExFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNaMEpCUVdkQ0xFZEJRVWM3U1VGRE9VSXNTVUZCVFN4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0SlFVTXhSQ3hKUVVGSkxFTkJRVU1zWVVGQllUdFJRVUZGTEU5QlFVMDdTVUZGTVVJc1NVRkJUU3hGUVVGRkxFZEJRVWNzWTBGQlRTeFBRVUZCTEdkQ1FVRm5RaXhEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUV2UWl4RFFVRXJRaXhEUVVGQk8wbEJSV2hFTEdkQ1FVRm5RaXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzBsQlF5OUNMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1kwRkJUU3hQUVVGQkxIRkNRVUZ4UWl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGNlFpeERRVUY1UWl4RFFVRkRMRU5CUVVFN1NVRkRiRVVzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNjVUpCUVhGQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFYcENMRU5CUVhsQ0xFTkJRVU1zUTBGQlFUdEpRVVZzUlN4TlFVRk5PMGxCUTA0c2MwSkJRWE5DTzBsQlEzUkNMRzFDUVVGdFFqdEJRVU55UWl4RFFVRkRMRU5CUVVFN1FVRkZSQ3hUUVVGVExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFN1NVRkROMElzU1VGQlFTeHZRa0ZCU1N4RFFVRnJRanRKUVVNNVFpeEpRVUZOTEdGQlFXRXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVzc1QwRkJUeXhEUVVGQk8wbEJSVEZGTEVsQlFVa3NZVUZCWVN4RlFVRkZPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRk5MR0ZCUVdFc1EwRkJReXhaUVVGWkxFOUJRVWtzUTBGQlFUdFJRVU40UkN4UFFVRk5PMHRCUTFBN1NVRkRSQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1FVRkRNVUlzUTBGQlF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0R3JhcGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdyYXBoSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZ3JhcGggLmdyYXBoLWl0ZW0nKTtcbiAgICBpZiAoIWdyYXBoSXRlbXMpXG4gICAgICAgIHJldHVybjtcbiAgICBncmFwaEl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGdyYXBoSXRlbUJhciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tYmFyJyk7XG4gICAgICAgIHZhciBncmFwaEl0ZW1WYWx1ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tdmFsdWUnKTtcbiAgICAgICAgaWYgKCFncmFwaEl0ZW1CYXIgfHwgIWdyYXBoSXRlbVZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ3JhcGhWYWx1ZSA9IHBhcnNlSW50KGdyYXBoSXRlbVZhbHVlLmlubmVyVGV4dCk7XG4gICAgICAgIGdyYXBoSXRlbUJhci5zdHlsZS5oZWlnaHQgPSBncmFwaFZhbHVlICsgXCJweFwiO1xuICAgICAgICBncmFwaEl0ZW1WYWx1ZS5zdHlsZS5ib3R0b20gPSBncmFwaFZhbHVlICsgXCJweFwiO1xuICAgIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRXa3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMWFTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGaExGRkJRVUVzVVVGQlVTeEhRVUZITzBsQlEzUkNMRWxCUVUwc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkJPMGxCUTNKRkxFbEJRVWtzUTBGQlF5eFZRVUZWTzFGQlFVVXNUMEZCVFR0SlFVVjJRaXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHp0UlFVTjRRaXhKUVVGTkxGbEJRVmtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRmpMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdVVUZETVVVc1NVRkJUU3hqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCWXl4dFFrRkJiVUlzUTBGQlF5eERRVUZCTzFGQlF6bEZMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eGpRVUZqTzFsQlFVVXNUMEZCVFR0UlFVVTFReXhKUVVGTkxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8xRkJSWEpFTEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGTkxGVkJRVlVzVDBGQlNTeERRVUZCTzFGQlF6ZERMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZOTEZWQlFWVXNUMEZCU1N4RFFVRkJPMGxCUTJwRUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhcm91c2VsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYXRlZ29yeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXInKTtcbiAgICBpZiAoIWNhdGVnb3J5KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGNhdGVnb3J5TGlzdCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdmlld2VyJyk7XG4gICAgdmFyIGNhdGVnb3J5TGlzdFNsaWRlID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci12aWV3ZXIgPiBidXR0b24nKTtcbiAgICB2YXIgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLXByZXYnKTtcbiAgICB2YXIgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLW5leHQnKTtcbiAgICB2YXIgY2F0ZWdvcnlEb3RzID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1kb3RzLWRvdCcpO1xuICAgIGlmICghY2F0ZWdvcnlMaXN0IHx8ICFjYXRlZ29yeUxpc3RTbGlkZSB8fCAhY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiB8fCAhY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCB8fCAhY2F0ZWdvcnlEb3RzKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGNhdGVnb3J5Q29udGFpbmVyV2lkdGggPSBjYXRlZ29yeUxpc3Qub2Zmc2V0V2lkdGg7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgY2F0ZWdvcnlMaXN0U2xpZGUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKHN1bSArPSBpdGVtLm9mZnNldFdpZHRoKTsgfSk7XG4gICAgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvTmV4dCk7XG4gICAgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvUHJldik7XG4gICAgY2F0ZWdvcnlEb3RzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IH0pOyB9KTtcbiAgICBjYXRlZ29yeUxpc3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0O1xuICAgICAgICBjb25zb2xlLmxvZygnc2Nyb2xsLWxlZnQnLCBzY3JvbGxMZWZ0LCAnb2Zmc2V0LXdpZHRoJywgY2F0ZWdvcnlDb250YWluZXJXaWR0aCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gdG9QcmV2KCkge1xuICAgICAgICBpZiAoIWNhdGVnb3J5TGlzdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgLT0gMTAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b05leHQoKSB7XG4gICAgICAgIGlmICghY2F0ZWdvcnlMaXN0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXRlZ29yeUxpc3Quc2Nyb2xsTGVmdCArPSAxMDA7XG4gICAgICAgIC8vIGlmKHN1bSA+IGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpIHt9XG4gICAgICAgIC8vIGNvbnN0IHR0dCA9IDEwMCArICdweCc7XG4gICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdmlld2VyJykuc3R5bGUudHJhbnNmb3JtICs9ICd0cmFuc2xhdGVYKCcrdHR0KycpJztcbiAgICB9XG59O1xuZXhwb3J0cy5zZXREYXJrbW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGFya21vZGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGFya21vZGUnKTtcbiAgICBpZiAoIWRhcmttb2RlQnV0dG9uKVxuICAgICAgICByZXR1cm47XG4gICAgbG9hZFRoZW1lKCk7XG4gICAgZGFya21vZGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0dCk7XG59O1xuZnVuY3Rpb24gdHQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrbW9kZScpO1xuICAgIHZhciBpc0Rhcmttb2RlID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rhcmttb2RlJyk7XG4gICAgaWYgKGlzRGFya21vZGUpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgJ2Rhcmttb2RlJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGhlbWUnKTtcbiAgICAgICAgLy8gbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9hZFRoZW1lKCkge1xuICAgIHZhciBsYXN0VGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKTtcbiAgICBpZiAoIWxhc3RUaGVtZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChsYXN0VGhlbWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJWMFJHRnlhMDF2WkdVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp6WlhSRVlYSnJUVzlrWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZoTEZGQlFVRXNVVUZCVVN4SFFVRkhPMGxCUTNSQ0xFbEJRVTBzVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3U1VGRGJFUXNTVUZCU1N4RFFVRkRMRkZCUVZFN1VVRkJSU3hQUVVGTk8wbEJSWEpDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWjBKQlFXZENMRU5CUVVNc1EwRkJRVHRKUVVNeFJTeEpRVUZOTEdsQ1FVRnBRaXhIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJZeXg1UWtGQmVVSXNRMEZCUXl4RFFVRkJPMGxCUXpOR0xFbEJRVTBzYzBKQlFYTkNMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8wbEJRelZGTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBsQlF6VkZMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkJPMGxCUld4RkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRWxCUVVrc1EwRkJReXhaUVVGWk8xRkJRVVVzVDBGQlRUdEpRVVYwU0N4SlFVRk5MSE5DUVVGelFpeEhRVUZITEZsQlFWa3NRMEZCUXl4WFFVRlhMRU5CUVVFN1NVRkRka1FzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUlZnc2FVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTU3hKUVVGSkxFOUJRVUVzUTBGQlF5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGNlFpeERRVUY1UWl4RFFVRkRMRU5CUVVFN1NVRkZOVVFzYzBKQlFYTkNMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRM2hFTEhOQ1FVRnpRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdEpRVU40UkN4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR5eEpRVUZKTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4alFVRlBMRU5CUVVNc1EwRkJReXhGUVVFelF5eERRVUV5UXl4RFFVRkRMRU5CUVVFN1NVRkZOVVVzV1VGQldTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU01UWl4SlFVRkJMRzlEUVVGVkxFTkJRV2xDTzFGQlEyNURMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeEZRVUZGTEZWQlFWVXNSVUZCUlN4alFVRmpMRVZCUVVVc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0SlFVTm9SaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVVZHTEZOQlFWTXNUVUZCVFR0UlFVTmlMRWxCUVVrc1EwRkJReXhaUVVGWk8xbEJRVVVzVDBGQlRUdFJRVU42UWl4WlFVRlpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFZEJRVWNzUTBGQlFUdEpRVU5vUXl4RFFVRkRPMGxCUTBRc1UwRkJVeXhOUVVGTk8xRkJRMklzU1VGQlNTeERRVUZETEZsQlFWazdXVUZCUlN4UFFVRk5PMUZCUTNwQ0xGbEJRVmtzUTBGQlF5eFZRVUZWTEVsQlFVa3NSMEZCUnl4RFFVRkJPMUZCUXpsQ0xITkRRVUZ6UXp0UlFVTjBReXd3UWtGQk1FSTdVVUZETVVJc2NVWkJRWEZHTzBsQlEzWkdMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRldTeFJRVUZCTEZkQlFWY3NSMEZCUnp0SlFVTjZRaXhKUVVGTkxHTkJRV01zUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGQk8wbEJRemRFTEVsQlFVa3NRMEZCUXl4alFVRmpPMUZCUVVVc1QwRkJUVHRKUVVVelFpeFRRVUZUTEVWQlFVVXNRMEZCUVR0SlFVTllMR05CUVdNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVUU3UVVGRE9VTXNRMEZCUXl4RFFVRkJPMEZCUlVRc1UwRkJVeXhGUVVGRk8wbEJRMVFzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzBsQlJURkRMRWxCUVUwc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlFUdEpRVU12UkN4SlFVRkpMRlZCUVZVc1JVRkJSVHRSUVVOa0xGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGQk8wdEJRekZETzFOQlFVMDdVVUZEVEN4WlFVRlpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzFGQlEyaERMSGRDUVVGM1FqdExRVU42UWp0QlFVTklMRU5CUVVNN1FVRkZSQ3hUUVVGVExGTkJRVk03U1VGRGFFSXNTVUZCVFN4VFFVRlRMRWRCUVVjc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0SlFVTXZReXhKUVVGSkxFTkJRVU1zVTBGQlV6dFJRVUZGTEU5QlFVMDdTVUZGZEVJc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8wRkJRM2hETEVOQlFVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvdW50RG93bkNsb2NrID0gZnVuY3Rpb24gKG51bWJlciwgZm9ybWF0KSB7XG4gICAgaWYgKG51bWJlciA9PT0gdm9pZCAwKSB7IG51bWJlciA9IDEwMDsgfVxuICAgIGlmIChmb3JtYXQgPT09IHZvaWQgMCkgeyBmb3JtYXQgPSAnc2Vjb25kcyc7IH1cbiAgICB2YXIgZGF5c0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGF5cycpO1xuICAgIHZhciBob3Vyc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaG91cnMnKTtcbiAgICB2YXIgbWludXRlc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWludXRlcycpO1xuICAgIHZhciBzZWNvbmRzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zZWNvbmRzJyk7XG4gICAgaWYgKCFkYXlzRWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnZlcnRGb3JtYXQoZm9ybWF0KTtcbiAgICBmdW5jdGlvbiBjb252ZXJ0Rm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVyKG51bWJlcik7XG4gICAgICAgICAgICBjYXNlICdtaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZXIobnVtYmVyICogNjApO1xuICAgICAgICAgICAgY2FzZSAnaG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcihudW1iZXIgKiA2MCAqIDYwKTtcbiAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcihudW1iZXIgKiA2MCAqIDYwICogMjQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRpbWVyKHNlY29uZHMpIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciB0aGVuID0gbm93ICsgc2Vjb25kcyAqIDEwMDA7XG4gICAgICAgIHZhciBjb3VudGRvd24gPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2Vjb25kc0xlZnQgPSBNYXRoLnJvdW5kKCh0aGVuIC0gRGF0ZS5ub3coKSkgLyAxMDAwKTtcbiAgICAgICAgICAgIGlmIChzZWNvbmRzTGVmdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjb3VudGRvd24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGF5c0VsZW1lbnQgfHwgIWhvdXJzRWxlbWVudCB8fCAhbWludXRlc0VsZW1lbnQgfHwgIXNlY29uZHNFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRheXNFbGVtZW50LmlubmVySFRNTCA9IFwiXCIgKyBNYXRoLmZsb29yKHNlY29uZHNMZWZ0IC8gODY0MDApO1xuICAgICAgICAgICAgaG91cnNFbGVtZW50LmlubmVyVGV4dCA9IFwiXCIgKyBNYXRoLmZsb29yKChzZWNvbmRzTGVmdCAlIDg2NDAwKSAvIDM2MDApO1xuICAgICAgICAgICAgbWludXRlc0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIiArIE1hdGguZmxvb3IoKChzZWNvbmRzTGVmdCAlIDg2NDAwKSAlIDM2MDApIC8gNjApO1xuICAgICAgICAgICAgc2Vjb25kc0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIiArIChzZWNvbmRzTGVmdCAlIDYwIDwgMTAgPyBcIjBcIiArIHNlY29uZHNMZWZ0ICUgNjAgOiBzZWNvbmRzTGVmdCAlIDYwKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOTFiblJrYjNkdUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWTI5MWJuUmtiM2R1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRV0VzVVVGQlFTeGpRVUZqTEVkQlFVY3NWVUZCUXl4TlFVRlpMRVZCUVVVc1RVRkJhMEk3U1VGQmFFTXNkVUpCUVVFc1JVRkJRU3haUVVGWk8wbEJRVVVzZFVKQlFVRXNSVUZCUVN4clFrRkJhMEk3U1VGRE4wUXNTVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVTnVSU3hKUVVGTkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRmRCUVZjc1EwRkJReXhEUVVGQk8wbEJRM0pGTEVsQlFVMHNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWVVGQllTeERRVUZETEVOQlFVRTdTVUZEZWtVc1NVRkJUU3hqUVVGakxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRKUVVONlJTeEpRVUZKTEVOQlFVTXNWMEZCVnp0UlFVRkZMRTlCUVUwN1NVRkZlRUlzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUlhKQ0xGTkJRVk1zWVVGQllTeERRVUZETEUxQlFVMDdVVUZETTBJc1VVRkJVU3hOUVVGTkxFVkJRVVU3V1VGRFpDeExRVUZMTEZOQlFWTTdaMEpCUTFvc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdXVUZEZEVJc1MwRkJTeXhUUVVGVE8yZENRVU5hTEU5QlFVOHNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFpRVU16UWl4TFFVRkxMRTlCUVU4N1owSkJRMVlzVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFpRVU5vUXl4TFFVRkxMRTFCUVUwN1owSkJRMVFzVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVRTdVMEZEZEVNN1NVRkRTQ3hEUVVGRE8wbEJSVVFzVTBGQlV5eExRVUZMTEVOQlFVTXNUMEZCVHp0UlFVTndRaXhKUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVFN1VVRkRkRUlzU1VGQlRTeEpRVUZKTEVkQlFVY3NSMEZCUnl4SFFVRkhMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVUU3VVVGRGFrTXNTVUZCVFN4VFFVRlRMRWRCUVVjc1YwRkJWeXhEUVVGRE8xbEJRelZDTEVsQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVRTdXVUZETVVRc1NVRkJTU3hYUVVGWExFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTndRaXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdaMEpCUTNoQ0xFOUJRVTA3WVVGRFVEdFpRVU5FTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVsQlFVa3NRMEZCUXl4alFVRmpPMmRDUVVGRkxFOUJRVTA3V1VGREwwVXNWMEZCVnl4RFFVRkRMRk5CUVZNc1IwRkJSeXhMUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJSeXhEUVVGQk8xbEJRelZFTEZsQlFWa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlJ5eERRVUZCTzFsQlEzUkZMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGSExFTkJRVUU3V1VGREwwVXNZMEZCWXl4RFFVRkRMRk5CUVZNc1IwRkJSeXhOUVVGSExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGSkxGZEJRVmNzUjBGQlJ5eEZRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1IwRkJSeXhGUVVGRkxFTkJRVVVzUTBGQlFUdFJRVU51Unl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3U1VGRFZpeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdG9nZ2xlQ2xhc3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90b2dnbGVDbGFzc1wiKSk7XG52YXIgZW50ZXJUYXJnZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lbnRlclRhcmdldFwiKSk7XG52YXIgdGFiTWVudV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RhYk1lbnVcIikpO1xudmFyIG1vZGFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kYWxcIikpO1xudmFyIHRvVG9wXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG9Ub3BcIikpO1xudmFyIHN0aWNreUVsZW1lbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdGlja3lFbGVtZW50XCIpKTtcbnZhciBzY3JvbGxBbmltYXRpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxBbmltYXRpb25cIikpO1xudmFyIGNsb3NlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY2xvc2VcIikpO1xudmFyIGN1c3RvbUN1cnNvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2N1c3RvbUN1cnNvclwiKSk7XG52YXIgc2Nyb2xsc3B5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsc3B5XCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3NfMS5kZWZhdWx0LFxuICAgIGVudGVyVGFyZ2V0OiBlbnRlclRhcmdldF8xLmRlZmF1bHQsXG4gICAgbW9kYWw6IG1vZGFsXzEuZGVmYXVsdCxcbiAgICB0YWJNZW51OiB0YWJNZW51XzEuZGVmYXVsdCxcbiAgICB0b1RvcDogdG9Ub3BfMS5kZWZhdWx0LFxuICAgIHN0aWNreUVsZW1lbnQ6IHN0aWNreUVsZW1lbnRfMS5kZWZhdWx0LFxuICAgIHNjcm9sbEFuaW1hdGlvbjogc2Nyb2xsQW5pbWF0aW9uXzEuZGVmYXVsdCxcbiAgICBzY3JvbGxzcHk6IHNjcm9sbHNweV8xLmRlZmF1bHQsXG4gICAgY2xvc2U6IGNsb3NlXzEuZGVmYXVsdCxcbiAgICBjdXN0b21DdXJzb3I6IGN1c3RvbUN1cnNvcl8xLmRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRGhFUVVGMVF6dEJRVU4yUXl3NFJFRkJkVU03UVVGRGRrTXNjMFJCUVN0Q08wRkJReTlDTEd0RVFVRXlRanRCUVVNelFpeHJSRUZCTWtJN1FVRkRNMElzYTBWQlFUSkRPMEZCUXpORExITkZRVUVyUXp0QlFVTXZReXhyUkVGQk1rSTdRVUZETTBJc1owVkJRWGxETzBGQlEzcERMREJFUVVGdFF6dEJRVVZ1UXl4clFrRkJaVHRKUVVOaUxGZEJRVmNzZFVKQlFVRTdTVUZEV0N4WFFVRlhMSFZDUVVGQk8wbEJRMWdzUzBGQlN5eHBRa0ZCUVR0SlFVTk1MRTlCUVU4c2JVSkJRVUU3U1VGRFVDeExRVUZMTEdsQ1FVRkJPMGxCUTB3c1lVRkJZU3g1UWtGQlFUdEpRVU5pTEdWQlFXVXNNa0pCUVVFN1NVRkRaaXhUUVVGVExIRkNRVUZCTzBsQlExUXNTMEZCU3l4cFFrRkJRVHRKUVVOTUxGbEJRVmtzZDBKQlFVRTdRMEZEWWl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdHJpZ2dlciA9IF9hLnNlbGVjdG9yO1xuICAgIHJldHVybiAoe1xuICAgICAgICB0cmlnZ2VyczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0cmlnZ2VyKSxcbiAgICAgICAgQUNUSVZFX0NMQVNTOiAnaXMtYWN0aXZlJyxcbiAgICAgICAgQUNUSVZFX0NMQVNTMjogJ2lzLXZpc2libGUnLFxuICAgICAgICBzZXRFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICghdGhpcy50cmlnZ2VycylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIGEgdGFn7JeQIOyCrOyaqe2VmOuKlCDqsr3smrBcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyTmV4dEVsZW1lbnQgPSAoX2EgPSBlbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyaWdnZXJOZXh0RWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlQ2xhc3NUcmlnZ2VyKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGVDbGFzc1RhcmdldCh0cmlnZ2VyTmV4dEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZUFsbENsYXNzKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHsgcmV0dXJuIF90aGlzLnJlbW92ZUFsbENsYXNzKHRyaWdnZXIpOyB9KTsgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvZ2dsZUNsYXNzVHJpZ2dlcjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkFDVElWRV9DTEFTUyk7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwiXCIgKyBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLkFDVElWRV9DTEFTUykpO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVDbGFzc1RhcmdldDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkFDVElWRV9DTEFTUzIpO1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVBbGxDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkFDVElWRV9DTEFTUyk7XG4gICAgICAgICAgICBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQUNUSVZFX0NMQVNTMik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB0b2dnbGVDbGFzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHOW5aMnhsUTJ4aGMzTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMGIyZG5iR1ZEYkdGemN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEZWQlFVTXNSVUZCWjBNN1VVRkJPVUlzY1VKQlFXbENPMGxCUVd0Q0xFOUJRVUVzUTBGQlF6dFJRVU42UkN4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVNMVF5eFpRVUZaTEVWQlFVVXNWMEZCVnp0UlFVTjZRaXhoUVVGaExFVkJRVVVzV1VGQldUdFJRVU16UWl4UlFVRlJMRVZCUVZJN1dVRkJRU3hwUWtGelFrTTdXVUZ5UWtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTzJkQ1FVRkZMRTlCUVUwN1dVRkZNVUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8yZENRVU16UWl4UFFVRkJMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJRU3hMUVVGTE96dHZRa0ZEY2tNc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGQlJTeERRVUZCTEVOQlFVTXNhVUpCUVdsQ08yOUNRVU40UXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVUU3YjBKQlJYWkNMRWxCUVUwc2EwSkJRV3RDTEVkQlFVY3NUVUZCUVN4UFFVRlBMREJEUVVGRkxHdENRVUZwUXl4RFFVRkJPMjlDUVVOeVJTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q08zZENRVUZGTEU5QlFVMDdiMEpCUlM5Q0xFdEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdHZRa0ZEYUVNc1MwRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVRTdiMEpCUlRGRExFdEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenQzUWtGRE0wSXNTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFOUJRVTg3TkVKQlFVVXNUMEZCVFR0M1FrRkRjRU1zUzBGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHR2UWtGRE9VSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1owSkJRMG9zUTBGQlF5eERRVUZETzFsQlpFWXNRMEZqUlN4RFFVTklMRU5CUVVFN1dVRkRSQ3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeGpRVUZOTEU5QlFVRXNTMEZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTEVsQlFVa3NUMEZCUVN4TFFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUUxUWl4RFFVRTBRaXhEUVVGRExFVkJRVGxFTEVOQlFUaEVMRU5CUVVNc1EwRkJRVHRSUVVVdlJ5eERRVUZETzFGQlEwUXNhMEpCUVd0Q0xGbEJRVU1zVDBGQlR6dFpRVU40UWl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1dVRkRNME1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1MwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGSExFTkJRVU1zUTBGQlFUdFJRVU16Uml4RFFVRkRPMUZCUTBRc2FVSkJRV2xDTEZsQlFVTXNUMEZCVHp0WlFVTjJRaXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3V1VGRE5VTXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxFdEJRVXNzUTBGQlF5eGxRVUZsTEVWQlFVVXNSVUZCZGtJc1EwRkJkVUlzUTBGQlF5eERRVUZCTzFGQlEzSkZMRU5CUVVNN1VVRkRSQ3hqUVVGakxGbEJRVU1zVDBGQlR6dFpRVU53UWl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExHVkJRV1VzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0WlFVTTNReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3V1VGRE0wTXNUMEZCVHl4RFFVRkRMR3RDUVVGclFpeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzFGQlEycEZMRU5CUVVNN1MwRkRSaXhEUVVGRE8wRkJlRU4zUkN4RFFYZERlRVFzUTBGQlFUdEJRVVZHTEd0Q1FVRmxMRmRCUVZjc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW50ZXJUYXJnZXQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBob3ZlckVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpO1xuICAgIGlmICghaG92ZXJFbGVtZW50cylcbiAgICAgICAgcmV0dXJuO1xuICAgIGhvdmVyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAvLyB0b2RvXG4gICAgICAgIHZhciBpc05hdmlnYXRpb24gPSBlbGVtZW50ID09PSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyIC5uYXZiYXItbWVudS1pdGVtJyk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVudGVyRXZlbnQoKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxlYXZlRXZlbnQoKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBlbnRlckV2ZW50KCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xuICAgICAgICAgICAgaXNOYXZpZ2F0aW9uICYmIGJvZHkuY2xhc3NMaXN0LmFkZCgnaXMtc2hvd24nKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsZWF2ZUV2ZW50KCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgIGlzTmF2aWdhdGlvbiAmJiBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNob3duJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBlbnRlclRhcmdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpXNTBaWEpVWVhKblpYUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKbGJuUmxjbFJoY21kbGRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEZWQlFVTXNSVUZCSzBJN1VVRkJOMElzYjBKQlFXZENPMGxCUXpkQ0xFbEJRVUVzYjBKQlFVa3NRMEZCWVR0SlFVTjZRaXhKUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdTVUZEZGtRc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJURkNMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzFGQlF6TkNMRTlCUVU4N1VVRkRVQ3hKUVVGTkxGbEJRVmtzUjBGQlJ5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RFFVRkJPMUZCUlhaR0xFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGNrTXNWVUZCVlN4RlFVRkZMRU5CUVVFN1dVRkRXaXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRkxHTkJRVTBzVDBGQlFTeFZRVUZWTEVWQlFVVXNSVUZCV2l4RFFVRlpMRU5CUVVNc1EwRkJRVHRSUVVNMVJDeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVVkdMRk5CUVZNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVU0zUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTndReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGFFUXNRMEZCUXp0UlFVTkVMRk5CUVZNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlFUdFpRVU01UXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTjJReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGJrUXNRMEZCUXp0SlFVTklMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1YwRkJWeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIOumrO2Mqe2GoOunge2VmOq4lFxudmFyIHRhYk1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIHRhYnMgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJdJyk7XG4gICAgICAgIHZhciB0YWJJbmRleCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcbiAgICAgICAgdmFyIHRhYkFjdGljZUJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLXRhYmxpc3QtYWN0aXZlJyk7XG4gICAgICAgIGlmICghdGFicyB8fCAhdGFiQWN0aWNlQmFyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJ1tyb2xlPXRhYl0nKSkge1xuICAgICAgICAgICAgLy8gY29uc3QgdGFyZ2V0V2lkdGggPSB0YXJnZXQuZ2V0U3R5cXFcbiAgICAgICAgICAgIHRhYkFjdGljZUJhci5zdHlsZS5sZWZ0ID0gdGFyZ2V0Lm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICB0YWJzLmZvckVhY2goZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpOyB9KTtcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJwYW5lbF0nKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgdHJ1ZSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gdGFiTWVudTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHRmlUV1Z1ZFM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJblJoWWsxbGJuVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeFRRVUZUTzBGQlExUXNTVUZCVFN4UFFVRlBMRWRCUVVjN1NVRkRaQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUTNaQ0xFOUJRVThzUlVGRFVDeFZRVUZCTEV0QlFVczdVVUZEU3l4SlFVRkJMSEZDUVVGTkxFTkJRV1U3VVVGRE4wSXNTVUZCVFN4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdFJRVU0zUkN4SlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMUZCUTJ4RUxFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUVR0UlFVVnVSaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1R0WlFVRkZMRTlCUVUwN1VVRkZiRU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRk8xbEJRMmhETEhORFFVRnpRenRaUVVWMFF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJUU3hOUVVGTkxFTkJRVU1zVlVGQlZTeFBRVUZKTEVOQlFVRTdXVUZEYkVRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVkQlFVY3NTVUZCU1N4UFFVRkJMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RlFVRXhReXhEUVVFd1F5eERRVUZETEVOQlFVRTdXVUZETDBRc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1dVRkZOVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMmRDUVVNNVJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdG5Ra0ZETTBNc1NVRkJTU3hSUVVGUkxFdEJRVXNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSVHR2UWtGRGJrUXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhoUVVGaExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVRTdhVUpCUXpsRE8xbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdVMEZEU0R0SlFVTklMRU5CUVVNc1JVRkRSQ3hKUVVGSkxFTkJRMHdzUTBGQlFUdEJRVU5JTEVOQlFVTXNRMEZCUVR0QlFVVkVMR3RDUVVGbExFOUJRVThzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtb2RhbCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0cmlnZ2VyID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlcik7XG4gICAgaWYgKCFtb2RhbHMpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgcGFnZVkgPSAwO1xuICAgIG1vZGFscy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RhbCkge1xuICAgICAgICByZXR1cm4gbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgbmV4dEVsZW1lbnRTaWJsaW5nID0gbW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgdmFyIGNsb3NlVHJpZ2dlciA9IChfYSA9IG5leHRFbGVtZW50U2libGluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3IoJy5qcy1tb2RhbC1jbG9zZScpO1xuICAgICAgICAgICAgcGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICBzaG93TW9kYWwobmV4dEVsZW1lbnRTaWJsaW5nKTtcbiAgICAgICAgICAgIGNvbnRyb2xIaXN0b3J5KCk7XG4gICAgICAgICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IGhpc3Rvcnkub25wdXNoc3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcvJykucG9wKCkuaW5kZXhPZignbW9kYWwnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g66eI7KeA66eJIHNlZ21lbnTqsIAgY2FyZHPrnbzrqbQg66qo64us7J20IOyVhOuLjCDrpqzsiqTtirjsnbgg7IOB7YOc7J207Ja07JW87ZWc64ukLlxuICAgICAgICAgICAgICAgICAgICBjbG9zZU1vZGFsKG5leHRFbGVtZW50U2libGluZyk7IC8vIO2YhOyerOydmCDrqqjri6zsnYQg64ur64qU64ukLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsb3NlTW9kYWwobmV4dEVsZW1lbnRTaWJsaW5nKTsgfSk7XG4gICAgICAgICAgICAoX2IgPSBjbG9zZVRyaWdnZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsb3NlTW9kYWwobmV4dEVsZW1lbnRTaWJsaW5nKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBtb2RhbERpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbC1kaWFsb2cnKTtcbiAgICBtb2RhbERpYWxvZy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgfSk7IH0pO1xuICAgIGZ1bmN0aW9uIGNvbnRyb2xIaXN0b3J5KCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB7ICdwYWdlX2lkJzogMSwgJ3VzZXJfaWQnOiA1IH07XG4gICAgICAgIHZhciB0aXRsZSA9ICcnO1xuICAgICAgICB2YXIgdXJsID0gJ2hlbGxvLXdvcmxkLmh0bWwnO1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgdGl0bGUsIHVybCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3dNb2RhbChlbGVtZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gZWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5hZGQoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgbG9ja0JvZHkoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VNb2RhbChlbGVtZW50KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBpc09wZW5lZCA9IChfYSA9IGVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgaWYgKCFpc09wZW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgKF9iID0gZWxlbWVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgdW5sb2NrQm9keSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsb2NrQm9keSgpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSBcIi1cIiArIHBhZ2VZICsgXCJweFwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bmxvY2tCb2R5KCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xuICAgICAgICBzZXRTY3JvbGxZKHBhZ2VZKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0U2Nyb2xsWShwYWdlWSkge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcGFnZVkpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBtb2RhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXOWtZV3d1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnRiMlJoYkM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVkZCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVVNc1JVRkJaME03VVVGQk9VSXNjVUpCUVdsQ08wbEJRMmhETEVsQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRKUVVOcVJDeEpRVUZKTEVOQlFVTXNUVUZCVFR0UlFVRkZMRTlCUVUwN1NVRkZia0lzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUldJc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEV0QlFVczdVVUZEYkVJc1QwRkJRU3hMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN6czdXVUZEYmtNc1MwRkJTeXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZCTzFsQlEzWkNMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdFpRVVZrTEVsQlFVRXNOa05CUVd0Q0xFTkJRVlU3V1VGRGNFTXNTVUZCVFN4WlFVRlpMRk5CUVVjc2EwSkJRV3RDTERCRFFVRkZMR0ZCUVdFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkJPMWxCUTNwRkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkJPMWxCUlRGQ0xGTkJRVk1zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGQk8xbEJSVGRDTEdOQlFXTXNSVUZCUlN4RFFVRkJPMWxCUTJoQ0xFMUJRVTBzUTBGQlF5eFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMRmRCUVZjc1IwRkJSenRuUWtGRGVFTXNTVUZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8yOUNRVU5vUlN3MFEwRkJORU03YjBKQlF6VkRMRlZCUVZVc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1pVRkJaVHRwUWtGRGFFUTdXVUZEU0N4RFFVRkRMRU5CUVVFN1dVRkZSQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxHTkJRVTBzVDBGQlFTeFZRVUZWTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUlVGQk9VSXNRMEZCT0VJc1EwRkJReXhEUVVGQk8xbEJRM2hGTEUxQlFVRXNXVUZCV1N3d1EwRkJSU3huUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1kwRkJUU3hQUVVGQkxGVkJRVlVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhGUVVFNVFpeERRVUU0UWl4RlFVRkRPMUZCUlM5RkxFTkJRVU1zUTBGQlF6dEpRWEpDUml4RFFYRkNSU3hEUVVOSUxFTkJRVUU3U1VGRlJDeEpRVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVFN1NVRkRPVVFzVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4c1NVRkJTU3hQUVVGQkxFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlFTeExRVUZMTEVsQlFVa3NUMEZCUVN4TFFVRkxMRU5CUVVNc1pVRkJaU3hGUVVGRkxFVkJRWFpDTEVOQlFYVkNMRU5CUVVNc1JVRkJia1VzUTBGQmJVVXNRMEZCUXl4RFFVRkJPMGxCUlc1SExGTkJRVk1zWTBGQll6dFJRVU55UWl4SlFVRk5MRXRCUVVzc1IwRkJSeXhGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGQk8xRkJRelZETEVsQlFVMHNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVOb1FpeEpRVUZOTEVkQlFVY3NSMEZCUnl4clFrRkJhMElzUTBGQlFUdFJRVVU1UWl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkRkRU1zUTBGQlF6dEpRVU5FTEZOQlFWTXNVMEZCVXl4RFFVRkRMRTlCUVU4N08xRkJRM2hDTEUxQlFVRXNUMEZCVHl3d1EwRkJSU3hUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NSVUZCUXp0UlFVTndReXhSUVVGUkxFVkJRVVVzUTBGQlFUdEpRVU5hTEVOQlFVTTdTVUZEUkN4VFFVRlRMRlZCUVZVc1EwRkJReXhQUVVGUE96dFJRVU42UWl4SlFVRk5MRkZCUVZFc1UwRkJSeXhQUVVGUExEQkRRVUZGTEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VVVGRE1VUXNTVUZCU1N4RFFVRkRMRkZCUVZFN1dVRkJSU3hQUVVGTk8xRkJSWEpDTEUxQlFVRXNUMEZCVHl3d1EwRkJSU3hUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NSVUZCUXp0UlFVTjJReXhWUVVGVkxFVkJRVVVzUTBGQlFUdEpRVU5rTEVOQlFVTTdTVUZGUkN4VFFVRlRMRkZCUVZFN1VVRkRaaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRGVFTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVa3NTMEZCU3l4UFFVRkpMRU5CUVVFN1NVRkRla01zUTBGQlF6dEpRVVZFTEZOQlFWTXNWVUZCVlR0UlFVTnFRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRE0wTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wbEJRMjVDTEVOQlFVTTdTVUZGUkN4VFFVRlRMRlZCUVZVc1EwRkJReXhMUVVGTE8xRkJRM1pDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZCTzBsQlF6TkNMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4TFFVRkxMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0b1RvcCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0YXJnZXQgPSBfYS5zZWxlY3RvcjtcbiAgICB2YXIgdG9Ub3BFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICAgIGlmICghdG9Ub3BFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdG9Ub3BFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSB0b1RvcEVsZW1lbnQubmFtZSB8fCB0b1RvcEVsZW1lbnQuaHJlZjtcbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB0b1RvcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHOVViM0F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBiMVJ2Y0M1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVVNc1JVRkJLMEk3VVVGQk4wSXNiMEpCUVdkQ08wbEJReTlDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV3RDTEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUTNCRkxFbEJRVWtzUTBGQlF5eFpRVUZaTzFGQlFVVXNUMEZCVFR0SlFVVjZRaXhaUVVGWkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN6dFJRVU14UXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVUU3VVVGRGRFSXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZGY2tJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrc1NVRkJTU3haUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZCTzBsQlF5OUVMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1MwRkJTeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzdGlja3lFbGVtZW50ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRhcmdldEVsZW1lbnQgPSBfYS50YXJnZXRFbGVtZW50LCBhZGRDbGFzcyA9IF9hLmFkZENsYXNzO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgc3RpY2t5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWxlbWVudCk7XG4gICAgaWYgKCFzdGlja3lFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIHN0aWNreUVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB2YXIgaXNTY3JvbGxpbmc7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNTY3JvbGxpbmcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlzU2Nyb2xsaW5nKTtcbiAgICAgICAgaXNTY3JvbGxpbmcgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0aWNreUVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coc3RpY2t5RWxlbWVudEhlaWdodCkgLy8gMTMzXG4gICAgICAgIGlzU2Nyb2xsaW5nICYmIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpc1Njcm9sbGluZyk7XG4gICAgICAgIGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gc3RpY2t5RWxlbWVudC5vZmZzZXRUb3AgKyBzdGlja3lFbGVtZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKGFkZENsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZShhZGRDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbi8vIHZhciBpc1Njcm9sbGluZztcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZXZlbnQpID0+IHtcbi8vIFx0aWYoaXNTY3JvbGxpbmcpIHdpbmRvdy5jbGVhclRpbWVvdXQoaXNTY3JvbGxpbmcpO1xuLy8gXHRpc1Njcm9sbGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbi8vIFx0XHRzdGlja3lUb2dnbGUoKTtcbi8vIFx0fSwgNTApO1xuLy8gfSk7XG4vLyBleHBvcnQgY29uc3Qgc3RpY2t5SGVhZGVyRWxlbWVudCA9ICh0YXJnZXRFbGVtZW50LCBhZGRDbGFzcykgPT4ge1xuLy8gXHRzdGlja3lFbGVtZW50KHt0YXJnZXRFbGVtZW50LCBhZGRDbGFzcywgdHJ1ZX0pO1xuLy8gfTtcbi8vIGNvbnN0IHN0aWNreUhlYWRlciA9ICgpID0+IHtcbi8vIFx0Y29uc3QgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcbi8vIFx0bGV0IGxhc3RTY3JvbGxUb3AgPSAwO1xuLy8gXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuLy8gXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShoYXNTY3JvbGxlZCk7XG4vLyBcdH0pO1xuLy8gXHRmdW5jdGlvbiBoYXNTY3JvbGxlZCgpIHtcbi8vIFx0XHRpZih3aW5kb3cucGFnZVlPZmZzZXQgPiBsYXN0U2Nyb2xsVG9wKSB7XG4vLyBcdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdi11cCcpO1xuLy8gXHRcdH0gZWxzZSB7XG4vLyBcdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ25hdi11cCcpO1xuLy8gXHRcdH1cbi8vIFx0XHRsYXN0U2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuLy8gXHR9XG4vLyB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RpY2t5RWxlbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzUnBZMnQ1Uld4bGJXVnVkQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkluTjBhV05yZVVWc1pXMWxiblF1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGTkxHRkJRV0VzUjBGQlJ5eFZRVUZETEVWQlFUSkNPMUZCUVhwQ0xHZERRVUZoTEVWQlFVVXNjMEpCUVZFN1NVRkRkRU1zU1VGQlFTeHZRa0ZCU1N4RFFVRmhPMGxCUTNwQ0xFbEJRVTBzWVVGQllTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRE0wUXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1VVRkJSU3hQUVVGTk8wbEJSVEZDTEVsQlFVa3NiVUpCUVcxQ0xFZEJRVWNzWVVGQllTeERRVUZETEZsQlFWa3NRMEZCUVR0SlFVTndSQ3hKUVVGSkxGZEJRVmNzUTBGQlFUdEpRVVZtTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEYUVNc1YwRkJWeXhKUVVGSkxFMUJRVTBzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdFJRVU4yUkN4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMWxCUTNwRExHMUNRVUZ0UWl4SFFVRkhMR0ZCUVdFc1EwRkJReXhaUVVGWkxFTkJRVUU3VVVGRGJFUXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRTaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVVZHTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEYUVNc01FTkJRVEJETzFGQlF6RkRMRmRCUVZjc1NVRkJTU3hOUVVGTkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRGRrUXNWMEZCVnl4SFFVRkhMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0WlFVTjZReXhKUVVGSkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NZVUZCWVN4RFFVRkRMRk5CUVZNc1IwRkJSeXh0UWtGQmJVSXNSVUZCUlR0blFrRkRkRVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3WVVGRE4wSTdhVUpCUVUwN1owSkJRMHdzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3WVVGRGFFTTdVVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOS0xFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJPMEZCUlVRc2JVSkJRVzFDTzBGQlEyNUNMR2xFUVVGcFJEdEJRVU5xUkN4eFJFRkJjVVE3UVVGRGNrUXNkME5CUVhkRE8wRkJRM2hETEc5Q1FVRnZRanRCUVVOd1FpeFhRVUZYTzBGQlExZ3NUVUZCVFR0QlFVVk9MRzlGUVVGdlJUdEJRVU53UlN4dFJFRkJiVVE3UVVGRGJrUXNTMEZCU3p0QlFVVk1MQ3RDUVVFclFqdEJRVU12UWl3MFJFRkJORVE3UVVGRE5VUXNNRUpCUVRCQ08wRkJSVEZDTERaRFFVRTJRenRCUVVNM1F5eDNRMEZCZDBNN1FVRkRlRU1zVDBGQlR6dEJRVVZRTERSQ1FVRTBRanRCUVVNMVFpdzJRMEZCTmtNN1FVRkROME1zTkVOQlFUUkRPMEZCUXpWRExHRkJRV0U3UVVGRFlpd3JRMEZCSzBNN1FVRkRMME1zVFVGQlRUdEJRVU5PTEhkRFFVRjNRenRCUVVONFF5eExRVUZMTzBGQlEwd3NTMEZCU3p0QlFVVk1MR3RDUVVGbExHRkJRV0VzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBldmVudFNjcm9sbEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2Nyb2xsVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcbiAgICBjb25zb2xlLmxvZyhzY3JvbGxUYXJnZXQpO1xuICAgIHZhciBTQ1JPTExFRF9DTEFTUyA9ICdpcy1zY3JvbGxlZCc7XG4gICAgaWYgKCFzY3JvbGxUYXJnZXQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgdGVtcDtcbiAgICBzY3JvbGxUYXJnZXQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgaXNTY3JvbGxlZCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgaWYgKCFpc1Njcm9sbGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoU0NST0xMRURfQ0xBU1MpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcm9sbFRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgaXNTY3JvbGxlZCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQgKiAwLjUgPD0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgLy8gY29uc3QgaXNTY3JvbGxlZCA9IHdpbmRvdy5wYWdlWU9mZnNldCA+IHdpbmRvdy5wYWdlWU9mZnNldCArIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gd2luZG93LmlubmVySGVpZ2h0ICsgNTBcbiAgICAgICAgICAgIGlmICghaXNTY3JvbGxlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoU0NST0xMRURfQ0xBU1MpO1xuICAgICAgICAgICAgdGVtcCAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGVtcCk7XG4gICAgICAgICAgICB0ZW1wID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoU0NST0xMRURfQ0xBU1MpO1xuICAgICAgICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXZlbnRTY3JvbGxBbmltYXRpb247XG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGV2ZW50KSA9PiB7XG4vLyBcdHZhciB0aW1lcjtcbi8vIFx0aWYgKCF0aW1lcikge1xuLy8gXHRcdHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vIFx0XHRcdHRpbWVyPW51bGw7XG4vLyBcdFx0XHRjb25zdCB0YXJnZXRTdGlja3kgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc3RpY2t5Jyk7XG4vLyBcdFx0XHRjb25zdCB0YXJnZXRTdGlja3lIZWlnaHQgPSB0YXJnZXRTdGlja3kuY2xpZW50SGVpZ2h0O1xuLy8gXHRcdFx0aWYod2luZG93LnBhZ2VZT2Zmc2V0ID4gdGFyZ2V0U3RpY2t5Lm9mZnNldFRvcCl7XG4vLyBcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLnN0eWxlLnBhZGRpbmdUb3AgPSB0YXJnZXRTdGlja3lIZWlnaHQgKyAncHgnO1xuLy8gXHRcdFx0XHRcdHRhcmdldFN0aWNreS5jbGFzc0xpc3QuYWRkKCdpcy1zdGlja3knKTtcbi8vIFx0XHRcdH0gZWxzZSB7XG4vLyBcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLnN0eWxlLnBhZGRpbmdUb3AgPSAnMHB4Jztcbi8vIFx0XHRcdFx0XHR0YXJnZXRTdGlja3kuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc3RpY2t5Jyk7XG4vLyBcdFx0XHR9XG4vLyBcdFx0fSwgNDAwKTtcbi8vIFx0fVxuLy8gfSk7XG4vLyBjb25zdCBhYnNvbHV0ZVRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCArIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJOeWIyeHNRVzVwYldGMGFXOXVMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWMyTnliMnhzUVc1cGJXRjBhVzl1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeHZRa0ZCYjBJc1IwRkJSenRKUVVNelFpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdEpRVU4wUlN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlEzcENMRWxCUVUwc1kwRkJZeXhIUVVGSExHRkJRV0VzUTBGQlFUdEpRVU53UXl4SlFVRkpMRU5CUVVNc1dVRkJXVHRSUVVGRkxFOUJRVTA3U1VGRmVrSXNTVUZCU1N4SlFVRkpMRU5CUVVFN1NVRkZVaXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHp0UlFVTXhRaXhKUVVGTkxGVkJRVlVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlF5eE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJRVHRSUVVNdlJTeEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVRkZMRTlCUVUwN1VVRkZka0lzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVUU3U1VGRGRrTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkZSaXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRk8xRkJRMmhETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xbEJRekZDTEVsQlFVMHNWVUZCVlN4SFFVRkhMRTlCUVU4c1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeEhRVUZITEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRE8xbEJRekZITERaSVFVRTJTRHRaUVVNM1NDeEpRVUZKTEVOQlFVTXNWVUZCVlR0blFrRkJSU3hQUVVGTk8xbEJSWFpDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZCTzFsQlEzSkRMRWxCUVVrc1NVRkJTU3hOUVVGTkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3V1VGRGVrTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0blFrRkhiRU1zYlVSQlFXMUVPMmRDUVVOdVJDdzRRMEZCT0VNN1owSkJRemxETEV0QlFVczdXVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRVHRSUVVOS0xFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkhTaXhEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4dlFrRkJiMElzUTBGQlFUdEJRVWR1UXl4cFJFRkJhVVE3UVVGRGFrUXNZMEZCWXp0QlFVTmtMR2xDUVVGcFFqdEJRVU5xUWl4dlEwRkJiME03UVVGRGNFTXNhVUpCUVdsQ08wRkJRMnBDTEdkRlFVRm5SVHRCUVVOb1JTd3lSRUZCTWtRN1FVRkRNMFFzYzBSQlFYTkVPMEZCUTNSRUxHOUdRVUZ2Ump0QlFVTndSaXhuUkVGQlowUTdRVUZEYUVRc1kwRkJZenRCUVVOa0xHZEZRVUZuUlR0QlFVTm9SU3h0UkVGQmJVUTdRVUZEYmtRc1QwRkJUenRCUVVOUUxHRkJRV0U3UVVGRFlpeExRVUZMTzBGQlEwd3NUVUZCVFR0QlFVVk9MR2RHUVVGblJpSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjbG9zZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0YXJnZXQgPSBfYS5zZWxlY3RvcjtcbiAgICB2YXIgY2xvc2VFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KTtcbiAgICBpZiAoIWNsb3NlRWxlbWVudHMpXG4gICAgICAgIHJldHVybjtcbiAgICBjbG9zZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGlzSGlkZGVuID0gSFRNTEVsZW1lbnQuaGlkZGVuXG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNsb3NlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJ4dmMyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKamJHOXpaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1MwRkJTeXhIUVVGSExGVkJRVU1zUlVGQkswSTdVVUZCTjBJc2IwSkJRV2RDTzBsQlF5OUNMRWxCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJhMElzVFVGQlRTeERRVUZETEVOQlFVRTdTVUZEZUVVc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJURkNMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzFGQlF6TkNMRTlCUVVFc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRaUVVOc1FpeFBRVUZQTEVOQlFVTXNWVUZCVnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVUU3V1VGREwwTXNaME5CUVdkRE8xRkJRMnhETEVOQlFVTXNRMEZCUXp0SlFVaEdMRU5CUjBVc1EwRkRTQ3hEUVVGQk8wRkJRMGdzUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1MwRkJTeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjdXN0b21DdXJzb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnNvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkaW5nLW9iamVjdCcpO1xuICAgIGlmICghY3Vyc29yKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGhvdmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgYScpO1xuICAgIGlmICghaG92ZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gc2V0Q3Vyc29yKGV2ZW50LCB7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBzZXRDdXJzb3IoZXZlbnQsIHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pOyB9KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFJpcHBsZSh7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XG4gICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2lzLWRlZmF1bHQnKTtcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xpY2thYmxlJyk7XG4gICAgfSk7IH0pO1xuICAgIGhvdmVyRWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1jbGlja2FibGUnKTtcbiAgICB9KTsgfSk7XG4gICAgZnVuY3Rpb24gc2V0Q3Vyc29yKGV2ZW50LCBfYSkge1xuICAgICAgICB2YXIgY3Vyc29yID0gX2EuY3Vyc29yRWxlbWVudDtcbiAgICAgICAgdmFyIHggPSBldmVudC5jbGllbnRYO1xuICAgICAgICB2YXIgeSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgIGN1cnNvci5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcbiAgICAgICAgY3Vyc29yLnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG4gICAgICAgIC8vIGN1cnNvci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7eCAtIDE1fXB4LCAke3kgLSAxNX1weGA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFJpcHBsZShfYSkge1xuICAgICAgICB2YXIgY3Vyc29yID0gX2EuY3Vyc29yRWxlbWVudDtcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZCcpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmQnKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY3VzdG9tQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNWemRHOXRRM1Z5YzI5eUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWTNWemRHOXRRM1Z5YzI5eUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUU3haUVVGWkxFZEJRVWM3U1VGRGJrSXNTVUZCVFN4TlFVRk5MRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wbEJRM1JGTEVsQlFVY3NRMEZCUXl4TlFVRk5PMUZCUVVVc1QwRkJUenRKUVVWd1FpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRla1VzU1VGQlJ5eERRVUZETEZsQlFWazdVVUZCUlN4UFFVRlBPMGxCUlhwQ0xGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4aFFVRmhMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQk0wTXNRMEZCTWtNc1EwRkJReXhEUVVGRE8wbEJRM0JITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVWQlFVVXNWVUZCUVN4TFFVRkxMRWxCUVVrc1QwRkJRU3hUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNZVUZCWVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVE5ETEVOQlFUSkRMRU5CUVVNc1EwRkJRenRKUVVNM1JpeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdOQlFVMHNUMEZCUVN4VFFVRlRMRU5CUVVNc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCY0VNc1EwRkJiME1zUTBGQlF5eERRVUZETzBsQlJTOUZMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMGxCUTI1RExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBMRWxCUVVrc1QwRkJRU3hQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRk8xRkJRM1JGTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBsQlEzcERMRU5CUVVNc1EwRkJReXhGUVVZNFFpeERRVVU1UWl4RFFVRkRMRU5CUVVNN1NVRkRTaXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHl4SlFVRkpMRTlCUVVFc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSVHRSUVVOMFJTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEpRVU4wUXl4RFFVRkRMRU5CUVVNc1JVRkdPRUlzUTBGRk9VSXNRMEZCUXl4RFFVRkRPMGxCUlVvc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFUaENPMWxCUVRWQ0xIbENRVUZ4UWp0UlFVTm9SQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUTNoQ0xFbEJRVTBzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkZlRUlzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVUwc1EwRkJReXhQUVVGSkxFTkJRVU03VVVGRE4wSXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFZEJRVTBzUTBGQlF5eFBRVUZKTEVOQlFVTTdVVUZETlVJc2FVVkJRV2xGTzBsQlEycEZMRU5CUVVNN1NVRkZSaXhUUVVGVExGTkJRVk1zUTBGQlF5eEZRVUY1UWp0WlFVRjJRaXg1UWtGQmNVSTdVVUZEZWtNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkRMMElzVlVGQlZTeERRVUZETzFsQlExWXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEYmtNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBsQlExUXNRMEZCUXp0QlFVTkdMRU5CUVVNc1EwRkJRenRCUVVWR0xHdENRVUZsTEZsQlFWa3NRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNjcm9sbHNweSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjb25zdCBtZW51cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZiYXItbWVudS1pdGVtJylcbiAgICAvLyBtZW51cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgIC8vICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAvLyAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIC8vICAgICBjb25zdCBocmVmID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgIC8vICAgICBjb25zdCB0YXJnZXRPZmZzZXRZID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihocmVmKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcbiAgICAvLyAgICAgd2luZG93LnNjcm9sbFRvKDAsIHRhcmdldE9mZnNldFkpXG4gICAgLy8gICB9KVxuICAgIC8vIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBhY3RpdmUg7YG0656Y7IqkXG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsc3B5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJOeWIyeHNjM0I1TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2ljMk55YjJ4c2MzQjVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlNVRXNTVUZCVFN4VFFVRlRMRWRCUVVjN1NVRkRhRUlzSzBSQlFTdEVPMGxCUXk5RUxEWkNRVUUyUWp0SlFVTTNRaXhwUkVGQmFVUTdTVUZEYWtRc05rSkJRVFpDTzBsQlF6ZENMR2RFUVVGblJEdEpRVU5vUkN4eFJrRkJjVVk3U1VGRGNrWXNkME5CUVhkRE8wbEJRM2hETEU5QlFVODdTVUZEVUN4SlFVRkpPMGxCUlVvc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRSUVVOb1F5eGhRVUZoTzBsQlEyWXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4VFFVRlRMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjaGVja2JveF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NoZWNrYm94XCIpKTtcbnZhciB0ZXh0YXJlYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RleHRhcmVhXCIpKTtcbnZhciBmaWxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZmlsZVwiKSk7XG52YXIgbnVtYmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbnVtYmVyXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBjaGVja2JveDogY2hlY2tib3hfMS5kZWZhdWx0LFxuICAgIHRleHRhcmVhOiB0ZXh0YXJlYV8xLmRlZmF1bHQsXG4gICAgZmlsZTogZmlsZV8xLmRlZmF1bHQsXG4gICAgbnVtYmVyOiBudW1iZXJfMS5kZWZhdWx0LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQkxIZEVRVUZwUXp0QlFVTnFReXgzUkVGQmFVTTdRVUZEYWtNc1owUkJRWGxDTzBGQlEzcENMRzlFUVVFMlFqdEJRVVUzUWl4clFrRkJaVHRKUVVOaUxGRkJRVkVzYjBKQlFVRTdTVUZEVWl4UlFVRlJMRzlDUVVGQk8wbEJRMUlzU1VGQlNTeG5Ra0ZCUVR0SlFVTktMRTFCUVUwc2EwSkJRVUU3UTBGRFVDeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNoZWNrYm94ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGNoZWNrQWxsU2VsZWN0b3IgPSBfYS5jaGVja0FsbFNlbGVjdG9yLCBjaGVja1NlbGVjdG9yID0gX2EuY2hlY2tTZWxlY3RvcjtcbiAgICByZXR1cm4gKHtcbiAgICAgICAgY2hlY2tBbGw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2hlY2tBbGxTZWxlY3RvciksXG4gICAgICAgIGNoZWNrSXRlbXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tTZWxlY3RvciksXG4gICAgICAgIHNldEV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWxsIHx8ICF0aGlzLmNoZWNrSXRlbXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jaGVja0FsbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZXRDaGVja0FsbChfdGhpcy5jaGVja0l0ZW1zLCBfdGhpcy5jaGVja0FsbCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5jaGVja0l0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGNoZWNrSXRlbSkge1xuICAgICAgICAgICAgICAgIGNoZWNrSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZXRDaGVja0VhY2goX3RoaXMuY2hlY2tJdGVtcywgX3RoaXMuY2hlY2tBbGwpOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRDaGVja0VhY2g6IGZ1bmN0aW9uIChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xuICAgICAgICAgICAgdmFyIGNoZWNrcyA9IEFycmF5LmZyb20oY2hlY2tJdGVtcyk7XG4gICAgICAgICAgICB2YXIgaXNDaGVja2VkRXZlcnkgPSBjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrSXRlbSkgeyByZXR1cm4gY2hlY2tJdGVtLmNoZWNrZWQ7IH0pO1xuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZFNvbWUgPSBjaGVja3Muc29tZShmdW5jdGlvbiAoY2hlY2tJdGVtKSB7IHJldHVybiBjaGVja0l0ZW0uY2hlY2tlZDsgfSk7XG4gICAgICAgICAgICBjaGVja0FsbC5jaGVja2VkID0gaXNDaGVja2VkRXZlcnk7XG4gICAgICAgICAgICBjaGVja0FsbC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XG4gICAgICAgICAgICBjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBpc0NoZWNrZWRTb21lICYmICFpc0NoZWNrZWRFdmVyeTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q2hlY2tBbGw6IGZ1bmN0aW9uIChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xuICAgICAgICAgICAgY2hlY2tJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGVja0l0ZW0pIHtcbiAgICAgICAgICAgICAgICBjaGVja0l0ZW0uY2hlY2tlZCA9IGNoZWNrQWxsLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tib3g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMmhsWTJ0aWIzZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKamFHVmphMkp2ZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVXRCTEVsQlFVMHNVVUZCVVN4SFFVRkhMRlZCUVVNc1JVRkJPRU03VVVGQk5VTXNjME5CUVdkQ0xFVkJRVVVzWjBOQlFXRTdTVUZCYTBJc1QwRkJRU3hEUVVGRE8xRkJRM0JGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RFFVRkRPMUZCUTJ4RUxGVkJRVlVzUlVGQlJTeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllTeERRVUZETzFGQlEzQkVMRkZCUVZFN1dVRkJVaXhwUWtGUFF6dFpRVTVETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdaMEpCUVVVc1QwRkJUVHRaUVVVNVF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4alFVRk5MRTlCUVVFc1MwRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQmFFUXNRMEZCWjBRc1EwRkJReXhEUVVGQk8xbEJRMmhITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVTBGQlV6dG5Ra0ZETDBJc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hqUVVGTkxFOUJRVUVzUzBGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFdEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCYWtRc1EwRkJhVVFzUTBGQlF5eERRVUZCTzFsQlF5OUdMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRMG9zUTBGQlF6dFJRVU5FTEZsQlFWa3NSVUZCV2l4VlFVRmhMRlZCUVZVc1JVRkJSU3hSUVVGUk8xbEJReTlDTEVsQlFVMHNUVUZCVFN4SFFVRjFRaXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkJPMWxCUTNwRUxFbEJRVTBzWTBGQll5eEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJRU3hUUVVGVExFbEJRVWtzVDBGQlFTeFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRnFRaXhEUVVGcFFpeERRVUZETEVOQlFVRTdXVUZEYmtVc1NVRkJUU3hoUVVGaExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkJMRk5CUVZNc1NVRkJTU3hQUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlFXcENMRU5CUVdsQ0xFTkJRVU1zUTBGQlFUdFpRVVZxUlN4UlFVRlJMRU5CUVVNc1QwRkJUeXhIUVVGSExHTkJRV01zUTBGQlFUdFpRVU5xUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hIUVVGSExHRkJRV0VzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUVR0WlFVTjZSQ3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNSMEZCUnl4aFFVRmhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVUU3VVVGRGJrVXNRMEZCUXp0UlFVTkVMRmRCUVZjc1dVRkJReXhWUVVGVkxFVkJRVVVzVVVGQlVUdFpRVU01UWl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVTBGQlV6dG5Ra0ZETVVJc1UwRkJVeXhEUVVGRExFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkJPMmRDUVVOd1F5eFJRVUZSTEVOQlFVTXNZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJRVHRuUWtGRE9VSXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZCTzFsQlEzaERMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRMG9zUTBGQlF6dExRVU5HTEVOQlFVTTdRVUV6UW0xRkxFTkJNa0p1UlN4RFFVRkJPMEZCUlVZc2EwSkJRV1VzVVVGQlVTeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlucHV0VGV4dGFyZWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdGFnTmFtZeqzvCBub2RlTmFtZeydgCDthY3siqTtirgg64W465Oc66W8IOqwgeqwgSB1bmRlZmluZWTsmYAgI3RleHQg67CY7ZmY7ZWc64ukLlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGlzVGV4dGFyZWEgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJztcbiAgICAgICAgaWYgKCFpc1RleHRhcmVhKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgQllURV9NQVhJTVVNID0gMzA7XG4gICAgICAgIHZhciBieXRlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0ZmllbGQtYnl0ZSBiJyk7XG4gICAgICAgIGlmICghYnl0ZUVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzdHJpbmdCeXRlTGVuZ3RoID0gKChfYSA9IHRhcmdldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlLnJlcGxhY2UoL1tcXDAtXFx4N2ZdfChbMC1cXHUwN2ZmXXwoLikpL2csICckJiQxJDInKS5sZW5ndGgpIHx8IDA7IC8vIHx8IDAg7J6E7IucXG4gICAgICAgIGJ5dGVFbGVtZW50LmlubmVyVGV4dCA9IHN0cmluZ0J5dGVMZW5ndGg7XG4gICAgICAgIHZhciBpc01heGltdW0gPSBzdHJpbmdCeXRlTGVuZ3RoID4gQllURV9NQVhJTVVNO1xuICAgICAgICBpZiAoaXNNYXhpbXVtKSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXV0b0V4cGFuZCh0YXJnZXQpO1xuICAgIH0pO1xufTtcbnZhciBhdXRvRXhwYW5kID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgZmllbGQuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xuICAgIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZpZWxkKTtcbiAgICB2YXIgaGVpZ2h0ID0gZmllbGQuc2Nyb2xsSGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICBmaWVsZC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5wdXRUZXh0YXJlYTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVjRkR0Z5WldFdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowWlhoMFlYSmxZUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVUwc1lVRkJZU3hIUVVGSE8wbEJRM0JDTEhWRVFVRjFSRHRKUVVOMlJDeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3pzN1VVRkRPVUlzU1VGQlFTeHhRa0ZCVFN4RFFVRmxPMUZCUXpkQ0xFbEJRVWtzVFVGQlRUdFpRVUZGTEU5QlFVMDdVVUZGYkVJc1NVRkJUU3hWUVVGVkxFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1MwRkJTeXhWUVVGVkxFTkJRVUU3VVVGREwwUXNTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkJSU3hQUVVGTk8xRkJSWFpDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVWMlFpeEpRVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1VVRkROVVVzU1VGQlNTeERRVUZETEZkQlFWYzdXVUZCUlN4UFFVRk5PMUZCUlhoQ0xFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1QwRkJRU3hOUVVGTkxEQkRRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc05rSkJRVFpDTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1MwRkJTU3hEUVVGRExFTkJRVUVzUTBGQlF5eFZRVUZWTzFGQlF6bEhMRmRCUVZjc1EwRkJReXhUUVVGVExFZEJRVWNzWjBKQlFXZENMRU5CUVVFN1VVRkZlRU1zU1VGQlRTeFRRVUZUTEVkQlFVY3NaMEpCUVdkQ0xFZEJRVWNzV1VGQldTeERRVUZCTzFGQlEycEVMRWxCUVVrc1UwRkJVeXhGUVVGRk8xbEJRMklzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFOQlF6bERPMkZCUVUwN1dVRkRUQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VTBGRGFrUTdVVUZGUkN4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRGNFSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhEUVVGRExFTkJRVUU3UVVGRlJDeEpRVUZOTEZWQlFWVXNSMEZCUnl4VlFVRkJMRXRCUVVzN1NVRkRkRUlzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGQk8wbEJSVGxDTEVsQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVNdlF5eEpRVUZOTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRek5HTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGTkxFMUJRVTBzVDBGQlNTeERRVUZCTzBGQlEzQkRMRU5CUVVNc1EwRkJRVHRCUVVWRUxHdENRVUZsTEdGQlFXRXNRMEZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVE9ETzog7Jes65+s67KIIOuwmOuzte2VtOyEnCDsmKzroLjsnYQg65WMIGZpbGVsaXN0IOuIhOyggeuQmOuKlOyngD9cbi8vIFRPRE86IOuPmeydvO2VnCDtjIzsnbzsnYQg7JeF66Gc65OcIO2WiOydhCDrlYwg7LK07YGsLCDsgq3soJztlojsnYQg65WMIGZpbGVMaXN07JeQ7IScIOyCreygnCwgZmlsZUlucHV0LmZpbGVz64qUIOyMk+ydtOyngCDslYrsnYwuXG52YXIgYXR0YWNoRmlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtaW5wdXQnKTtcbiAgICBpZiAoIWZpbGVJbnB1dClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIGNvbnN0IGZpbGVTdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1zdWJtaXQnKTtcbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gYXR0YWNoKGZpbGVJbnB1dCk7IH0pO1xufTtcbmZ1bmN0aW9uIGF0dGFjaChmaWxlSW5wdXQpIHtcbiAgICB2YXIgZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XG4gICAgdmFyIGF0dGFjaG1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1saXN0Jyk7XG4gICAgdmFyIGF0dGFjaG1lbnRIZWxwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1hdHRhY2htZW50LWhlbHBlcicpO1xuICAgIGlmICghZmlsZXMgfHwgIWF0dGFjaG1lbnRMaXN0IHx8ICFhdHRhY2htZW50SGVscGVyKVxuICAgICAgICByZXR1cm47XG4gICAgYXR0YWNobWVudEhlbHBlci5zdHlsZS5kaXNwbGF5ID0gZmlsZXMubGVuZ3RoICE9PSAwID8gJ25vbmUnIDogJ2Jsb2NrJztcbiAgICBBcnJheS5mcm9tKGZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIGlmICghdmFsaWRGaWxlVHlwZShmaWxlKSlcbiAgICAgICAgICAgIHJldHVybiBhbGVydCgn7YyM7J287YOA7J6FIGpwZWcgcGpwZWcgcG5nIOykkSDtlZjrgpjqsIAg7JWE64uI7JW8ficpO1xuICAgICAgICB2YXIgZmlsZVRlbXBsYXRlID0gXCJcXG5cXHRcXHRcXHQ8YSBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW1cXFwiIGhyZWY9XFxcIlxcXCI+XFxuXFx0XFx0XFx0XFx0PGZpZ3VyZSBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0taW1hZ2VcXFwiPjxpbWcgc3JjPVwiICsgd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSkgKyBcIiBhbHQ9XCIgKyBmaWxlLm5hbWUgKyBcIj48L2ZpZ3VyZT5cXG5cXHRcXHRcXHRcXHQ8YiBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0tbmFtZVxcXCIgaHJlZj1cXFwiI1xcXCI+XCIgKyBmaWxlLm5hbWUgKyBcIjwvYj5cXG5cXHRcXHRcXHRcXHQ8c21hbGwgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLXNpemVcXFwiID5cIiArIHJldHVybkZpbGVTaXplKGZpbGUuc2l6ZSkgKyBcIjwvc21hbGw+XFxuXFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0tZGVsZXRlIGpzLXJlbW92ZS10aGlzXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPjxpIGNsYXNzPVxcXCJpY29uLWNsb3NlXFxcIj48L2k+PC9idXR0b24+XFxuXFx0XFx0XFx0PC9hPlwiO1xuICAgICAgICBhdHRhY2htZW50TGlzdC5pbm5lckhUTUwgKz0gZmlsZVRlbXBsYXRlO1xuICAgICAgICAvLyBhdHRhY2htZW50TGlzdC5hcHBlbmQoZmlsZVRlbXBsYXRlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHZhbGlkRmlsZVR5cGUoZmlsZSkge1xuICAgIHZhciBmaWxlVHlwZXMgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJywgJ2ltYWdlL3BuZyddO1xuICAgIHZhciBpc1ZhbGlkID0gZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSA+IC0xO1xuICAgIC8vIGNvbnN0IGlzVmFsaWQgPSBmaWxlVHlwZXMuaW5jbHVkZXMoZmlsZS50eXBlKTtcbiAgICBpZiAoaXNWYWxpZClcbiAgICAgICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByZXR1cm5GaWxlU2l6ZShzaXplKSB7XG4gICAgdmFyIGlzQnl0ZXMgPSBzaXplIDwgMTAyNDtcbiAgICB2YXIgaXNLaWxvQnl0ZXMgPSBzaXplID49IDEwMjQgJiYgc2l6ZSA8IDEwNDg1NzY7XG4gICAgaWYgKGlzQnl0ZXMpXG4gICAgICAgIHJldHVybiBzaXplICsgXCJieXRlc1wiO1xuICAgIGVsc2UgaWYgKGlzS2lsb0J5dGVzKVxuICAgICAgICByZXR1cm4gKHNpemUgLyAxMDI0KS50b0ZpeGVkKDIpICsgXCJLQlwiO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIChzaXplIC8gMTA0ODU3NikudG9GaXhlZCgyKSArIFwiTUJcIjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGF0dGFjaEZpbGU7XG4vLyBmaWxlU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuLy8gXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gXHRmaWxlTGlzdC5mb3JFYWNoKGZpbGUgPT4ge1xuLy8gXHRcdHNlbmRGaWxlKGZpbGUpO1xuLy8gXHR9KTtcbi8vIH0pO1xuLy8gZnVuY3Rpb24gdmFsaWRGaWxlU2l6ZShmaWxlKSB7XG4vLyBcdGF0dGFjaGVkZmlsZXMgPSBmaWxlLmZpbGVzO1xuLy8gXHRpZihhdHRhY2hlZGZpbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuLy8gXHRpZihhdHRhY2hlZGZpbGVzWzBdLnNpemUgPiA3NSAqIDEwMjQpIHtcbi8vIFx0XHRmaWxlSW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1RoZSBzZWxlY3RlZCBmaWxlIG11c3Qgbm90IGJlIGxhcmdlciB0aGFuIDc1IGtCJyk7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyBcdGZpbGVJbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4vLyB9XG4vLyBmdW5jdGlvbiBzZW5kRmlsZShmaWxlKSB7XG4vLyBcdGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4vLyBcdGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbi8vIFx0Zm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XG4vLyBcdHJlcXVlc3Qub3BlbigncG9zdCcsICcnKTtcbi8vIFx0cmVxdWVzdC5zZW5kKGZvcm1EYXRhKTtcbi8vIH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVptbHNaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkltWnBiR1V1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3gxUTBGQmRVTTdRVUZEZGtNc05FVkJRVFJGTzBGQlF6VkZMRWxCUVUwc1ZVRkJWU3hIUVVGSE8wbEJRMnBDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVzFDTEdkQ1FVRm5RaXhEUVVGRExFTkJRVUU3U1VGRE5VVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1VVRkJSU3hQUVVGTk8wbEJRM1JDTEdkRlFVRm5SVHRKUVVOb1JTeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEdOQlFVMHNUMEZCUVN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRV3BDTEVOQlFXbENMRU5CUVVNc1EwRkJRVHRCUVVNdlJDeERRVUZETEVOQlFVRTdRVUZGUkN4VFFVRlRMRTFCUVUwc1EwRkJReXhUUVVFeVFqdEpRVU5xUXl4SlFVRkJMSFZDUVVGTExFTkJRV003U1VGRE0wSXNTVUZCVFN4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5d3dRa0ZCTUVJc1EwRkJReXhEUVVGQk8wbEJRM1JHTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl3MFFrRkJORUlzUTBGQlF5eERRVUZCTzBsQlF6RkdMRWxCUVVrc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eGpRVUZqTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VVVGQlJTeFBRVUZOTzBsQlJURkVMR2RDUVVGblFpeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZCTzBsQlJYUkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTVHRSUVVNMVFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETEdkRFFVRm5ReXhEUVVGRExFTkJRVUU3VVVGRmVFVXNTVUZCVFN4WlFVRlpMRWRCUVVjc2VVaEJSV2xETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZSTEVsQlFVa3NRMEZCUXl4SlFVRkpMRGhGUVVOMlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4clJVRkRZaXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4eFNrRkZha1VzUTBGQlFUdFJRVVZLTEdOQlFXTXNRMEZCUXl4VFFVRlRMRWxCUVVrc1dVRkJXU3hEUVVGQk8xRkJRM2hETEhWRFFVRjFRenRKUVVONlF5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExHRkJRV0VzUTBGQlF5eEpRVUZKTzBsQlEzcENMRWxCUVUwc1UwRkJVeXhIUVVGSExFTkJRVU1zV1VGQldTeEZRVUZGTEZkQlFWY3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRVHRKUVVNeFJDeEpRVUZOTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOcVJDeHBSRUZCYVVRN1NVRkZha1FzU1VGQlNTeFBRVUZQTzFGQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVFN1FVRkRNVUlzUTBGQlF6dEJRVVZFTEZOQlFWTXNZMEZCWXl4RFFVRkRMRWxCUVVrN1NVRkRNVUlzU1VGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRVHRKUVVNelFpeEpRVUZOTEZkQlFWY3NSMEZCUnl4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVRTdTVUZGYkVRc1NVRkJTU3hQUVVGUE8xRkJRVVVzVDBGQlZTeEpRVUZKTEZWQlFVOHNRMEZCUVR0VFFVTTNRaXhKUVVGSkxGZEJRVmM3VVVGQlJTeFBRVUZWTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU1N4RFFVRkJPenRSUVVOMlJDeFBRVUZWTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU1N4RFFVRkJPMEZCUTJoRUxFTkJRVU03UVVGRlJDeHJRa0ZCWlN4VlFVRlZMRU5CUVVFN1FVRkZla0lzY1VSQlFYRkVPMEZCUTNKRUxESkNRVUV5UWp0QlFVTXpRaXc0UWtGQk9FSTdRVUZET1VJc2IwSkJRVzlDTzBGQlEzQkNMRTlCUVU4N1FVRkRVQ3hOUVVGTk8wRkJSVTRzYVVOQlFXbERPMEZCUTJwRExDdENRVUVyUWp0QlFVTXZRaXd3UTBGQk1FTTdRVUZGTVVNc01rTkJRVEpETzBGQlF6TkRMRzlHUVVGdlJqdEJRVU53Uml4WlFVRlpPMEZCUTFvc1MwRkJTenRCUVVOTUxHOURRVUZ2UXp0QlFVTndReXhKUVVGSk8wRkJSVW9zTkVKQlFUUkNPMEZCUXpWQ0xHOURRVUZ2UXp0QlFVTndReXg1UTBGQmVVTTdRVUZGZWtNc0swSkJRU3RDTzBGQlF5OUNMRFpDUVVFMlFqdEJRVU0zUWl3eVFrRkJNa0k3UVVGRE0wSXNTVUZCU1NKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlucHV0TnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd24gLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXl1cDogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXl1cCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuICAgIC8vIH0pO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2UgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2lucHV0OiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2lucHV0IC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8g67Cp7Zal7YKk66GcIOyhsOygiO2VoCDrlYwgbWluIG1heCDsobDqsbTsl5Ag6rG466aw64ukLlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIGlzTnVtYmVySW5wdXQgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLW51bWJlci1pbnB1dCcpO1xuICAgICAgICBpZiAoIWlzTnVtYmVySW5wdXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgc2V0TGltaXROdW1iZXIpO1xuICAgICAgICBzZXRJbnB1dE9ubHlOdW1iZXJzKCk7XG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0T25seU51bWJlcnMoKSB7XG4gICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgICAgICAgICB2YXIga2V5Q29kZXMgPSBbNjksIDE4OSwgMTg3LCAxOTBdO1xuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBrZXlDb2Rlcy5pbmNsdWRlcyhrZXlDb2RlKTtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKVxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyB0YXJnZXQudmFsdWUubGVuZ3RoID09PSAwICYmIGtleUNvZGUgPT09IDQ4ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID49IDQ4IHx8IGtleUNvZGUgPD0gNTcgfHwgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDY5ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSAxODkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDE4NyAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gMTkwICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0TGltaXROdW1iZXIoKSB7XG4gICAgICAgICAgICB2YXIgTUFYSU1VTSA9IDMwMDtcbiAgICAgICAgICAgIHZhciBNSU5JTVVOID0gMDtcbiAgICAgICAgICAgIHZhciBpc0ZpcnN0UGxhY2VkWmVybyA9IC8oXjArKS8udGVzdCh0YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgdmFyIGlzTWF4aW11bSA9IE51bWJlcih0YXJnZXQudmFsdWUpID49IE1BWElNVU07XG4gICAgICAgICAgICB2YXIgaXNMZW5ndGggPSB0YXJnZXQudmFsdWUubGVuZ3RoID4gTUlOSU1VTjtcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0UGxhY2VkWmVybylcbiAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSBNSU5JTVVOO1xuICAgICAgICAgICAgaWYgKGlzTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IHRhcmdldC52YWx1ZS5zbGljZSgwLCAzKTtcbiAgICAgICAgICAgIGlmIChpc01heGltdW0pXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gTUFYSU1VTTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlucHV0TnVtYmVyO1xuLy8gZXhwb3J0IGNvbnN0IGlucHV0VmFyaWF0aW9uID0gKCkgPT4ge1xuLy8gXHRjb25zdCB2YXJpYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uJyk7XG4vLyBcdGNvbnN0IGlucHV0ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcbi8vIFx0Y29uc3QgZGVjcmVtZW50ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50Jyk7XG4vLyBcdGNvbnN0IGluY3JlbWVudCA9IHZhcmlhdGlvbi5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpO1xuLy8gXHRsZXQgdmFsdWUgPSBpbnB1dC52YWx1ZTtcbi8vIFx0Y29uc3QgTUlOX1ZBTFVFID0gMDtcbi8vIFx0Y29uc3QgTUFYX1ZBTFVFID0gMTA7XG4vLyBcdGxldFx0aXNNaW5pbXVuO1xuLy8gXHRsZXQgaXNNYXhpbXVtO1xuLy8gXHQvLyBjb25zdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XG4vLyBcdC8vIGNvbnN0IGlzTWF4aW11bSA9IE51bWJlcih2YWx1ZSkgPj0gTUFYX1ZBTFVFO1xuLy8gXHQvLyBpZihpc01pbmltdW4pIHNldERpc2FibGVEZWNyZW1lbnQoKTtcbi8vIFx0Ly8gaWYoaXNNYXhpbXVtKSBzZXREaXNhYmxlSWVjcmVtZW50KCk7XG4vLyBcdGRlY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0XHRpZihpc01pbmltdW4pIHtcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdFx0cmV0dXJuO1xuLy8gXHRcdH1cbi8vIFx0XHRpZighaXNNYXhpbXVtKSB7XG4vLyBcdFx0XHRpbmNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHR9XG4vLyBcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpIC0gMTtcbi8vIFx0fSk7XG4vLyBcdGluY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0XHRjb25zb2xlLmxvZyhpc01pbmltdW4sIGlzTWF4aW11bSwgdmFsdWUpO1xuLy8gXHRcdGlmKGlzTWF4aW11bSkge1xuLy8gXHRcdFx0aW5jcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0XHRyZXR1cm47XG4vLyBcdFx0fVxuLy8gXHRcdGlmKCFpc01pbmltdW4pIHtcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdH1cbi8vIFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSkgKyAxO1xuLy8gXHR9KTtcbi8vIFx0ZnVuY3Rpb24gc2V0RGlzYWJsZURlY3JlbWVudCgpIHtcbi8vIFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHRyZXR1cm47XG4vLyBcdH1cbi8vIFx0ZnVuY3Rpb24gc2V0RGlzYWJsZUllY3JlbWVudCgpIHtcbi8vIFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHRyZXR1cm47XG4vLyBcdH1cbi8vIH07XG4vLyB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiB2YWx1ZTtcbi8vIHZhbHVlIDwgMSA/IHZhbHVlID0gMSA6ICcnO1xuLy8gdmFsdWUtLTtcbi8vIHBhcnNlSW50IHZzIE51bWJlclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIHZhciBNSU5fVkFMVUUgPSAwO1xuICAgIHZhciBNQVhfVkFMVUUgPSAxMDtcbiAgICB2YXIgdGFyZ2V0SW5wdXQ7XG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuanMtdmFyaWF0aW9uLWRlY3JlbWVudCcpKSB7XG4gICAgICAgIHRhcmdldElucHV0ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xuICAgICAgICBpZiAodGFyZ2V0SW5wdXQudmFsdWUgPD0gTUlOX1ZBTFVFKSB7XG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIC8vIHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5jcmVtZW50JykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKVxuICAgICAgICAgICAgLy8gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAtLXRhcmdldElucHV0LnZhbHVlO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24taW5jcmVtZW50JykpIHtcbiAgICAgICAgdGFyZ2V0SW5wdXQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XG4gICAgICAgIGlmICh0YXJnZXRJbnB1dC52YWx1ZSA+PSBNQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIC8vIHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50JykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKVxuICAgICAgICAgICAgLy8gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1kZWNyZW1lbnQnKS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICArK3RhcmdldElucHV0LnZhbHVlO1xuICAgIH1cbn0pO1xuLy8gZnVuY3Rpb24gc2V0U3RyaW5nQnl0ZXMoKSB7fVxuLy8gZXhwb3J0IGNvbnN0IGlucHV0ID0ge1xuLy8gXHR0ZXh0YXJlYTogaW5wdXRUZXh0YXJlYSgpLFxuLy8gXHRudW1iZXI6IGlucHV0TnVtYmVyKClcbi8vIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liblZ0WW1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYm5WdFltVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFN4WFFVRlhMRWRCUVVjN1NVRkRiRUlzYjBSQlFXOUVPMGxCUTNCRUxHbEVRVUZwUkR0SlFVTnFSQ3h6UkVGQmMwUTdTVUZEZEVRc1RVRkJUVHRKUVVOT0xIRkVRVUZ4UkR0SlFVTnlSQ3hyUkVGQmEwUTdTVUZEYkVRc2RVUkJRWFZFTzBsQlEzWkVMRTFCUVUwN1NVRkRUaXhyUkVGQmEwUTdTVUZEYkVRc0swTkJRU3RETzBsQlF5OURMRzlFUVVGdlJEdEpRVU53UkN4TlFVRk5PMGxCUTA0c2JVUkJRVzFFTzBsQlEyNUVMR2RFUVVGblJEdEpRVU5vUkN4eFJFRkJjVVE3U1VGRGNrUXNUVUZCVFR0SlFVTk9MR3RFUVVGclJEdEpRVU5zUkN3clEwRkJLME03U1VGREwwTXNiMFJCUVc5RU8wbEJRM0JFTEUxQlFVMDdTVUZGVGl3NFFrRkJPRUk3U1VGRE9VSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4VlFVRkJMRXRCUVVzN1VVRkRhRU1zU1VGQlFTeHhRa0ZCVFN4RFFVRmxPMUZCUlRkQ0xFbEJRVTBzWVVGQllTeEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0UlFVTjRSQ3hKUVVGSkxFTkJRVU1zWVVGQllUdFpRVUZGTEU5QlFVMDdVVUZGTVVJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlFUdFJRVU5zUkN4dFFrRkJiVUlzUlVGQlJTeERRVUZCTzFGQlJYSkNMRk5CUVZNc2JVSkJRVzFDTzFsQlEyeENMRWxCUVVFc2RVSkJRVThzUTBGQlZUdFpRVU42UWl4SlFVRk5MRkZCUVZFc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGQk8xbEJRM0JETEVsQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdXVUZETVVNc1NVRkJTU3hQUVVGUE8yZENRVUZGTEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRVHRaUVVOdVF5eDVSVUZCZVVVN1dVRkRla1VzTkVSQlFUUkVPMWxCUXpWRUxEUkRRVUUwUXp0WlFVTTFReXcyUTBGQk5rTTdXVUZETjBNc05rTkJRVFpETzFsQlF6ZERMRFpEUVVFMlF6dFJRVU12UXl4RFFVRkRPMUZCUTBRc1UwRkJVeXhqUVVGak8xbEJRM0pDTEVsQlFVMHNUMEZCVHl4SFFVRkhMRWRCUVVjc1EwRkJRVHRaUVVOdVFpeEpRVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVFN1dVRkRha0lzU1VGQlRTeHBRa0ZCYVVJc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRaUVVOd1JDeEpRVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEU5QlFVOHNRMEZCUVR0WlFVTnFSQ3hKUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVUU3V1VGRk9VTXNTVUZCU1N4cFFrRkJhVUk3WjBKQlFVVXNUVUZCVFN4RFFVRkRMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVUU3V1VGRE4wTXNTVUZCU1N4UlFVRlJPMmRDUVVGRkxFMUJRVTBzUTBGQlF5eExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUTNKRUxFbEJRVWtzVTBGQlV6dG5Ra0ZCUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlFUdFJRVU4yUXl4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeERRVUZETEVOQlFVRTdRVUZGUkN4clFrRkJaU3hYUVVGWExFTkJRVUU3UVVGRk1VSXNkME5CUVhkRE8wRkJRM2hETERoRVFVRTRSRHRCUVVNNVJDeHBSVUZCYVVVN1FVRkRha1VzZVVWQlFYbEZPMEZCUTNwRkxIbEZRVUY1UlR0QlFVVjZSU3cwUWtGQk5FSTdRVUZETlVJc2QwSkJRWGRDTzBGQlEzaENMSGxDUVVGNVFqdEJRVU42UWl4clFrRkJhMEk3UVVGRGJFSXNhMEpCUVd0Q08wRkJRMnhDTEc5RVFVRnZSRHRCUVVOd1JDeHZSRUZCYjBRN1FVRkZjRVFzTWtOQlFUSkRPMEZCUXpORExESkRRVUV5UXp0QlFVVXpReXhyUkVGQmEwUTdRVUZEYkVRc05FTkJRVFJETzBGQlF6VkRMRFJEUVVFMFF6dEJRVU0xUXl4dlFrRkJiMEk3UVVGRGNFSXNOa05CUVRaRE8wRkJRemRETEdGQlFXRTdRVUZEWWl4TlFVRk5PMEZCUTA0c2NVSkJRWEZDTzBGQlEzSkNMR2RFUVVGblJEdEJRVU5vUkN4TlFVRk5PMEZCUlU0c0swSkJRU3RDTzBGQlF5OUNMRTlCUVU4N1FVRkRVQ3hyUkVGQmEwUTdRVUZEYkVRc05FTkJRVFJETzBGQlF6VkRMRFJEUVVFMFF6dEJRVU0xUXl3NFEwRkJPRU03UVVGRE9VTXNiMEpCUVc5Q08wRkJRM0JDTERaRFFVRTJRenRCUVVNM1F5eGhRVUZoTzBGQlEySXNUVUZCVFR0QlFVTk9MSEZDUVVGeFFqdEJRVU55UWl4blJFRkJaMFE3UVVGRGFFUXNUVUZCVFR0QlFVVk9MQ3RDUVVFclFqdEJRVU12UWl4UFFVRlBPMEZCUlZBc2IwTkJRVzlETzBGQlEzQkRMRFJEUVVFMFF6dEJRVU0xUXl4WlFVRlpPMEZCUTFvc1MwRkJTenRCUVVOTUxHOURRVUZ2UXp0QlFVTndReXcwUTBGQk5FTTdRVUZETlVNc1dVRkJXVHRCUVVOYUxFdEJRVXM3UVVGRFRDeExRVUZMTzBGQlJVd3NiME5CUVc5RE8wRkJRM0JETERoQ1FVRTRRanRCUVVNNVFpeFhRVUZYTzBGQlJWZ3NjVUpCUVhGQ08wRkJRM0pDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCUVN4TFFVRkxPMGxCUXpsQ0xFbEJRVUVzY1VKQlFVMHNRMEZCWlR0SlFVTTNRaXhKUVVGTkxGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEYmtJc1NVRkJUU3hUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZCTzBsQlEzQkNMRWxCUVVrc1YwRkJWeXhEUVVGQk8wbEJSV1lzU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVWQlFVVTdVVUZETjBNc1YwRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVOQlFVRTdVVUZEY0VVc1NVRkJTU3hYUVVGWExFTkJRVU1zUzBGQlN5eEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTnNReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRaUVVOdVF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVU4yUXl3MlJrRkJOa1k3V1VGRE4wWXNlVVpCUVhsR08xbEJRM3BHTEU5QlFVMDdVMEZEVUR0UlFVTkVMRVZCUVVVc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlFUdExRVU53UWp0SlFVTkVMRWxCUVVrc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhGUVVGRk8xRkJRemRETEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8xRkJRM0JGTEVsQlFVa3NWMEZCVnl4RFFVRkRMRXRCUVVzc1NVRkJTU3hUUVVGVExFVkJRVVU3V1VGRGJFTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdXVUZEYmtNc1RVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0WlFVVnNReXcyUmtGQk5rWTdXVUZETjBZc2VVWkJRWGxHTzFsQlEzcEdMRTlCUVUwN1UwRkRVRHRSUVVORUxFVkJRVVVzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUVR0TFFVTndRanRCUVVOSUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlJVWXNLMEpCUVN0Q08wRkJSUzlDTEhsQ1FVRjVRanRCUVVONlFpdzRRa0ZCT0VJN1FVRkRPVUlzZVVKQlFYbENPMEZCUTNwQ0xFdEJRVXNpZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=