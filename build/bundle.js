!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=o(n(2)),i=n(3),s=n(4),c=n(5),a=n(6),l=o(n(7)),u=o(n(18)),d=n(23),f=new Set;window.addEventListener("beforeunload",(function(e){f.size&&(e.returnValue="There is pending work. Sure you want to leave?")})),window.addEventListener("unload",(function(e){console.log("unload EVENT")}));window.addEventListener("offline",(function(){var e=document.querySelector(".js-offline");e&&(e.style.display="block")}));var v=function(){r.default().then((function(){var e,t=d.validity.isEmail("faf");console.log("isNumber",t),l.default.modal({selector:".js-modal"}).setEvent(),u.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),l.default.toggleClass({selector:".js-toggle"}).setEvent(),l.default.enterTarget({selector:".js-hover-trigger"}),l.default.tabMenu(),l.default.close({selector:".js-close"}),l.default.toTop({selector:".js-to-top"}),l.default.scrollAnimation(),l.default.scrollspy({menusSelector:".js-section",sectionsSelector:".newneek-navbar-menu-item"}),u.default.file(),u.default.textarea(),u.default.number(),s.setGraph(),a.countDownClock(20,"days"),c.carousel(),function(){var e,t=document.querySelectorAll(".view-password");null===(e=t)||void 0===e||e.forEach((function(e){return e.addEventListener("click",(function(){var t,n,o,r=null===(t=e.parentNode)||void 0===t?void 0:t.querySelector("input"),i="password"===(null===(n=r)||void 0===n?void 0:n.getAttribute("type"))?"text":"password";null===(o=r)||void 0===o||o.setAttribute("type",i)}))}))}();var n=document.querySelector(".js-input-test");if(n){n.addEventListener("keypress",(function(e){var t=e.which||e.keyCode;32!=t&&(t<48||t>57)&&e.preventDefault()}));var o=n.value||"";n.addEventListener("input",(function(e){var t=e.target;/^[0-9\s]*$/.test(t.value)?o=t.value:t.value=o}))}var r=document.querySelector(".header"),i=document.querySelector(".js-page-title");document.addEventListener("scroll",(function(e){var t,n;r&&(console.log(i),window.pageYOffset>r.offsetTop?(r.classList.add("is-fixed"),null===(t=i)||void 0===t||t.classList.add("is-fixed")):(r.classList.remove("is-fixed"),null===(n=i)||void 0===n||n.classList.remove("is-fixed")))})),null===(e=document.querySelector(".js-copyClipboard"))||void 0===e||e.addEventListener("click",(function(){var e,t;e="https://napp.newneek.co/2020election/#temp",t=document.createElement("textarea"),document.body.appendChild(t),t.value=e,t.select(),document.execCommand("copy"),document.body.removeChild(t),alert('복사 완료! 이제 "붙여넣기" 해주세요.😉')}));var f,v,m=document.querySelector(".js-display-list"),h=document.querySelector(".js-display-grid"),y=document.querySelector(".profile-body");m&&h&&y&&(m.addEventListener("click",(function(){m.classList.add("is-selected"),h.classList.remove("is-selected"),y.classList.add("list")})),h.addEventListener("click",(function(){m.classList.remove("is-selected"),h.classList.add("is-selected"),y.classList.remove("list")}))),f=document.querySelector(".js-comment-write"),v=document.querySelectorAll(".js-comment-textfield"),f&&v&&v.forEach((function(e){return e.addEventListener("focus",(function(){f&&f.classList.add("is-focused")}))}))}))};function m(){var e,t,n=document.querySelector(".header");["#design",""].includes(window.location.hash)?null===(e=n)||void 0===e||e.classList.add("is-white"):null===(t=n)||void 0===t||t.classList.remove("is-white")}function h(){var e,t,n,o,r,i,s=document.querySelector(".navbar-burger");null===(e=s)||void 0===e||e.classList.remove("is-active"),null===(n=null===(t=s)||void 0===t?void 0:t.nextElementSibling)||void 0===n||n.classList.remove("is-visible"),o=window.location.hash,r=document.body,i="page-"+(""===o?"design":o.substring(1)),r.className="",r.classList.add(i),m()}window.addEventListener("hashchange",v),window.addEventListener("hashchange",h),window.addEventListener("hashchange",m),document.addEventListener("DOMContentLoaded",(function(){h(),i.loader(),i.detectBrowser(),c.setDarkmode(),l.default.toggleClass({selector:".js-navbar-toggle"}).setEvent(),v(),window.addEventListener("scroll",(function(){l.default.stickyElement({targetElement:".post-head",addClass:"is-sticky"})}));window.addEventListener("scroll",(function(){var e=document.querySelector(".post"),t=document.querySelector(".post-head-progress");if(e&&t){var n=window.pageYOffset/(e.scrollHeight-window.innerHeight)*100+"%";t.style.width=n}}),!0)})),document.addEventListener("submit",(function(e){return e.preventDefault()}))},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=window.location.hash,t=e?"/views/"+e.substring(1)+".html":"/views/design.html";return console.log(history.state),fetch(t).then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(e){var t=document.getElementById("view");t&&(t.innerHTML=e,window.scrollTo(0,0))})).catch((function(e){return console.warn("router: ",e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loader=function(){var e=document.querySelector(".js-loader");if(e){var t=document.body;document.addEventListener("DOMContentLoaded",(function(){t.classList.add("body-lock")})),window.addEventListener("load",(function(){setTimeout((function(){e.classList.add("is-hidden"),t.classList.remove("body-lock")}),0)}))}},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?(e.style.display="block",console.log(t)):-1!==t.indexOf("chrome")&&console.log(t,"크롬")}};function o(e){var t=document.body;"fixed"===getComputedStyle(e).position?t.style.marginTop=e.clientHeight+"px":t.style.marginTop=0}t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return o(e)};o(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGraph=function(){var e=document.querySelectorAll(".js-graph .graph-item");e&&e.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var o=parseInt(n.innerText);t.style.height=o+"px",n.style.bottom=o+"px"}}))}},function(e,t,n){"use strict";function o(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),o=e.querySelector(".slider-arrows-prev"),r=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&o&&r&&i){var s=t.offsetWidth,c=0;n.forEach((function(e){return c+=e.offsetWidth})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",s)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",o))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.countDownClock=function(e,t){void 0===e&&(e=100),void 0===t&&(t="seconds");var n=document.querySelector(".js-days"),o=document.querySelector(".js-hours"),r=document.querySelector(".js-minutes"),i=document.querySelector(".js-seconds");function s(e){var t=Date.now()+1e3*e,s=setInterval((function(){var e=Math.round((t-Date.now())/1e3);e<=0?clearInterval(s):n&&o&&r&&i&&(n.innerHTML=""+Math.floor(e/86400),o.innerText=""+Math.floor(e%86400/3600),r.innerText=""+Math.floor(e%86400%3600/60),i.innerText=""+(e%60<10?"0"+e%60:e%60))}),1e3)}n&&function(t){switch(t){case"seconds":return s(e);case"minutes":return s(60*e);case"hours":return s(60*e*60);case"days":s(60*e*60*24)}}(t)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=o(n(9)),s=o(n(10)),c=o(n(11)),a=o(n(12)),l=o(n(13)),u=o(n(14)),d=o(n(15)),f=o(n(16)),v=o(n(17));t.default={toggleClass:r.default,enterTarget:i.default,modal:c.default,tabMenu:s.default,toTop:a.default,stickyElement:l.default,scrollAnimation:u.default,scrollspy:v.default,close:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{init:function(){},triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",setEvent:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(n){var o;n.preventDefault(),n.stopPropagation();var r=null===(o=t)||void 0===o?void 0:o.nextElementSibling;r&&(e.toggleClassTrigger(t),e.toggleClassTarget(r),e.triggers.forEach((function(t){n.target!==t&&e.removeAllClass(t)})))}))})),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.removeAllClass(t)}))})))},toggleClassTrigger:function(e){e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS))},toggleClassTarget:function(e){e.classList.toggle(this.ACTIVE_CLASS2),e.addEventListener("click",(function(e){return e.stopPropagation()}))},removeAllClass:function(e){e.setAttribute("aria-expanded","true"),e.classList.remove(this.ACTIVE_CLASS),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,o=document.querySelectorAll(t);o&&o.forEach((function(e){var t=e===document.querySelector(".js-navbar .navbar-menu-item.js-hover-trigger");e.addEventListener("mouseenter",(function(){e.setAttribute("aria-expanded","true"),e.classList.add("is-expanded"),t&&n.classList.add("is-shown"),e.addEventListener("mouseleave",(function(){return e.setAttribute("aria-expanded","false"),e.classList.remove("is-expanded"),void(t&&n.classList.remove("is-shown"))}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index"),r=document.querySelector(".profile-tablist-active");n&&r&&t.closest("[role=tab]")&&(r.style.left=t.offsetLeft+"px",n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach((function(e){e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")})))}),!0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{initialize:function(){},modals:document.querySelectorAll(t),modalContainer:document.querySelector("#modal"),setEvent:function(){var e=this;document.removeEventListener("click",this.backHistory),this.modals&&this.modals.forEach((function(t){return t.addEventListener("click",(function(n){n.stopPropagation(),n.preventDefault();var o=t.dataset.modal;fetch("/views/"+o+".html").then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(n){var r,i,s,c;if(e.modalContainer){var a=window.pageYOffset;document.body.classList.remove("is-modal-visible"),e.modalContainer.innerHTML=n,e.setModal(a),e.setHistory(o);var l=document.body.classList.contains("is-modal-visible");l&&(null===(r=document.querySelector(".js-modal-close"))||void 0===r||r.addEventListener("click",(function(e){return e.stopPropagation()})),null===(i=document.querySelector(".js-modal-close"))||void 0===i||i.addEventListener("click",e.backHistory)),document.addEventListener("keydown",(function(t){27===t.keyCode&&e.backHistory()})),window.addEventListener("popstate",(function(){l&&e.clearModal(e.modalContainer,a)}));var u=t.querySelector(".modal-dialog");null===(s=u)||void 0===s||s.addEventListener("click",(function(e){return e.stopPropagation()})),null===(c=u)||void 0===c||c.addEventListener("click",(function(e){return e.stopPropagation()}))}})).catch((function(e){return console.warn("modal Error")}))}))}))},setModal:function(e){document.body.classList.add("is-modal-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+e+"px"},clearModal:function(e,t){document.body.classList.remove("is-modal-visible"),document.body.classList.remove("body-lock"),e.innerHTML="",window.scrollTo(0,t)},setHistory:function(e){var t=e;history.pushState({name:"tester"},"dd",t)},backHistory:function(){history.back()}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0),window.location.hash=n.name||n.href}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,o=document.body,r=document.querySelector(t);if(r){var i,s=r.offsetHeight;window.addEventListener("resize",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){s=r.offsetHeight}))})),window.addEventListener("scroll",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){window.pageYOffset>r.offsetTop+s?o.classList.add(n):o.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e,t=document.querySelectorAll(".js-scroll-animation");t&&(t.forEach((function(e){e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){t.forEach((function(t){t.getBoundingClientRect().top+.5*t.clientHeight<=window.innerHeight&&(t.classList.add("is-scrolled"),e&&window.cancelAnimationFrame(e),e=window.requestAnimationFrame((function(){})))}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".loader-object");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,o=e.clientX,r=e.clientY;n.style.left=o+"px",n.style.top=r+"px"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.menusSelector,n=e.sectionsSelector,o=document.querySelectorAll(t),r=document.querySelectorAll(n);o&&r&&(r.forEach((function(e,t){e.addEventListener("click",(function(e){e.preventDefault();var n=o[t].offsetTop;window.scrollTo(0,n)}))})),window.addEventListener("scroll",(function(){o.forEach((function(e,t){e.offsetTop<=window.pageYOffset+200&&(r.forEach((function(e){return e.classList.remove("is-active")})),r[t].classList.add("is-active"))}))})))}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(19)),i=o(n(20)),s=o(n(21)),c=o(n(22));t.default={checkbox:r.default,textarea:i.default,file:s.default,number:c.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),o=n.every((function(e){return e.checked})),r=n.some((function(e){return e.checked}));t.checked=o,t.indeterminate=r&&!o,t.dataset.indeterminate=r&&!o},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,n=e.target;if(!n&&"textarea"===n.nodeName.toLowerCase()){var r=document.querySelector(".textfield-byte b");if(r){var i=(null===(t=n)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;r.innerText=i,i>30?n.parentNode.classList.add("is-invalid"):n.parentNode.classList.remove("is-invalid"),o(n)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,o,r='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,o=t>=1024&&t<1048576,t<1024?t+"bytes":o?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=r}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,o=n.value.length>0;e&&(n.value=0);o&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t,n=e.target;if(n.closest(".js-variation-decrement")){if((t=n.parentNode.querySelector(".js-variation-input")).value<=0)return n.classList.add("is-disabled"),void n.setAttribute("disabled","true");--t.value}if(n.closest(".js-variation-increment")){if((t=n.parentNode.querySelector(".js-variation-input")).value>=10)return n.classList.add("is-disabled"),void n.removeAttribute("disabled");++t.value}}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validity={isRequired:function(e){return""===e||null==e||null!==e&&"object"==typeof e&&!Object.keys(e).length},isNumeric:function(e){return/[0-9]/g.test(e)},isAlphabet:function(e){return/[a-z]/gi.test(e)},isEmail:function(e){return/^[가-힣a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[가-힣A-Z0-9.-]+\.[A-Z]{2,}$/i.test(e.toLowerCase())},isLength:function(e,t){return e.length<t},isLowerCase:function(e){return e===e.toLowerCase()},isNull:function(e){return null===e||0===e.length}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3VpLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvY291bnRkb3duLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9nZ2xlQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2VudGVyVGFyZ2V0LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC90YWJNZW51LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9tb2RhbC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3N0aWNreUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2xvc2UudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2N1c3RvbUN1cnNvci50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvc2Nyb2xsc3B5LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvY2hlY2tib3gudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L3RleHRhcmVhLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9maWxlLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC9udW1iZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3V0aWxzL3ZhbGlkYXRpb25zLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsInJvdXRlcl8xIiwibG9hZF8xIiwidWlfMSIsInNldERhcmtNb2RlXzEiLCJjb3VudGRvd25fMSIsImluZGV4XzEiLCJpbmRleF8yIiwidmFsaWRhdGlvbnNfMSIsInBlbmRpbmdPcHMiLCJTZXQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzaXplIiwicmV0dXJuVmFsdWUiLCJjb25zb2xlIiwibG9nIiwib2ZmbGluZUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZSIsImRpc3BsYXkiLCJkb21FdmVudHMiLCJkZWZhdWx0IiwidGhlbiIsIl9hIiwidGVzdCIsInZhbGlkaXR5IiwiaXNFbWFpbCIsIm1vZGFsIiwic2VsZWN0b3IiLCJzZXRFdmVudCIsImNoZWNrYm94IiwiY2hlY2tBbGxTZWxlY3RvciIsImNoZWNrU2VsZWN0b3IiLCJ0b2dnbGVDbGFzcyIsImVudGVyVGFyZ2V0IiwidGFiTWVudSIsImNsb3NlIiwidG9Ub3AiLCJzY3JvbGxBbmltYXRpb24iLCJzY3JvbGxzcHkiLCJtZW51c1NlbGVjdG9yIiwic2VjdGlvbnNTZWxlY3RvciIsImZpbGUiLCJ0ZXh0YXJlYSIsIm51bWJlciIsInNldEdyYXBoIiwiY291bnREb3duQ2xvY2siLCJjYXJvdXNlbCIsInRvZ2dsZUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJfYiIsIl9jIiwicGFzc3dvcmRFbGVtZW50IiwicGFyZW50Tm9kZSIsInR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZXZlYWxQYXNzd29yZCIsImlucHV0VGVzdCIsImUiLCJ3aGljaCIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsImN1cnJlbnRWYWx1ZV8xIiwidGFyZ2V0IiwicGFnZUhlYWQiLCJwYWdlVGl0bGUiLCJwYWdlWU9mZnNldCIsIm9mZnNldFRvcCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInRleHQiLCJ0ZXh0YXJlYUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJyZW1vdmVDaGlsZCIsImFsZXJ0IiwiY29tbWVudFdyaXRlIiwiY29tbWVudFRleHRGaWVsZCIsImxpc3QiLCJncmlkIiwid29ya3MiLCJkZXRlY3RIZWFkZXJUaGVtZSIsInBhZ2VIZWFkRWxlbWVudCIsImluY2x1ZGVzIiwibG9jYXRpb24iLCJoYXNoIiwiaW5pdGFpbGl6ZVBhZ2UiLCJjbGFzc05hbWUiLCJuYXZpZ2F0aW9uVHJpZ2dlciIsIm5leHRFbGVtZW50U2libGluZyIsInN1YnN0cmluZyIsImxvYWRlciIsImRldGVjdEJyb3dzZXIiLCJzZXREYXJrbW9kZSIsInN0aWNreUVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwiYWRkQ2xhc3MiLCJwb3N0IiwicHJvZ3Jlc3NCYXIiLCJzY3JvbGxQZXJjZW50Iiwic2Nyb2xsSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJ3aWR0aCIsInBhZ2UiLCJoaXN0b3J5Iiwic3RhdGUiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJQcm9taXNlIiwicmVqZWN0IiwiaHRtbCIsInZpZXciLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsInNjcm9sbFRvIiwiY2F0Y2giLCJlcnJvciIsIndhcm4iLCJsb2FkZXJFbGVtZW50Iiwic2V0VGltZW91dCIsIkJyb3dzZXJFbGVtZW50IiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2V0Qm9keU1hcmdpblRvcCIsImhlYWRlckVsZW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJhZGp1c3RUb3BQYWRkaW5nIiwiZm4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJncmFwaEl0ZW1zIiwiZ3JhcGhJdGVtQmFyIiwiZ3JhcGhJdGVtVmFsdWUiLCJncmFwaFZhbHVlIiwicGFyc2VJbnQiLCJpbm5lclRleHQiLCJoZWlnaHQiLCJib3R0b20iLCJ0dCIsInRvZ2dsZSIsImNvbnRhaW5zIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjYXRlZ29yeSIsImNhdGVnb3J5TGlzdCIsImNhdGVnb3J5TGlzdFNsaWRlIiwiY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiIsImNhdGVnb3J5TmF2aWdhdGlvbk5leHQiLCJjYXRlZ29yeURvdHMiLCJjYXRlZ29yeUNvbnRhaW5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJzdW0iLCJpdGVtIiwic2Nyb2xsTGVmdCIsImRhcmttb2RlQnV0dG9uIiwibGFzdFRoZW1lIiwiZ2V0SXRlbSIsImxvYWRUaGVtZSIsImZvcm1hdCIsImRheXNFbGVtZW50IiwiaG91cnNFbGVtZW50IiwibWludXRlc0VsZW1lbnQiLCJzZWNvbmRzRWxlbWVudCIsInRpbWVyIiwic2Vjb25kcyIsIkRhdGUiLCJub3ciLCJjb3VudGRvd24iLCJzZXRJbnRlcnZhbCIsInNlY29uZHNMZWZ0IiwiTWF0aCIsInJvdW5kIiwiY2xlYXJJbnRlcnZhbCIsImZsb29yIiwiY29udmVydEZvcm1hdCIsInRvZ2dsZUNsYXNzXzEiLCJlbnRlclRhcmdldF8xIiwidGFiTWVudV8xIiwibW9kYWxfMSIsInRvVG9wXzEiLCJzdGlja3lFbGVtZW50XzEiLCJzY3JvbGxBbmltYXRpb25fMSIsImNsb3NlXzEiLCJjdXN0b21DdXJzb3JfMSIsInNjcm9sbHNweV8xIiwiY3VzdG9tQ3Vyc29yIiwidHJpZ2dlciIsImluaXQiLCJ0cmlnZ2VycyIsIkFDVElWRV9DTEFTUyIsIkFDVElWRV9DTEFTUzIiLCJfdGhpcyIsInN0b3BQcm9wYWdhdGlvbiIsInRyaWdnZXJOZXh0RWxlbWVudCIsInRvZ2dsZUNsYXNzVHJpZ2dlciIsInRvZ2dsZUNsYXNzVGFyZ2V0IiwicmVtb3ZlQWxsQ2xhc3MiLCJob3ZlckVsZW1lbnRzIiwiaXNOYXZpZ2F0aW9uIiwidGFicyIsInRhYkluZGV4IiwidGFiQWN0aWNlQmFyIiwiY2xvc2VzdCIsImxlZnQiLCJvZmZzZXRMZWZ0IiwidGFiIiwiaW5pdGlhbGl6ZSIsIm1vZGFscyIsIm1vZGFsQ29udGFpbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJhY2tIaXN0b3J5IiwiaWQiLCJkYXRhc2V0IiwiX2QiLCJzZXRNb2RhbCIsInNldEhpc3RvcnkiLCJpc09wZW5lZCIsImNsZWFyTW9kYWwiLCJtb2RhbERpYWxvZyIsInRvcCIsImNvbnRhaW5lciIsIm1vZGFsVXJsIiwidXJsIiwicHVzaFN0YXRlIiwiYmFjayIsInRvVG9wRWxlbWVudCIsImhyZWYiLCJpc1Njcm9sbGluZyIsInN0aWNreUVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInRlbXAiLCJzY3JvbGxUYXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbG9zZUVsZW1lbnRzIiwiaGlkZGVuIiwiY3Vyc29yIiwiaG92ZXJFbGVtZW50Iiwic2V0Q3Vyc29yIiwiY3Vyc29yRWxlbWVudCIsInNldFJpcHBsZSIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJtZW51c0NsYXNzIiwic2VjdGlvbnNDbGFzcyIsInNlY3Rpb25zIiwibWVudXMiLCJpbmRleCIsInRhcmdldE9mZnNldFkiLCJzZWN0aW9uIiwibWVudSIsImNoZWNrYm94XzEiLCJ0ZXh0YXJlYV8xIiwiZmlsZV8xIiwibnVtYmVyXzEiLCJjaGVja0FsbCIsImNoZWNrSXRlbXMiLCJzZXRDaGVja0FsbCIsImNoZWNrSXRlbSIsInNldENoZWNrRWFjaCIsImNoZWNrcyIsIkFycmF5IiwiZnJvbSIsImlzQ2hlY2tlZEV2ZXJ5IiwiZXZlcnkiLCJjaGVja2VkIiwiaXNDaGVja2VkU29tZSIsInNvbWUiLCJpbmRldGVybWluYXRlIiwiYXV0b0V4cGFuZCIsImZpZWxkIiwiY29tcHV0ZWQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibm9kZU5hbWUiLCJieXRlRWxlbWVudCIsInN0cmluZ0J5dGVMZW5ndGgiLCJyZXBsYWNlIiwibGVuZ3RoIiwiZmlsZUlucHV0IiwiZmlsZXMiLCJhdHRhY2htZW50TGlzdCIsImF0dGFjaG1lbnRIZWxwZXIiLCJ2YWxpZEZpbGVUeXBlIiwiaXNLaWxvQnl0ZXMiLCJmaWxlVGVtcGxhdGUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ0b0ZpeGVkIiwiYXR0YWNoIiwiaXNGaXJzdFBsYWNlZFplcm8iLCJpc01heGltdW0iLCJOdW1iZXIiLCJpc0xlbmd0aCIsInNsaWNlIiwidGFyZ2V0SW5wdXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpc1JlcXVpcmVkIiwia2V5cyIsImlzTnVtZXJpYyIsImlzQWxwaGFiZXQiLCJpc0xvd2VyQ2FzZSIsImlzTnVsbCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFB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QUksb0JBQ3JCTixFQUFPb1AsZ0JBQWdCLGNBS3pCRCxFQUFZelUsVyw2QkN2SXRCUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFTdERuQixFQUFRZ0UsU0FBVyxDQUNmOFIsV0FBWSxTQUFVM1UsR0FDbEIsTUFBaUIsS0FBVkEsU0FBZ0JBLEdBQW9ELE9BQVZBLEdBQW1DLGlCQUFWQSxJQUF1QlAsT0FBT21WLEtBQUs1VSxHQUFPd1QsUUFFeElxQixVQUFXLFNBQVU3VSxHQUNqQixNQUFPLFNBQVM0QyxLQUFLNUMsSUFFekI4VSxXQUFZLFNBQVU5VSxHQUNsQixNQUFPLFVBQVU0QyxLQUFLNUMsSUFFMUI4QyxRQUFTLFNBQVU5QyxHQUNmLE1BQU8sbUVBQW1FNEMsS0FBSzVDLEVBQU11SixnQkFHekZnTCxTQUFVLFNBQVV2VSxFQUFPd1QsR0FDdkIsT0FBT3hULEVBQU13VCxPQUFTQSxHQUkxQnVCLFlBQWEsU0FBVS9VLEdBQ25CLE9BQU9BLElBQVVBLEVBQU11SixlQUUzQnlMLE9BQVEsU0FBVWhWLEdBQ2QsT0FBaUIsT0FBVkEsR0FBbUMsSUFBakJBLEVBQU13VCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xucmVxdWlyZShcIi4vc3R5bGVzaGVldHMvc3R5bGUuc2Nzc1wiKTtcbnZhciByb3V0ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9yb3V0ZXJcIikpO1xudmFyIGxvYWRfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2xvYWRcIik7XG52YXIgdWlfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3VpXCIpO1xudmFyIHNldERhcmtNb2RlXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZVwiKTtcbnZhciBjb3VudGRvd25fMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2NvdW50ZG93blwiKTtcbnZhciBpbmRleF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2V2ZW50L2luZGV4XCIpKTtcbnZhciBpbmRleF8yID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL2lucHV0L2luZGV4XCIpKTtcbnZhciB2YWxpZGF0aW9uc18xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvdXRpbHMvdmFsaWRhdGlvbnNcIik7XG4vLyBjbG9zZSDrs7Tri6QgZGVsZXRl6rCAIO2PrOq0hOyggeyduCDrhKTsnbTrsI1cbi8vIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4vLyAgIHJldHVybiBuICUgMiA9PSAwO1xuLy8gfSk7XG4vLyBmdW5jdGlvbiByZW1vdmVJdGVtKGl0ZW1zLCByZW1vdmFibGUpIHtcbi8vICAgY29uc3QgaW5kZXggPSBpdGVtcy5pbmRleE9mKHJlbW92YWJsZSk7XG4vLyAgIHJldHVybiBbLi4uaXRlbXMuc2xpY2UoMCwgaW5kZXgpLCAuLi5pdGVtcy5zbGljZShpbmRleCsxKV07XG4vLyB9XG4vLyB0aHJvdyBuZXcgRXJyb3Jcbi8vIElmIHlvdSBkbyBub3QgcmV0dXJuIGFueXRoaW5nLCBhIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCwgd2hpY2ggdmFsaWRhdGVzIGFzIGZhbHNleS5cbi8vZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIHN1cHBvcnRzLWRhdGUnO1xuLy8gZGl2LmNsYXNzTGlzdC5yZXBsYWNlKFwiZm9vXCIsIFwiYmFyXCIpO1xuLy8gaWYod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6ODAwcHgpJykubWF0Y2hlcykge31cbi8vIGxldCBmb3JtQ2hhbmdlZCA9IGZhbHNlO1xuLy8gbXlGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IGZvcm1DaGFuZ2VkID0gdHJ1ZSk7XG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKGV2ZW50KSA9PiB7XG4vLyAgIGlmIChmb3JtQ2hhbmdlZCkge1xuLy8gICAgIGV2ZW50LnJldHVyblZhbHVlID0gJ1lvdSBoYXZlIHVuZmluaXNoZWQgY2hhbmdlcyEnO1xuLy8gICB9XG4vLyB9KTtcbnZhciBwZW5kaW5nT3BzID0gbmV3IFNldCgpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChwZW5kaW5nT3BzLnNpemUpIHtcbiAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSAnVGhlcmUgaXMgcGVuZGluZyB3b3JrLiBTdXJlIHlvdSB3YW50IHRvIGxlYXZlPyc7XG4gICAgfVxuICAgIC8vIG5hdmlnYXRvci5zZW5kQmVhY29uKCcvbG9nJywgYW5hbHl0aWNzRGF0YSlcbn0pO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGNvbnNvbGUubG9nKCd1bmxvYWQgRVZFTlQnKTtcbn0pO1xuLy8gZnVuY3Rpb24gYWRkVG9QZW5kaW5nV29yayhwcm9taXNlKSB7XG4vLyAgIGJ1c3lzcGlubmVyLmhpZGRlbiA9IGZhbHNlXG4vLyAgIHBlbmRpbmdPcHMuYWRkKHByb21pc2UpXG4vLyAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4vLyAgICAgcGVuZGluZ09wcy5kZWxldGUocHJvbWlzZSlcbi8vICAgICBidXN5c3Bpbm5lci5oaWRkZW4gPSBwZW5kaW5nT3BzLnNpemUgPT09IDBcbi8vICAgfVxuLy8gICBwcm9taXNlLnRoZW4oY2xlYW51cCkuY2F0Y2goY2xlYW51cClcbi8vIH1cbnZhciBmb2N1c0NvbW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbW1lbnRXcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb21tZW50LXdyaXRlJyk7XG4gICAgdmFyIGNvbW1lbnRUZXh0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtY29tbWVudC10ZXh0ZmllbGQnKTtcbiAgICBpZiAoIWNvbW1lbnRXcml0ZSB8fCAhY29tbWVudFRleHRGaWVsZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbW1lbnRUZXh0RmllbGQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbW1lbnRXcml0ZSAmJiBjb21tZW50V3JpdGUuY2xhc3NMaXN0LmFkZCgnaXMtZm9jdXNlZCcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2ZmbGluZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtb2ZmbGluZScpO1xuICAgIGlmICghb2ZmbGluZUVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICBvZmZsaW5lRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn0pO1xudmFyIGRvbUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByb3V0ZXJfMS5kZWZhdWx0KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHRlc3QgPSB2YWxpZGF0aW9uc18xLnZhbGlkaXR5LmlzRW1haWwoJ2ZhZicpO1xuICAgICAgICBjb25zb2xlLmxvZygnaXNOdW1iZXInLCB0ZXN0KTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0Lm1vZGFsKHsgc2VsZWN0b3I6ICcuanMtbW9kYWwnIH0pLnNldEV2ZW50KCk7XG4gICAgICAgIGluZGV4XzIuZGVmYXVsdC5jaGVja2JveCh7IGNoZWNrQWxsU2VsZWN0b3I6ICcuanMtY2hlY2thbGwnLCBjaGVja1NlbGVjdG9yOiAnLmpzLWNoZWNrJyB9KS5zZXRFdmVudCgpO1xuICAgICAgICBpbmRleF8xLmRlZmF1bHQudG9nZ2xlQ2xhc3MoeyBzZWxlY3RvcjogJy5qcy10b2dnbGUnIH0pLnNldEV2ZW50KCk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5lbnRlclRhcmdldCh7IHNlbGVjdG9yOiAnLmpzLWhvdmVyLXRyaWdnZXInIH0pO1xuICAgICAgICBpbmRleF8xLmRlZmF1bHQudGFiTWVudSgpO1xuICAgICAgICBpbmRleF8xLmRlZmF1bHQuY2xvc2UoeyBzZWxlY3RvcjogJy5qcy1jbG9zZScgfSk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC50b1RvcCh7IHNlbGVjdG9yOiAnLmpzLXRvLXRvcCcgfSk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5zY3JvbGxBbmltYXRpb24oKTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnNjcm9sbHNweSh7IG1lbnVzU2VsZWN0b3I6ICcuanMtc2VjdGlvbicsIHNlY3Rpb25zU2VsZWN0b3I6ICcubmV3bmVlay1uYXZiYXItbWVudS1pdGVtJyB9KTtcbiAgICAgICAgaW5kZXhfMi5kZWZhdWx0LmZpbGUoKTtcbiAgICAgICAgaW5kZXhfMi5kZWZhdWx0LnRleHRhcmVhKCk7XG4gICAgICAgIGluZGV4XzIuZGVmYXVsdC5udW1iZXIoKTtcbiAgICAgICAgdWlfMS5zZXRHcmFwaCgpO1xuICAgICAgICBjb3VudGRvd25fMS5jb3VudERvd25DbG9jaygyMCwgJ2RheXMnKTtcbiAgICAgICAgc2V0RGFya01vZGVfMS5jYXJvdXNlbCgpO1xuICAgICAgICByZXZlYWxQYXNzd29yZCgpO1xuICAgICAgICB2YXIgaW5wdXRUZXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWlucHV0LXRlc3QnKTtcbiAgICAgICAgaWYgKGlucHV0VGVzdCkge1xuICAgICAgICAgICAgaW5wdXRUZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZS53aGljaCB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgLy8gMCwgMSwgLi4uLCA5IGhhdmUga2V5IGNvZGUgb2YgNDgsIDQ5LCAuLi4sIDU3LCByZXNwZWN0aXZlbHlcbiAgICAgICAgICAgICAgICAvLyBTcGFjZSBoYXMga2V5IGNvZGUgb2YgMzJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IDMyICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gbGV0IHNlbGVjdGlvbiA9IHt9O1xuICAgICAgICAgICAgLy8gaW5wdXRUZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAvLyAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICAvLyAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgICAgIC8vICAgICBzdGFydDogdGFyZ2V0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgLy8gICAgIGVuZDogdGFyZ2V0LnNlbGVjdGlvbkVuZCxcbiAgICAgICAgICAgIC8vICAgfTtcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgLy8gVHJhY2sgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWVfMSA9IGlucHV0VGVzdC52YWx1ZSB8fCAnJztcbiAgICAgICAgICAgIGlucHV0VGVzdC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGlmICgvXlswLTlcXHNdKiQvLnRlc3QodGFyZ2V0LnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlXzEgPSB0YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSBjdXJyZW50VmFsdWVfMTtcbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgaW4gdGhpcyBjYXNlLCBgZS5wcmV2ZW50RGVmYXVsdCgpYCBkb2Vzbid0IGhlbHBcbiAgICAgICAgICAgICAgICAvLyDtlZzquIAg7J6F66Cl7ZaI7J2EIOuVjCDsu6TshJzqsIAg66eoIOuSpOuhnCDqsJAuXG4gICAgICAgICAgICAgICAgLy8gaWYgKC9eWzAtOXNdKiQvLnRlc3QodGFyZ2V0LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vICAgY3VycmVudFZhbHVlID0gdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgIHRhcmdldC52YWx1ZSA9IGN1cnJlbnRWYWx1ZVxuICAgICAgICAgICAgICAgIC8vICAgdGFyZ2V0LnNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvbi5zdGFydCwgc2VsZWN0aW9uLmVuZClcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFnZUhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XG4gICAgICAgIHZhciBwYWdlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcGFnZS10aXRsZScpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBpZiAoIXBhZ2VIZWFkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhZ2VUaXRsZSk7XG4gICAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLm1hcmdpblRvcCA9IHBhZ2VIZWFkLmNsaWVudEhlaWdodCArICdweCdcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiBwYWdlSGVhZC5vZmZzZXRUb3ApIHtcbiAgICAgICAgICAgICAgICBwYWdlSGVhZC5jbGFzc0xpc3QuYWRkKCdpcy1maXhlZCcpO1xuICAgICAgICAgICAgICAgIChfYSA9IHBhZ2VUaXRsZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5hZGQoJ2lzLWZpeGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWdlSGVhZC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1maXhlZCcpO1xuICAgICAgICAgICAgICAgIChfYiA9IHBhZ2VUaXRsZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWZpeGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFnZVRpdGxlKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY29weUNsaXBib2FyZCcpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb3B5VG9DbGlwYm9hcmQoJ2h0dHBzOi8vbmFwcC5uZXduZWVrLmNvLzIwMjBlbGVjdGlvbi8jdGVtcCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gZnVuY3Rpb24gc21vb3RoU2Nyb2xsKHRhcmdldCwgZHVyYXRpb24pIHtcbiAgICAgICAgLy8gICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpXG4gICAgICAgIC8vICAgdmFyIHRhcmdldFBvc2l0aW9uID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgICAgICAvLyAgIHZhciBzdGFydFBvc2l0aW9uID0gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgIC8vICAgdmFyIGRpc3RhbmNlID0gdGFyZ2V0UG9zaXRpb24gLSBzdGFydFBvc2l0aW9uXG4gICAgICAgIC8vICAgdmFyIHN0YXJ0VGltZSA9IG51bGxcbiAgICAgICAgLy8gICBmdW5jdGlvbiBhbmltYXRpb24oY3VycmVudFRpbWUpIHtcbiAgICAgICAgLy8gICAgIGlmICghc3RhcnRUaW1lKSBzdGFydFRpbWUgPSBjdXJyZW50VGltZVxuICAgICAgICAvLyAgICAgdmFyIHRpbWVFbGFwc2VkID0gY3VycmVudFRpbWUgLSBzdGFydFRpbWVcbiAgICAgICAgLy8gICAgIHZhciBydW4gPSBlYXNlSW5PdXRRdWFkKHRpbWVFbGFwc2VkLCBzdGFydFBvc2l0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24pXG4gICAgICAgIC8vICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcnVuKVxuICAgICAgICAvLyAgICAgaWYgKHRpbWVFbGFwc2VkIDwgZHVyYXRpb24pIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb24pXG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyAgIGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQodCwgYiwgYywgZCkge1xuICAgICAgICAvLyAgICAgdCAvPSBkIC8gMlxuICAgICAgICAvLyAgICAgaWYgKHQgPCAxKSByZXR1cm4gKGMgLyAyKSAqIHQgKiB0ICsgYlxuICAgICAgICAvLyAgICAgdC0tXG4gICAgICAgIC8vICAgICByZXR1cm4gKC1jIC8gMikgKiAodCAqICh0IC0gMikgLSAxKSArIGJcbiAgICAgICAgLy8gICB9XG4gICAgICAgIC8vICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbilcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB2YXIgc2VjdGlvbjEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVzaWduLWFydGljbGUnKVxuICAgICAgICAvLyBzZWN0aW9uMT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICBzbW9vdGhTY3JvbGwoJy5mb290ZXInLCAxMDAwKVxuICAgICAgICAvLyB9KVxuICAgICAgICAvLyBldmVudC5jdXN0b21DdXJzb3IoKVxuICAgICAgICAvLyDsnoTsi5xcbiAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlzcGxheS1saXN0Jyk7XG4gICAgICAgIHZhciBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRpc3BsYXktZ3JpZCcpO1xuICAgICAgICB2YXIgd29ya3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS1ib2R5Jyk7XG4gICAgICAgIGlmIChsaXN0ICYmIGdyaWQgJiYgd29ya3MpIHtcbiAgICAgICAgICAgIGxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGdyaWQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB3b3Jrcy5jbGFzc0xpc3QuYWRkKCdsaXN0Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdyaWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB3b3Jrcy5jbGFzc0xpc3QucmVtb3ZlKCdsaXN0Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb2N1c0NvbW1lbnQoKTtcbiAgICB9KTtcbn07XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGRvbUV2ZW50cyk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGluaXRhaWxpemVQYWdlKTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgZGV0ZWN0SGVhZGVyVGhlbWUpO1xuZnVuY3Rpb24gZGV0ZWN0SGVhZGVyVGhlbWUoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgcGFnZUhlYWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuICAgIHZhciBwYWdlcyA9IFsnI2Rlc2lnbicsICcnXTtcbiAgICB2YXIgaXNXaGl0ZSA9IHBhZ2VzLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcbiAgICBpZiAoaXNXaGl0ZSkge1xuICAgICAgICAoX2EgPSBwYWdlSGVhZEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc0xpc3QuYWRkKCdpcy13aGl0ZScpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgKF9iID0gcGFnZUhlYWRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtd2hpdGUnKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXZlYWxQYXNzd29yZCgpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudmlldy1wYXNzd29yZCcpO1xuICAgIChfYSA9IHRvZ2dsZUVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICB2YXIgcGFzc3dvcmRFbGVtZW50ID0gKF9hID0gZWxlbWVudC5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICAgICAgICAgIHZhciB0eXBlQXR0cmlidXRlID0gKF9iID0gcGFzc3dvcmRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVBdHRyaWJ1dGUgPT09ICdwYXNzd29yZCcgPyAndGV4dCcgOiAncGFzc3dvcmQnO1xuICAgICAgICAgICAgKF9jID0gcGFzc3dvcmRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2V0QXR0cmlidXRlKCd0eXBlJywgdHlwZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaW5pdGFpbGl6ZVBhZ2UoKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgdmFyIG5hdmlnYXRpb25UcmlnZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmJhci1idXJnZXInKTtcbiAgICAoX2EgPSBuYXZpZ2F0aW9uVHJpZ2dlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgIChfYyA9IChfYiA9IG5hdmlnYXRpb25UcmlnZ2VyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmV4dEVsZW1lbnRTaWJsaW5nKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuICAgIG5vdGlmeVRoaXNQYWdlKCk7XG4gICAgZGV0ZWN0SGVhZGVyVGhlbWUoKTtcbn1cbmZ1bmN0aW9uIG5vdGlmeVRoaXNQYWdlKCkge1xuICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBjbGFzc05hbWUgPSBcInBhZ2UtXCIgKyAoaGFzaCA9PT0gJycgPyAnZGVzaWduJyA6IGhhc2guc3Vic3RyaW5nKDEpKTtcbiAgICBib2R5LmNsYXNzTmFtZSA9ICcnO1xuICAgIGJvZHkuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhZFRpbWUoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgcmVhZFRpbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QtaGVhZCcpO1xuICAgIHZhciBwb3N0Q29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0LWJvZHktcGFyYWdyYXBoJyk7XG4gICAgaWYgKCFwb3N0Q29udGVudCB8fCAhcmVhZFRpbWVFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIHRleHQgPSAoKF9hID0gcG9zdENvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50ZXh0Q29udGVudCkgfHwgKChfYiA9IHBvc3RDb250ZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaW5uZXJUZXh0KTtcbiAgICB2YXIgdGV4dExlbmd0aCA9IHRleHQuc3BsaXQoJyAnKS5sZW5ndGggfHwgMTtcbiAgICB2YXIgd29yZHNQZXJNaW51dGUgPSAyMDA7XG4gICAgdmFyIHZhbHVlID0gTWF0aC5jZWlsKHRleHRMZW5ndGggLyB3b3Jkc1Blck1pbnV0ZSk7XG4gICAgdmFyIHJlc3VsdCA9IHZhbHVlICsgXCIgbWluIHJlYWRcIjtcbiAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgIHJlYWRUaW1lRWxlbWVudC5pbm5lclRleHQgPSByZXN1bHQ7XG59XG4vLyBmdW5jdGlvbiBidXN0Q2FjaGUoKSB7XG4vLyAgIGNvbnN0IGxpbmtFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKVxuLy8gICBsaW5rRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbi8vICAgICBjb25zdCBpc1N0eWxlc2hlZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgncmVsJykgPT09ICdzdHlsZXNoZWV0J1xuLy8gICAgIGlmICghaXNTdHlsZXNoZWV0KSByZXR1cm5cbi8vICAgICBjb25zdCBocmVmID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuLy8gICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4vLyAgICAgY29uc3QgY2FjaGVCdXN0ZXIgPSBgJHtocmVmfT9jYWNoZUJ1c3Rlcj0ke3RpbWVzdGFtcH1gXG4vLyAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBjYWNoZUJ1c3Rlcilcbi8vICAgfSlcbi8vIH1cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gYnVzdENhY2hlKClcbiAgICBpbml0YWlsaXplUGFnZSgpO1xuICAgIGxvYWRfMS5sb2FkZXIoKTtcbiAgICBsb2FkXzEuZGV0ZWN0QnJvd3NlcigpO1xuICAgIHNldERhcmtNb2RlXzEuc2V0RGFya21vZGUoKTtcbiAgICAvLyBhZGp1c3RUb3BQYWRkaW5nKClcbiAgICAvLyBoYXNoY2hhbmdlIOuQoCDrlYzrp4jri6Qg7J2067Kk7Yq4IOunjOuTpOyWtOynkDtcbiAgICBpbmRleF8xLmRlZmF1bHQudG9nZ2xlQ2xhc3MoeyBzZWxlY3RvcjogJy5qcy1uYXZiYXItdG9nZ2xlJyB9KS5zZXRFdmVudCgpO1xuICAgIGRvbUV2ZW50cygpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGV2ZW50LnN0aWNreUVsZW1lbnQoeyB0YXJnZXRFbGVtZW50OiAnLmpzLW5hdmJhcicsIGFkZENsYXNzOiAnaXMtc3RpY2t5LW5hdmJhcicgfSlcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnN0aWNreUVsZW1lbnQoeyB0YXJnZXRFbGVtZW50OiAnLnBvc3QtaGVhZCcsIGFkZENsYXNzOiAnaXMtc3RpY2t5JyB9KTtcbiAgICB9KTtcbiAgICB2YXIgc2Nyb2xsUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3N0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QnKTtcbiAgICAgICAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvc3QtaGVhZC1wcm9ncmVzcycpO1xuICAgICAgICBpZiAoIXBvc3QgfHwgIXByb2dyZXNzQmFyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgc2Nyb2xsUGVyY2VudCA9ICh3aW5kb3cucGFnZVlPZmZzZXQgLyAocG9zdC5zY3JvbGxIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQpKSAqIDEwMCArIFwiJVwiO1xuICAgICAgICAvLyBjb25zdCBzY3JvbGxQZXJjZW50ID0gYCR7KHdpbmRvdy5wYWdlWU9mZnNldCAvIChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCkpICogMTAwfSVgXG4gICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gc2Nyb2xsUGVyY2VudDtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxQcm9ncmVzcywgdHJ1ZSk7XG59KTtcbi8vICEgY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXG4vLyBUT0RPOiDrj4TtgZDrqLztirjqsIAg7JWE64uI6528IGV2ZW50LnRhcmdldC5wYXJlbnQg6rCAIOyVhOuLjCDqsoPsnYQg7YG066at7ZaI7J2EIOuVjCDri6Tri7nslbwg7ZWY64KYXG4vLyBjb25zdCBmaW5kQ2xhc3NSZWN1cnNpdmUgPSAoZWxlbWVudCwgY2xhc3NOYW1lLCBkZXB0aCkgPT4ge1xuLy8gLy8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcbi8vIFx0Y29uc29sZS5sb2coJ2RlcHRoOiAnICsgZGVwdGgsIGVsZW1lbnQpO1xuLy8gXHRpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkgcmV0dXJuIGVsZW1lbnQ7XG4vLyBcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcbi8vIH07XG4vLyB2YXIgZ2V0Q2xvc2VzdCA9IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7XG4vLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG4vLyBcdFx0aWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHJldHVybiBlbGVtO1xuLy8gXHR9XG4vLyBcdHJldHVybiBudWxsO1xuLy8gfTtcbi8vIFByb21pc2UuYWxsKFtcbi8vIFx0ZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycpLFxuLy8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzJylcbi8vIF0pXG4vLyAudGhlbihyZXNwb25zZXMgPT4ge1xuLy8gXHRyZXR1cm4gcmVzcG9uc2VzLm1hcChyZXNwb25zZSA9PiB7XG4vLyBcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbi8vIFx0fSk7XG4vLyDsl7Drj4Trs4Qg6rCQ64+F67OEIOuCmOudvOuzhFxuLy8gY29uc3QgYm9hcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkJyk7XG4vLyBpZighYm9hcmRFbGVtZW50KSByZXR1cm4gbnVsbDtcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuLy8gXHRjb25zdCBmaWx0ZXJlZENvdW50cnkgPSBmaWxtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmNvdW50cnkgPT09ICfrr7jqta0nKTtcbi8vIFx0Y29uc29sZS5sb2coZmlsdGVyZWRDb3VudHJ5KTtcbi8vIFx0aWYoZXZlbnQudGFyZ2V0Lm5hbWUgPT09ICd1c2EnKSB7XG4vLyBcdFx0Ym9hcmRFbGVtZW50LmlubmVySFRNTCA9ICcnO1xuLy8gXHRcdGZpbHRlcmVkQ291bnRyeS5tYXAoaXRlbSA9PiB7XG4vLyBcdFx0XHRib2FyZEVsZW1lbnQuaW5uZXJIVE1MICs9IGBcbi8vIFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWJvZHlcIj5cbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5pZH08L2Rpdj5cbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5yZWxlYXNlRGF0ZX08L2Rpdj5cbi8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS50aXRsZUtvcmVhbn08ZGl2PiR7aXRlbS50aXRsZUVuZ2xpc2h9PC9kaXY+PC9kaXY+XG4vLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uZGlyZWN0b3J9PC9kaXY+XG4vLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uY291bnRyeX08L2Rpdj5cbi8vIFx0XHRcdFx0PC9kaXY+YDtcbi8vIFx0XHR9KTtcbi8vIFx0fVxuLy8gfSk7XG4vLyBzZXRUaW1lb3V0KCgpID0+IHtcbi8vIFx0ZmlsbXMubWFwKGl0ZW0gPT4ge1xuLy8gXHRcdGJvYXJkRWxlbWVudC5pbm5lckhUTUwgKz0gYFxuLy8gXHRcdDxkaXYgY2xhc3M9XCJib2FyZC1ib2R5XCI+XG4vLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5pZH08L2Rpdj5cbi8vIFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLnJlbGVhc2VEYXRlfTwvZGl2PlxuLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0udGl0bGVLb3JlYW59PGRpdj4ke2l0ZW0udGl0bGVFbmdsaXNofTwvZGl2PjwvZGl2PlxuLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uZGlyZWN0b3J9PC9kaXY+XG4vLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5jb3VudHJ5fTwvZGl2PlxuLy8gXHRcdDwvZGl2PmA7XG4vLyBcdH0pO1xuLy8gfSwgMjAwKTtcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuLy8gXHQvLyBjb25zdCBoZWxwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRleHRmaWVsZC1oZWxwZXInKTtcbi8vIFx0Ly8gaGVscGVycy5mb3JFYWNoKGhlbHBlciA9PiBoZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XG4vLyBcdC8vIGxldCBsb2dpbkRhdGEgPSB7ZW1haWw6ICcnLCBwYXNzd29yZDogJyd9O1xuLy8gXHRjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gZG9jdW1lbnQubG9naW47XG4vLyBcdGNvbnNvbGUubG9nKGVtYWlsKTtcbi8vIFx0aWYoIWRvY3VtZW50KSByZXR1cm47XG4vLyBcdC8vIGNvbnN0IGlzRW1haWwgPSBldmVudC50YXJnZXQgPT09IGVtYWlsO1xuLy8gXHRjb25zdCBpc1Bhc3N3b3JkID0gZXZlbnQudGFyZ2V0ID09PSBwYXNzd29yZDtcbi8vIFx0Y29uc3QgaGFuZGxlVmFsaWRhdGUgPSAoeyB0YXJnZXQ6IGFueSwgdmFsaWRhdGU6IHZvaWQsIG1lc3NhZ2U6IGFueSB9KSA9PiB7XG4vLyBcdFx0aWYodmFsaWRhdGUpIHtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gJyc7XG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4vLyBcdFx0fSBlbHNlIHtcbi8vIFx0XHRcdGlmKCF0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm47XG4vLyBcdFx0XHQvLyBjb25zdCBpZCA9IHRhcmdldC5pZCB8fCB0YXJnZXQubmFtZTtcbi8vIFx0XHRcdC8vIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnZXJyb3ItJyArIGlkKTtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gbWVzc2FnZTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4vLyBcdFx0fVxuLy8gXHR9O1xuLy8gXHRpZihpc1Bhc3N3b3JkKSB7XG4vLyBcdFx0aGFuZGxlVmFsaWRhdGUoe1xuLy8gXHRcdFx0dGFyZ2V0OiBwYXNzd29yZCxcbi8vIFx0XHRcdHZhbGlkYXRlOiBpc1Bhc3N3b3JkICYmICEodmFsaWRpdHkuaXNMZW5ndGgocGFzc3dvcmQudmFsdWUsIDgpKSxcbi8vIFx0XHRcdG1lc3NhZ2U6ICfruYTrsIDrsojtmLjrpbwg65iR67CU66GcIOyeheugpe2VtOudvC4nXG4vLyBcdFx0fSk7XG4vLyBcdH1cbi8vIH0pO1xuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50ID0+IHt9LCB0cnVlKTsgLy8gYmx1ciBpcyBub3QgYnViYmxlXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0pO1xuLy8gY29uc3QgZXJyb3JIZWxwZXIgPSAoKSA9PiB7XG4vLyB9O1xuLy8gdmFyIGhhc0Vycm9yID0gZnVuY3Rpb24oZmllbGQpIHtcbi8vIFx0aWYgKGZpZWxkLmRpc2FibGVkIHx8IGZpZWxkLnR5cGUgPT09ICdmaWxlJyB8fCBmaWVsZC50eXBlID09PSAncmVzZXQnIHx8IGZpZWxkLnR5cGUgPT09ICdzdWJtaXQnIHx8IGZpZWxkLnR5cGUgPT09ICdidXR0b24nKSByZXR1cm47XG4vLyBcdHZhciB2YWxpZGl0eSA9IGZpZWxkLnZhbGlkaXR5O1xuLy8gXHRpZiAodmFsaWRpdHkudmFsaWQpIHJldHVybjtcbi8vIFx0aWYgKHZhbGlkaXR5LnZhbHVlTWlzc2luZykgcmV0dXJuICdQbGVhc2UgZmlsbCBvdXQgdGhpcyBmaWVsZC4nO1xuLy8gXHRpZiAodmFsaWRpdHkudHlwZU1pc21hdGNoKSByZXR1cm4gJ1BsZWFzZSB1c2UgdGhlIGNvcnJlY3QgaW5wdXQgdHlwZS4nO1xuLy8gXHRpZiAodmFsaWRpdHkudG9vU2hvcnQpIHJldHVybiAnUGxlYXNlIGxlbmd0aGVuIHRoaXMgdGV4dC4nO1xuLy8gXHRpZiAodmFsaWRpdHkudG9vTG9uZykgcmV0dXJuICdQbGVhc2Ugc2hvcnRlbiB0aGlzIHRleHQuJztcbi8vIFx0aWYgKHZhbGlkaXR5LmJhZElucHV0KSByZXR1cm4gJ1BsZWFzZSBlbnRlciBhIG51bWJlci4nO1xuLy8gXHRpZiAodmFsaWRpdHkuc3RlcE1pc21hdGNoKSByZXR1cm4gJ1BsZWFzZSBzZWxlY3QgYSB2YWxpZCB2YWx1ZS4nO1xuLy8gXHRpZiAodmFsaWRpdHkucmFuZ2VPdmVyZmxvdykgcmV0dXJuICdQbGVhc2Ugc2VsZWN0IGEgc21hbGxlciB2YWx1ZS4nO1xuLy8gXHRpZiAodmFsaWRpdHkucmFuZ2VVbmRlcmZsb3cpIHJldHVybiAnUGxlYXNlIHNlbGVjdCBhIGxhcmdlciB2YWx1ZS4nO1xuLy8gXHRpZiAodmFsaWRpdHkucGF0dGVybk1pc21hdGNoKSByZXR1cm4gJ1BsZWFzZSBtYXRjaCB0aGUgcmVxdWVzdGVkIGZvcm1hdC4nO1xuLy8gXHRyZXR1cm4gJ1RoZSB2YWx1ZSB5b3UgZW50ZXJlZCBmb3IgdGhpcyBmaWVsZCBpcyBpbnZhbGlkLic7XG4vLyB9O1xuLy8gY29uc3QgdWlEYXRhID0gW1xuLy8gICB7IGxhYmVsOiAn7IOB7ZKIIOyDgeyEuO2OmOydtOyngCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAuMDEtMDEnLCBocmVmOiAnI3Byb2R1Y3QnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuLy8gICB7IGxhYmVsOiAn7IOB7ZKIIOy5tO2KuCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2NhcnQnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuLy8gICB7IGxhYmVsOiAn66Gc6re47J24JywgZGVzY3JpcHRpb24gOicnLCBkYXRlIDonMjAyMC0wMS0wMScsIGhyZWY6ICcjbG9naW4nLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuLy8gICB7IGxhYmVsOiAn67mE67CA67KI7Zi4IOywvuq4sCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2ZvcmdvdCcsIHRhZ3M6IFsn6riw7ZqNJywgJ+uUlOyekOyduCddIH1cbi8vIF1cbi8vIGNvbnN0IGNjYzogYW55ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJy5qcy11aScpO1xuLy8gaWYoY2NjKSB7XG4vLyAgIGNvbnN0IHRlbXAgPSB1aURhdGEubWFwKGl0ZW0gPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xuLy8gICAgIGNvbnN0IHR0dCA9IGl0ZW0udGFncy5tYXAoaSA9PiBgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke2l9PC9zcGFuPmApLmpvaW4oJycpXG4vLyAgICAgY29uc3QgdWlUZW1wbGF0ZSA9IGA8YSBjbGFzcz1cImNhcmRcIiBocmVmPVwiJHtpdGVtLmhyZWZ9XCI+XG4vLyAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJjYXJkLXRodW1ibmFpbFwiIHN0eWxlPVwiZm9udC1mYW1pbHk6J0R1bmtlbFNhbnMnO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtcIj4ke2l0ZW0ubGFiZWx9PC9maWd1cmU+XG4vLyAgICAgICAgIDxoMyBjbGFzcz1cImNhcmQtdGl0bGVcIj4ke2l0ZW0ubGFiZWx9PC9oMz5cbi8vICAgICAgICAgPHRpbWUgY2xhc3M9XCJjYXJkLWRhdGVcIj4ke2l0ZW0uZGF0ZX08dGltZT5cbi8vICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtdGFnc1wiIHJvbGU9XCJncm91cFwiPlxuLy8gICAgICAgICAgICR7dHR0fVxuLy8gICAgICAgICA8L2Rpdj5cbi8vICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhcmQtbW9yZSBpY29uLWJ1dHRvblwiPjxpIGNsYXNzPVwiaWNvbi1tb3JlXCI+PC9pPjwvYnV0dG9uPlxuLy8gICAgICAgPC9hPmBcbi8vICAgICByZXR1cm4gdWlUZW1wbGF0ZTtcbi8vICAgfSkuam9pbignJylcbi8vICAgY29uc29sZS5sb2codGVtcCk7XG4vLyAgIGNjYy5pbm5lckhUTUwgPSB0ZW1wO1xuLy8gfVxuLy8gdmFyIGkgPSAwO1xuLy8gdmFyIGltYWdlcyA9IFsnY292ZXIxLmpwZycsJ2NvdmVyMi5qcGcnXTtcbi8vIHZhciBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY292ZXJfaW1hZ2UnKTtcbi8vIC8vIGltYWdlLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoL2ltZy9jb3ZlcjEuanBnKScpO1xuLy8gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbi8vIFx0aW1hZ2VFbGVtZW50LmZhZGVPdXQoMTAwMCwgKCkgPT4ge1xuLy8gXHRcdGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKCR7aW1hZ2VzW2krK119KWApO1xuLy8gXHRcdGltYWdlRWxlbWVudC5mYWRlSW4oMTAwMCk7XG4vLyBcdH0pO1xuLy8gXHRpZihpID09PSBpbWFnZXMubGVuZ3RoKSBpID0gMDtcbi8vIH0sIDUwMDApO1xuZnVuY3Rpb24gY29weVRvQ2xpcGJvYXJkKHRleHQpIHtcbiAgICB2YXIgdGV4dGFyZWFFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRhcmVhRWxlbWVudCk7XG4gICAgdGV4dGFyZWFFbGVtZW50LnZhbHVlID0gdGV4dDtcbiAgICB0ZXh0YXJlYUVsZW1lbnQuc2VsZWN0KCk7IC8vIGZvY3VzP+uPhCDtlbTslbztlag/XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRleHRhcmVhRWxlbWVudCk7XG4gICAgYWxlcnQoJ+uzteyCrCDsmYTro4whIOydtOygnCBcIuu2meyXrOuEo+q4sFwiIO2VtOyjvOyEuOyalC7wn5iJJyk7XG4gICAgLy8gdHJ5IHtcbiAgICAvLyAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgLy8gfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyB9IGZpbmFsbHkge1xuICAgIC8vICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZXh0YXJlYUVsZW1lbnQpO1xuICAgIC8vIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3haUVVGWkxFTkJRVUU3T3pzN08wRkJSVm9zYjBOQlFXbERPMEZCUTJwRExHZEZRVUUwUXp0QlFVTTFReXd5UTBGQk5FVTdRVUZETlVVc2RVTkJRVEpETzBGQlF6TkRMSGxFUVVGcFJUdEJRVU5xUlN4eFJFRkJkMFE3UVVGRGVFUXNiMFZCUVRaRE8wRkJRemRETEc5RlFVRTJRenRCUVVVM1F5d3JSRUZCTUVRN1FVRkZNVVFzTkVKQlFUUkNPMEZCUlRWQ0xEUkRRVUUwUXp0QlFVTTFReXgxUWtGQmRVSTdRVUZEZGtJc1RVRkJUVHRCUVVWT0xEQkRRVUV3UXp0QlFVTXhReXcwUTBGQk5FTTdRVUZETlVNc1owVkJRV2RGTzBGQlEyaEZMRWxCUVVrN1FVRkZTaXhyUWtGQmEwSTdRVUZGYkVJc09FWkJRVGhHTzBGQlJUbEdMSGxFUVVGNVJEdEJRVU42UkN4MVEwRkJkVU03UVVGRmRrTXNkMFJCUVhkRU8wRkJSWGhFTERKQ1FVRXlRanRCUVVNelFpd3JSRUZCSzBRN1FVRkRMMFFzZFVSQlFYVkVPMEZCUTNaRUxIVkNRVUYxUWp0QlFVTjJRaXd3UkVGQk1FUTdRVUZETVVRc1RVRkJUVHRCUVVOT0xFMUJRVTA3UVVGRlRpeEpRVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGQk8wRkJSVFZDTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eGpRVUZqTEVWQlFVVXNWVUZCUVN4TFFVRkxPMGxCUXpORExFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTnVRaXhMUVVGTExFTkJRVU1zVjBGQlZ5eEhRVUZITEdkRVFVRm5SQ3hEUVVGQk8wdEJRM0pGTzBsQlEwUXNPRU5CUVRoRE8wRkJRMmhFTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUlVZc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGVExFdEJRVXM3U1VGRE9VTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlFUdEJRVU0zUWl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOR0xIVkRRVUYxUXp0QlFVTjJReXdyUWtGQkswSTdRVUZETDBJc05FSkJRVFJDTzBGQlJUVkNMRFJDUVVFMFFqdEJRVU0xUWl4cFEwRkJhVU03UVVGRGFrTXNhVVJCUVdsRU8wRkJRMnBFTEUxQlFVMDdRVUZEVGl4NVEwRkJlVU03UVVGRGVrTXNTVUZCU1R0QlFVVktMRWxCUVUwc1dVRkJXU3hIUVVGSE8wbEJRMjVDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRVHRKUVVOb1JTeEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkJPMGxCUXpORkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VVVGQlJTeFBRVUZOTzBsQlJUbERMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4N1VVRkRPVUlzVDBGQlFTeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlEyaERMRmxCUVZrc1NVRkJTU3haUVVGWkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRSUVVNeFJDeERRVUZETEVOQlFVTTdTVUZHUml4RFFVVkZMRU5CUTBnc1EwRkJRVHRCUVVOSUxFTkJRVU1zUTBGQlFUdEJRVVZFTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFRRVUZUTEVWQlFVVTdTVUZEYWtNc1NVRkJUU3hqUVVGakxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRKUVVONlJTeEpRVUZKTEVOQlFVTXNZMEZCWXp0UlFVRkZMRTlCUVUwN1NVRkZNMElzWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGQk8wRkJRM2hETEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUlVZc1NVRkJUU3hUUVVGVExFZEJRVWM3U1VGRGFFSXNaMEpCUVZNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF6czdVVUZEWml4SlFVRk5MRWxCUVVrc1IwRkJSeXh6UWtGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRSUVVOd1F5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlFUdFJRVU0zUWl4bFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVUU3VVVGRmFrUXNaVUZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxHZENRVUZuUWl4RlFVRkZMR05CUVdNc1JVRkJSU3hoUVVGaExFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRVHRSUVVNelJpeGxRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVFN1VVRkZlRVFzWlVGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRU5CUVVFN1VVRkRjRVFzWlVGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkJPMUZCUTJZc1pVRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGQk8xRkJRM1JETEdWQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzV1VGQldTeEZRVUZGTEVOQlFVTXNRMEZCUVR0UlFVVjJReXhsUVVGTExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVRTdVVUZEZGtJc1pVRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEdGQlFXRXNSVUZCUlN4aFFVRmhMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNNa0pCUVRKQ0xFVkJRVVVzUTBGQlF5eERRVUZCTzFGQlJXaEhMR1ZCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlFUdFJRVU5hTEdWQlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRVHRSUVVOb1FpeGxRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVFN1VVRkZaQ3hoUVVGUkxFVkJRVVVzUTBGQlFUdFJRVU5XTERCQ1FVRmpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzFGQlF6RkNMSE5DUVVGUkxFVkJRVVVzUTBGQlFUdFJRVVZXTEdOQlFXTXNSVUZCUlN4RFFVRkJPMUZCUjJoQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVcxQ0xHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkZOMFVzU1VGQlJ5eFRRVUZUTEVWQlFVVTdXVUZEV2l4VFFVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRlZCUVZNc1EwRkJRenRuUWtGREwwTXNTVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRPMmRDUVVWcVF5dzRSRUZCT0VRN1owSkJRemxFTERKQ1FVRXlRanRuUWtGRE0wSXNTVUZCU1N4SFFVRkhMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNTVUZCU1N4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVU3YjBKQlEzWkRMRU5CUVVNc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dHBRa0ZEY0VJN1dVRkRTQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVVZJTEhOQ1FVRnpRanRaUVVOMFFpeHpSRUZCYzBRN1dVRkRkRVFzYVVSQlFXbEVPMWxCUTJwRUxHdENRVUZyUWp0WlFVTnNRaXh2UTBGQmIwTTdXVUZEY0VNc1owTkJRV2RETzFsQlEyaERMRTlCUVU4N1dVRkRVQ3hOUVVGTk8xbEJSVTRzTUVKQlFUQkNPMWxCUXpGQ0xFbEJRVWtzWTBGQldTeEhRVUZITEZOQlFWTXNRMEZCUXl4TFFVRkxMRWxCUVVrc1JVRkJSU3hEUVVGQk8xbEJRM2hETEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVXl4RFFVRkRPMmRDUVVNMVF5eEpRVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJNRUlzUTBGQlFUdG5Ra0ZETTBNc1NVRkJSeXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN2IwSkJRVVVzWTBGQldTeEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVFN08yOUNRVU14UkN4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExHTkJRVmtzUTBGQlF6dG5Ra0ZEYWtNc05FUkJRVFJFTzJkQ1FVVTFSQ3gzUWtGQmQwSTdaMEpCUTNoQ0xIZERRVUYzUXp0blFrRkRlRU1zWjBOQlFXZERPMmRDUVVOb1F5eFhRVUZYTzJkQ1FVTllMR2REUVVGblF6dG5Ra0ZEYUVNc05rUkJRVFpFTzJkQ1FVTTNSQ3hKUVVGSk8xbEJRMDRzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEU2p0UlFVZEVMRWxCUVUwc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNVMEZCVXl4RFFVRkRMRU5CUVVFN1VVRkRMMFFzU1VGQlRTeFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXhuUWtGQlowSXNRMEZCUXl4RFFVRkJPMUZCUTNaRkxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlFTeExRVUZMT3p0WlFVTjJReXhKUVVGSkxFTkJRVU1zVVVGQlVUdG5Ra0ZCUlN4UFFVRk5PMWxCUlhKQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVFN1dVRkZkRUlzSzBSQlFTdEVPMWxCUXk5RUxFbEJRVWtzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1UwRkJVeXhGUVVGRk8yZENRVU16UXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0blFrRkRiRU1zVFVGQlFTeFRRVUZUTERCRFFVRkZMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeEZRVUZETzJGQlEzSkRPMmxDUVVGTk8yZENRVU5NTEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzJkQ1FVTnlReXhOUVVGQkxGTkJRVk1zTUVOQlFVVXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFVkJRVU03WVVGRGVFTTdXVUZGUkN4SlFVRkhMRk5CUVZNc1JVRkJSVHRoUVVOaU8xRkJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZGUml4TlFVRkJMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc01FTkJRVVVzWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRM0pGTEdWQlFXVXNRMEZCUXl3MFEwRkJORU1zUTBGQlF5eERRVUZCTzFGQlF5OUVMRU5CUVVNc1JVRkJRenRSUVVWR0xEUkRRVUUwUXp0UlFVTTFReXhuUkVGQlowUTdVVUZEYUVRc05FUkJRVFJFTzFGQlF6VkVMREpEUVVFeVF6dFJRVU16UXl4clJFRkJhMFE3VVVGRGJFUXNlVUpCUVhsQ08xRkJSWHBDTEhORFFVRnpRenRSUVVOMFF5dzRRMEZCT0VNN1VVRkZPVU1zWjBSQlFXZEVPMUZCUTJoRUxEaEZRVUU0UlR0UlFVVTVSU3c0UWtGQk9FSTdVVUZGT1VJc2JVVkJRVzFGTzFGQlEyNUZMRTFCUVUwN1VVRkRUaXg1UTBGQmVVTTdVVUZEZWtNc2FVSkJRV2xDTzFGQlEycENMRFJEUVVFMFF6dFJRVU0xUXl4VlFVRlZPMUZCUTFZc09FTkJRVGhETzFGQlF6bERMRTFCUVUwN1VVRkZUaXh4UTBGQmNVTTdVVUZEY2tNc1NVRkJTVHRSUVVWS0xESkVRVUV5UkR0UlFVTXpSQ3h0UkVGQmJVUTdVVUZEYmtRc2EwTkJRV3RETzFGQlEyeERMRXRCUVVzN1VVRkZUQ3gxUWtGQmRVSTdVVUZGZGtJc1MwRkJTenRSUVVOTUxFbEJRVTBzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0UlFVTjJSQ3hKUVVGTkxFbEJRVWtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVRTdVVUZEZGtRc1NVRkJUU3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRVHRSUVVOeVJDeEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1MwRkJTeXhGUVVGRk8xbEJRM3BDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVTdaMEpCUXpkQ0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8yZENRVU5xUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0blFrRkRjRU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3V1VGRE4wSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1dVRkRSaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRk8yZENRVU0zUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0blFrRkRjRU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3WjBKQlEycERMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMWxCUTJoRExFTkJRVU1zUTBGQlF5eERRVUZCTzFOQlEwZzdVVUZGUkN4WlFVRlpMRVZCUVVVc1EwRkJRVHRKUVVOb1FpeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTktMRU5CUVVNc1EwRkJRVHRCUVVWRUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVRTdRVUZEYUVRc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlFUdEJRVU55UkN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdRVUZGZUVRc1UwRkJVeXhwUWtGQmFVSTdPMGxCUTNoQ0xFbEJRVTBzWlVGQlpTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3U1VGRGVrUXNTVUZCVFN4TFFVRkxMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVRTdTVUZETjBJc1NVRkJUU3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzBsQlJYQkVMRWxCUVVrc1QwRkJUeXhGUVVGRk8xRkJRMWdzVFVGQlFTeGxRVUZsTERCRFFVRkZMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeEZRVUZETzB0QlF6TkRPMU5CUVUwN1VVRkRUQ3hOUVVGQkxHVkJRV1VzTUVOQlFVVXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFVkJRVU03UzBGRE9VTTdRVUZEU0N4RFFVRkRPMEZCUlVRc1UwRkJVeXhqUVVGak96dEpRVU55UWl4SlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVdNc1owSkJRV2RDTEVOQlFVTXNRMEZCUVR0SlFVVTVSU3hOUVVGQkxHRkJRV0VzTUVOQlFVVXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUenRSUVVNMVFpeFBRVUZCTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVTdPMWxCUTJoRExFbEJRVTBzWlVGQlpTeFRRVUZITEU5QlFVOHNRMEZCUXl4VlFVRlZMREJEUVVGRkxHRkJRV0VzUTBGQll5eFBRVUZQTEVOQlFVTXNRMEZCUVR0WlFVTXZSU3hKUVVGTkxHRkJRV0VzVTBGQlJ5eGxRVUZsTERCRFFVRkZMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVU16UkN4SlFVRk5MRWxCUVVrc1IwRkJSeXhoUVVGaExFdEJRVXNzVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlFUdFpRVVV2UkN4TlFVRkJMR1ZCUVdVc01FTkJRVVVzV1VGQldTeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVNN1VVRkROME1zUTBGQlF5eERRVUZETzBsQlRrWXNRMEZOUlN4RlFVTklPMEZCUTBnc1EwRkJRenRCUVVWRUxGTkJRVk1zWTBGQll6czdTVUZEY2tJc1NVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxHZENRVUZuUWl4RFFVRkRMRU5CUVVFN1NVRkZMMFVzVFVGQlFTeHBRa0ZCYVVJc01FTkJRVVVzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRVZCUVVNN1NVRkRhRVFzV1VGQlFTeHBRa0ZCYVVJc01FTkJRVVVzYTBKQlFXdENMREJEUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkRPMGxCUlhKRkxHTkJRV01zUlVGQlJTeERRVUZCTzBsQlEyaENMR2xDUVVGcFFpeEZRVUZGTEVOQlFVRTdRVUZEY2tJc1EwRkJRenRCUVVWRUxGTkJRVk1zWTBGQll6dEpRVU5tTEVsQlFVRXNNa0pCUVVrc1EwRkJiMEk3U1VGRGRFSXNTVUZCUVN4dlFrRkJTU3hEUVVGaE8wbEJRM3BDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRmRCUVZFc1NVRkJTU3hMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVFN1NVRkZkRVVzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4RlFVRkZMRU5CUVVFN1NVRkRia0lzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3UVVGREwwSXNRMEZCUXp0QlFVVkVMRk5CUVZNc2FVSkJRV2xDT3p0SlFVTjRRaXhKUVVGTkxHVkJRV1VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRmxCUVZrc1EwRkJReXhEUVVGQk8wbEJRM3BGTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zYzBKQlFYTkNMRU5CUVVNc1EwRkJRVHRKUVVNdlJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRU5CUVVNc1pVRkJaVHRSUVVGRkxFOUJRVTA3U1VGRE5VTXNTVUZCVFN4SlFVRkpMRWRCUVVjc1QwRkJRU3hYUVVGWExEQkRRVUZGTEZkQlFWY3NXVUZCU1N4WFFVRlhMREJEUVVGRkxGTkJRVk1zUTBGQlFTeERRVUZCTzBsQlF5OUVMRWxCUVVrc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlFUdEpRVU0xUXl4SlFVRk5MR05CUVdNc1IwRkJSeXhIUVVGSExFTkJRVUU3U1VGRE1VSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVFN1NVRkRiRVFzU1VGQlRTeE5RVUZOTEVkQlFVMHNTMEZCU3l4alFVRlhMRU5CUVVFN1NVRkRiRU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHRKUVVWdVFpeGxRVUZsTEVOQlFVTXNVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJRVHRCUVVOd1F5eERRVUZETzBGQlJVUXNlVUpCUVhsQ08wRkJRM3BDTERKRVFVRXlSRHRCUVVNelJDeHpRMEZCYzBNN1FVRkRkRU1zZDBWQlFYZEZPMEZCUTNoRkxHZERRVUZuUXp0QlFVVm9ReXhuUkVGQlowUTdRVUZEYUVRc05rTkJRVFpETzBGQlF6ZERMRFpFUVVFMlJEdEJRVU0zUkN4blJFRkJaMFE3UVVGRGFFUXNUMEZCVHp0QlFVTlFMRWxCUVVrN1FVRkZTaXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVTdTVUZETlVNc1kwRkJZenRKUVVOa0xHTkJRV01zUlVGQlJTeERRVUZCTzBsQlJXaENMR0ZCUVUwc1JVRkJSU3hEUVVGQk8wbEJRMUlzYjBKQlFXRXNSVUZCUlN4RFFVRkJPMGxCUTJZc2VVSkJRVmNzUlVGQlJTeERRVUZCTzBsQlEySXNjVUpCUVhGQ08wbEJSWEpDTERaQ1FVRTJRanRKUVVNM1FpeGxRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxHMUNRVUZ0UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlFUdEpRVVV2UkN4VFFVRlRMRVZCUVVVc1EwRkJRVHRKUVVWWUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGFFTXNjVVpCUVhGR08xRkJRM0pHTEdWQlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSU3hoUVVGaExFVkJRVVVzV1VGQldTeEZRVUZGTEZGQlFWRXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGQk8wbEJRemRGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTBZc1NVRkJUU3hqUVVGakxFZEJRVWM3VVVGRGNrSXNTVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eFBRVUZQTEVOQlFVTXNRMEZCUVR0UlFVTjZSQ3hKUVVGTkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMSEZDUVVGeFFpeERRVUZETEVOQlFVRTdVVUZET1VVc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWYzdXVUZCUlN4UFFVRk5PMUZCUldwRExFbEJRVTBzWVVGQllTeEhRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eE5RVUZITEVOQlFVRTdVVUZEYWtjc05rZEJRVFpITzFGQlF6ZEhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEdGQlFXRXNRMEZCUVR0SlFVTjZReXhEUVVGRExFTkJRVUU3U1VGRFJDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEdOQlFXTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVONlJDeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVVkdMR2xFUVVGcFJEdEJRVU5xUkN3MFJFRkJORVE3UVVGRE5VUXNPRVJCUVRoRU8wRkJRemxFTEN0RFFVRXJRenRCUVVNdlF5dzBRMEZCTkVNN1FVRkROVU1zT0VSQlFUaEVPMEZCUXpsRUxEWkZRVUUyUlR0QlFVTTNSU3hMUVVGTE8wRkJSVXdzT0VOQlFUaERPMEZCUXpsRExDdEVRVUVyUkR0QlFVTXZSQ3cyUTBGQk5rTTdRVUZETjBNc1MwRkJTenRCUVVOTUxHZENRVUZuUWp0QlFVTm9RaXhMUVVGTE8wRkJSVXdzWjBKQlFXZENPMEZCUTJoQ0xIZEVRVUYzUkR0QlFVTjRSQ3gxUkVGQmRVUTdRVUZEZGtRc1MwRkJTenRCUVVOTUxIVkNRVUYxUWp0QlFVTjJRaXh6UTBGQmMwTTdRVUZEZEVNc05FSkJRVFJDTzBGQlF6VkNMRTlCUVU4N1FVRkZVQ3hqUVVGak8wRkJRMlFzZVVSQlFYbEVPMEZCUTNwRUxHbERRVUZwUXp0QlFVTnFReXhuUkVGQlowUTdRVUZEYUVRc2QwVkJRWGRGTzBGQlEzaEZMR2xEUVVGcFF6dEJRVU5xUXl4eFEwRkJjVU03UVVGRGNrTXNhVU5CUVdsRE8wRkJRMnBETEd0RFFVRnJRenRCUVVOc1F5eHBRMEZCYVVNN1FVRkRha01zSzBKQlFTdENPMEZCUXk5Q0xITkVRVUZ6UkR0QlFVTjBSQ3dyUkVGQkswUTdRVUZETDBRc09FWkJRVGhHTzBGQlF6bEdMRFJFUVVFMFJEdEJRVU0xUkN3eVJFRkJNa1E3UVVGRE0wUXNaVUZCWlR0QlFVTm1MRkZCUVZFN1FVRkRVaXhMUVVGTE8wRkJRMHdzVFVGQlRUdEJRVU5PTEhGQ1FVRnhRanRCUVVOeVFpeDFRa0ZCZFVJN1FVRkRka0lzWjBOQlFXZERPMEZCUTJoRExEWkNRVUUyUWp0QlFVTTNRaXh2UkVGQmIwUTdRVUZEY0VRc05rUkJRVFpFTzBGQlF6ZEVMRFJHUVVFMFJqdEJRVU0xUml3d1JFRkJNRVE3UVVGRE1VUXNlVVJCUVhsRU8wRkJRM3BFTEdGQlFXRTdRVUZEWWl4UFFVRlBPMEZCUTFBc1YwRkJWenRCUVVWWUxHZEVRVUZuUkR0QlFVTm9SQ3h6UlVGQmMwVTdRVUZEZEVVc1owVkJRV2RGTzBGQlEyaEZMR2xFUVVGcFJEdEJRVVZxUkN3clEwRkJLME03UVVGREwwTXNkVUpCUVhWQ08wRkJRM1pDTEhsQ1FVRjVRanRCUVVWNlFpdzRRMEZCT0VNN1FVRkRPVU1zYVVSQlFXbEVPMEZCUldwRUxDdEZRVUVyUlR0QlFVTXZSU3h0UWtGQmJVSTdRVUZEYmtJc2RVUkJRWFZFTzBGQlEzWkVMQ3REUVVFclF6dEJRVU12UXl4MVJFRkJkVVE3UVVGRGRrUXNZVUZCWVR0QlFVTmlMRFJEUVVFMFF6dEJRVU0xUXl3MlEwRkJOa003UVVGRE4wTXNaMFZCUVdkRk8wRkJRMmhGTEc5RVFVRnZSRHRCUVVOd1JDeHZSRUZCYjBRN1FVRkRjRVFzZDBSQlFYZEVPMEZCUTNoRUxFMUJRVTA3UVVGRFRpeE5RVUZOTzBGQlJVNHNiMEpCUVc5Q08wRkJRM0JDTEhGQ1FVRnhRanRCUVVOeVFpeDFRa0ZCZFVJN1FVRkRka0lzYzBWQlFYTkZPMEZCUTNSRkxHZERRVUZuUXp0QlFVTm9ReXhSUVVGUk8wRkJRMUlzUzBGQlN6dEJRVVZNTEUxQlFVMDdRVUZGVGl3NFJVRkJPRVU3UVVGRE9VVXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNSVUZCZEVJc1EwRkJjMElzUTBGQlF5eERRVUZCTzBGQlJYQkZMRGhDUVVFNFFqdEJRVU01UWl4TFFVRkxPMEZCUlV3c2JVTkJRVzFETzBGQlEyNURMSGRKUVVGM1NUdEJRVVY0U1N4clEwRkJhME03UVVGRGJFTXNLMEpCUVN0Q08wRkJSUzlDTEc5RlFVRnZSVHRCUVVOd1JTd3lSVUZCTWtVN1FVRkRNMFVzSzBSQlFTdEVPMEZCUXk5RUxEWkVRVUUyUkR0QlFVTTNSQ3d5UkVGQk1rUTdRVUZETTBRc2NVVkJRWEZGTzBGQlEzSkZMSGRGUVVGM1JUdEJRVU40UlN4M1JVRkJkMFU3UVVGRGVFVXNPRVZCUVRoRk8wRkJSVGxGTERoRVFVRTRSRHRCUVVNNVJDeExRVUZMTzBGQlJVd3NiVUpCUVcxQ08wRkJRMjVDTEhWSFFVRjFSenRCUVVOMlJ5eHBSMEZCYVVjN1FVRkRha2NzWjBkQlFXZEhPMEZCUTJoSExHOUhRVUZ2Unp0QlFVTndSeXhKUVVGSk8wRkJRMG9zYTBWQlFXdEZPMEZCUTJ4RkxGbEJRVms3UVVGRFdpeHpRMEZCYzBNN1FVRkRkRU1zZVVKQlFYbENPMEZCUTNwQ0xDdEZRVUVyUlR0QlFVTXZSU3dyUkVGQkswUTdRVUZETDBRc2VVcEJRWGxLTzBGQlEzcEtMRzlFUVVGdlJEdEJRVU53UkN4eFJFRkJjVVE3UVVGRGNrUXNLME5CUVN0RE8wRkJReTlETEcxQ1FVRnRRanRCUVVOdVFpeHBRa0ZCYVVJN1FVRkRha0lzYlVaQlFXMUdPMEZCUTI1R0xHTkJRV003UVVGRFpDeDVRa0ZCZVVJN1FVRkRla0lzWjBKQlFXZENPMEZCUTJoQ0xIVkNRVUYxUWp0QlFVTjJRaXd3UWtGQk1FSTdRVUZETVVJc1NVRkJTVHRCUVVWS0xHRkJRV0U3UVVGRFlpdzBRMEZCTkVNN1FVRkROVU1zTmtSQlFUWkVPMEZCUXpkRUxEUkVRVUUwUkR0QlFVTTFSQ3d3UWtGQk1FSTdRVUZETVVJc2MwTkJRWE5ETzBGQlEzUkRMR2xGUVVGcFJUdEJRVU5xUlN3clFrRkJLMEk3UVVGREwwSXNUMEZCVHp0QlFVTlFMR3REUVVGclF6dEJRVU5zUXl4WlFVRlpPMEZCUlZvc1UwRkJVeXhsUVVGbExFTkJRVU1zU1VGQlNUdEpRVU16UWl4SlFVRk5MR1ZCUVdVc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkJPMGxCUXpGRUxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGQk8wbEJSVEZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGQk8wbEJRelZDTEdWQlFXVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRU3hEUVVGRExHVkJRV1U3U1VGRGVFTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlFUdEpRVU0xUWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUVR0SlFVVXhReXhMUVVGTExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkJRVHRKUVVOcVF5eFJRVUZSTzBsQlExSXNhME5CUVd0RE8wbEJRMnhETEc5Q1FVRnZRanRKUVVOd1FpeGpRVUZqTzBsQlEyUXNaMFJCUVdkRU8wbEJRMmhFTEVsQlFVazdRVUZEVGl4RFFVRkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyDruYTrj5nquLAg7ZWo7IiY64qUIOumrO2EtOydhCDtlbTslbztlZzri6QuIO2UhOuhnOuvuOyKpOulvCDrsJjtmZguXG52YXIgcm91dGVQYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhZ2UgPSBoYXNoID8gXCIvdmlld3MvXCIgKyBoYXNoLnN1YnN0cmluZygxKSArIFwiLmh0bWxcIiA6ICcvdmlld3MvZGVzaWduLmh0bWwnO1xuICAgIGNvbnNvbGUubG9nKGhpc3Rvcnkuc3RhdGUpO1xuICAgIHJldHVybiBmZXRjaChwYWdlKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gNDA0IHx8IDUwMFxuICAgICAgICBpZiAocmVzcG9uc2Uub2spXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChodG1sKSB7XG4gICAgICAgIHZhciB2aWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXcnKTtcbiAgICAgICAgaWYgKCF2aWV3KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2aWV3LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgLy8gd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJ2RkJywgaGFzaC5zdWJzdHJpbmcoMSkpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGNvbnNvbGUud2Fybigncm91dGVyOiAnLCBlcnJvcik7IH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJvdXRlUGFnZTtcbi8vIGhhc2gg66eQ6rOgIO2BtOumre2VmOuKlCDsiJzqsITsl5Ag6rCS7J2EIOyVjOyVhOyVvCDtlaguIGRhdGEgYXR0ciBvciBoYXNoXG4vLyBjb25zdCBSb3V0ZXIgPSAobmFtZSwgcm91dGVzKSA9PiB7XG4vLyBcdHJldHVybiB7IG5hbWU6IG5hbWUsIHJvdXRlczogcm91dGVzIH07XG4vLyB9O1xuLy8gdmFyIGFjdGl2ZVJvdXRlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2hyZWZdJykpO1xuLy8gYWN0aXZlUm91dGVzLmZvckVhY2gocm91dGUgPT4gcm91dGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuYXZpZ2F0ZSkpO1xuLy8gY29uc3QgbXlGaXJzdFJvdXRlciA9IG5ldyBSb3V0ZXIoJ215Rmlyc3RSb3V0ZXInLCBbXG4vLyBcdHsgcGF0aDogJy8nLCBuYW1lOiAnaW5kZXgnIH0sXG4vLyBdKTtcbi8vIGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XG4vLyBcdGNvbnN0IHJvdXRlID0gZmluZEN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1swXS52YWx1ZTtcbi8vIFx0Y29uc3Qgcm91dGVJbmZvID0gbXlGaXJzdFJvdXRlci5yb3V0ZXMuZmluZChyID0+IHIucGF0aCA9PT0gcm91dGUpO1xuLy8gXHRpZighcm91dGVJbmZvKSB7XG4vLyBcdFx0Ly93aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCAnZXJyb3InKTtcbi8vIFx0XHR2aWV3LmlubmVySFRNTCA9ICdObyByb3V0ZSBleGlzdHMgd2l0aCB0aGlzIHBhdGgnO1xuLy8gXHR9IGVsc2Uge1xuLy8gXHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IG5hbWU6ICd0ZXN0ZXInIH0sICcnLCByb3V0ZUluZm8ucGF0aCk7XG4vLyBcdFx0ZmV0Y2goYC92aWV3cy8ke3JvdXRlSW5mby5uYW1lfS5odG1sYClcbi8vIFx0XHRcdC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuLy8gXHRcdFx0LnRoZW4oaHRtbCA9PiB2aWV3LmlubmVySFRNTCA9IGh0bWwpXG4vLyBcdFx0XHQuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coJ0ZhaWxlZCB0byBmZXRjaCBwYWdlOiAnLCBlcnJvcikpO1xuLy8gXHR9XG4vLyB9O1xuLy8ge1xuLy8gXHRtZXRob2Q6ICdQT1NUJyxcbi8vIFx0Ym9keTogJ3RpdGxlPScgKyBlbmNvZGVVUklDb21wb25lbnQoJ015IGF3ZXNvbWUgbmV3IGFydGljbGUnKSArICcmYm9keT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdUaGlzIGlzIHRoZSB0ZXh0IG9mIG15IGFydGljbGUnKSxcbi8vIFx0aGVhZGVyOiB7XG4vLyBcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuLy8gXHR9LFxuLy8gXHRyZWZlcnJlcjogJ25vLXJlZmVycmVyJ1xuLy8gfVxuLy8gY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuLy8gY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XG4vLyB2aWV3LmlubmVySFRNTCA9IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoZG9jKTtcbi8vIHJlc3BvbnNlLnRleHQoKSAvLyByZXNwb25zZS5qc29uKClcbi8vIHRvTG93ZXJDYXNlKCkg7ZW07KO86riwXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbi8vIFx0aWYgKGhpc3Rvcnkuc3RhdGUgJiYgaGlzdG9yeS5zdGF0ZS5pZCA9PT0gJ2hvbWVwYWdlJykge1xuLy8gXHRcdFx0Ly8gUmVuZGVyIG5ldyBjb250ZW50IGZvciB0aGUgaG9tcGFnZVxuLy8gXHR9XG4vLyB9LCBmYWxzZSk7XG4vLyByZXBsYWNlU3RhdGVcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2ljbTkxZEdWeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc09FSkJRVGhDTzBGQlF6bENMRWxCUVUwc1UwRkJVeXhIUVVGSE8wbEJRMVlzU1VGQlFTd3lRa0ZCU1N4RFFVRnZRanRKUVVNNVFpeEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVlVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkJRVHRKUVVNM1JTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU14UWl4UFFVRlBMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03VTBGRFppeEpRVUZKTEVOQlFVTXNWVUZCUVN4UlFVRlJPMUZCUTFvc1lVRkJZVHRSUVVOaUxFbEJRVWtzVVVGQlVTeERRVUZETEVWQlFVVTdXVUZCUlN4UFFVRlBMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlFUczdXVUZEYkVNc1QwRkJUeXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMGxCUTNSRExFTkJRVU1zUTBGQlF6dFRRVU5FTEVsQlFVa3NRMEZCUXl4VlFVRkJMRWxCUVVrN1VVRkRVaXhKUVVGTkxFbEJRVWtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8xRkJRelZETEVsQlFVa3NRMEZCUXl4SlFVRkpPMWxCUVVVc1QwRkJUVHRSUVVWcVFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRVHRSUVVOeVFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU4wUWl4NVJVRkJlVVU3U1VGRE0wVXNRMEZCUXl4RFFVRkRPMU5CUTBRc1MwRkJTeXhEUVVGRExGVkJRVUVzUzBGQlN5eEpRVUZKTEU5QlFVRXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZETEVWQlFTOUNMRU5CUVN0Q0xFTkJRVU1zUTBGQlFUdEJRVU53UkN4RFFVRkRMRU5CUVVFN1FVRkZSQ3hyUWtGQlpTeFRRVUZUTEVOQlFVRTdRVUZGZUVJc0swTkJRU3RETzBGQlF5OURMSEZEUVVGeFF6dEJRVU55UXl3d1EwRkJNRU03UVVGRE1VTXNTMEZCU3p0QlFVTk1MSE5GUVVGelJUdEJRVU4wUlN3MFJVRkJORVU3UVVGRE5VVXNjMFJCUVhORU8wRkJRM1JFTEdsRFFVRnBRenRCUVVOcVF5eE5RVUZOTzBGQlEwNHNaME5CUVdkRE8wRkJRMmhETEhkRVFVRjNSRHRCUVVONFJDeDFSVUZCZFVVN1FVRkRka1VzYjBKQlFXOUNPMEZCUTNCQ0xHbEVRVUZwUkR0QlFVTnFSQ3gxUkVGQmRVUTdRVUZEZGtRc1dVRkJXVHRCUVVOYUxITkZRVUZ6UlR0QlFVTjBSU3d5UTBGQk1rTTdRVUZETTBNc09FSkJRVGhDTzBGQlF6bENMREJEUVVFd1F6dEJRVU14UXl4dlJVRkJiMFU3UVVGRGNFVXNTMEZCU3p0QlFVTk1MRXRCUVVzN1FVRkZUQ3hKUVVGSk8wRkJRMG9zYlVKQlFXMUNPMEZCUTI1Q0xHOUpRVUZ2U1R0QlFVTndTU3hoUVVGaE8wRkJRMklzZFVOQlFYVkRPMEZCUTNaRExFMUJRVTA3UVVGRFRpd3lRa0ZCTWtJN1FVRkRNMElzU1VGQlNUdEJRVU5LTEd0RFFVRnJRenRCUVVOc1F5eDVSRUZCZVVRN1FVRkRla1FzSzBSQlFTdEVPMEZCUXk5RUxIRkRRVUZ4UXp0QlFVTnlReXh2UWtGQmIwSTdRVUZGY0VJc2VVUkJRWGxFTzBGQlEzcEVMREpFUVVFeVJEdEJRVU16UkN3eVEwRkJNa003UVVGRE0wTXNTMEZCU3p0QlFVTk1MR0ZCUVdFN1FVRkZZaXhsUVVGbEluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRlcicpO1xuICAgIGlmICghbG9hZGVyRWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBib2R5LmNsYXNzTGlzdC5hZGQoJ2JvZHktbG9jaycpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxvYWRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xuICAgICAgICB9LCAwKTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmRldGVjdEJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEJyb3dzZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJyb3dzZXInKTtcbiAgICBpZiAoIUJyb3dzZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgLy8gY29uc3QgaXNNYWNCcm93c2VyID0gL01hY3xpUG9kfGlQaG9uZXxpUGFkLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG4gICAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodXNlckFnZW50LmluZGV4T2YoJ21zaWUnKSA+IC0xIHx8IHVzZXJBZ2VudC5pbmRleE9mKCd0cmlkZW50JykgPiAtMSkge1xuICAgICAgICBCcm93c2VyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgY29uc29sZS5sb2codXNlckFnZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2Nocm9tZScpICE9PSAtMSkge1xuICAgICAgICBjb25zb2xlLmxvZyh1c2VyQWdlbnQsICftgazroawnKTtcbiAgICB9XG59O1xudmFyIGRvd25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIDxhIGhyZWY9XCIvcGF0aC90by9maWxlXCIgZG93bmxvYWQ+RG93bmxvYWQ8L2E+XG4gICAgLy8gQ3JlYXRlIGEgbmV3IGxpbmtcbiAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsaW5rLmRvd25sb2FkID0gJ2ZpbGUgbmFtZSc7XG4gICAgbGluay5ocmVmID0gJy9wYXRoL3RvL2ZpbGUnO1xuICAgIC8vIEFwcGVuZCB0byB0aGUgZG9jdW1lbnRcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgIC8vIFRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgbGluay5jbGljaygpO1xuICAgIC8vIFJlbW92ZSB0aGUgZWxlbWVudFxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgLy9cbiAgICAvLyBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoeyAnbWVzc2FnZSc6ICdIZWxsbyBXb3JkJyB9KTtcbiAgICAvLyBjb25zdCBibG9iID0gbmV3IEJsb2IoW2RhdGFdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyB9KTtcbiAgICAvLyAvLyBDcmVhdGUgbmV3IFVSTFxuICAgIC8vIGNvbnN0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIC8vIC8vIENyZWF0ZSBhIGxpbmsgYW5kIHRyaWdnZXIgdGhlIGRvd25sb2FkXG4gICAgLy8gLi4uXG4gICAgLy8gLy8gRnJlZSB0aGUgVVJMIGNyZWF0ZWQgYWJvdmVcbiAgICAvLyB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xufTtcbmV4cG9ydHMuYWRqdXN0VG9wUGFkZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1uYXZiYXInKTtcbiAgICBpZiAoIWhlYWRlckVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgZm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRCb2R5TWFyZ2luVG9wKGhlYWRlckVsZW1lbnQpOyB9O1xuICAgIHNldEJvZHlNYXJnaW5Ub3AoaGVhZGVyRWxlbWVudCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7IH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pOyB9KTtcbiAgICAvLyDsiqTsvZTtlIRcbiAgICAvLyDtlajsiJjripQg7J247J6Q66W8IOuwm+uKlCDqsoPsnbQg7KKL64ukLi4uXG4gICAgLy8g7J247ZKL7J20IOyeiOqzoCDrpqzthLTsnbQg7J6I64ukLi4uXG59O1xuZnVuY3Rpb24gc2V0Qm9keU1hcmdpblRvcChoZWFkZXJFbGVtZW50KSB7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBpc0ZpeGVkSGVhZGVyID0gZ2V0Q29tcHV0ZWRTdHlsZShoZWFkZXJFbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcbiAgICBpZiAoaXNGaXhlZEhlYWRlcikge1xuICAgICAgICBib2R5LnN0eWxlLm1hcmdpblRvcCA9IGhlYWRlckVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGJvZHkuc3R5bGUubWFyZ2luVG9wID0gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHOWhaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklteHZZV1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJZU3hSUVVGQkxFMUJRVTBzUjBGQlJ6dEpRVU53UWl4SlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMGxCUXpGRUxFbEJRVWtzUTBGQlF5eGhRVUZoTzFGQlFVVXNUMEZCVFR0SlFVVnNRaXhKUVVGQkxHOUNRVUZKTEVOQlFXRTdTVUZGZWtJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzFGQlF6VkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMGxCUTJwRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwWXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEUxQlFVMHNSVUZCUlR0UlFVTTVRaXhWUVVGVkxFTkJRVU03V1VGRFZDeGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdFpRVU40UXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0UlFVTndReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVWS0xFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNZVUZCWVN4SFFVRkhPMGxCUXpOQ0xFbEJRVTBzWTBGQll5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRGVrVXNTVUZCU1N4RFFVRkRMR05CUVdNN1VVRkJSU3hQUVVGTk8wbEJSVE5DTEhkRlFVRjNSVHRKUVVONFJTeEpRVUZOTEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZCTzBsQlJXNUVMRWxCUVVrc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRM1pGTEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlFUdFJRVU4wUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzB0QlEzWkNPMU5CUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRemRETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZCTzB0QlF6ZENPMEZCUTBnc1EwRkJReXhEUVVGQk8wRkJSVVFzU1VGQlRTeFJRVUZSTEVkQlFVYzdTVUZEWml4blJFRkJaMFE3U1VGRGFFUXNiMEpCUVc5Q08wbEJRM0JDTEVsQlFVMHNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEZWtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFhRVUZYTEVOQlFVTTdTVUZETlVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eGxRVUZsTEVOQlFVTTdTVUZGTlVJc2VVSkJRWGxDTzBsQlEzcENMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUldoRExEQkNRVUV3UWp0SlFVTXhRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZGWWl4eFFrRkJjVUk3U1VGRGNrSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZGYUVNc1JVRkJSVHRKUVVOR0xEUkVRVUUwUkR0SlFVTTFSQ3dyUkVGQkswUTdTVUZETDBRc2IwSkJRVzlDTzBsQlEzQkNMR2RFUVVGblJEdEpRVVZvUkN3MFEwRkJORU03U1VGRE5VTXNUVUZCVFR0SlFVVk9MR2REUVVGblF6dEpRVU5vUXl4dFEwRkJiVU03UVVGRGNrTXNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3huUWtGQlowSXNSMEZCUnp0SlFVTTVRaXhKUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8wbEJRekZFTEVsQlFVa3NRMEZCUXl4aFFVRmhPMUZCUVVVc1QwRkJUVHRKUVVVeFFpeEpRVUZOTEVWQlFVVXNSMEZCUnl4alFVRk5MRTlCUVVFc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRVZCUVM5Q0xFTkJRU3RDTEVOQlFVRTdTVUZGYUVRc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRMMElzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNjVUpCUVhGQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFYcENMRU5CUVhsQ0xFTkJRVU1zUTBGQlFUdEpRVU5zUlN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3h4UWtGQmNVSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJla0lzUTBGQmVVSXNRMEZCUXl4RFFVRkJPMGxCUld4RkxFMUJRVTA3U1VGRFRpeHpRa0ZCYzBJN1NVRkRkRUlzYlVKQlFXMUNPMEZCUTNKQ0xFTkJRVU1zUTBGQlFUdEJRVVZFTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllUdEpRVU0zUWl4SlFVRkJMRzlDUVVGSkxFTkJRV3RDTzBsQlF6bENMRWxCUVUwc1lVRkJZU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExGRkJRVkVzUzBGQlN5eFBRVUZQTEVOQlFVRTdTVUZGTVVVc1NVRkJTU3hoUVVGaExFVkJRVVU3VVVGRGFrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFZEJRVTBzWVVGQllTeERRVUZETEZsQlFWa3NUMEZCU1N4RFFVRkJPMUZCUTNoRUxFOUJRVTA3UzBGRFVEdEpRVU5FTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlFUdEJRVU14UWl4RFFVRkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldEdyYXBoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBncmFwaEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWdyYXBoIC5ncmFwaC1pdGVtJyk7XG4gICAgaWYgKCFncmFwaEl0ZW1zKVxuICAgICAgICByZXR1cm47XG4gICAgZ3JhcGhJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBncmFwaEl0ZW1CYXIgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncmFwaC1pdGVtLWJhcicpO1xuICAgICAgICB2YXIgZ3JhcGhJdGVtVmFsdWUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncmFwaC1pdGVtLXZhbHVlJyk7XG4gICAgICAgIGlmICghZ3JhcGhJdGVtQmFyIHx8ICFncmFwaEl0ZW1WYWx1ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGdyYXBoVmFsdWUgPSBwYXJzZUludChncmFwaEl0ZW1WYWx1ZS5pbm5lclRleHQpO1xuICAgICAgICBncmFwaEl0ZW1CYXIuc3R5bGUuaGVpZ2h0ID0gZ3JhcGhWYWx1ZSArIFwicHhcIjtcbiAgICAgICAgZ3JhcGhJdGVtVmFsdWUuc3R5bGUuYm90dG9tID0gZ3JhcGhWYWx1ZSArIFwicHhcIjtcbiAgICB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkV2t1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjFhUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRmhMRkZCUVVFc1VVRkJVU3hIUVVGSE8wbEJRM1JDTEVsQlFVMHNWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZCTzBsQlEzSkZMRWxCUVVrc1EwRkJReXhWUVVGVk8xRkJRVVVzVDBGQlRUdEpRVVYyUWl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dFJRVU40UWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZqTEdsQ1FVRnBRaXhEUVVGRExFTkJRVUU3VVVGRE1VVXNTVUZCVFN4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQll5eHRRa0ZCYlVJc1EwRkJReXhEUVVGQk8xRkJRemxGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhqUVVGak8xbEJRVVVzVDBGQlRUdFJRVVUxUXl4SlFVRk5MRlZCUVZVc1IwRkJSeXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMUZCUlhKRUxGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRk5MRlZCUVZVc1QwRkJTU3hEUVVGQk8xRkJRemRETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGTkxGVkJRVlVzVDBGQlNTeERRVUZCTzBsQlEycEVMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYXJvdXNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2F0ZWdvcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyJyk7XG4gICAgaWYgKCFjYXRlZ29yeSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBjYXRlZ29yeUxpc3QgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXZpZXdlcicpO1xuICAgIHZhciBjYXRlZ29yeUxpc3RTbGlkZSA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXItdmlld2VyID4gYnV0dG9uJyk7XG4gICAgdmFyIGNhdGVnb3J5TmF2aWdhdGlvblByZXYgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWFycm93cy1wcmV2Jyk7XG4gICAgdmFyIGNhdGVnb3J5TmF2aWdhdGlvbk5leHQgPSBjYXRlZ29yeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWFycm93cy1uZXh0Jyk7XG4gICAgdmFyIGNhdGVnb3J5RG90cyA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXItZG90cy1kb3QnKTtcbiAgICBpZiAoIWNhdGVnb3J5TGlzdCB8fCAhY2F0ZWdvcnlMaXN0U2xpZGUgfHwgIWNhdGVnb3J5TmF2aWdhdGlvblByZXYgfHwgIWNhdGVnb3J5TmF2aWdhdGlvbk5leHQgfHwgIWNhdGVnb3J5RG90cylcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBjYXRlZ29yeUNvbnRhaW5lcldpZHRoID0gY2F0ZWdvcnlMaXN0Lm9mZnNldFdpZHRoO1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGNhdGVnb3J5TGlzdFNsaWRlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIChzdW0gKz0gaXRlbS5vZmZzZXRXaWR0aCk7IH0pO1xuICAgIGNhdGVnb3J5TmF2aWdhdGlvbk5leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b05leHQpO1xuICAgIGNhdGVnb3J5TmF2aWdhdGlvblByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b1ByZXYpO1xuICAgIGNhdGVnb3J5RG90cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyB9KTsgfSk7XG4gICAgY2F0ZWdvcnlMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBjYXRlZ29yeUxpc3Quc2Nyb2xsTGVmdDtcbiAgICAgICAgY29uc29sZS5sb2coJ3Njcm9sbC1sZWZ0Jywgc2Nyb2xsTGVmdCwgJ29mZnNldC13aWR0aCcsIGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHRvUHJldigpIHtcbiAgICAgICAgaWYgKCFjYXRlZ29yeUxpc3QpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0IC09IDEwMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9OZXh0KCkge1xuICAgICAgICBpZiAoIWNhdGVnb3J5TGlzdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgKz0gMTAwO1xuICAgICAgICAvLyBpZihzdW0gPiBjYXRlZ29yeUNvbnRhaW5lcldpZHRoKSB7fVxuICAgICAgICAvLyBjb25zdCB0dHQgPSAxMDAgKyAncHgnO1xuICAgICAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXZpZXdlcicpLnN0eWxlLnRyYW5zZm9ybSArPSAndHJhbnNsYXRlWCgnK3R0dCsnKSc7XG4gICAgfVxufTtcbmV4cG9ydHMuc2V0RGFya21vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRhcmttb2RlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRhcmttb2RlJyk7XG4gICAgaWYgKCFkYXJrbW9kZUJ1dHRvbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGxvYWRUaGVtZSgpO1xuICAgIGRhcmttb2RlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdHQpO1xufTtcbmZ1bmN0aW9uIHR0KCkge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFya21vZGUnKTtcbiAgICB2YXIgaXNEYXJrbW9kZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdkYXJrbW9kZScpO1xuICAgIGlmIChpc0Rhcmttb2RlKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsICdkYXJrbW9kZScpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3RoZW1lJyk7XG4gICAgICAgIC8vIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvYWRUaGVtZSgpIHtcbiAgICB2YXIgbGFzdFRoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lJyk7XG4gICAgaWYgKCFsYXN0VGhlbWUpXG4gICAgICAgIHJldHVybjtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQobGFzdFRoZW1lKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyVjBSR0Z5YTAxdlpHVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKelpYUkVZWEpyVFc5a1pTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGaExGRkJRVUVzVVVGQlVTeEhRVUZITzBsQlEzUkNMRWxCUVUwc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVFN1NVRkRiRVFzU1VGQlNTeERRVUZETEZGQlFWRTdVVUZCUlN4UFFVRk5PMGxCUlhKQ0xFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1owSkJRV2RDTEVOQlFVTXNRMEZCUVR0SlFVTXhSU3hKUVVGTkxHbENRVUZwUWl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCWXl4NVFrRkJlVUlzUTBGQlF5eERRVUZCTzBsQlF6TkdMRWxCUVUwc2MwSkJRWE5DTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkJPMGxCUXpWRkxFbEJRVTBzYzBKQlFYTkNMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8wbEJRelZGTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZCTzBsQlJXeEZMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVsQlFVa3NRMEZCUXl4WlFVRlpPMUZCUVVVc1QwRkJUVHRKUVVWMFNDeEpRVUZOTEhOQ1FVRnpRaXhIUVVGSExGbEJRVmtzUTBGQlF5eFhRVUZYTEVOQlFVRTdTVUZEZGtRc1NVRkJTU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlJWZ3NhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1N4SlFVRkpMRTlCUVVFc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRjZRaXhEUVVGNVFpeERRVUZETEVOQlFVRTdTVUZGTlVRc2MwSkJRWE5DTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUTNoRUxITkNRVUZ6UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRVHRKUVVONFJDeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1QwRkJUeXhKUVVGSkxFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeGpRVUZQTEVOQlFVTXNRMEZCUXl4RlFVRXpReXhEUVVFeVF5eERRVUZETEVOQlFVRTdTVUZGTlVVc1dVRkJXU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRSUVVNNVFpeEpRVUZCTEc5RFFVRlZMRU5CUVdsQ08xRkJRMjVETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hGUVVGRkxGVkJRVlVzUlVGQlJTeGpRVUZqTEVWQlFVVXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdEpRVU5vUml4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVWR0xGTkJRVk1zVFVGQlRUdFJRVU5pTEVsQlFVa3NRMEZCUXl4WlFVRlpPMWxCUVVVc1QwRkJUVHRSUVVONlFpeFpRVUZaTEVOQlFVTXNWVUZCVlN4SlFVRkpMRWRCUVVjc1EwRkJRVHRKUVVOb1F5eERRVUZETzBsQlEwUXNVMEZCVXl4TlFVRk5PMUZCUTJJc1NVRkJTU3hEUVVGRExGbEJRVms3V1VGQlJTeFBRVUZOTzFGQlEzcENMRmxCUVZrc1EwRkJReXhWUVVGVkxFbEJRVWtzUjBGQlJ5eERRVUZCTzFGQlF6bENMSE5EUVVGelF6dFJRVU4wUXl3d1FrRkJNRUk3VVVGRE1VSXNjVVpCUVhGR08wbEJRM1pHTEVOQlFVTTdRVUZEU0N4RFFVRkRMRU5CUVVFN1FVRkZXU3hSUVVGQkxGZEJRVmNzUjBGQlJ6dEpRVU42UWl4SlFVRk5MR05CUVdNc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkJPMGxCUXpkRUxFbEJRVWtzUTBGQlF5eGpRVUZqTzFGQlFVVXNUMEZCVFR0SlFVVXpRaXhUUVVGVExFVkJRVVVzUTBGQlFUdEpRVU5ZTEdOQlFXTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVFN1FVRkRPVU1zUTBGQlF5eERRVUZCTzBGQlJVUXNVMEZCVXl4RlFVRkZPMGxCUTFRc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGQk8wbEJSVEZETEVsQlFVMHNWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRKUVVNdlJDeEpRVUZKTEZWQlFWVXNSVUZCUlR0UlFVTmtMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkJPMHRCUXpGRE8xTkJRVTA3VVVGRFRDeFpRVUZaTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8xRkJRMmhETEhkQ1FVRjNRanRMUVVONlFqdEJRVU5JTEVOQlFVTTdRVUZGUkN4VFFVRlRMRk5CUVZNN1NVRkRhRUlzU1VGQlRTeFRRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdEpRVU12UXl4SlFVRkpMRU5CUVVNc1UwRkJVenRSUVVGRkxFOUJRVTA3U1VGRmRFSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMEZCUTNoRExFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb3VudERvd25DbG9jayA9IGZ1bmN0aW9uIChudW1iZXIsIGZvcm1hdCkge1xuICAgIGlmIChudW1iZXIgPT09IHZvaWQgMCkgeyBudW1iZXIgPSAxMDA7IH1cbiAgICBpZiAoZm9ybWF0ID09PSB2b2lkIDApIHsgZm9ybWF0ID0gJ3NlY29uZHMnOyB9XG4gICAgdmFyIGRheXNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRheXMnKTtcbiAgICB2YXIgaG91cnNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWhvdXJzJyk7XG4gICAgdmFyIG1pbnV0ZXNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1pbnV0ZXMnKTtcbiAgICB2YXIgc2Vjb25kc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2Vjb25kcycpO1xuICAgIGlmICghZGF5c0VsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICBjb252ZXJ0Rm9ybWF0KGZvcm1hdCk7XG4gICAgZnVuY3Rpb24gY29udmVydEZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcihudW1iZXIpO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVyKG51bWJlciAqIDYwKTtcbiAgICAgICAgICAgIGNhc2UgJ2hvdXJzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZXIobnVtYmVyICogNjAgKiA2MCk7XG4gICAgICAgICAgICBjYXNlICdkYXlzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZXIobnVtYmVyICogNjAgKiA2MCAqIDI0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0aW1lcihzZWNvbmRzKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgdGhlbiA9IG5vdyArIHNlY29uZHMgKiAxMDAwO1xuICAgICAgICB2YXIgY291bnRkb3duID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlY29uZHNMZWZ0ID0gTWF0aC5yb3VuZCgodGhlbiAtIERhdGUubm93KCkpIC8gMTAwMCk7XG4gICAgICAgICAgICBpZiAoc2Vjb25kc0xlZnQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY291bnRkb3duKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRheXNFbGVtZW50IHx8ICFob3Vyc0VsZW1lbnQgfHwgIW1pbnV0ZXNFbGVtZW50IHx8ICFzZWNvbmRzRWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkYXlzRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiICsgTWF0aC5mbG9vcihzZWNvbmRzTGVmdCAvIDg2NDAwKTtcbiAgICAgICAgICAgIGhvdXJzRWxlbWVudC5pbm5lclRleHQgPSBcIlwiICsgTWF0aC5mbG9vcigoc2Vjb25kc0xlZnQgJSA4NjQwMCkgLyAzNjAwKTtcbiAgICAgICAgICAgIG1pbnV0ZXNFbGVtZW50LmlubmVyVGV4dCA9IFwiXCIgKyBNYXRoLmZsb29yKCgoc2Vjb25kc0xlZnQgJSA4NjQwMCkgJSAzNjAwKSAvIDYwKTtcbiAgICAgICAgICAgIHNlY29uZHNFbGVtZW50LmlubmVyVGV4dCA9IFwiXCIgKyAoc2Vjb25kc0xlZnQgJSA2MCA8IDEwID8gXCIwXCIgKyBzZWNvbmRzTGVmdCAlIDYwIDogc2Vjb25kc0xlZnQgJSA2MCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjkxYm5Sa2IzZHVMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVkyOTFiblJrYjNkdUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVdFc1VVRkJRU3hqUVVGakxFZEJRVWNzVlVGQlF5eE5RVUZaTEVWQlFVVXNUVUZCYTBJN1NVRkJhRU1zZFVKQlFVRXNSVUZCUVN4WlFVRlpPMGxCUVVVc2RVSkJRVUVzUlVGQlFTeHJRa0ZCYTBJN1NVRkROMFFzU1VGQlRTeFhRVUZYTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXhWUVVGVkxFTkJRVU1zUTBGQlFUdEpRVU51UlN4SlFVRk5MRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZqTEZkQlFWY3NRMEZCUXl4RFFVRkJPMGxCUTNKRkxFbEJRVTBzWTBGQll5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc1lVRkJZU3hEUVVGRExFTkJRVUU3U1VGRGVrVXNTVUZCVFN4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eGhRVUZoTEVOQlFVTXNRMEZCUVR0SlFVTjZSU3hKUVVGSkxFTkJRVU1zVjBGQlZ6dFJRVUZGTEU5QlFVMDdTVUZGZUVJc1lVRkJZU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZCTzBsQlJYSkNMRk5CUVZNc1lVRkJZU3hEUVVGRExFMUJRVTA3VVVGRE0wSXNVVUZCVVN4TlFVRk5MRVZCUVVVN1dVRkRaQ3hMUVVGTExGTkJRVk03WjBKQlExb3NUMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3V1VGRGRFSXNTMEZCU3l4VFFVRlRPMmRDUVVOYUxFOUJRVThzUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRVHRaUVVNelFpeExRVUZMTEU5QlFVODdaMEpCUTFZc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRVHRaUVVOb1F5eExRVUZMTEUxQlFVMDdaMEpCUTFRc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVUU3VTBGRGRFTTdTVUZEU0N4RFFVRkRPMGxCUlVRc1UwRkJVeXhMUVVGTExFTkJRVU1zVDBGQlR6dFJRVU53UWl4SlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVRTdVVUZEZEVJc1NVRkJUU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eEhRVUZITEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVFN1VVRkRha01zU1VGQlRTeFRRVUZUTEVkQlFVY3NWMEZCVnl4RFFVRkRPMWxCUXpWQ0xFbEJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVUU3V1VGRE1VUXNTVUZCU1N4WFFVRlhMRWxCUVVrc1EwRkJReXhGUVVGRk8yZENRVU53UWl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3WjBKQlEzaENMRTlCUVUwN1lVRkRVRHRaUVVORUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzUTBGQlF5eGpRVUZqTzJkQ1FVRkZMRTlCUVUwN1dVRkRMMFVzVjBGQlZ5eERRVUZETEZOQlFWTXNSMEZCUnl4TFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUnl4RFFVRkJPMWxCUXpWRUxGbEJRVmtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJSeXhEUVVGQk8xbEJRM1JGTEdOQlFXTXNRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkhMRU5CUVVFN1dVRkRMMFVzWTBGQll5eERRVUZETEZOQlFWTXNSMEZCUnl4TlFVRkhMRmRCUVZjc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRkpMRmRCUVZjc1IwRkJSeXhGUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEZkQlFWY3NSMEZCUnl4RlFVRkZMRU5CUVVVc1EwRkJRVHRSUVVOdVJ5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVFN1NVRkRWaXhEUVVGRE8wRkJRMGdzUTBGQlF5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRvZ2dsZUNsYXNzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG9nZ2xlQ2xhc3NcIikpO1xudmFyIGVudGVyVGFyZ2V0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZW50ZXJUYXJnZXRcIikpO1xudmFyIHRhYk1lbnVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90YWJNZW51XCIpKTtcbnZhciBtb2RhbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZGFsXCIpKTtcbnZhciB0b1RvcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RvVG9wXCIpKTtcbnZhciBzdGlja3lFbGVtZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc3RpY2t5RWxlbWVudFwiKSk7XG52YXIgc2Nyb2xsQW5pbWF0aW9uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsQW5pbWF0aW9uXCIpKTtcbnZhciBjbG9zZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Nsb3NlXCIpKTtcbnZhciBjdXN0b21DdXJzb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jdXN0b21DdXJzb3JcIikpO1xudmFyIHNjcm9sbHNweV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbHNweVwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzXzEuZGVmYXVsdCxcbiAgICBlbnRlclRhcmdldDogZW50ZXJUYXJnZXRfMS5kZWZhdWx0LFxuICAgIG1vZGFsOiBtb2RhbF8xLmRlZmF1bHQsXG4gICAgdGFiTWVudTogdGFiTWVudV8xLmRlZmF1bHQsXG4gICAgdG9Ub3A6IHRvVG9wXzEuZGVmYXVsdCxcbiAgICBzdGlja3lFbGVtZW50OiBzdGlja3lFbGVtZW50XzEuZGVmYXVsdCxcbiAgICBzY3JvbGxBbmltYXRpb246IHNjcm9sbEFuaW1hdGlvbl8xLmRlZmF1bHQsXG4gICAgc2Nyb2xsc3B5OiBzY3JvbGxzcHlfMS5kZWZhdWx0LFxuICAgIGNsb3NlOiBjbG9zZV8xLmRlZmF1bHQsXG4gICAgY3VzdG9tQ3Vyc29yOiBjdXN0b21DdXJzb3JfMS5kZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKcGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dEJRVUZCTERoRVFVRjFRenRCUVVOMlF5dzRSRUZCZFVNN1FVRkRka01zYzBSQlFTdENPMEZCUXk5Q0xHdEVRVUV5UWp0QlFVTXpRaXhyUkVGQk1rSTdRVUZETTBJc2EwVkJRVEpETzBGQlF6TkRMSE5GUVVFclF6dEJRVU12UXl4clJFRkJNa0k3UVVGRE0wSXNaMFZCUVhsRE8wRkJRM3BETERCRVFVRnRRenRCUVVWdVF5eHJRa0ZCWlR0SlFVTmlMRmRCUVZjc2RVSkJRVUU3U1VGRFdDeFhRVUZYTEhWQ1FVRkJPMGxCUTFnc1MwRkJTeXhwUWtGQlFUdEpRVU5NTEU5QlFVOHNiVUpCUVVFN1NVRkRVQ3hMUVVGTExHbENRVUZCTzBsQlEwd3NZVUZCWVN4NVFrRkJRVHRKUVVOaUxHVkJRV1VzTWtKQlFVRTdTVUZEWml4VFFVRlRMSEZDUVVGQk8wbEJRMVFzUzBGQlN5eHBRa0ZCUVR0SlFVTk1MRmxCUVZrc2QwSkJRVUU3UTBGRFlpeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRvZ2dsZUNsYXNzID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRyaWdnZXIgPSBfYS5zZWxlY3RvcjtcbiAgICByZXR1cm4gKHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICB0cmlnZ2VyczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0cmlnZ2VyKSxcbiAgICAgICAgQUNUSVZFX0NMQVNTOiAnaXMtYWN0aXZlJyxcbiAgICAgICAgQUNUSVZFX0NMQVNTMjogJ2lzLXZpc2libGUnLFxuICAgICAgICBzZXRFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICghdGhpcy50cmlnZ2VycylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlck5leHRFbGVtZW50ID0gKF9hID0gZWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmlnZ2VyTmV4dEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvZ2dsZUNsYXNzVHJpZ2dlcihlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlQ2xhc3NUYXJnZXQodHJpZ2dlck5leHRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVBbGxDbGFzcyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy50cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7IHJldHVybiBfdGhpcy5yZW1vdmVBbGxDbGFzcyh0cmlnZ2VyKTsgfSk7IH0pO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVDbGFzc1RyaWdnZXI6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUodGhpcy5BQ1RJVkVfQ0xBU1MpO1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcIlwiICsgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5BQ1RJVkVfQ0xBU1MpKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlQ2xhc3NUYXJnZXQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUodGhpcy5BQ1RJVkVfQ0xBU1MyKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQWxsQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5BQ1RJVkVfQ0xBU1MpO1xuICAgICAgICAgICAgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkFDVElWRV9DTEFTUzIpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9nZ2xlQ2xhc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkRzluWjJ4bFEyeGhjM011YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBiMmRuYkdWRGJHRnpjeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1YwRkJWeXhIUVVGSExGVkJRVU1zUlVGQlowTTdVVUZCT1VJc2NVSkJRV2xDTzBsQlFXdENMRTlCUVVFc1EwRkJRenRSUVVONlJDeEpRVUZKTEVWQlFVVXNZMEZCV1N4RFFVRkRPMUZCUTI1Q0xGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eERRVUZETzFGQlF6VkRMRmxCUVZrc1JVRkJSU3hYUVVGWE8xRkJRM3BDTEdGQlFXRXNSVUZCUlN4WlFVRlpPMUZCUXpOQ0xGRkJRVkVzUlVGQlJUdFpRVUZCTEdsQ1FYTkNWRHRaUVhKQ1F5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFN1owSkJRVVVzVDBGQlRUdFpRVVV4UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEU5QlFVODdaMEpCUXpOQ0xFOUJRVUVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZCTEV0QlFVczdPMjlDUVVOeVF5eExRVUZMTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVFN2IwSkJRM1JDTEV0QlFVc3NRMEZCUXl4bFFVRmxMRVZCUVVVc1EwRkJRVHR2UWtGRmRrSXNTVUZCVFN4clFrRkJhMElzUjBGQlJ5eE5RVUZCTEU5QlFVOHNNRU5CUVVVc2EwSkJRV2xETEVOQlFVRTdiMEpCUTNKRkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJN2QwSkJRVVVzVDBGQlRUdHZRa0ZGTDBJc1MwRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8yOUNRVU5vUXl4TFFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdHZRa0ZGTVVNc1MwRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPM2RDUVVNelFpeEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRXRCUVVzc1QwRkJUenMwUWtGQlJTeFBRVUZOTzNkQ1FVTndReXhMUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMjlDUVVNNVFpeERRVUZETEVOQlFVTXNRMEZCUVR0blFrRkRTaXhEUVVGRExFTkJRVU03V1VGa1JpeERRV05GTEVOQlEwZ3NRMEZCUVR0WlFVTkVMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxHTkJRVTBzVDBGQlFTeExRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFOUJRVThzU1VGQlNTeFBRVUZCTEV0QlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVFZDTEVOQlFUUkNMRU5CUVVNc1JVRkJPVVFzUTBGQk9FUXNRMEZCUXl4RFFVRkJPMUZCUlM5SExFTkJRVU03VVVGRFJDeHJRa0ZCYTBJc1JVRkJSU3hWUVVGVExFOUJRVTg3V1VGRGJFTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMWxCUXpORExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNaVUZCWlN4RlFVRkZMRXRCUVVjc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJSeXhEUVVGRExFTkJRVUU3VVVGRE0wWXNRMEZCUXp0UlFVTkVMR2xDUVVGcFFpeEZRVUZGTEZWQlFWTXNUMEZCVHp0WlFVTnFReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3V1VGRE5VTXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxFdEJRVXNzUTBGQlF5eGxRVUZsTEVWQlFVVXNSVUZCZGtJc1EwRkJkVUlzUTBGQlF5eERRVUZCTzFGQlEzSkZMRU5CUVVNN1VVRkRSQ3hqUVVGakxFVkJRVVVzVlVGQlV5eFBRVUZQTzFsQlF6bENMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMWxCUXpkRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdFpRVU16UXl4UFFVRlBMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdVVUZEYWtVc1EwRkJRenRMUVVOR0xFTkJRVU03UVVGNlEzZEVMRU5CZVVONFJDeERRVUZCTzBGQlJVWXNhMEpCUVdVc1YwRkJWeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBlbnRlclRhcmdldCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0YXJnZXQgPSBfYS5zZWxlY3RvcjtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGhvdmVyRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldCk7XG4gICAgaWYgKCFob3ZlckVsZW1lbnRzKVxuICAgICAgICByZXR1cm47XG4gICAgaG92ZXJFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIC8vIHRvZG9cbiAgICAgICAgdmFyIGlzTmF2aWdhdGlvbiA9IGVsZW1lbnQgPT09IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1uYXZiYXIgLm5hdmJhci1tZW51LWl0ZW0uanMtaG92ZXItdHJpZ2dlcicpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbnRlckV2ZW50KCk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBsZWF2ZUV2ZW50KCk7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gZW50ZXJFdmVudCgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgIGlzTmF2aWdhdGlvbiAmJiBib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLXNob3duJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGVhdmVFdmVudCgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICBpc05hdmlnYXRpb24gJiYgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zaG93bicpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZW50ZXJUYXJnZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laVzUwWlhKVVlYSm5aWFF1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SmxiblJsY2xSaGNtZGxkQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1YwRkJWeXhIUVVGSExGVkJRVU1zUlVGQkswSTdVVUZCTjBJc2IwSkJRV2RDTzBsQlF6ZENMRWxCUVVFc2IwSkJRVWtzUTBGQllUdEpRVU42UWl4SlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRGRrUXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1VVRkJSU3hQUVVGTk8wbEJSVEZDTEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xRkJRek5DTEU5QlFVODdVVUZEVUN4SlFVRk5MRmxCUVZrc1IwRkJSeXhQUVVGUExFdEJRVXNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl3clEwRkJLME1zUTBGQlF5eERRVUZCTzFGQlJYaEhMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WlFVRlpMRVZCUVVVN1dVRkRja01zVlVGQlZTeEZRVUZGTEVOQlFVRTdXVUZEV2l4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMR05CUVUwc1QwRkJRU3hWUVVGVkxFVkJRVVVzUlVGQldpeERRVUZaTEVOQlFVTXNRMEZCUVR0UlFVTTFSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdFJRVVZHTEZOQlFWTXNWVUZCVlR0WlFVTnFRaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEdWQlFXVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRVHRaUVVNM1F5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFUdFpRVU53UXl4WlFVRlpMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1VVRkRhRVFzUTBGQlF6dFJRVU5FTEZOQlFWTXNWVUZCVlR0WlFVTnFRaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEdWQlFXVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRVHRaUVVNNVF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFUdFpRVU4yUXl4WlFVRlpMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1VVRkRia1FzUTBGQlF6dEpRVU5JTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNWMEZCVnl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyDrpqztjKnthqDrp4HtlZjquJRcbnZhciB0YWJNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHZhciB0YWJzID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9dGFiXScpO1xuICAgICAgICB2YXIgdGFiSW5kZXggPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XG4gICAgICAgIHZhciB0YWJBY3RpY2VCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS10YWJsaXN0LWFjdGl2ZScpO1xuICAgICAgICBpZiAoIXRhYnMgfHwgIXRhYkFjdGljZUJhcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCdbcm9sZT10YWJdJykpIHtcbiAgICAgICAgICAgIC8vIGNvbnN0IHRhcmdldFdpZHRoID0gdGFyZ2V0LmdldFN0eXFxXG4gICAgICAgICAgICB0YWJBY3RpY2VCYXIuc3R5bGUubGVmdCA9IHRhcmdldC5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgdGFicy5mb3JFYWNoKGZ1bmN0aW9uICh0YWIpIHsgcmV0dXJuIHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTsgfSk7XG4gICAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9dGFicGFuZWxdJykuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRhYkluZGV4ID09PSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHRydWUpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRhYk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR0ZpVFdWdWRTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW5SaFlrMWxiblV1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hUUVVGVE8wRkJRMVFzU1VGQlRTeFBRVUZQTEVkQlFVYzdTVUZEWkN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlEzWkNMRTlCUVU4c1JVRkRVQ3hWUVVGQkxFdEJRVXM3VVVGRFN5eEpRVUZCTEhGQ1FVRk5MRU5CUVdVN1VVRkROMElzU1VGQlRTeEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRSUVVNM1JDeEpRVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFGQlEyeEVMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlFUdFJRVVZ1Uml4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zV1VGQldUdFpRVUZGTEU5QlFVMDdVVUZGYkVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZPMWxCUTJoRExITkRRVUZ6UXp0WlFVVjBReXhaUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCVFN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hQUVVGSkxFTkJRVUU3V1VGRGJFUXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFZEJRVWNzU1VGQlNTeFBRVUZCTEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFOUJRVThzUTBGQlF5eEZRVUV4UXl4RFFVRXdReXhEUVVGRExFTkJRVUU3V1VGREwwUXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdXVUZGTlVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzJkQ1FVTTVSU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEdGQlFXRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRVHRuUWtGRE0wTXNTVUZCU1N4UlFVRlJMRXRCUVVzc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlR0dlFrRkRia1FzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVUU3YVVKQlF6bERPMWxCUTBnc1EwRkJReXhEUVVGRExFTkJRVUU3VTBGRFNEdEpRVU5JTEVOQlFVTXNSVUZEUkN4SlFVRkpMRU5CUTB3c1EwRkJRVHRCUVVOSUxFTkJRVU1zUTBGQlFUdEJRVVZFTEd0Q1FVRmxMRTlCUVU4c1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vL1RPRE86IOuqqOuLrCDrsJbsnZgg7Luo7YWQ7Lig7JeQIGFyaWEtaGlkZGVuIOuqqOuLrOydmCDsnITsuZjripQg67CU65SUIOyViOyXkD9cbi8vdmFyIGFiYyA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcbi8vIHJlcXVpcmUoJy4vbW9kYWwuc2NzcycpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1vZGFsID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRyaWdnZXIgPSBfYS5zZWxlY3RvcjtcbiAgICByZXR1cm4gKHtcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBtb2RhbHM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlciksXG4gICAgICAgIG1vZGFsQ29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kYWwnKSxcbiAgICAgICAgc2V0RXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYmFja0hpc3RvcnkpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGFscylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLm1vZGFscy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RhbCkgeyByZXR1cm4gbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IG1vZGFsLmRhdGFzZXQubW9kYWw7XG4gICAgICAgICAgICAgICAgdmFyIHVyaSA9IFwiL3ZpZXdzL1wiICsgaWQgKyBcIi5odG1sXCI7XG4gICAgICAgICAgICAgICAgZmV0Y2godXJpKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaHRtbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMubW9kYWxDb250YWluZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdlWU9mZnNldCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1tb2RhbC12aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1vZGFsQ29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldE1vZGFsKHBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0SGlzdG9yeShpZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc09wZW5lZCA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1tb2RhbC12aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09wZW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1vZGFsLWNsb3NlJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1vZGFsLWNsb3NlJykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzLmJhY2tIaXN0b3J5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5iYWNrSGlzdG9yeSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyDsnbTrsqTtirggcmVtb3Zl7ZW07KSY7JW87ZWoXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0tleUVzYyA9IGV2ZW50LmtleUNvZGUgPT09IDI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0tleUVzYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5iYWNrSGlzdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmJhY2tIaXN0b3J5KVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzT3BlbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyTW9kYWwoX3RoaXMubW9kYWxDb250YWluZXIsIHBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbERpYWxvZyA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1kaWFsb2cnKTtcbiAgICAgICAgICAgICAgICAgICAgKF9jID0gbW9kYWxEaWFsb2cpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAoX2QgPSBtb2RhbERpYWxvZykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gY29uc29sZS53YXJuKCdtb2RhbCBFcnJvcicpOyB9KTtcbiAgICAgICAgICAgIH0pOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0TW9kYWw6IGZ1bmN0aW9uIChwYWdlWU9mZnNldCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1tb2RhbC12aXNpYmxlJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2JvZHktbG9jaycpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSBcIi1cIiArIHBhZ2VZT2Zmc2V0ICsgXCJweFwiO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhck1vZGFsOiBmdW5jdGlvbiAoY29udGFpbmVyLCBwYWdlWU9mZnNldCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1tb2RhbC12aXNpYmxlJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SGlzdG9yeTogZnVuY3Rpb24gKG1vZGFsVXJsKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB7IG5hbWU6ICd0ZXN0ZXInIH07XG4gICAgICAgICAgICB2YXIgdGl0bGUgPSAnZGQnO1xuICAgICAgICAgICAgdmFyIHVybCA9IG1vZGFsVXJsO1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwpO1xuICAgICAgICB9LFxuICAgICAgICBiYWNrSGlzdG9yeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaGlzdG9yeS5iYWNrKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBtb2RhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXOWtZV3d1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnRiMlJoYkM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUVzTmtOQlFUWkRPMEZCUXpkRExEQkVRVUV3UkR0QlFVTXhSQ3d5UWtGQk1rSTdPMEZCVFROQ0xFbEJRVTBzUzBGQlN5eEhRVUZITEZWQlFVTXNSVUZCWjBNN1VVRkJPVUlzY1VKQlFXbENPMGxCUVd0Q0xFOUJRVUVzUTBGQlF6dFJRVU51UkN4VlFVRlZMR2RDUVVGSkxFTkJRVU03VVVGRFppeE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZqTEU5QlFVOHNRMEZCUXp0UlFVTjJSQ3hqUVVGakxFVkJRVVVzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4UlFVRlJMRU5CUVVNN1VVRkROMFFzVVVGQlVTeEZRVUZTTzFsQlFVRXNhVUpCY1VSRE8xbEJjRVJETEZGQlFWRXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8xbEJRM1pFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUVHRuUWtGQlJTeFBRVUZOTzFsQlJYaENMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTMEZCU3l4SlFVRkpMRTlCUVVFc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGQkxFdEJRVXM3WjBKQlEyaEZMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlFUdG5Ra0ZEZGtJc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGQlJTeERRVUZCTzJkQ1FVVjBRaXhKUVVGTkxFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJRVHRuUWtGRE9VSXNTVUZCVFN4SFFVRkhMRWRCUVVjc1dVRkJWU3hGUVVGRkxGVkJRVThzUTBGQlFUdG5Ra0ZETDBJc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF6dHhRa0ZEVUN4SlFVRkpMRU5CUVVNc1ZVRkJRU3hSUVVGUk8yOUNRVU5hTEVsQlFVa3NVVUZCVVN4RFFVRkRMRVZCUVVVN2QwSkJRVVVzVDBGQlR5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN08zZENRVU5zUXl4UFFVRlBMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdaMEpCUTNSRExFTkJRVU1zUTBGQlF6dHhRa0ZEUkN4SlFVRkpMRU5CUVVNc1ZVRkJRU3hKUVVGSk96dHZRa0ZEVWl4SlFVRkhMRU5CUVVNc1MwRkJTU3hEUVVGRExHTkJRV003ZDBKQlFVVXNUMEZCVFR0dlFrRkZka0lzU1VGQlFTeG5RMEZCVnl4RFFVRlhPMjlDUVVVNVFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHR2UWtGRmJFUXNTMEZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZCTzI5Q1FVTndReXhMUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMjlDUVVNeFFpeExRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGQk8yOUNRVVZ1UWl4SlFVRk5MRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0dlFrRkRja1VzU1VGQlJ5eFJRVUZSTEVWQlFVVTdkMEpCUTFnc1RVRkJRU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExEQkRRVUZGTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZCTEV0QlFVc3NTVUZCU1N4UFFVRkJMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUlVGQmRrSXNRMEZCZFVJc1JVRkJRenQzUWtGRGRFY3NUVUZCUVN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMREJEUVVGRkxHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZETzNkQ1FVTjBSaXgxUkVGQmRVUTdjVUpCUTNoRU8yOUNRVU5FTEdsQ1FVRnBRanR2UWtGRGFrSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4VlFVRkJMRXRCUVVzN2QwSkJRM2hETEVsQlFVMHNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFdEJRVXNzUlVGQlJTeERRVUZCTzNkQ1FVTnlReXhKUVVGSExFTkJRVU1zVVVGQlVUczBRa0ZCUlN4UFFVRk5PM2RDUVVOd1FpeExRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVFN2IwSkJRM0JDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMjlDUVVWR0xIVkVRVUYxUkR0dlFrRkZka1FzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUlVGQlJUdDNRa0ZEYkVNc1NVRkJSeXhEUVVGRExGRkJRVkU3TkVKQlFVVXNUMEZCVFR0M1FrRkRjRUlzUzBGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TFFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZCTzI5Q1FVTnVSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdHZRa0ZGUml4SlFVRk5MRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZqTEdWQlFXVXNRMEZCUXl4RFFVRkJPMjlDUVVOeVJTeE5RVUZCTEZkQlFWY3NNRU5CUVVVc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVFc1MwRkJTeXhKUVVGSkxFOUJRVUVzUzBGQlN5eERRVUZETEdWQlFXVXNSVUZCUlN4RlFVRjJRaXhEUVVGMVFpeEZRVUZETzI5Q1FVTjRSU3hOUVVGQkxGZEJRVmNzTUVOQlFVVXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3l4SlFVRkpMRTlCUVVFc1MwRkJTeXhEUVVGRExHVkJRV1VzUlVGQlJTeEZRVUYyUWl4RFFVRjFRaXhGUVVGRE8yZENRVU14UlN4RFFVRkRMRU5CUVVNN2NVSkJRMFFzUzBGQlN5eERRVUZETEZWQlFVRXNTMEZCU3l4SlFVRkpMRTlCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSVUZCTTBJc1EwRkJNa0lzUTBGQlF5eERRVUZCTzFsQlF6bERMRU5CUVVNc1EwRkJReXhGUVM5RGVVSXNRMEVyUTNwQ0xFTkJRMGdzUTBGQlFUdFJRVU5JTEVOQlFVTTdVVUZEUkN4UlFVRlJMRmxCUVVNc1YwRkJWenRaUVVOc1FpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHRaUVVNdlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdXVUZEZUVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SFFVRkhMRTFCUVVrc1YwRkJWeXhQUVVGSkxFTkJRVUU3VVVGREwwTXNRMEZCUXp0UlFVTkVMRlZCUVZVc1dVRkJReXhUUVVGVExFVkJRVVVzVjBGQlZ6dFpRVU12UWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdFpRVU5zUkN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1dVRkZNME1zVTBGQlV5eERRVUZETEZOQlFWTXNSMEZCUnl4RlFVRkZMRU5CUVVFN1dVRkRlRUlzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRGFrTXNRMEZCUXp0UlFVTkVMRlZCUVZVc1dVRkJReXhSUVVGUk8xbEJRMnBDTEVsQlFVMHNTMEZCU3l4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeERRVUZCTzFsQlEyaERMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlFUdFpRVU5zUWl4SlFVRk5MRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVUU3V1VGRGNFSXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMUZCUTNSRExFTkJRVU03VVVGRFJDeFhRVUZYTzFsQlExUXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8xRkJRMmhDTEVOQlFVTTdTMEZEUml4RFFVRkRPMEZCTDBWclJDeERRU3RGYkVRc1EwRkJRVHRCUVVWR0xHdENRVUZsTEV0QlFVc3NRMEZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRvVG9wID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRhcmdldCA9IF9hLnNlbGVjdG9yO1xuICAgIHZhciB0b1RvcEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gICAgaWYgKCF0b1RvcEVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB0b1RvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHRvVG9wRWxlbWVudC5uYW1lIHx8IHRvVG9wRWxlbWVudC5ocmVmO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvVG9wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEc5VWIzQXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMGIxUnZjQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRWxCUVUwc1MwRkJTeXhIUVVGSExGVkJRVU1zUlVGQkswSTdVVUZCTjBJc2IwSkJRV2RDTzBsQlF5OUNMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXdENMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRM0JGTEVsQlFVa3NRMEZCUXl4WlFVRlpPMUZCUVVVc1QwRkJUVHRKUVVWNlFpeFpRVUZaTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3p0UlFVTXhReXhMUVVGTExFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVRTdVVUZEZEVJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkZja0lzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWtzU1VGQlNTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkJPMGxCUXk5RUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJPMEZCUlVRc2EwSkJRV1VzUzBGQlN5eERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN0aWNreUVsZW1lbnQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IF9hLnRhcmdldEVsZW1lbnQsIGFkZENsYXNzID0gX2EuYWRkQ2xhc3M7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBzdGlja3lFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbGVtZW50KTtcbiAgICBpZiAoIXN0aWNreUVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgc3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciBpc1Njcm9sbGluZztcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xuICAgICAgICBpc1Njcm9sbGluZyA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xuICAgICAgICBpc1Njcm9sbGluZyA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHN0aWNreUVsZW1lbnQub2Zmc2V0VG9wICsgc3RpY2t5RWxlbWVudEhlaWdodCkge1xuICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XG4gICAgICAgICAgICAgICAgLy8gYm9keS5zdHlsZS5wYWRkaW5nVG9wID0gYCR7c3RpY2t5RWxlbWVudEhlaWdodH1weGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZShhZGRDbGFzcyk7XG4gICAgICAgICAgICAgICAgLy8gYm9keS5zdHlsZS5wYWRkaW5nVG9wID0gJzBweCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuLy8gdmFyIGlzU2Nyb2xsaW5nO1xuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIChldmVudCkgPT4ge1xuLy8gXHRpZihpc1Njcm9sbGluZykgd2luZG93LmNsZWFyVGltZW91dChpc1Njcm9sbGluZyk7XG4vLyBcdGlzU2Nyb2xsaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuLy8gXHRcdHN0aWNreVRvZ2dsZSgpO1xuLy8gXHR9LCA1MCk7XG4vLyB9KTtcbi8vIGV4cG9ydCBjb25zdCBzdGlja3lIZWFkZXJFbGVtZW50ID0gKHRhcmdldEVsZW1lbnQsIGFkZENsYXNzKSA9PiB7XG4vLyBcdHN0aWNreUVsZW1lbnQoe3RhcmdldEVsZW1lbnQsIGFkZENsYXNzLCB0cnVlfSk7XG4vLyB9O1xuLy8gY29uc3Qgc3RpY2t5SGVhZGVyID0gKCkgPT4ge1xuLy8gXHRjb25zdCBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuLy8gXHRsZXQgbGFzdFNjcm9sbFRvcCA9IDA7XG4vLyBcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG4vLyBcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhhc1Njcm9sbGVkKTtcbi8vIFx0fSk7XG4vLyBcdGZ1bmN0aW9uIGhhc1Njcm9sbGVkKCkge1xuLy8gXHRcdGlmKHdpbmRvdy5wYWdlWU9mZnNldCA+IGxhc3RTY3JvbGxUb3ApIHtcbi8vIFx0XHRcdGhlYWRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmF2LXVwJyk7XG4vLyBcdFx0fSBlbHNlIHtcbi8vIFx0XHRcdGhlYWRlckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmF2LXVwJyk7XG4vLyBcdFx0fVxuLy8gXHRcdGxhc3RTY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4vLyBcdH1cbi8vIH07XG5leHBvcnRzLmRlZmF1bHQgPSBzdGlja3lFbGVtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzNScFkydDVSV3hsYldWdWRDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW5OMGFXTnJlVVZzWlcxbGJuUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeEpRVUZOTEdGQlFXRXNSMEZCUnl4VlFVRkRMRVZCUVRKQ08xRkJRWHBDTEdkRFFVRmhMRVZCUVVVc2MwSkJRVkU3U1VGRGRFTXNTVUZCUVN4dlFrRkJTU3hEUVVGaE8wbEJRM3BDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdTVUZETTBRc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJURkNMRWxCUVVrc2JVSkJRVzFDTEVkQlFVY3NZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJRVHRKUVVOd1JDeEpRVUZKTEZkQlFWY3NRMEZCUVR0SlFVVm1MRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVN1VVRkRhRU1zVjBGQlZ5eEpRVUZKTEUxQlFVMHNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0UlFVTjJSQ3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEhGQ1FVRnhRaXhEUVVGRE8xbEJRM3BETEcxQ1FVRnRRaXhIUVVGSExHRkJRV0VzUTBGQlF5eFpRVUZaTEVOQlFVRTdVVUZEYkVRc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFNpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVVkdMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVN1VVRkRhRU1zVjBGQlZ5eEpRVUZKTEUxQlFVMHNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0UlFVTjJSQ3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEhGQ1FVRnhRaXhEUVVGRE8xbEJRM3BETEVsQlFVa3NUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhoUVVGaExFTkJRVU1zVTBGQlV5eEhRVUZITEcxQ1FVRnRRaXhGUVVGRk8yZENRVU4wUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0blFrRkROVUlzY1VSQlFYRkVPMkZCUTNSRU8ybENRVUZOTzJkQ1FVTk1MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMmRDUVVNdlFpeG5RMEZCWjBNN1lVRkRha003VVVGRFNDeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNiVUpCUVcxQ08wRkJRMjVDTEdsRVFVRnBSRHRCUVVOcVJDeHhSRUZCY1VRN1FVRkRja1FzZDBOQlFYZERPMEZCUTNoRExHOUNRVUZ2UWp0QlFVTndRaXhYUVVGWE8wRkJRMWdzVFVGQlRUdEJRVVZPTEc5RlFVRnZSVHRCUVVOd1JTeHRSRUZCYlVRN1FVRkRia1FzUzBGQlN6dEJRVVZNTEN0Q1FVRXJRanRCUVVNdlFpdzBSRUZCTkVRN1FVRkROVVFzTUVKQlFUQkNPMEZCUlRGQ0xEWkRRVUUyUXp0QlFVTTNReXgzUTBGQmQwTTdRVUZEZUVNc1QwRkJUenRCUVVWUUxEUkNRVUUwUWp0QlFVTTFRaXcyUTBGQk5rTTdRVUZETjBNc05FTkJRVFJETzBGQlF6VkRMR0ZCUVdFN1FVRkRZaXdyUTBGQkswTTdRVUZETDBNc1RVRkJUVHRCUVVOT0xIZERRVUYzUXp0QlFVTjRReXhMUVVGTE8wRkJRMHdzUzBGQlN6dEJRVVZNTEd0Q1FVRmxMR0ZCUVdFc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXZlbnRTY3JvbGxBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zY3JvbGwtYW5pbWF0aW9uJyk7XG4gICAgdmFyIFNDUk9MTEVEX0NMQVNTID0gJ2lzLXNjcm9sbGVkJztcbiAgICBpZiAoIXNjcm9sbFRhcmdldClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB0ZW1wO1xuICAgIHNjcm9sbFRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBpc1Njcm9sbGVkID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBpZiAoIWlzU2Nyb2xsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChTQ1JPTExFRF9DTEFTUyk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2Nyb2xsVGFyZ2V0LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBpc1Njcm9sbGVkID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodCAqIDAuNSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICAvLyBjb25zdCBpc1Njcm9sbGVkID0gd2luZG93LnBhZ2VZT2Zmc2V0ID4gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgKyA1MFxuICAgICAgICAgICAgaWYgKCFpc1Njcm9sbGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChTQ1JPTExFRF9DTEFTUyk7XG4gICAgICAgICAgICB0ZW1wICYmIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0ZW1wKTtcbiAgICAgICAgICAgIHRlbXAgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShTQ1JPTExFRF9DTEFTUyk7XG4gICAgICAgICAgICAgICAgLy8gfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBldmVudFNjcm9sbEFuaW1hdGlvbjtcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZXZlbnQpID0+IHtcbi8vIFx0dmFyIHRpbWVyO1xuLy8gXHRpZiAoIXRpbWVyKSB7XG4vLyBcdFx0dGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gXHRcdFx0dGltZXI9bnVsbDtcbi8vIFx0XHRcdGNvbnN0IHRhcmdldFN0aWNreSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zdGlja3knKTtcbi8vIFx0XHRcdGNvbnN0IHRhcmdldFN0aWNreUhlaWdodCA9IHRhcmdldFN0aWNreS5jbGllbnRIZWlnaHQ7XG4vLyBcdFx0XHRpZih3aW5kb3cucGFnZVlPZmZzZXQgPiB0YXJnZXRTdGlja3kub2Zmc2V0VG9wKXtcbi8vIFx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuc3R5bGUucGFkZGluZ1RvcCA9IHRhcmdldFN0aWNreUhlaWdodCArICdweCc7XG4vLyBcdFx0XHRcdFx0dGFyZ2V0U3RpY2t5LmNsYXNzTGlzdC5hZGQoJ2lzLXN0aWNreScpO1xuLy8gXHRcdFx0fSBlbHNlIHtcbi8vIFx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuc3R5bGUucGFkZGluZ1RvcCA9ICcwcHgnO1xuLy8gXHRcdFx0XHRcdHRhcmdldFN0aWNreS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zdGlja3knKTtcbi8vIFx0XHRcdH1cbi8vIFx0XHR9LCA0MDApO1xuLy8gXHR9XG4vLyB9KTtcbi8vIGNvbnN0IGFic29sdXRlVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMk55YjJ4c1FXNXBiV0YwYVc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNRVzVwYldGMGFXOXVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFN4dlFrRkJiMElzUjBGQlJ6dEpRVU16UWl4SlFVRk5MRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0SlFVTjBSU3hKUVVGTkxHTkJRV01zUjBGQlJ5eGhRVUZoTEVOQlFVRTdTVUZEY0VNc1NVRkJTU3hEUVVGRExGbEJRVms3VVVGQlJTeFBRVUZOTzBsQlJYcENMRWxCUVVrc1NVRkJTU3hEUVVGQk8wbEJSVklzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4N1VVRkRNVUlzU1VGQlRTeFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTXNUVUZCVFN4SlFVRkpMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVUU3VVVGREwwVXNTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkJSU3hQUVVGTk8xRkJSWFpDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZCTzBsQlEzWkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJSVVlzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU5vUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dFpRVU14UWl4SlFVRk5MRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF6dFpRVU14Unl3MlNFRkJOa2c3V1VGRE4wZ3NTVUZCU1N4RFFVRkRMRlZCUVZVN1owSkJRVVVzVDBGQlRUdFpRVVYyUWl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUVR0WlFVTnlReXhKUVVGSkxFbEJRVWtzVFVGQlRTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzFsQlEzcERMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNN1owSkJSMnhETEcxRVFVRnRSRHRuUWtGRGJrUXNPRU5CUVRoRE8yZENRVU01UXl4TFFVRkxPMWxCUTFBc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFNpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJSMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc2IwSkJRVzlDTEVOQlFVRTdRVUZIYmtNc2FVUkJRV2xFTzBGQlEycEVMR05CUVdNN1FVRkRaQ3hwUWtGQmFVSTdRVUZEYWtJc2IwTkJRVzlETzBGQlEzQkRMR2xDUVVGcFFqdEJRVU5xUWl4blJVRkJaMFU3UVVGRGFFVXNNa1JCUVRKRU8wRkJRek5FTEhORVFVRnpSRHRCUVVOMFJDeHZSa0ZCYjBZN1FVRkRjRVlzWjBSQlFXZEVPMEZCUTJoRUxHTkJRV003UVVGRFpDeG5SVUZCWjBVN1FVRkRhRVVzYlVSQlFXMUVPMEZCUTI1RUxFOUJRVTg3UVVGRFVDeGhRVUZoTzBGQlEySXNTMEZCU3p0QlFVTk1MRTFCUVUwN1FVRkZUaXhuUmtGQlowWWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2xvc2UgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIGNsb3NlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldCk7XG4gICAgaWYgKCFjbG9zZUVsZW1lbnRzKVxuICAgICAgICByZXR1cm47XG4gICAgY2xvc2VFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAvLyBpc0hpZGRlbiA9IEhUTUxFbGVtZW50LmhpZGRlblxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyeHZjMlV1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SmpiRzl6WlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVVNc1JVRkJLMEk3VVVGQk4wSXNiMEpCUVdkQ08wbEJReTlDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCYTBJc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRGVFVXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1VVRkJSU3hQUVVGTk8wbEJSVEZDTEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xRkJRek5DTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTm9ReXhEUVVGRE8xbEJRV01zVDBGQlR5eERRVUZETEZWQlFWY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGQk8xbEJRMmhFTEdkRFFVRm5RenRSUVVOc1F5eERRVUZETEVOQlFVTTdTVUZJUml4RFFVZEZMRU5CUTBnc1EwRkJRVHRCUVVOSUxFTkJRVU1zUTBGQlFUdEJRVVZFTEd0Q1FVRmxMRXRCUVVzc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY3VzdG9tQ3Vyc29yID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGVyLW9iamVjdCcpO1xuICAgIGlmICghY3Vyc29yKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGhvdmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgYScpO1xuICAgIGlmICghaG92ZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gc2V0Q3Vyc29yKGV2ZW50LCB7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBzZXRDdXJzb3IoZXZlbnQsIHsgY3Vyc29yRWxlbWVudDogY3Vyc29yIH0pOyB9KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFJpcHBsZSh7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XG4gICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2lzLWRlZmF1bHQnKTtcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xpY2thYmxlJyk7XG4gICAgfSk7IH0pO1xuICAgIGhvdmVyRWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1jbGlja2FibGUnKTtcbiAgICB9KTsgfSk7XG4gICAgZnVuY3Rpb24gc2V0Q3Vyc29yKGV2ZW50LCBfYSkge1xuICAgICAgICB2YXIgY3Vyc29yID0gX2EuY3Vyc29yRWxlbWVudDtcbiAgICAgICAgdmFyIHggPSBldmVudC5jbGllbnRYO1xuICAgICAgICB2YXIgeSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgIGN1cnNvci5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcbiAgICAgICAgY3Vyc29yLnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG4gICAgICAgIC8vIGN1cnNvci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7eCAtIDE1fXB4LCAke3kgLSAxNX1weGA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFJpcHBsZShfYSkge1xuICAgICAgICB2YXIgY3Vyc29yID0gX2EuY3Vyc29yRWxlbWVudDtcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZCcpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmQnKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY3VzdG9tQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNWemRHOXRRM1Z5YzI5eUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWTNWemRHOXRRM1Z5YzI5eUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUU3haUVVGWkxFZEJRVWM3U1VGRGJrSXNTVUZCVFN4TlFVRk5MRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wbEJRM0pGTEVsQlFVY3NRMEZCUXl4TlFVRk5PMUZCUVVVc1QwRkJUenRKUVVWd1FpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFXTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRla1VzU1VGQlJ5eERRVUZETEZsQlFWazdVVUZCUlN4UFFVRlBPMGxCUlhwQ0xGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4VlFVRkJMRXRCUVVzc1NVRkJTU3hQUVVGQkxGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4aFFVRmhMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQk0wTXNRMEZCTWtNc1EwRkJReXhEUVVGRE8wbEJRM0JITEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVWQlFVVXNWVUZCUVN4TFFVRkxMRWxCUVVrc1QwRkJRU3hUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNZVUZCWVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVE5ETEVOQlFUSkRMRU5CUVVNc1EwRkJRenRKUVVNM1JpeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdOQlFVMHNUMEZCUVN4VFFVRlRMRU5CUVVNc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCY0VNc1EwRkJiME1zUTBGQlF5eERRVUZETzBsQlJTOUZMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMGxCUTI1RExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBMRWxCUVVrc1QwRkJRU3hQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRk8xRkJRM1JGTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBsQlEzcERMRU5CUVVNc1EwRkJReXhGUVVZNFFpeERRVVU1UWl4RFFVRkRMRU5CUVVNN1NVRkRTaXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHl4SlFVRkpMRTlCUVVFc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSVHRSUVVOMFJTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEpRVU4wUXl4RFFVRkRMRU5CUVVNc1JVRkdPRUlzUTBGRk9VSXNRMEZCUXl4RFFVRkRPMGxCUlVvc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFUaENPMWxCUVRWQ0xIbENRVUZ4UWp0UlFVTm9SQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUTNoQ0xFbEJRVTBzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkZlRUlzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVUwc1EwRkJReXhQUVVGSkxFTkJRVU03VVVGRE4wSXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFZEJRVTBzUTBGQlF5eFBRVUZKTEVOQlFVTTdVVUZETlVJc2FVVkJRV2xGTzBsQlEycEZMRU5CUVVNN1NVRkZSaXhUUVVGVExGTkJRVk1zUTBGQlF5eEZRVUY1UWp0WlFVRjJRaXg1UWtGQmNVSTdVVUZEZWtNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkRMMElzVlVGQlZTeERRVUZETzFsQlExWXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEYmtNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBsQlExUXNRMEZCUXp0QlFVTkdMRU5CUVVNc1EwRkJRenRCUVVWR0xHdENRVUZsTEZsQlFWa3NRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNjcm9sbHNweSA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBtZW51c0NsYXNzID0gX2EubWVudXNTZWxlY3Rvciwgc2VjdGlvbnNDbGFzcyA9IF9hLnNlY3Rpb25zU2VsZWN0b3I7XG4gICAgdmFyIHNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChtZW51c0NsYXNzKTtcbiAgICB2YXIgbWVudXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlY3Rpb25zQ2xhc3MpO1xuICAgIGlmICghc2VjdGlvbnMgfHwgIW1lbnVzKVxuICAgICAgICByZXR1cm47XG4gICAgbWVudXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IGhyZWYgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICAvLyBjb25zdCB0YXJnZXRPZmZzZXRZID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihocmVmKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcbiAgICAgICAgICAgIHZhciB0YXJnZXRPZmZzZXRZID0gc2VjdGlvbnNbaW5kZXhdLm9mZnNldFRvcDtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0YXJnZXRPZmZzZXRZKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc2VjdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uLm9mZnNldFRvcCA8PSB3aW5kb3cucGFnZVlPZmZzZXQgKyAyMDApIHtcbiAgICAgICAgICAgICAgICBtZW51cy5mb3JFYWNoKGZ1bmN0aW9uIChtZW51KSB7IHJldHVybiBtZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpOyB9KTtcbiAgICAgICAgICAgICAgICBtZW51c1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbHNweTtcbi8vIGNvbnN0IGFic29sdXRlVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4vLyBmdW5jdGlvbiBnZXRBYnNvbHV0ZVRvcChlbGVtZW50KSB7XG4vLyAgIHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQgKyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbi8vIH1cbi8vIOKAi1xuLy8gY29uc3QgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbi8vIGNvbnN0IHBhcmVudEFic29sdXRlVG9wID0gZ2V0QWJzb2x1dGVUb3AocGFyZW50RWxlbWVudCk7XG4vLyBjb25zdCBhYnNvdWx0ZVRvcCA9IGdldEFic29sdXRlVG9wKGVsZW1lbnQpO1xuLy8g4oCLXG4vLyBjb25zdCByZWxhdGl2ZVRvcCA9IGFic29sdXRlVG9wIC0gcGFyZW50QWJzb2x1dGVUb3A7XG4vLyDstpzsspg6IGh0dHBzOi8vbW9tbW9vLnRpc3RvcnkuY29tLzg1IFvqsJzrsJzsnpDroZwg7ZmA66GcIOyEnOq4sF1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyTnliMnhzYzNCNUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYzJOeWIyeHNjM0I1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJTMEVzU1VGQlRTeFRRVUZUTEVkQlFVY3NWVUZCUXl4RlFVRjVSVHRSUVVGMlJTdzJRa0ZCZVVJc1JVRkJSU3h0UTBGQkswSTdTVUZETjBVc1NVRkJUU3hSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGclFpeFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVTjJSU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRV3RDTEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUTNaRkxFbEJRVWNzUTBGQlF5eFJRVUZSTEVsQlFVa3NRMEZCUXl4TFFVRkxPMUZCUVVVc1QwRkJUVHRKUVVVNVFpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXM3VVVGRE0wSXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN1dVRkRja01zUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkJPMWxCUTNSQ0xEUkRRVUUwUXp0WlFVTTFReXhwUmtGQmFVWTdXVUZEYWtZc1NVRkJUU3hoUVVGaExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJRVHRaUVVNdlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hoUVVGaExFTkJRVU1zUTBGQlFUdFJRVU51UXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOS0xFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwWXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlR0UlFVTm9ReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzN1dVRkRPVUlzU1VGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4SlFVRkpMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzUjBGQlJ5eEZRVUZGTzJkQ1FVTm9SQ3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1N4SlFVRkpMRTlCUVVFc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVd4RExFTkJRV3RETEVOQlFVTXNRMEZCUVR0blFrRkRla1FzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdZVUZEZUVNN1VVRkRTQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5LTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNVMEZCVXl4RFFVRkJPMEZCU1hoQ0xHZEdRVUZuUmp0QlFVTm9SaXh4UTBGQmNVTTdRVUZEY2tNc2NVVkJRWEZGTzBGQlEzSkZMRWxCUVVrN1FVRkRTaXhKUVVGSk8wRkJRMG9zSzBOQlFTdERPMEZCUXk5RExESkVRVUV5UkR0QlFVTXpSQ3dyUTBGQkswTTdRVUZETDBNc1NVRkJTVHRCUVVOS0xIVkVRVUYxUkR0QlFVZDJSQ3hwUkVGQmFVUWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2hlY2tib3hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jaGVja2JveFwiKSk7XG52YXIgdGV4dGFyZWFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90ZXh0YXJlYVwiKSk7XG52YXIgZmlsZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbGVcIikpO1xudmFyIG51bWJlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL251bWJlclwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgY2hlY2tib3g6IGNoZWNrYm94XzEuZGVmYXVsdCxcbiAgICB0ZXh0YXJlYTogdGV4dGFyZWFfMS5kZWZhdWx0LFxuICAgIGZpbGU6IGZpbGVfMS5kZWZhdWx0LFxuICAgIG51bWJlcjogbnVtYmVyXzEuZGVmYXVsdCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMSGRFUVVGcFF6dEJRVU5xUXl4M1JFRkJhVU03UVVGRGFrTXNaMFJCUVhsQ08wRkJRM3BDTEc5RVFVRTJRanRCUVVVM1FpeHJRa0ZCWlR0SlFVTmlMRkZCUVZFc2IwSkJRVUU3U1VGRFVpeFJRVUZSTEc5Q1FVRkJPMGxCUTFJc1NVRkJTU3huUWtGQlFUdEpRVU5LTEUxQlFVMHNhMEpCUVVFN1EwRkRVQ3hEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjaGVja2JveCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGVja0FsbFNlbGVjdG9yID0gX2EuY2hlY2tBbGxTZWxlY3RvciwgY2hlY2tTZWxlY3RvciA9IF9hLmNoZWNrU2VsZWN0b3I7XG4gICAgcmV0dXJuICh7XG4gICAgICAgIGNoZWNrQWxsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsU2VsZWN0b3IpLFxuICAgICAgICBjaGVja0l0ZW1zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNoZWNrU2VsZWN0b3IpLFxuICAgICAgICBzZXRFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGVja0FsbCB8fCAhdGhpcy5jaGVja0l0ZW1zKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tBbGwoX3RoaXMuY2hlY2tJdGVtcywgX3RoaXMuY2hlY2tBbGwpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGVja0l0ZW0pIHtcbiAgICAgICAgICAgICAgICBjaGVja0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Q2hlY2tFYWNoKF90aGlzLmNoZWNrSXRlbXMsIF90aGlzLmNoZWNrQWxsKTsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q2hlY2tFYWNoOiBmdW5jdGlvbiAoY2hlY2tJdGVtcywgY2hlY2tBbGwpIHtcbiAgICAgICAgICAgIHZhciBjaGVja3MgPSBBcnJheS5mcm9tKGNoZWNrSXRlbXMpO1xuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZEV2ZXJ5ID0gY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVja0l0ZW0pIHsgcmV0dXJuIGNoZWNrSXRlbS5jaGVja2VkOyB9KTtcbiAgICAgICAgICAgIHZhciBpc0NoZWNrZWRTb21lID0gY2hlY2tzLnNvbWUoZnVuY3Rpb24gKGNoZWNrSXRlbSkgeyByZXR1cm4gY2hlY2tJdGVtLmNoZWNrZWQ7IH0pO1xuICAgICAgICAgICAgY2hlY2tBbGwuY2hlY2tlZCA9IGlzQ2hlY2tlZEV2ZXJ5O1xuICAgICAgICAgICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGlzQ2hlY2tlZFNvbWUgJiYgIWlzQ2hlY2tlZEV2ZXJ5O1xuICAgICAgICAgICAgY2hlY2tBbGwuZGF0YXNldC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENoZWNrQWxsOiBmdW5jdGlvbiAoY2hlY2tJdGVtcywgY2hlY2tBbGwpIHtcbiAgICAgICAgICAgIGNoZWNrSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoY2hlY2tJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tJdGVtLmNoZWNrZWQgPSBjaGVja0FsbC5jaGVja2VkO1xuICAgICAgICAgICAgICAgIGNoZWNrQWxsLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrYm94O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJobFkydGliM2d1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SmphR1ZqYTJKdmVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVV0QkxFbEJRVTBzVVVGQlVTeEhRVUZITEZWQlFVTXNSVUZCT0VNN1VVRkJOVU1zYzBOQlFXZENMRVZCUVVVc1owTkJRV0U3U1VGQmEwSXNUMEZCUVN4RFFVRkRPMUZCUTNCRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEyeEVMRlZCUVZVc1JVRkJSU3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1lVRkJZU3hEUVVGRE8xRkJRM0JFTEZGQlFWRTdXVUZCVWl4cFFrRlBRenRaUVU1RExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3WjBKQlFVVXNUMEZCVFR0WlFVVTVReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNTMEZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEV0QlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJhRVFzUTBGQlowUXNRMEZCUXl4RFFVRkJPMWxCUTJoSExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1UwRkJVenRuUWtGREwwSXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4alFVRk5MRTlCUVVFc1MwRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQmFrUXNRMEZCYVVRc1EwRkJReXhEUVVGQk8xbEJReTlHTEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTBvc1EwRkJRenRSUVVORUxGbEJRVmtzUlVGQldpeFZRVUZoTEZWQlFWVXNSVUZCUlN4UlFVRlJPMWxCUXk5Q0xFbEJRVTBzVFVGQlRTeEhRVUYxUWl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzFsQlEzcEVMRWxCUVUwc1kwRkJZeXhIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCUVN4VFFVRlRMRWxCUVVrc1QwRkJRU3hUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZxUWl4RFFVRnBRaXhEUVVGRExFTkJRVUU3V1VGRGJrVXNTVUZCVFN4aFFVRmhMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZCTEZOQlFWTXNTVUZCU1N4UFFVRkJMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRV3BDTEVOQlFXbENMRU5CUVVNc1EwRkJRVHRaUVVWcVJTeFJRVUZSTEVOQlFVTXNUMEZCVHl4SFFVRkhMR05CUVdNc1EwRkJRVHRaUVVOcVF5eFJRVUZSTEVOQlFVTXNZVUZCWVN4SFFVRkhMR0ZCUVdFc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlFUdFpRVU42UkN4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUjBGQlJ5eGhRVUZoTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVFN1VVRkRia1VzUTBGQlF6dFJRVU5FTEZkQlFWY3NXVUZCUXl4VlFVRlZMRVZCUVVVc1VVRkJVVHRaUVVNNVFpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1UwRkJVenRuUWtGRE1VSXNVMEZCVXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZCTzJkQ1FVTndReXhSUVVGUkxFTkJRVU1zWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUVR0blFrRkRPVUlzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGQk8xbEJRM2hETEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTBvc1EwRkJRenRMUVVOR0xFTkJRVU03UVVFelFtMUZMRU5CTWtKdVJTeERRVUZCTzBGQlJVWXNhMEpCUVdVc1VVRkJVU3hEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbnB1dFRleHRhcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHRhZ05hbWXqs7wgbm9kZU5hbWXsnYAg7YWN7Iqk7Yq4IOuFuOuTnOulvCDqsIHqsIEgdW5kZWZpbmVk7JmAICN0ZXh0IOuwmO2ZmO2VnOuLpC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpc1RleHRhcmVhID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYSc7XG4gICAgICAgIGlmICghaXNUZXh0YXJlYSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIEJZVEVfTUFYSU1VTSA9IDMwO1xuICAgICAgICB2YXIgYnl0ZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGV4dGZpZWxkLWJ5dGUgYicpO1xuICAgICAgICBpZiAoIWJ5dGVFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgc3RyaW5nQnl0ZUxlbmd0aCA9ICgoX2EgPSB0YXJnZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZS5yZXBsYWNlKC9bXFwwLVxceDdmXXwoWzAtXFx1MDdmZl18KC4pKS9nLCAnJCYkMSQyJykubGVuZ3RoKSB8fCAwOyAvLyB8fCAwIOyehOyLnFxuICAgICAgICBieXRlRWxlbWVudC5pbm5lclRleHQgPSBzdHJpbmdCeXRlTGVuZ3RoO1xuICAgICAgICB2YXIgaXNNYXhpbXVtID0gc3RyaW5nQnl0ZUxlbmd0aCA+IEJZVEVfTUFYSU1VTTtcbiAgICAgICAgaWYgKGlzTWF4aW11bSkge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnaXMtaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGF1dG9FeHBhbmQodGFyZ2V0KTtcbiAgICB9KTtcbn07XG52YXIgYXV0b0V4cGFuZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIGZpZWxkLnN0eWxlLmhlaWdodCA9ICdpbmhlcml0JztcbiAgICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShmaWVsZCk7XG4gICAgdmFyIGhlaWdodCA9IGZpZWxkLnNjcm9sbEhlaWdodCArIHBhcnNlSW50KGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSk7XG4gICAgZmllbGQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlucHV0VGV4dGFyZWE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR1Y0ZEdGeVpXRXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMFpYaDBZWEpsWVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVsQlFVMHNZVUZCWVN4SFFVRkhPMGxCUTNCQ0xIVkVRVUYxUkR0SlFVTjJSQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN6czdVVUZET1VJc1NVRkJRU3h4UWtGQlRTeERRVUZsTzFGQlF6ZENMRWxCUVVrc1RVRkJUVHRaUVVGRkxFOUJRVTA3VVVGRmJFSXNTVUZCVFN4VlFVRlZMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4VlFVRlZMRU5CUVVFN1VVRkRMMFFzU1VGQlNTeERRVUZETEZWQlFWVTdXVUZCUlN4UFFVRk5PMUZCUlhaQ0xFbEJRVTBzV1VGQldTeEhRVUZITEVWQlFVVXNRMEZCUVR0UlFVVjJRaXhKUVVGTkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRzFDUVVGdFFpeERRVUZETEVOQlFVRTdVVUZETlVVc1NVRkJTU3hEUVVGRExGZEJRVmM3V1VGQlJTeFBRVUZOTzFGQlJYaENMRWxCUVUwc1owSkJRV2RDTEVkQlFVY3NUMEZCUVN4TlFVRk5MREJEUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNOa0pCUVRaQ0xFVkJRVVVzVVVGQlVTeEZRVUZGTEUxQlFVMHNTMEZCU1N4RFFVRkRMRU5CUVVFc1EwRkJReXhWUVVGVk8xRkJRemxITEZkQlFWY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1owSkJRV2RDTEVOQlFVRTdVVUZGZUVNc1NVRkJUU3hUUVVGVExFZEJRVWNzWjBKQlFXZENMRWRCUVVjc1dVRkJXU3hEUVVGQk8xRkJRMnBFTEVsQlFVa3NVMEZCVXl4RlFVRkZPMWxCUTJJc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xTkJRemxETzJGQlFVMDdXVUZEVEN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1UwRkRha1E3VVVGRlJDeFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1NVRkRjRUlzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hKUVVGTkxGVkJRVlVzUjBGQlJ5eFZRVUZCTEV0QlFVczdTVUZEZEVJc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkJPMGxCUlRsQ0xFbEJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0SlFVTXZReXhKUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUXpOR0xFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRk5MRTFCUVUwc1QwRkJTU3hEUVVGQk8wRkJRM0JETEVOQlFVTXNRMEZCUVR0QlFVVkVMR3RDUVVGbExHRkJRV0VzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFRPRE86IOyXrOufrOuyiCDrsJjrs7XtlbTshJwg7Jis66C47J2EIOuVjCBmaWxlbGlzdCDriITsoIHrkJjripTsp4A/XG4vLyBUT0RPOiDrj5nsnbztlZwg7YyM7J287J2EIOyXheuhnOuTnCDtlojsnYQg65WMIOyytO2BrCwg7IKt7KCc7ZaI7J2EIOuVjCBmaWxlTGlzdOyXkOyEnCDsgq3soJwsIGZpbGVJbnB1dC5maWxlc+uKlCDsjJPsnbTsp4Ag7JWK7J2MLlxudmFyIGF0dGFjaEZpbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWlucHV0Jyk7XG4gICAgaWYgKCFmaWxlSW5wdXQpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBjb25zdCBmaWxlU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtc3VibWl0Jyk7XG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF0dGFjaChmaWxlSW5wdXQpOyB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2goZmlsZUlucHV0KSB7XG4gICAgdmFyIGZpbGVzID0gZmlsZUlucHV0LmZpbGVzO1xuICAgIHZhciBhdHRhY2htZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1maWxlLWF0dGFjaG1lbnQtbGlzdCcpO1xuICAgIHZhciBhdHRhY2htZW50SGVscGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1oZWxwZXInKTtcbiAgICBpZiAoIWZpbGVzIHx8ICFhdHRhY2htZW50TGlzdCB8fCAhYXR0YWNobWVudEhlbHBlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGF0dGFjaG1lbnRIZWxwZXIuc3R5bGUuZGlzcGxheSA9IGZpbGVzLmxlbmd0aCAhPT0gMCA/ICdub25lJyA6ICdibG9jayc7XG4gICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICBpZiAoIXZhbGlkRmlsZVR5cGUoZmlsZSkpXG4gICAgICAgICAgICByZXR1cm4gYWxlcnQoJ+2MjOydvO2DgOyehSBqcGVnIHBqcGVnIHBuZyDspJEg7ZWY64KY6rCAIOyVhOuLiOyVvH4nKTtcbiAgICAgICAgdmFyIGZpbGVUZW1wbGF0ZSA9IFwiXFxuXFx0XFx0XFx0PGEgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtXFxcIiBocmVmPVxcXCJcXFwiPlxcblxcdFxcdFxcdFxcdDxmaWd1cmUgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLWltYWdlXFxcIj48aW1nIHNyYz1cIiArIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpICsgXCIgYWx0PVwiICsgZmlsZS5uYW1lICsgXCI+PC9maWd1cmU+XFxuXFx0XFx0XFx0XFx0PGIgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLW5hbWVcXFwiIGhyZWY9XFxcIiNcXFwiPlwiICsgZmlsZS5uYW1lICsgXCI8L2I+XFxuXFx0XFx0XFx0XFx0PHNtYWxsIGNsYXNzPVxcXCJmaWxlLWF0dGFjaG1lbnQtaXRlbS1zaXplXFxcIiA+XCIgKyByZXR1cm5GaWxlU2l6ZShmaWxlLnNpemUpICsgXCI8L3NtYWxsPlxcblxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLWRlbGV0ZSBqcy1yZW1vdmUtdGhpc1xcXCI+PGkgY2xhc3M9XFxcImljb24tY2xvc2VcXFwiPjwvaT48L2J1dHRvbj5cXG5cXHRcXHRcXHQ8L2E+XCI7XG4gICAgICAgIGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTCArPSBmaWxlVGVtcGxhdGU7XG4gICAgICAgIC8vIGF0dGFjaG1lbnRMaXN0LmFwcGVuZChmaWxlVGVtcGxhdGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdmFsaWRGaWxlVHlwZShmaWxlKSB7XG4gICAgdmFyIGZpbGVUeXBlcyA9IFsnaW1hZ2UvanBlZycsICdpbWFnZS9naWYnLCAnaW1hZ2UvcG5nJ107XG4gICAgdmFyIGlzVmFsaWQgPSBmaWxlVHlwZXMuaW5kZXhPZihmaWxlLnR5cGUpID4gLTE7XG4gICAgLy8gY29uc3QgaXNWYWxpZCA9IGZpbGVUeXBlcy5pbmNsdWRlcyhmaWxlLnR5cGUpO1xuICAgIGlmIChpc1ZhbGlkKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJldHVybkZpbGVTaXplKHNpemUpIHtcbiAgICB2YXIgaXNCeXRlcyA9IHNpemUgPCAxMDI0O1xuICAgIHZhciBpc0tpbG9CeXRlcyA9IHNpemUgPj0gMTAyNCAmJiBzaXplIDwgMTA0ODU3NjtcbiAgICBpZiAoaXNCeXRlcylcbiAgICAgICAgcmV0dXJuIHNpemUgKyBcImJ5dGVzXCI7XG4gICAgZWxzZSBpZiAoaXNLaWxvQnl0ZXMpXG4gICAgICAgIHJldHVybiAoc2l6ZSAvIDEwMjQpLnRvRml4ZWQoMikgKyBcIktCXCI7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gKHNpemUgLyAxMDQ4NTc2KS50b0ZpeGVkKDIpICsgXCJNQlwiO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gYXR0YWNoRmlsZTtcbi8vIGZpbGVTdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XG4vLyBcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4vLyBcdGZpbGVMaXN0LmZvckVhY2goZmlsZSA9PiB7XG4vLyBcdFx0c2VuZEZpbGUoZmlsZSk7XG4vLyBcdH0pO1xuLy8gfSk7XG4vLyBmdW5jdGlvbiB2YWxpZEZpbGVTaXplKGZpbGUpIHtcbi8vIFx0YXR0YWNoZWRmaWxlcyA9IGZpbGUuZmlsZXM7XG4vLyBcdGlmKGF0dGFjaGVkZmlsZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4vLyBcdGlmKGF0dGFjaGVkZmlsZXNbMF0uc2l6ZSA+IDc1ICogMTAyNCkge1xuLy8gXHRcdGZpbGVJbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnVGhlIHNlbGVjdGVkIGZpbGUgbXVzdCBub3QgYmUgbGFyZ2VyIHRoYW4gNzUga0InKTtcbi8vIFx0XHRyZXR1cm47XG4vLyBcdH1cbi8vIFx0ZmlsZUlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcbi8vIH1cbi8vIGZ1bmN0aW9uIHNlbmRGaWxlKGZpbGUpIHtcbi8vIFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbi8vIFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuLy8gXHRmb3JtRGF0YS5zZXQoJ2ZpbGUnLCBmaWxlKTtcbi8vIFx0cmVxdWVzdC5vcGVuKCdwb3N0JywgJycpO1xuLy8gXHRyZXF1ZXN0LnNlbmQoZm9ybURhdGEpO1xuLy8gfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWm1sc1pTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW1acGJHVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeDFRMEZCZFVNN1FVRkRka01zTkVWQlFUUkZPMEZCUXpWRkxFbEJRVTBzVlVGQlZTeEhRVUZITzBsQlEycENMRWxCUVUwc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXMUNMR2RDUVVGblFpeERRVUZETEVOQlFVRTdTVUZETlVVc1NVRkJTU3hEUVVGRExGTkJRVk03VVVGQlJTeFBRVUZOTzBsQlEzUkNMR2RGUVVGblJUdEpRVU5vUlN4VFFVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFXcENMRU5CUVdsQ0xFTkJRVU1zUTBGQlFUdEJRVU12UkN4RFFVRkRMRU5CUVVFN1FVRkZSQ3hUUVVGVExFMUJRVTBzUTBGQlF5eFRRVUV5UWp0SlFVTnFReXhKUVVGQkxIVkNRVUZMTEVOQlFXTTdTVUZETTBJc1NVRkJUU3hqUVVGakxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl3d1FrRkJNRUlzUTBGQlF5eERRVUZCTzBsQlEzUkdMRWxCUVUwc1owSkJRV2RDTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXcwUWtGQk5FSXNRMEZCUXl4RFFVRkJPMGxCUXpGR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4alFVRmpMRWxCUVVrc1EwRkJReXhuUWtGQlowSTdVVUZCUlN4UFFVRk5PMGxCUlRGRUxHZENRVUZuUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkJPMGxCUlhSRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzU1VGQlNUdFJRVU0xUWl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRMR2REUVVGblF5eERRVUZETEVOQlFVRTdVVUZGZUVVc1NVRkJUU3haUVVGWkxFZEJRVWNzZVVoQlJXbERMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxEaEZRVU4yUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hyUlVGRFlpeGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh4U1VGRmFrVXNRMEZCUVR0UlFVVktMR05CUVdNc1EwRkJReXhUUVVGVExFbEJRVWtzV1VGQldTeERRVUZCTzFGQlEzaERMSFZEUVVGMVF6dEpRVU42UXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZUTEdGQlFXRXNRMEZCUXl4SlFVRkpPMGxCUTNwQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNXVUZCV1N4RlFVRkZMRmRCUVZjc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlFUdEpRVU14UkN4SlFVRk5MRTlCUVU4c1IwRkJSeXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5xUkN4cFJFRkJhVVE3U1VGRmFrUXNTVUZCU1N4UFFVRlBPMUZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVUU3UVVGRE1VSXNRMEZCUXp0QlFVVkVMRk5CUVZNc1kwRkJZeXhEUVVGRExFbEJRVWs3U1VGRE1VSXNTVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlFUdEpRVU16UWl4SlFVRk5MRmRCUVZjc1IwRkJSeXhKUVVGSkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVFN1NVRkZiRVFzU1VGQlNTeFBRVUZQTzFGQlFVVXNUMEZCVlN4SlFVRkpMRlZCUVU4c1EwRkJRVHRUUVVNM1FpeEpRVUZKTEZkQlFWYzdVVUZCUlN4UFFVRlZMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTU3hEUVVGQk96dFJRVU4yUkN4UFFVRlZMRU5CUVVNc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTU3hEUVVGQk8wRkJRMmhFTEVOQlFVTTdRVUZGUkN4clFrRkJaU3hWUVVGVkxFTkJRVUU3UVVGRmVrSXNjVVJCUVhGRU8wRkJRM0pFTERKQ1FVRXlRanRCUVVNelFpdzRRa0ZCT0VJN1FVRkRPVUlzYjBKQlFXOUNPMEZCUTNCQ0xFOUJRVTg3UVVGRFVDeE5RVUZOTzBGQlJVNHNhVU5CUVdsRE8wRkJRMnBETEN0Q1FVRXJRanRCUVVNdlFpd3dRMEZCTUVNN1FVRkZNVU1zTWtOQlFUSkRPMEZCUXpORExHOUdRVUZ2Ump0QlFVTndSaXhaUVVGWk8wRkJRMW9zUzBGQlN6dEJRVU5NTEc5RFFVRnZRenRCUVVOd1F5eEpRVUZKTzBGQlJVb3NORUpCUVRSQ08wRkJRelZDTEc5RFFVRnZRenRCUVVOd1F5eDVRMEZCZVVNN1FVRkZla01zSzBKQlFTdENPMEZCUXk5Q0xEWkNRVUUyUWp0QlFVTTNRaXd5UWtGQk1rSTdRVUZETTBJc1NVRkJTU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5wdXROdW1iZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd246ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5ZG93biAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuICAgIC8vIH0pO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5cHJlc3M6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgLy8gXHRjb25zb2xlLmxvZygna2V5cHJlc3MgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXVwOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXVwIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygnY2hhbmdlOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZSAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuICAgIC8vIH0pO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygnaW5wdXQ6ICcsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgLy8gXHRjb25zb2xlLmxvZygnaW5wdXQgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyDrsKntlqXtgqTroZwg7KGw7KCI7ZWgIOuVjCBtaW4gbWF4IOyhsOqxtOyXkCDqsbjrprDri6QuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICB2YXIgaXNOdW1iZXJJbnB1dCA9IHRhcmdldC5jbG9zZXN0KCcuanMtbnVtYmVyLWlucHV0Jyk7XG4gICAgICAgIGlmICghaXNOdW1iZXJJbnB1dClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBzZXRMaW1pdE51bWJlcik7XG4gICAgICAgIHNldElucHV0T25seU51bWJlcnMoKTtcbiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXRPbmx5TnVtYmVycygpIHtcbiAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgICAgIHZhciBrZXlDb2RlcyA9IFs2OSwgMTg5LCAxODcsIDE5MF07XG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9IGtleUNvZGVzLmluY2x1ZGVzKGtleUNvZGUpO1xuICAgICAgICAgICAgaWYgKGlzVmFsaWQpXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIHRhcmdldC52YWx1ZS5sZW5ndGggPT09IDAgJiYga2V5Q29kZSA9PT0gNDggJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPj0gNDggfHwga2V5Q29kZSA8PSA1NyB8fCBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gNjkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDE4OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gMTg3ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSAxOTAgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRMaW1pdE51bWJlcigpIHtcbiAgICAgICAgICAgIHZhciBNQVhJTVVNID0gMzAwO1xuICAgICAgICAgICAgdmFyIE1JTklNVU4gPSAwO1xuICAgICAgICAgICAgdmFyIGlzRmlyc3RQbGFjZWRaZXJvID0gLyheMCspLy50ZXN0KHRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB2YXIgaXNNYXhpbXVtID0gTnVtYmVyKHRhcmdldC52YWx1ZSkgPj0gTUFYSU1VTTtcbiAgICAgICAgICAgIHZhciBpc0xlbmd0aCA9IHRhcmdldC52YWx1ZS5sZW5ndGggPiBNSU5JTVVOO1xuICAgICAgICAgICAgaWYgKGlzRmlyc3RQbGFjZWRaZXJvKVxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IE1JTklNVU47XG4gICAgICAgICAgICBpZiAoaXNMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnNsaWNlKDAsIDMpO1xuICAgICAgICAgICAgaWYgKGlzTWF4aW11bSlcbiAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSBNQVhJTVVNO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5wdXROdW1iZXI7XG4vLyBleHBvcnQgY29uc3QgaW5wdXRWYXJpYXRpb24gPSAoKSA9PiB7XG4vLyBcdGNvbnN0IHZhcmlhdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24nKTtcbi8vIFx0Y29uc3QgaW5wdXQgPSB2YXJpYXRpb24ucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xuLy8gXHRjb25zdCBkZWNyZW1lbnQgPSB2YXJpYXRpb24ucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1kZWNyZW1lbnQnKTtcbi8vIFx0Y29uc3QgaW5jcmVtZW50ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5jcmVtZW50Jyk7XG4vLyBcdGxldCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuLy8gXHRjb25zdCBNSU5fVkFMVUUgPSAwO1xuLy8gXHRjb25zdCBNQVhfVkFMVUUgPSAxMDtcbi8vIFx0bGV0XHRpc01pbmltdW47XG4vLyBcdGxldCBpc01heGltdW07XG4vLyBcdC8vIGNvbnN0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0Ly8gY29uc3QgaXNNYXhpbXVtID0gTnVtYmVyKHZhbHVlKSA+PSBNQVhfVkFMVUU7XG4vLyBcdC8vIGlmKGlzTWluaW11bikgc2V0RGlzYWJsZURlY3JlbWVudCgpO1xuLy8gXHQvLyBpZihpc01heGltdW0pIHNldERpc2FibGVJZWNyZW1lbnQoKTtcbi8vIFx0ZGVjcmVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuLy8gXHRcdGlzTWluaW11biA9IE51bWJlcih2YWx1ZSkgPD0gTUlOX1ZBTFVFO1xuLy8gXHRcdGlzTWF4aW11bSA9IE51bWJlcih2YWx1ZSkgPj0gTUFYX1ZBTFVFO1xuLy8gXHRcdGlmKGlzTWluaW11bikge1xuLy8gXHRcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0XHRyZXR1cm47XG4vLyBcdFx0fVxuLy8gXHRcdGlmKCFpc01heGltdW0pIHtcbi8vIFx0XHRcdGluY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdH1cbi8vIFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSkgLSAxO1xuLy8gXHR9KTtcbi8vIFx0aW5jcmVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuLy8gXHRcdGlzTWluaW11biA9IE51bWJlcih2YWx1ZSkgPD0gTUlOX1ZBTFVFO1xuLy8gXHRcdGlzTWF4aW11bSA9IE51bWJlcih2YWx1ZSkgPj0gTUFYX1ZBTFVFO1xuLy8gXHRcdGNvbnNvbGUubG9nKGlzTWluaW11biwgaXNNYXhpbXVtLCB2YWx1ZSk7XG4vLyBcdFx0aWYoaXNNYXhpbXVtKSB7XG4vLyBcdFx0XHRpbmNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHRcdHJldHVybjtcbi8vIFx0XHR9XG4vLyBcdFx0aWYoIWlzTWluaW11bikge1xuLy8gXHRcdFx0ZGVjcmVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0fVxuLy8gXHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKSArIDE7XG4vLyBcdH0pO1xuLy8gXHRmdW5jdGlvbiBzZXREaXNhYmxlRGVjcmVtZW50KCkge1xuLy8gXHRcdGRlY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdHJldHVybjtcbi8vIFx0fVxuLy8gXHRmdW5jdGlvbiBzZXREaXNhYmxlSWVjcmVtZW50KCkge1xuLy8gXHRcdGRlY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdHJldHVybjtcbi8vIFx0fVxuLy8gfTtcbi8vIHZhbHVlID0gaXNOYU4odmFsdWUpID8gMCA6IHZhbHVlO1xuLy8gdmFsdWUgPCAxID8gdmFsdWUgPSAxIDogJyc7XG4vLyB2YWx1ZS0tO1xuLy8gcGFyc2VJbnQgdnMgTnVtYmVyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIE1JTl9WQUxVRSA9IDA7XG4gICAgdmFyIE1BWF9WQUxVRSA9IDEwO1xuICAgIHZhciB0YXJnZXRJbnB1dDtcbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50JykpIHtcbiAgICAgICAgdGFyZ2V0SW5wdXQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XG4gICAgICAgIGlmICh0YXJnZXRJbnB1dC52YWx1ZSA8PSBNSU5fVkFMVUUpIHtcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgLy8gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpXG4gICAgICAgICAgICAvLyB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC0tdGFyZ2V0SW5wdXQudmFsdWU7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKSkge1xuICAgICAgICB0YXJnZXRJbnB1dCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcbiAgICAgICAgaWYgKHRhcmdldElucHV0LnZhbHVlID49IE1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgLy8gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1kZWNyZW1lbnQnKS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpXG4gICAgICAgICAgICAvLyB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWRlY3JlbWVudCcpLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICsrdGFyZ2V0SW5wdXQudmFsdWU7XG4gICAgfVxufSk7XG4vLyBmdW5jdGlvbiBzZXRTdHJpbmdCeXRlcygpIHt9XG4vLyBleHBvcnQgY29uc3QgaW5wdXQgPSB7XG4vLyBcdHRleHRhcmVhOiBpbnB1dFRleHRhcmVhKCksXG4vLyBcdG51bWJlcjogaW5wdXROdW1iZXIoKVxuLy8gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJuVnRZbVZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2liblZ0WW1WeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUU3hYUVVGWExFZEJRVWM3U1VGRGJFSXNiMFJCUVc5RU8wbEJRM0JFTEdsRVFVRnBSRHRKUVVOcVJDeHpSRUZCYzBRN1NVRkRkRVFzVFVGQlRUdEpRVU5PTEhGRVFVRnhSRHRKUVVOeVJDeHJSRUZCYTBRN1NVRkRiRVFzZFVSQlFYVkVPMGxCUTNaRUxFMUJRVTA3U1VGRFRpeHJSRUZCYTBRN1NVRkRiRVFzSzBOQlFTdERPMGxCUXk5RExHOUVRVUZ2UkR0SlFVTndSQ3hOUVVGTk8wbEJRMDRzYlVSQlFXMUVPMGxCUTI1RUxHZEVRVUZuUkR0SlFVTm9SQ3h4UkVGQmNVUTdTVUZEY2tRc1RVRkJUVHRKUVVOT0xHdEVRVUZyUkR0SlFVTnNSQ3dyUTBGQkswTTdTVUZETDBNc2IwUkJRVzlFTzBsQlEzQkVMRTFCUVUwN1NVRkZUaXc0UWtGQk9FSTdTVUZET1VJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGQkxFdEJRVXM3VVVGRGFFTXNTVUZCUVN4eFFrRkJUU3hEUVVGbE8xRkJSVGRDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHRSUVVONFJDeEpRVUZKTEVOQlFVTXNZVUZCWVR0WlFVRkZMRTlCUVUwN1VVRkZNVUlzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUVR0UlFVTnNSQ3h0UWtGQmJVSXNSVUZCUlN4RFFVRkJPMUZCUlhKQ0xGTkJRVk1zYlVKQlFXMUNPMWxCUTJ4Q0xFbEJRVUVzZFVKQlFVOHNRMEZCVlR0WlFVTjZRaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzFsQlEzQkRMRWxCUVUwc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1dVRkRNVU1zU1VGQlNTeFBRVUZQTzJkQ1FVRkZMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdFpRVU51UXl4NVJVRkJlVVU3V1VGRGVrVXNORVJCUVRSRU8xbEJRelZFTERSRFFVRTBRenRaUVVNMVF5dzJRMEZCTmtNN1dVRkROME1zTmtOQlFUWkRPMWxCUXpkRExEWkRRVUUyUXp0UlFVTXZReXhEUVVGRE8xRkJRMFFzVTBGQlV5eGpRVUZqTzFsQlEzSkNMRWxCUVUwc1QwRkJUeXhIUVVGSExFZEJRVWNzUTBGQlFUdFpRVU51UWl4SlFVRk5MRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVUU3V1VGRGFrSXNTVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdFpRVU53UkN4SlFVRk5MRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRTlCUVU4c1EwRkJRVHRaUVVOcVJDeEpRVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZGT1VNc1NVRkJTU3hwUWtGQmFVSTdaMEpCUVVVc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVRTdXVUZETjBNc1NVRkJTU3hSUVVGUk8yZENRVUZGTEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRM0pFTEVsQlFVa3NVMEZCVXp0blFrRkJSU3hOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUVR0UlFVTjJReXhEUVVGRE8wbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hyUWtGQlpTeFhRVUZYTEVOQlFVRTdRVUZGTVVJc2QwTkJRWGRETzBGQlEzaERMRGhFUVVFNFJEdEJRVU01UkN4cFJVRkJhVVU3UVVGRGFrVXNlVVZCUVhsRk8wRkJRM3BGTEhsRlFVRjVSVHRCUVVWNlJTdzBRa0ZCTkVJN1FVRkROVUlzZDBKQlFYZENPMEZCUTNoQ0xIbENRVUY1UWp0QlFVTjZRaXhyUWtGQmEwSTdRVUZEYkVJc2EwSkJRV3RDTzBGQlEyeENMRzlFUVVGdlJEdEJRVU53UkN4dlJFRkJiMFE3UVVGRmNFUXNNa05CUVRKRE8wRkJRek5ETERKRFFVRXlRenRCUVVVelF5eHJSRUZCYTBRN1FVRkRiRVFzTkVOQlFUUkRPMEZCUXpWRExEUkRRVUUwUXp0QlFVTTFReXh2UWtGQmIwSTdRVUZEY0VJc05rTkJRVFpETzBGQlF6ZERMR0ZCUVdFN1FVRkRZaXhOUVVGTk8wRkJRMDRzY1VKQlFYRkNPMEZCUTNKQ0xHZEVRVUZuUkR0QlFVTm9SQ3hOUVVGTk8wRkJSVTRzSzBKQlFTdENPMEZCUXk5Q0xFOUJRVTg3UVVGRFVDeHJSRUZCYTBRN1FVRkRiRVFzTkVOQlFUUkRPMEZCUXpWRExEUkRRVUUwUXp0QlFVTTFReXc0UTBGQk9FTTdRVUZET1VNc2IwSkJRVzlDTzBGQlEzQkNMRFpEUVVFMlF6dEJRVU0zUXl4aFFVRmhPMEZCUTJJc1RVRkJUVHRCUVVOT0xIRkNRVUZ4UWp0QlFVTnlRaXhuUkVGQlowUTdRVUZEYUVRc1RVRkJUVHRCUVVWT0xDdENRVUVyUWp0QlFVTXZRaXhQUVVGUE8wRkJSVkFzYjBOQlFXOURPMEZCUTNCRExEUkRRVUUwUXp0QlFVTTFReXhaUVVGWk8wRkJRMW9zUzBGQlN6dEJRVU5NTEc5RFFVRnZRenRCUVVOd1F5dzBRMEZCTkVNN1FVRkROVU1zV1VGQldUdEJRVU5hTEV0QlFVczdRVUZEVEN4TFFVRkxPMEZCUlV3c2IwTkJRVzlETzBGQlEzQkRMRGhDUVVFNFFqdEJRVU01UWl4WFFVRlhPMEZCUlZnc2NVSkJRWEZDTzBGQlEzSkNMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJRU3hMUVVGTE8wbEJRemxDTEVsQlFVRXNjVUpCUVUwc1EwRkJaVHRKUVVNM1FpeEpRVUZOTEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkRia0lzU1VGQlRTeFRRVUZUTEVkQlFVY3NSVUZCUlN4RFFVRkJPMGxCUTNCQ0xFbEJRVWtzVjBGQlZ5eERRVUZCTzBsQlJXWXNTVUZCU1N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExIbENRVUY1UWl4RFFVRkRMRVZCUVVVN1VVRkROME1zVjBGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1lVRkJZU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVFN1VVRkRjRVVzU1VGQlNTeFhRVUZYTEVOQlFVTXNTMEZCU3l4SlFVRkpMRk5CUVZNc1JVRkJSVHRaUVVOc1F5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFUdFpRVU51UXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExGVkJRVlVzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0WlFVTjJReXcyUmtGQk5rWTdXVUZETjBZc2VVWkJRWGxHTzFsQlEzcEdMRTlCUVUwN1UwRkRVRHRSUVVORUxFVkJRVVVzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUVR0TFFVTndRanRKUVVORUxFbEJRVWtzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eEZRVUZGTzFGQlF6ZERMRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEdGQlFXRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzFGQlEzQkZMRWxCUVVrc1YwRkJWeXhEUVVGRExFdEJRVXNzU1VGQlNTeFRRVUZUTEVWQlFVVTdXVUZEYkVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1dVRkRia01zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRaUVVWc1F5dzJSa0ZCTmtZN1dVRkROMFlzZVVaQlFYbEdPMWxCUTNwR0xFOUJRVTA3VTBGRFVEdFJRVU5FTEVWQlFVVXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJRVHRMUVVOd1FqdEJRVU5JTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUlVZc0swSkJRU3RDTzBGQlJTOUNMSGxDUVVGNVFqdEJRVU42UWl3NFFrRkJPRUk3UVVGRE9VSXNlVUpCUVhsQ08wRkJRM3BDTEV0QlFVc2lmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBn66qo65Og7KCE7JetIGnrjIDshozrrLjsnpDqtazrtoTsl4bsnbQgbeupgO2LsOudvOyduCB17Jyg64uI7L2U65OcIHnsiqTti7HqsoDsg4kgXuyLnOyekVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gY29uc3QgaE5hbWUgPSAvXlvqsIAt7Z6jXSskLztcbi8vIGNvbnN0IGhOYW1lMiA9ICAvXlvqsIAt7Z6jYS16QS1aXSskLztcbi8vIGNvbnN0IG9ubHlOdW1iZXJzID0gL15bMC05XSokLztcbi8vIGNvbnN0IHBhc3N3b3JkID0gL14oPz0uKlthLXpBLVpdKSgoPz0uKlxcZCl8KD89LipcXFcpKS57NiwyMH0kLzsgLy8g7JiB7Iir7Yq5XG4vLyBjb25zdCBlbWFpbCA9IC9eW2EtejAtOV8rLi1dK0AoW2EtejAtOS1dK1xcLikrW2EtejAtOV17Miw0fSQvO1xuLy8gY29uc3QgcGhvbmUgPSAvXlxcZHsyLDN9LVxcZHszLDR9LVxcZHs0fSQvOyAvLyAgZXgpMTIzLTEyMy0xMjM0XG4vLyBjb25zdCBwaG9uZTIgPSAgL14wMShbMHwxfDZ8N3w4fDldPyktPyhbMC05XXszLDR9KS0/KFswLTldezR9KSQvOyAvLyAwMTAtMDAwMC0wMDAwXG4vLyBjb25zdCB1cmwgPSAvXihmaWxlfGdvcGhlcnxuZXdzfG5udHB8dGVsbmV0fGh0dHBzP3xmdHBzP3xzZnRwKTpcXC9cXC8oW2EtejAtOS1dK1xcLikrW2EtejAtOV17Miw0fS4qJC87XG5leHBvcnRzLnZhbGlkaXR5ID0ge1xuICAgIGlzUmVxdWlyZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIU9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpO1xuICAgIH0sXG4gICAgaXNOdW1lcmljOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIC9bMC05XS9nLnRlc3QodmFsdWUpO1xuICAgIH0sXG4gICAgaXNBbHBoYWJldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAvW2Etel0vZ2kudGVzdCh2YWx1ZSk7XG4gICAgfSxcbiAgICBpc0VtYWlsOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIC9eW+qwgC3tnqNhLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rQFvqsIAt7Z6jQS1aMC05Li1dK1xcLltBLVpdezIsfSQvaS50ZXN0KHZhbHVlLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0sXG4gICAgLy8gYWRkIG1pbiAmIG1heFxuICAgIGlzTGVuZ3RoOiBmdW5jdGlvbiAodmFsdWUsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoIDwgbGVuZ3RoO1xuICAgIH0sXG4gICAgLy8gaXNCdHllTGVuZ3RoKHZhbHVlLCBsZW5ndGgpIHtcbiAgICAvLyB9LFxuICAgIGlzTG93ZXJDYXNlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgaXNOdWxsOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICB9LFxufTtcbi8vIGV4cG9ydCBjb25zdCBpbnB1dEhlbHBlciA9IHtcbi8vIFx0aXNTaG9ydDogJycsXG4vLyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZG1Gc2FXUmhkR2x2Ym5NdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUoyWVd4cFpHRjBhVzl1Y3k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUVzZDBOQlFYZERPenRCUVVWNFF5dzBRa0ZCTkVJN1FVRkROVUlzYjBOQlFXOURPMEZCUTNCRExHdERRVUZyUXp0QlFVTnNReXgzUlVGQmQwVTdRVUZEZUVVc1owVkJRV2RGTzBGQlEyaEZMQ3RFUVVFclJEdEJRVU12UkN4eFJrRkJjVVk3UVVGRGNrWXNkVWRCUVhWSE8wRkJSVEZHTEZGQlFVRXNVVUZCVVN4SFFVRkhPMGxCUTNSQ0xGVkJRVlVzV1VGQlF5eExRVUZMTzFGQlEyWXNUMEZCVHl4TFFVRkxMRXRCUVVzc1JVRkJSU3hKUVVGSkxFdEJRVXNzUzBGQlN5eEpRVUZKTEVsQlFVa3NTMEZCU3l4TFFVRkxMRk5CUVZNc1NVRkJTU3hEUVVGRkxFdEJRVXNzUzBGQlN5eEpRVUZKTEVsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVVzc1VVRkJVU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEpRVU01U1N4RFFVRkRPMGxCUTBRc1UwRkJVeXhaUVVGRExFdEJRVXM3VVVGRFlpeFBRVUZQTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGRE4wSXNRMEZCUXp0SlFVTkVMRlZCUVZVc1dVRkJReXhMUVVGTE8xRkJRMlFzVDBGQlR5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wbEJRemxDTEVOQlFVTTdTVUZEUkN4UFFVRlBMRmxCUVVNc1MwRkJTenRSUVVOWUxFOUJRVThzYTBWQlFXdEZMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkJPMGxCUTNKSExFTkJRVU03U1VGRFJDeG5Ra0ZCWjBJN1NVRkRhRUlzVVVGQlVTeFpRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5PMUZCUTNCQ0xFOUJRVThzUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVFN1NVRkRPVUlzUTBGQlF6dEpRVU5FTEdkRFFVRm5RenRKUVVOb1F5eExRVUZMTzBsQlEwd3NWMEZCVnl4WlFVRkRMRXRCUVVzN1VVRkRaaXhQUVVGUExFdEJRVXNzUzBGQlN5eExRVUZMTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVFN1NVRkRkRU1zUTBGQlF6dEpRVU5FTEUxQlFVMHNXVUZCUXl4TFFVRkxPMUZCUTFZc1QwRkJUeXhMUVVGTExFdEJRVXNzU1VGQlNTeEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhEUVVGQk8wbEJRemRETEVOQlFVTTdRMEZIUml4RFFVRkJPMEZCUlVRc0swSkJRU3RDTzBGQlF5OUNMR2RDUVVGblFqdEJRVU5vUWl4TFFVRkxJbjA9Il0sInNvdXJjZVJvb3QiOiIifQ==