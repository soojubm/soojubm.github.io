!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=37)}([function(e,t,n){},function(e,t,n){"use strict";var o=n(2),r=n(4),i=n(6),c=n(7),a=n(8),l=n(10),s=Math.max,u=Math.min,d=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(19)("replace",2,(function(e,t,n,g){return[function(o,r){var i=e(this),c=null==o?void 0:o[t];return void 0!==c?c.call(o,i,r):n.call(String(i),o,r)},function(e,t){var r=g(n,e,this,t);if(r.done)return r.value;var d=o(e),f=String(this),p="function"==typeof t;p||(t=String(t));var m=d.global;if(m){var h=d.unicode;d.lastIndex=0}for(var y=[];;){var b=l(d,f);if(null===b)break;if(y.push(b),!m)break;""===String(b[0])&&(d.lastIndex=a(f,i(d.lastIndex),h))}for(var x,w="",S=0,E=0;E<y.length;E++){b=y[E];for(var L=String(b[0]),j=s(u(c(b.index),f.length),0),k=[],q=1;q<b.length;q++)k.push(void 0===(x=b[q])?x:String(x));var A=b.groups;if(p){var O=[L].concat(k,j,f);void 0!==A&&O.push(A);var M=String(t.apply(void 0,O))}else M=v(L,f,j,k,A,t);j>=S&&(w+=f.slice(S,j)+M,S=j+L.length)}return w+f.slice(S)}];function v(e,t,o,i,c,a){var l=o+e.length,s=i.length,u=p;return void 0!==c&&(c=r(c),u=f),n.call(a,u,(function(n,r){var a;switch(r.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,o);case"'":return t.slice(l);case"<":a=c[r.slice(1,-1)];break;default:var u=+r;if(0===u)return n;if(u>s){var f=d(u/10);return 0===f?n:f<=s?void 0===i[f-1]?r.charAt(1):i[f-1]+r.charAt(1):n}a=i[u-1]}return void 0===a?"":a}))}}))},function(e,t,n){var o=n(3);e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var o=n(5);e.exports=function(e){return Object(o(e))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var o=n(7),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},function(e,t){var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},function(e,t,n){"use strict";var o=n(9)(!0);e.exports=function(e,t,n){return t+(n?o(e,t).length:1)}},function(e,t,n){var o=n(7),r=n(5);e.exports=function(e){return function(t,n){var i,c,a=String(r(t)),l=o(n),s=a.length;return l<0||l>=s?e?"":void 0:(i=a.charCodeAt(l))<55296||i>56319||l+1===s||(c=a.charCodeAt(l+1))<56320||c>57343?e?a.charAt(l):i:e?a.slice(l,l+2):c-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var o=n(11),r=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==o(e))throw new TypeError("RegExp#exec called on incompatible receiver");return r.call(e,t)}},function(e,t,n){var o=n(12),r=n(13)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=function(e){var t,n,c;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),r))?n:i?o(t):"Object"==(c=o(t))&&"function"==typeof t.callee?"Arguments":c}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var o=n(14)("wks"),r=n(18),i=n(16).Symbol,c="function"==typeof i;(e.exports=function(e){return o[e]||(o[e]=c&&i[e]||(c?i:r)("Symbol."+e))}).store=o},function(e,t,n){var o=n(15),r=n(16),i=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:o.version,mode:n(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=!1},function(e,t){var n=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},function(e,t,n){"use strict";n(20);var o=n(32),r=n(24),i=n(28),c=n(5),a=n(13),l=n(21),s=a("species"),u=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),d=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var f=a(e),p=!i((function(){var t={};return t[f]=function(){return 7},7!=""[e](t)})),g=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[s]=function(){return n}),n[f](""),!t})):void 0;if(!p||!g||"replace"===e&&!u||"split"===e&&!d){var v=/./[f],m=n(c,f,""[e],(function(e,t,n,o,r){return t.exec===l?p&&!r?{done:!0,value:v.call(t,n,o)}:{done:!0,value:e.call(n,t,o)}:{done:!1}})),h=m[0],y=m[1];o(String.prototype,e,h),r(RegExp.prototype,f,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){"use strict";var o=n(21);n(23)({target:"RegExp",proto:!0,forced:o!==/./.exec},{exec:o})},function(e,t,n){"use strict";var o,r,i=n(22),c=RegExp.prototype.exec,a=String.prototype.replace,l=c,s=(o=/a/,r=/b*/g,c.call(o,"a"),c.call(r,"a"),0!==o.lastIndex||0!==r.lastIndex),u=void 0!==/()??/.exec("")[1];(s||u)&&(l=function(e){var t,n,o,r,l=this;return u&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),s&&(t=l.lastIndex),o=c.call(l,e),s&&o&&(l.lastIndex=l.global?o.index+o[0].length:t),u&&o&&o.length>1&&a.call(o[0],n,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(o[r]=void 0)})),o}),e.exports=l},function(e,t,n){"use strict";var o=n(2);e.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var o=n(16),r=n(15),i=n(24),c=n(32),a=n(35),l=function(e,t,n){var s,u,d,f,p=e&l.F,g=e&l.G,v=e&l.S,m=e&l.P,h=e&l.B,y=g?o:v?o[t]||(o[t]={}):(o[t]||{}).prototype,b=g?r:r[t]||(r[t]={}),x=b.prototype||(b.prototype={});for(s in g&&(n=t),n)d=((u=!p&&y&&void 0!==y[s])?y:n)[s],f=h&&u?a(d,o):m&&"function"==typeof d?a(Function.call,d):d,y&&c(y,s,d,e&l.U),b[s]!=d&&i(b,s,f),m&&x[s]!=d&&(x[s]=d)};o.core=r,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){var o=n(25),r=n(31);e.exports=n(27)?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var o=n(2),r=n(26),i=n(30),c=Object.defineProperty;t.f=n(27)?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(27)&&!n(28)((function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){e.exports=!n(28)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var o=n(3),r=n(16).document,i=o(r)&&o(r.createElement);e.exports=function(e){return i?r.createElement(e):{}}},function(e,t,n){var o=n(3);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var o=n(16),r=n(24),i=n(33),c=n(18)("src"),a=n(34),l=(""+a).split("toString");n(15).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var s="function"==typeof n;s&&(i(n,"name")||r(n,"name",t)),e[t]!==n&&(s&&(i(n,c)||r(n,c,e[t]?""+e[t]:l.join(String(t)))),e===o?e[t]=n:a?e[t]?e[t]=n:r(e,t,n):(delete e[t],r(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[c]||a.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){e.exports=n(14)("native-function-to-string",Function.toString)},function(e,t,n){var o=n(36);e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";n.r(t);n(0),n(1);"2034399002125581".slice(-4).padStart("2034399002125581".length,"*");document.addEventListener("input",e=>{const t=e.target;"textarea"===t.nodeName.toLowerCase()&&(e=>{console.log(e.scrollHeight),e.style.height="inherit";const t=window.getComputedStyle(e);let n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"})(t);const n=document.querySelector(".textfield-byte b");for(var o=0;o<1e4;o++)"This is ìë¬´ìë¯¸ìë ë¬¸ìì´";var r=0;"textarea"===t.nodeName.toLowerCase()&&(r=t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length,(t.value.length>30||t.value.length>45)&&(console.log("30byteì í"),t.value=t.value.slice(0,t.value.length)),n.innerHTML=r)});const o=()=>{const e=document.body;let t=void 0;const n=document.querySelectorAll(".js-modal");n&&(n.forEach(n=>n.addEventListener("click",o=>{o.stopPropagation(),n.nextElementSibling.classList.add("is-visible"),t=window.pageYOffset,e.classList.add("body-lock"),e.style.top="-".concat(t,"px"),document.addEventListener("click",(function(){if(!n.nextElementSibling.classList.contains("is-visible"))return;n.nextElementSibling.classList.remove("is-visible"),e.classList.remove("body-lock"),window.scrollTo(0,t)}))})),document.querySelectorAll(".modal-dialog").forEach(e=>e.addEventListener("click",e=>e.stopPropagation())))},r=e=>{const t=document.querySelector(e),n=document.body;if(!t)return;const o=t===document.querySelector(".navigation li");t.addEventListener("mouseenter",()=>{t.setAttribute("aria-expanded","true"),t.classList.add("is-expanded"),o&&n.classList.add("is-shown"),t.addEventListener("mouseleave",()=>{t.setAttribute("aria-expanded","false"),t.classList.remove("is-expanded"),o&&n.classList.remove("is-shown")})})};var i=function(){const e=document.getElementById("view"),t=()=>{let{hash:t}=window.location;const n=t?"/views/".concat(t.substring(1),".html"):"/views/home.html";fetch(n).then(e=>e.ok?e.text():Promise.reject(e)).then(t=>{e.innerHTML=t,(e=>{let{checkAllElement:t,checkElements:n}=e;const o=document.querySelector(t),r=document.querySelectorAll(n);function i(){const e=Array.from(r).every(e=>e.checked);o.checked=e;const t=Array.from(r).some(e=>e.checked);o.indeterminate=t&&!e}o&&r&&(o.addEventListener("change",(function(){r.forEach(e=>{o.checked?e.checked=!0:e.checked=!1})})),r.forEach(e=>{e.addEventListener("change",i)}))})({checkAllElement:".js-check-all",checkElements:".js-check"}),o(),(()=>{const e=document.querySelectorAll(".js-accordion");if(!e)return;let t;e.forEach(e=>{t=e.nextElementSibling,e.addEventListener("click",t=>{e.classList.toggle("is-active"),e.nextElementSibling.classList.toggle("is-visible"),console.log(e)}),t.addEventListener("click",e=>e.stopPropagation())})})(),r(".js-hover-trigger"),r(".header-user-notification"),r(".header-user-account");const n=document.querySelectorAll(".js-scroll-animation");n.forEach(e=>{e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")}),window.addEventListener("scroll",()=>{n.forEach(e=>{console.log(window.pageYOffset,e.getBoundingClientRect().top);const t=window.pageYOffset;t>t+e.getBoundingClientRect().top-window.innerHeight+50&&e.classList.add("is-scrolled")})});const i=document.querySelector(".cursor");document.addEventListener("mousemove",e=>{const t=e.clientX,n=e.clientY;i.style.left="".concat(t,"px"),i.style.top="".concat(n,"px")},!1),document.addEventListener("click",()=>{i.classList.add("expand"),setTimeout(()=>{i.classList.remove("expand")},500)})}).catch(e=>console.warn("router: ",e));const i="/".concat(t.substring(1));console.log(i,window.location.pathname,window.location.history)};t(),window.addEventListener("hashchange",t),window.addEventListener("hashchange",()=>{document.querySelector(".navigation-toggle").classList.contains("is-active")&&(document.querySelector(".navigation-toggle").classList.remove("is-active"),document.querySelector(".navigation-toggle").nextElementSibling.classList.remove("is-visible"))})};n.d(t,"getTodayDate",(function(){return a}));document.addEventListener("DOMContentLoaded",()=>{"/"===window.location.pathname&&console.log("this is home page."),i(),(()=>{const e=document.body,t=document.querySelector(".js-loading");window.addEventListener("load",(function(){setTimeout((function(){t.classList.add("is-hidden"),e.classList.remove("body-lock")}),0)})),document.addEventListener("DOMContentLoaded",(function(){e.classList.add("body-lock")}))})(),(()=>{const e=document.querySelector(".js-browser");let t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?e.style.display="block":-1!==t.indexOf("chrome")&&console.log(t,"í¬ë¡¬")})(),document.addEventListener("change",e=>{const t=e.target;if(!t.closest(".js-file-input"))return;document.querySelector(".js-file-input"),document.querySelector(".js-file-submit");const n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");let r;const i=e=>{const t=["image/jpeg","image/gif","image/png"];if(console.log(t.indexOf(e.type)),t.indexOf(e.type)>-1)return!0},c=e=>e<1024?e+"bytes":e>=1024&&e<1048576?(e/1024).toFixed(2)+"KB":(e/1048576).toFixed(2)+"MB";if(r=t.files,console.log("attachedfiles",r),0===r.length)o.style.display="block";else{o.style.display="none";for(var a=0;a<r.length;a++)if(console.log("attachedfiles[i]",r[a]),i(r[a])){const e='\n            <figure class="file-attachment-item">\n              <img class="file-attachment-item-image" src='.concat(window.URL.createObjectURL(r[a]),' alt="">\n              <b class="file-attachment-item-name" href="#">').concat(r[a].name,'</b>\n              <small class="file-attachment-item-size" >').concat(c(r[a].size),'</small>\n              <button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-x"></i></button>\n            </figure>');n.innerHTML=e+n.innerHTML}else alert("íì¼íì jpeg pjpeg png ì¤ íëê° ìëì¼~")}}),document.addEventListener("click",e=>{const t=e.target,n=document.querySelector(".profile-tablist-active"),o=t.parentNode.querySelectorAll("[role=tab]"),r=t.getAttribute("data-index");t.closest("[role=tab]")&&(t.setAttribute("aria-selected","true"),n.style.left="".concat(t.offsetLeft,"px"),o.forEach(e=>e.setAttribute("aria-selected","false")),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach(e=>{e.setAttribute("aria-hidden","true"),r===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")}))},!0),(()=>{document.querySelector(".js-number-input");document.addEventListener("keydown",e=>{const{target:t}=e;t.closest(".js-number-input")&&(!function(){const t=e.keyCode;t>=48||t<=57||e.preventDefault(),69===t&&e.preventDefault(),189===t&&e.preventDefault(),187===t&&e.preventDefault(),190===t&&e.preventDefault()}(),document.addEventListener("keyup",(function(){const n=/(^0+)/.test(t.value),o=Number(t.value)>=300,r=e.target.value.length>0;n&&(e.target.value=0);r&&(e.target.value=e.target.value.slice(0,3));o&&(e.target.value=300)})))}),document.addEventListener("click",e=>{const t=e.target;let n;if(t.closest(".js-variation-decrement")){if((n=t.parentNode.querySelector(".js-variation-input")).value<=0)return void t.classList.add("is-disabled");--n.value,console.log("target",t)}if(t.closest(".js-variation-increment")){if((n=t.parentNode.querySelector(".js-variation-input")).value>=10)return void t.classList.add("is-disabled");++n.value}})})(),document.addEventListener("click",e=>{const t=e.target;t.closest(".js-to-top")&&(e.preventDefault(),window.scrollTo(0,0),window.location.hash=t.name)}),c(),(()=>{const e=document.querySelector(".header"),t="fixed"===getComputedStyle(e).position,n=document.querySelector("body");function o(){n.style.marginTop=t?e.clientHeight+"px":"0px"}o(),window.addEventListener("scroll",()=>{requestAnimationFrame(o)}),window.addEventListener("resize",()=>{requestAnimationFrame(o)})})(),document.addEventListener("focus",e=>{e.target.closest(".js-searchbar")&&(e.target.parentNode.nextElementSibling.style.display="block")},!0),document.addEventListener("blur",e=>{e.target.closest(".js-searchbar")&&(e.target.parentNode.nextElementSibling.style.display="none")},!0),new Promise((function(e,t){t("Unable to say hi."),setTimeout((function(){e("Hello, World")}),5e3)})).then(e=>{console.log("res",e)}).catch(e=>{console.warn(e)}),window.addEventListener("scroll",()=>{document.querySelector(".post-head")&&(e=>{let{targetElement:t,addClass:n,isHeader:o}=e;const r=document.body,i=document.querySelector("main"),c=i.querySelector(t);let a,l=c.offsetHeight;c&&(window.addEventListener("resize",()=>{a&&window.cancelAnimationFrame(a),a=window.requestAnimationFrame(()=>{l=c.offsetHeight},60)}),window.addEventListener("scroll",()=>{a&&window.cancelAnimationFrame(a),a=window.requestAnimationFrame(()=>{window.pageYOffset>c.offsetTop+l?(r.classList.add(n),o&&(i.style.paddingTop=l+"px")):r.classList.remove(n)},60)}))})(".post-head")}),document.querySelectorAll(".js-close").forEach(e=>{e.addEventListener("click",t=>{t.target.parentNode.classList.contains("notice")?document.body.classList.add("is-closed-topbanner"):e.parentNode.style.display="none"})})});const c=()=>{const e=document.querySelectorAll(".graph-item");if(!e)return;let t,n,o;e.forEach(e=>{n=e.querySelector(".graph-item-bar"),t=e.querySelector(".graph-item-value"),o=parseInt(t.innerHTML),n.style.height=o+"px",t.style.bottom=o+"px"})};document.addEventListener("submit",e=>{e.target===document.login&&(e.preventDefault(),document.querySelectorAll(".textfield-helper").forEach(e=>{e.style.display="none"}),document.addEventListener("input",e=>{const t=e.target,n=document.login.email,o=document.login.password,r=t===o,i=null===n.value||""===n.value;return r&&console.log(o,o.value.length),i?(console.log("empty"),console.log(t.nextElementSibling),t.nextElementSibling.style.display="block",!1):!(o.value.length<8&&(console.log("at least 8 length"),1))}))});const a=()=>{const e=new Date;e.getFullYear(),String(e.getMonth()+1).padStart(2,"0"),String(e.getDate()).padStart(2,"0"),e.getDay(),e.getHours(),e.getMinutes()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJhbk9iamVjdCIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJ0b0ludGVnZXIiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwibWF4IiwiTWF0aCIsIm1pbiIsImZsb29yIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsImRlZmluZWQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJtYXliZUNhbGxOYXRpdmUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIk8iLCJ0aGlzIiwiZm4iLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJyZWdleHAiLCJyZXMiLCJkb25lIiwicngiLCJTIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJnbG9iYWwiLCJmdWxsVW5pY29kZSIsInVuaWNvZGUiLCJsYXN0SW5kZXgiLCJyZXN1bHRzIiwicmVzdWx0IiwicHVzaCIsIml0IiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJsZW5ndGgiLCJtYXRjaGVkIiwicG9zaXRpb24iLCJpbmRleCIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJjb25jYXQiLCJyZXBsYWNlbWVudCIsImFwcGx5IiwiZ2V0U3Vic3RpdHV0aW9uIiwic2xpY2UiLCJzdHIiLCJ0YWlsUG9zIiwic3ltYm9scyIsIm1hdGNoIiwiY2giLCJjYXB0dXJlIiwiY2hhckF0IiwiZiIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiY2VpbCIsImlzTmFOIiwiYXQiLCJUT19TVFJJTkciLCJ0aGF0IiwicG9zIiwiYSIsImIiLCJjaGFyQ29kZUF0IiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwiUmVnRXhwIiwiZXhlYyIsIlIiLCJjb2YiLCJUQUciLCJBUkciLCJhcmd1bWVudHMiLCJUIiwiQiIsImUiLCJ0cnlHZXQiLCJjYWxsZWUiLCJ0b1N0cmluZyIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsImNvcmUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiX19lIiwid2luZG93Iiwic2VsZiIsIkZ1bmN0aW9uIiwiX19nIiwiaWQiLCJweCIsInJhbmRvbSIsInJlZGVmaW5lIiwiaGlkZSIsImZhaWxzIiwid2tzIiwicmVnZXhwRXhlYyIsIlNQRUNJRVMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwicmVwbGFjZSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsInNwbGl0IiwiS0VZIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImNvbnN0cnVjdG9yIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwic3RyaW5nIiwiYXJnIiwidGFyZ2V0IiwicHJvdG8iLCJmb3JjZWQiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5Iiwic291cmNlIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiZXhwUHJvdG8iLCJVIiwiVyIsImRQIiwiY3JlYXRlRGVzYyIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJBdHRyaWJ1dGVzIiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ2YWwiLCJ2YWx1ZU9mIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiYUZ1bmN0aW9uIiwicGFkU3RhcnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiZmllbGQiLCJjb25zb2xlIiwibG9nIiwic2Nyb2xsSGVpZ2h0Iiwic3R5bGUiLCJoZWlnaHQiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJwYXJzZUludCIsImdldFByb3BlcnR5VmFsdWUiLCJhdXRvRXhwYW5kIiwiYnl0ZUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3RyaW5nQnl0ZUxlbmd0aCIsImlubmVySFRNTCIsIm1vZGFsIiwiYm9keUVsZW1lbnQiLCJib2R5IiwicGFnZVkiLCJtb2RhbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInN0b3BQcm9wYWdhdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsImNsYXNzTGlzdCIsImFkZCIsInBhZ2VZT2Zmc2V0IiwidG9wIiwiY29udGFpbnMiLCJyZW1vdmUiLCJzY3JvbGxUbyIsImVsZW1lbnQiLCJlbnRlclRhcmdldCIsImhvdmVyRWxlbWVudCIsImlzTmF2aWdhdGlvbiIsInNldEF0dHJpYnV0ZSIsInJvdXRlciIsInZpZXciLCJnZXRFbGVtZW50QnlJZCIsInJvdXRlUGFnZSIsImhhc2giLCJsb2NhdGlvbiIsInBhZ2UiLCJzdWJzdHJpbmciLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsIlByb21pc2UiLCJyZWplY3QiLCJodG1sIiwiY2hlY2tBbGxFbGVtZW50IiwiY2hlY2tFbGVtZW50cyIsImNoZWNrQWxsIiwiY2hlY2tJdGVtcyIsInNldENoZWNrRWFjaCIsImlzQ2hlY2tlZEV2ZXJ5IiwiQXJyYXkiLCJmcm9tIiwiZXZlcnkiLCJjaGVja0l0ZW0iLCJjaGVja2VkIiwiaXNDaGVja2VkU29tZSIsInNvbWUiLCJpbmRldGVybWluYXRlIiwiY2hlY2tBbGxjaGVja2JveCIsInRvZ2dsZUVsZW1lbnRzIiwidG9nZ2xlRWxlbWVudE5leHQiLCJ0b2dnbGUiLCJldmVudFRvZ2dsZSIsInNjcm9sbFRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvdHRvbSIsImlubmVySGVpZ2h0IiwiY3Vyc29yIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsImxlZnQiLCJzZXRUaW1lb3V0IiwiY2F0Y2giLCJlcnJvciIsIndhcm4iLCJzbGFzaGVkSGFzaCIsInBhdGhuYW1lIiwiaGlzdG9yeSIsImxvYWRlckVsZW1lbnQiLCJsb2FkZXIiLCJCcm93c2VyRWxlbWVudCIsImFnZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImRpc3BsYXkiLCJjaGVja0Jyb3dzZXIiLCJjbG9zZXN0IiwiYXR0YWNobWVudExpc3QiLCJhdHRhY2htZW50SGVscGVyIiwiYXR0YWNoZWRmaWxlcyIsInZhbGlkRmlsZVR5cGUiLCJmaWxlIiwiZmlsZVR5cGVzIiwicmV0dXJuRmlsZVNpemUiLCJzaXplIiwidG9GaXhlZCIsImZpbGVzIiwidGVtcGxhdGUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJhbGVydCIsInRhYkFjdGljZUJhciIsInRhYnMiLCJwYXJlbnROb2RlIiwidGFiSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJvZmZzZXRMZWZ0IiwidGFiIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0Iiwic2V0UHJldmVudE5vdE51bWJlciIsImlzRmlyc3RQbGFjZWRaZXJvIiwidGVzdCIsImlzTWF4aW11bSIsIk51bWJlciIsImlzTGVuZ3RoIiwidGFyZ2V0SW5wdXQiLCJpbnB1dE51bWJlciIsInNldEdyYXBoIiwiaGVhZGVyRWxlbWVudCIsImlzRml4ZWRIZWFkZXIiLCJtYWluRWxlbWVudCIsImFkZFBhZGRpbmciLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhZGp1c3RUb3BQYWRkaW5nIiwicmVzb2x2ZSIsInRhcmdldEVsZW1lbnQiLCJhZGRDbGFzcyIsImlzSGVhZGVyIiwic3RpY2t5RWxlbWVudCIsImlzU2Nyb2xsaW5nIiwic3RpY2t5RWxlbWVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib2Zmc2V0VG9wIiwicGFkZGluZ1RvcCIsImdyYXBoSXRlbXMiLCJncmFwaEl0ZW1WYWx1ZSIsImdyYXBoSXRlbUJhciIsImdyYXBoVmFsdWUiLCJsb2dpbiIsImhlbHBlciIsImxvZ2luRW1haWwiLCJlbWFpbCIsImxvZ2luUGFzc3dvcmQiLCJwYXNzd29yZCIsImlzUGFzc3dvcmQiLCJpc0VtcHR5RW1haWwiLCJnZXRUb2RheURhdGUiLCJ0b2RheSIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldERheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIs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LEVBQU1JLFdBQVczSyxTQUFTLEVBQUcsS0FDckN1SyxFQUFNSyxTQUVKTCxFQUFNTSxXQUNKTixFQUFNTyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM3KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGhOYW1lID0gL15b6rCALe2eo10rJC87XHJcbnZhciBoTmFtZTIgPSAgL15b6rCALe2eo2EtekEtWl0rJC87XHJcbnZhciBvbmx5TnVtYmVycyA9IC9eWzAtOV0qJC87XHJcblxyXG52YXIgZW5nbGlzaE51bWJlciA9IC9eW2EtekEtWjAtOV17NCwxMn0kLztcclxudmFyIHBhc3N3b3JkID0gL14oPz0uKlthLXpBLVpdKSgoPz0uKlxcZCl8KD89LipcXFcpKS57NiwyMH0kLzsgLy8g7JiB7Iir7Yq5XHJcblxyXG52YXIgZW1haWwgPSAvXlthLXowLTlfKy4tXStAKFthLXowLTktXStcXC4pK1thLXowLTldezIsNH0kLztcclxudmFyIHBob25lID0gL15cXGR7MiwzfS1cXGR7Myw0fS1cXGR7NH0kLzsgLy8gIGV4KTEyMy0xMjMtMTIzNFxyXG52YXIgcGhvbmUyID0gIC9eMDEoWzB8MXw2fDd8OHw5XT8pLT8oWzAtOV17Myw0fSktPyhbMC05XXs0fSkkLzsgLy8gMDEwLTAwMDAtMDAwMFxyXG5cclxudmFyIHVybCA9IC9eKGZpbGV8Z29waGVyfG5ld3N8bm50cHx0ZWxuZXR8aHR0cHM/fGZ0cHM/fHNmdHApOlxcL1xcLyhbYS16MC05LV0rXFwuKStbYS16MC05XXsyLDR9LiokLztcclxuXHJcbnZhciBpc051bWJlciA9IC9bMC05XS9naTtcclxudmFyIGlzQWxwaGFiZXQgPSAvW2Etel0vZ2k7XHJcbnZhciBpc051bWJlckFuZEFscGhhYmV0ID0gL1thLXowLTldLztcclxuXHJcbnZhciBzdHJpbmdUb0hUTUwgPSBmdW5jdGlvbiAoc3RyKSB7XHJcblx0dmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuXHR2YXIgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhzdHIsICd0ZXh0L2h0bWwnKTtcclxuXHRyZXR1cm4gZG9jLmJvZHk7XHJcbn07XHJcblxyXG4vLyB0ZXh0LnJlcGxhY2UoL1teMC05XS9naSlcclxuLy8gdGV4dC5yZXBsYWNlKC9bXmEtel0vZ2kpXHJcbi8vIHRleHQucmVwbGFjZSgvW15hLXowLTldLylcclxuXHJcbmV4cG9ydCBjb25zdCBhdXRvRXhwYW5kID0gZmllbGQgPT4ge1xyXG5cdGNvbnNvbGUubG9nKGZpZWxkLnNjcm9sbEhlaWdodCk7XHJcblx0XHJcblx0ZmllbGQuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xyXG5cdGNvbnN0IGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZmllbGQpO1xyXG5cdGxldCBoZWlnaHQgPSBmaWVsZC5zY3JvbGxIZWlnaHQgKyBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItdG9wLXdpZHRoJykpO1xyXG5cdGZpZWxkLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcbn07XHJcblxyXG5cclxudmFyIGFkZCA9IGZ1bmN0aW9uKG51bTEsIG51bTIpIHtcclxuXHRudW0xID0gbnVtMSB8fCAwOyAvLyBjb25kaXRpb25hbCBvcGVyYXRvclxyXG5cdG51bTIgPSBudW0yID8gbnVtMiA6IDA7IC8vIHRlcm5hcnkgb3BlcmF0b3JcclxuXHJcblx0cmV0dXJuIG51bTEgKyBudW0yO1xyXG59O1xyXG5cclxudmFyIGdldEVsZW1lbnRIZWlnaHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcblx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHR2YXIgaGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQgKyAncHgnO1xyXG5cdFxyXG5cdHJldHVybiBoZWlnaHQ7XHJcbn07XHJcblxyXG5jb25zdCBoYXNJdGVtID0gKGFyciwgaXRlbSkgPT4gYXJyLmluY2x1ZGVzKGl0ZW0pO1xyXG5cclxuLy8gZnVuY3Rpb24gZnJhbWVTaXppbmcoKSB7XHJcbi8vIFx0dmFyICRmcmFtZSA9ICQoJy5wbGF5ZXIgaWZyYW1lJyk7XHJcbi8vIFx0dmFyIGZyYW1lV2lkdGggPSAkZnJhbWUud2lkdGgoKTtcclxuLy8gXHR2YXIgZnJhbWVIZWlnaHQgPSBmcmFtZVdpZHRoICogOSAvIDE2O1xyXG4vLyBcdCRmcmFtZS5oZWlnaHQoZnJhbWVIZWlnaHQpO1xyXG5cclxuLy8gXHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XHJcbi8vIFx0XHRcdGZyYW1lV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcclxuLy8gXHRcdFx0ZnJhbWVIZWlnaHQgPSBmcmFtZVdpZHRoICogOSAvIDE2O1xyXG4vLyBcdFx0XHQkZnJhbWUuaGVpZ2h0KGZyYW1lSGVpZ2h0KTtcclxuLy8gXHR9KTtcclxuLy8gfVxyXG5cclxuXHJcbmNsYXNzIENhbGN1bGF0b3Ige1xyXG5cdGFkZCh4LCB5KSB7XHJcblx0XHRyZXR1cm4geCArIHk7XHJcblx0fVxyXG5cdHN1YnRyYWN0KHgsIHkpIHtcclxuXHRcdHJldHVybiB4IC0geTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIGVsZW1lbnRzLmZpbHRlcigodmFsdWUsIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4KSAvLyB1bmlxXHJcblxyXG5cclxuLy8gXCJqYXZhc2NyaXBcIi5yZXBsYWNlKC9hL2dpLFwiYlwiKVxyXG5jb25zdCBmdWxsTnVtYmVyID0gJzIwMzQzOTkwMDIxMjU1ODEnO1xyXG5jb25zdCBsYXN0NERpZ2l0cyA9IGZ1bGxOdW1iZXIuc2xpY2UoLTQpO1xyXG5jb25zdCBtYXNrZWROdW1iZXIgPSBsYXN0NERpZ2l0cy5wYWRTdGFydChmdWxsTnVtYmVyLmxlbmd0aCwgJyonKTtcclxuLypcclxuXHR2YXIgaXNEYXRlU3VwcG9ydGVkID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCAneCcpO1xyXG5cdFx0cmV0dXJuIChpbnB1dC52YWx1ZSAhPT0gJ3gnKTtcclxuXHR9O1xyXG5cdGlmKGlzRGF0ZVN1cHBvcnRlZCgpKSB7XHJcblx0XHRmaWVsZC5yZW1vdmVBdHRyaWJ1dGUoJ3BhdHRlcm4nKTtcclxuXHRcdGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgncGxhY2Vob2xkZXInKTtcclxuXHRcdHZhciBoZWxwZXJUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlc2NyaXB0aW9uJyk7XHJcblx0XHRpZihoZWxwZXJUZXh0KSB7XHJcblx0XHRcdGhlbHBlclRleHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoZWxwZXJUZXh0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ki8iLCJpbXBvcnQgeyBhdXRvRXhwYW5kIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgYXR0YWNoRmlsZSA9ICgpID0+IHtcclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldmVudCA9PiB7XHJcblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0aWYgKCF0YXJnZXQuY2xvc2VzdCgnLmpzLWZpbGUtaW5wdXQnKSkgcmV0dXJuO1xyXG5cdFx0Y29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtaW5wdXQnKTtcclxuXHRcdGNvbnN0IGZpbGVTdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1zdWJtaXQnKTtcclxuXHRcdGNvbnN0IGF0dGFjaG1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1saXN0Jyk7XHJcblx0XHRjb25zdCBhdHRhY2htZW50SGVscGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1oZWxwZXInKTtcclxuXHRcdGxldCBhdHRhY2hlZGZpbGVzO1xyXG5cdFx0bGV0IGZpbGVMaXN0ID0gW107XHJcblxyXG5cdFx0Ly8gVE9ETzog7Jes65+s67KIIOuwmOuzte2VtOyEnCDsmKzroLjsnYQg65WMIGZpbGVsaXN0IOuIhOyggeuQmOuKlOyngD9cclxuXHRcdC8vIFRPRE86IOuPmeydvO2VnCDtjIzsnbzsnYQg7JeF66Gc65OcIO2WiOydhCDrlYwg7LK07YGsXHJcblx0XHQvLyBUT0RPOiDsgq3soJztlojsnYQg65WMIGZpbGVMaXN07JeQ7IScIOyCreygnFxyXG5cdFx0Ly8gZmlsZUlucHV0LmZpbGVz64qUIOyMk+ydtOyngCDslYrsnYwuXHJcblxyXG5cdFx0Y29uc3QgdmFsaWRGaWxlVHlwZSA9IGZpbGUgPT4ge1xyXG5cdFx0XHRjb25zdCBmaWxlVHlwZXMgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJywgJ2ltYWdlL3BuZyddO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhmaWxlVHlwZXMuaW5kZXhPZihmaWxlLnR5cGUpKTtcclxuXHJcblx0XHRcdGlmIChmaWxlVHlwZXMuaW5kZXhPZihmaWxlLnR5cGUpID4gLTEpIHJldHVybiB0cnVlO1xyXG5cdFx0fTtcclxuXHRcdGNvbnN0IHJldHVybkZpbGVTaXplID0gc2l6ZSA9PiB7XHJcblx0XHRcdGlmIChzaXplIDwgMTAyNCkgcmV0dXJuIHNpemUgKyAnYnl0ZXMnO1xyXG5cdFx0XHRlbHNlIGlmIChzaXplID49IDEwMjQgJiYgc2l6ZSA8IDEwNDg1NzYpIHJldHVybiAoc2l6ZSAvIDEwMjQpLnRvRml4ZWQoMikgKyAnS0InO1xyXG5cdFx0XHRlbHNlIHJldHVybiAoc2l6ZSAvIDEwNDg1NzYpLnRvRml4ZWQoMikgKyAnTUInO1xyXG5cdFx0fTtcclxuXHJcblx0XHRhdHRhY2hlZGZpbGVzID0gdGFyZ2V0LmZpbGVzO1xyXG5cdFx0Ly8gYXR0YWNoZWRmaWxlcyA9IGZpbGVJbnB1dC5maWxlcztcclxuXHRcdGNvbnNvbGUubG9nKCdhdHRhY2hlZGZpbGVzJywgYXR0YWNoZWRmaWxlcyk7XHJcblxyXG5cdFx0aWYgKGF0dGFjaGVkZmlsZXMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdGF0dGFjaG1lbnRIZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhdHRhY2htZW50SGVscGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXR0YWNoZWRmaWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdhdHRhY2hlZGZpbGVzW2ldJywgYXR0YWNoZWRmaWxlc1tpXSk7XHJcblxyXG5cdFx0XHRcdC8vIDE5MDQyOCB0ZXN0IGZpbGVsaXN0IGFycmF5XHJcblxyXG5cdFx0XHRcdGlmICh2YWxpZEZpbGVUeXBlKGF0dGFjaGVkZmlsZXNbaV0pKSB7XHJcblx0XHRcdFx0XHRjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLWltYWdlXCIgc3JjPSR7d2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYXR0YWNoZWRmaWxlc1tpXSl9IGFsdD1cIlwiPlxyXG4gICAgICAgICAgICAgIDxiIGNsYXNzPVwiZmlsZS1hdHRhY2htZW50LWl0ZW0tbmFtZVwiIGhyZWY9XCIjXCI+JHthdHRhY2hlZGZpbGVzW2ldLm5hbWV9PC9iPlxyXG4gICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLXNpemVcIiA+JHtyZXR1cm5GaWxlU2l6ZShhdHRhY2hlZGZpbGVzW2ldLnNpemUpfTwvc21hbGw+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImZpbGUtYXR0YWNobWVudC1pdGVtLWRlbGV0ZSBqcy1yZW1vdmUtdGhpc1wiIHR5cGU9XCJidXR0b25cIj48aSBjbGFzcz1cImljb24teFwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9maWd1cmU+YDtcclxuXHRcdFx0XHRcdGF0dGFjaG1lbnRMaXN0LmlubmVySFRNTCA9IHRlbXBsYXRlICsgYXR0YWNobWVudExpc3QuaW5uZXJIVE1MO1xyXG5cdFx0XHRcdFx0Ly9hdHRhY2htZW50TGlzdC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGFsZXJ0KCftjIzsnbztg4DsnoUganBlZyBwanBlZyBwbmcg7KSRIO2VmOuCmOqwgCDslYTri4jslbx+Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvKlxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy1yZW1vdmUtdGhpcycpKXsgLy8g7ZWo7IiY66GcXHJcbiAgICAgICAgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy1yZW1vdmUtdGhpcycpLnBhcmVudE5vZGUucmVtb3ZlKCk7XHJcbiAgICAgICAgaWYoYXR0YWNoZWRmaWxlcy5sZW5ndGggPT09IDEpIGF0dGFjaG1lbnRIZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgIH1cclxuICAgIH0sIHRydWUpO1xyXG4gICAgKi9cclxuXHRcdC8qXHJcbiAgICAvLyAxOTA0MjggZmlsZSBhamF4XHJcbiAgICBmaWxlU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpe1xyXG4gICAgICAgIHNlbmRGaWxlKGZpbGUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGVMaXN0KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhhdHRhY2hlZGZpbGVzKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHNlbmRGaWxlID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgY29uc29sZS5sb2coJ2Zvcm1EYXRhJywgZm9ybURhdGEpO1xyXG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgICAgZm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XHJcbiAgICAgIHJlcXVlc3Qub3BlbigncG9zdCcsICcnKTtcclxuICAgICAgcmVxdWVzdC5zZW5kKGZvcm1EYXRhKTtcclxuICAgIH07XHJcbiAgICAqL1xyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcclxuXHQvLyB0YWdOYW1l6rO8IG5vZGVOYW1l7J2AIO2FjeyKpO2KuCDrhbjrk5zrpbwg6rCB6rCBIHVuZGVmaW5lZOyZgCAjdGV4dCDrsJjtmZjtlZzri6QuXHJcblx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cdHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnICYmIGF1dG9FeHBhbmQodGFyZ2V0KTtcclxuXHJcblx0Y29uc3QgYnl0ZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGV4dGZpZWxkLWJ5dGUgYicpO1xyXG5cclxuXHR2YXIgc3RyaW5nID0gdW5kZWZpbmVkO1xyXG5cdGZvcih2YXIgaj0wOyBqPDEwMDAwOyBqKyspIHtcclxuXHRcdHN0cmluZyArPSAnVGhpcyBpcyDslYTrrLTsnZjrr7jsl4bripQg66y47J6Q7Je0JztcclxuXHR9XHJcblx0dmFyIHN0cmluZ0J5dGVMZW5ndGggPSAwO1xyXG5cdGlmKHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSB7XHJcblx0XHRzdHJpbmcgPSB0YXJnZXQudmFsdWU7XHJcblx0XHRzdHJpbmdCeXRlTGVuZ3RoID0gc3RyaW5nLnJlcGxhY2UoL1tcXDAtXFx4N2ZdfChbMC1cXHUwN2ZmXXwoLikpL2csJyQmJDEkMicpLmxlbmd0aDtcclxuXHRcdGlmKHRhcmdldC52YWx1ZS5sZW5ndGggPiAzMCB8fCB0YXJnZXQudmFsdWUubGVuZ3RoID4gNDUpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJzMwYnl0ZeygnO2VnCcpO1xyXG5cdFx0XHR0YXJnZXQudmFsdWUgPSB0YXJnZXQudmFsdWUuc2xpY2UoMCwgdGFyZ2V0LnZhbHVlLmxlbmd0aCk7XHJcblx0XHR9XHJcblx0XHRieXRlRWxlbWVudC5pbm5lckhUTUwgPSBzdHJpbmdCeXRlTGVuZ3RoO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGlucHV0TnVtYmVyID0gKCkgPT4ge1xyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd24gLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuXHQvLyB9KTtcclxuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XHJcblx0Ly8gfSk7XHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXl1cDogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdrZXl1cCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xyXG5cdC8vIH0pO1xyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4ge1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2UgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcclxuXHQvLyB9KTtcclxuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2lucHV0OiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2lucHV0IC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XHJcblx0Ly8gfSk7XHJcblxyXG5cdGNvbnN0IGluY3JlYXNlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1udW1iZXItaW5wdXQnKTtcclxuXHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGV2ZW50ID0+IHtcclxuXHRcdGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcclxuXHRcdGNvbnN0IGluTnVtYmVySW5wdXQgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLW51bWJlci1pbnB1dCcpO1xyXG5cdFx0aWYgKCFpbk51bWJlcklucHV0KSByZXR1cm47XHJcblxyXG5cdFx0c2V0UHJldmVudE5vdE51bWJlcigpO1xyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBzZXRMaW1pdE51bWJlcik7XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2V0UHJldmVudE5vdE51bWJlcigpIHtcclxuXHRcdFx0Y29uc3Qga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XHJcblx0XHRcdGtleUNvZGUgPj0gNDggfHwga2V5Q29kZSA8PSA1NyB8fCBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRrZXlDb2RlID09PSA2OSAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRrZXlDb2RlID09PSAxODkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0a2V5Q29kZSA9PT0gMTg3ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdGtleUNvZGUgPT09IDE5MCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHQvL2V2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggPT09IDAgJiYgZXZlbnQua2V5Q29kZSA9PT0gNDggJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH1cclxuXHRcdGZ1bmN0aW9uIHNldExpbWl0TnVtYmVyKCkge1xyXG5cdFx0XHRjb25zdCBNQVhJTVVNID0gMzAwO1xyXG5cdFx0XHRjb25zdCBNSU5JTVVOID0gMDtcclxuXHRcdFx0Y29uc3QgaXNGaXJzdFBsYWNlZFplcm8gPSAvKF4wKykvLnRlc3QodGFyZ2V0LnZhbHVlKTtcclxuXHRcdFx0Y29uc3QgaXNNYXhpbXVtID0gTnVtYmVyKHRhcmdldC52YWx1ZSkgPj0gTUFYSU1VTTtcclxuXHRcdFx0Y29uc3QgaXNMZW5ndGggPSBldmVudC50YXJnZXQudmFsdWUubGVuZ3RoID4gTUlOSU1VTjtcclxuXHJcblx0XHRcdGlmKGlzRmlyc3RQbGFjZWRaZXJvKSBldmVudC50YXJnZXQudmFsdWUgPSBNSU5JTVVOO1xyXG5cdFx0XHRpZihpc0xlbmd0aCkgZXZlbnQudGFyZ2V0LnZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlLnNsaWNlKDAsIDMpO1xyXG5cdFx0XHRpZihpc01heGltdW0pIGV2ZW50LnRhcmdldC52YWx1ZSA9IE1BWElNVU07XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG5cdFx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cdFx0Y29uc3QgbWluVmFsdWUgPSAwO1xyXG5cdFx0Y29uc3QgbWF4VmFsdWUgPSAxMDtcclxuXHRcdGxldCB0YXJnZXRJbnB1dDtcclxuXHRcdGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXZhcmlhdGlvbi1kZWNyZW1lbnQnKSkge1xyXG5cdFx0XHR0YXJnZXRJbnB1dCA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcclxuXHRcdFx0aWYgKHRhcmdldElucHV0LnZhbHVlIDw9IG1pblZhbHVlKSB7XHJcblx0XHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdC0tdGFyZ2V0SW5wdXQudmFsdWU7XHJcblx0XHRcdC8vIFRPRE86IHRhcmdldCDtgbTrnpjsiqQg7Yag6riA7J20IOyViCDrkJjrr4Dri4jri6RcclxuXHRcdFx0Y29uc29sZS5sb2coJ3RhcmdldCcsIHRhcmdldCk7XHJcblx0XHR9XHJcblx0XHRpZiAodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24taW5jcmVtZW50JykpIHtcclxuXHRcdFx0dGFyZ2V0SW5wdXQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XHJcblx0XHRcdGlmICh0YXJnZXRJbnB1dC52YWx1ZSA+PSBtYXhWYWx1ZSkge1xyXG5cdFx0XHRcdHRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHQrK3RhcmdldElucHV0LnZhbHVlO1xyXG5cclxuXHRcdFx0Ly8gdGFyZ2V0SW5wdXQudmFsdWUgPCBtYXhWYWx1ZSArIDEgJiYgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XHJcblx0XHRcdC8qXHJcblx0XHRcdGxldCB0YXJnZXRJbnB1dFZhbHVlID0gcGFyc2VJbnQoZXZlbnRUYXJnZXRJbnB1dC52YWx1ZSk7XHJcblx0XHRcdHRhcmdldElucHV0VmFsdWUgPiBtaW5WYWx1ZSAmJiBldmVudFRhcmdldElucHV0LnZhbHVlLS07XHJcblx0XHRcdHRhcmdldElucHV0VmFsdWUgPT09IG1pblZhbHVlICsgMSAmJiBldmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG5cdFx0XHR0YXJnZXRJbnB1dFZhbHVlIDwgbWF4VmFsdWUgKyAxICYmIGV2ZW50VGFyZ2V0SW5jcmVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XHJcblx0XHRcdCovXHJcblx0XHRcdC8qXHJcblx0XHRcdGNvbnN0IGV2ZW50VGFyZ2V0UGFyZW50RWxlbWVudCA9IGV2ZW50VGFyZ2V0LnBhcmVudE5vZGU7XHJcblx0XHRcdGNvbnN0IGV2ZW50VGFyZ2V0SW5wdXQgPSBldmVudFRhcmdldFBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xyXG5cdFx0XHRjb25zdCBldmVudFRhcmdldERlY3JlbWVudCA9IGV2ZW50VGFyZ2V0UGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWRlY3JlbWVudCcpO1xyXG5cdFx0XHRjb25zdCBldmVudFRhcmdldEluY3JlbWVudCA9IGV2ZW50VGFyZ2V0UGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpO1xyXG5cdFx0XHRsZXQgdGFyZ2V0SW5wdXRWYWx1ZSA9IHBhcnNlSW50KGV2ZW50VGFyZ2V0SW5wdXQudmFsdWUpO1xyXG5cdFx0XHR0YXJnZXRJbnB1dFZhbHVlIDwgbWF4VmFsdWUgPyBldmVudFRhcmdldElucHV0LnZhbHVlKysgOiB0YXJnZXRJbnB1dFZhbHVlO1xyXG5cdFx0XHR0YXJnZXRJbnB1dFZhbHVlID09PSBtYXhWYWx1ZSAtIDEgJiYgZXZlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuXHRcdFx0dGFyZ2V0SW5wdXRWYWx1ZSA+IG1pblZhbHVlIC0gMSA/IGV2ZW50VGFyZ2V0RGVjcmVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJykgOiB0YXJnZXRJbnB1dFZhbHVlO1xyXG5cdFx0XHQqL1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0FsbGNoZWNrYm94ID0gKHtjaGVja0FsbEVsZW1lbnQsIGNoZWNrRWxlbWVudHN9KSA9PiB7XHJcblx0Y29uc3QgY2hlY2tBbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrQWxsRWxlbWVudCk7XHJcblx0Y29uc3QgY2hlY2tJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tFbGVtZW50cyk7XHJcblx0aWYoIWNoZWNrQWxsIHx8ICFjaGVja0l0ZW1zKSByZXR1cm47XHJcblxyXG5cdGNoZWNrQWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNldENoZWNrQWxsKTtcclxuXHRjaGVja0l0ZW1zLmZvckVhY2goY2hlY2tJdGVtID0+IHtcclxuXHRcdGNoZWNrSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzZXRDaGVja0VhY2gpO1xyXG5cdH0pO1xyXG5cclxuXHRmdW5jdGlvbiBzZXRDaGVja0VhY2goKSB7XHJcblx0XHRjb25zdCBpc0NoZWNrZWRFdmVyeSA9IEFycmF5LmZyb20oY2hlY2tJdGVtcykuZXZlcnkoY2hlY2tJdGVtID0+IGNoZWNrSXRlbS5jaGVja2VkKTtcclxuXHRcdGNoZWNrQWxsLmNoZWNrZWQgPSBpc0NoZWNrZWRFdmVyeTtcclxuXHJcblx0XHRjb25zdCBpc0NoZWNrZWRTb21lID0gQXJyYXkuZnJvbShjaGVja0l0ZW1zKS5zb21lKGNoZWNrSXRlbSA9PiBjaGVja0l0ZW0uY2hlY2tlZCk7XHJcblx0XHRjaGVja0FsbC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XHJcblx0fVxyXG5cdGZ1bmN0aW9uIHNldENoZWNrQWxsKCkge1xyXG5cdFx0Y2hlY2tJdGVtcy5mb3JFYWNoKGNoZWNrSXRlbSA9PiB7XHJcblx0XHRcdGNoZWNrQWxsLmNoZWNrZWQgPyBjaGVja0l0ZW0uY2hlY2tlZCA9IHRydWUgOiBjaGVja0l0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59O1xyXG5cclxuXHJcbi8vIG1hdGNoZXPrgpggY2xvc2VzdCwgY2xhc3NMaXN0LmNvbnRhaW5zLCBnQSDrk7HsnLzroZwgY2hlY2tBbGwg6rCZ7J2AIOyXmOumrOuovOyKpO2LgCDssrTtgaztlaAg7IiY64qUIOyXhuuLpC4gPz8/XHJcbi8vIGNsb3Nlc3Trpbwg7IKs7Jqp7ZWY66m0IOyekOyLnSDsl5jrpqzrqLztirjqsIAg7J6I7J2EIOuVjOuPhCDsnpHrj5ntlZzri6QuXHJcblxyXG4vLyB2YXIgb3RoZXJDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3ZhbHVlPVwib3RoZXJcIl0nKTtcclxuLy8gdmFyIG90aGVyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W2lkPVwib3RoZXJWYWx1ZVwiXScpO1xyXG4vLyBvdGhlclRleHQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cclxuLy8gb3RoZXJDaGVja2JveC5vbmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4vLyBcdGlmIChvdGhlckNoZWNrYm94LmNoZWNrZWQpIHtcclxuLy8gXHRcdG90aGVyVGV4dC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4vLyBcdFx0b3RoZXJUZXh0LnZhbHVlID0gJyc7XHJcbi8vIFx0fSBlbHNlIHtcclxuLy8gXHRcdG90aGVyVGV4dC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbi8vIFx0fVxyXG4vLyB9OyIsIi8vVE9ETzog66qo64usIOuwluydmCDsu6jthZDsuKDsl5AgYXJpYS1oaWRkZW4g66qo64us7J2YIOychOy5mOuKlCDrsJTrlJQg7JWI7JeQP1xyXG4vL3ZhciBhYmMgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XHJcblxyXG5leHBvcnQgY29uc3QgbW9kYWwgPSAoKSA9PiB7XHJcblx0Y29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG5cdGxldCBwYWdlWSA9IHVuZGVmaW5lZDtcclxuXHJcblx0Y29uc3QgbW9kYWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLW1vZGFsJyk7XHJcblx0aWYoIW1vZGFscykgcmV0dXJuO1xyXG5cclxuXHRtb2RhbHMuZm9yRWFjaChtb2RhbCA9PiBtb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0bW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5hZGQoJ2lzLXZpc2libGUnKTtcclxuXHRcdHBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuXHRcdHNldExvY2tCb2R5KCk7XHJcblxyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsKTtcclxuXHRcdGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XHJcblx0XHRcdGlmICghbW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnaXMtdmlzaWJsZScpKSByZXR1cm47XHJcblx0XHRcdG1vZGFsLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy12aXNpYmxlJyk7XHJcblx0XHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xyXG5cdFx0XHR3aW5kb3cuc2Nyb2xsVG8oMCwgcGFnZVkpO1xyXG5cdFx0fVxyXG5cdH0pKTtcclxuXHJcblx0Y29uc3QgbW9kYWxEaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwtZGlhbG9nJyk7XHJcblx0bW9kYWxEaWFsb2cuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSkpO1xyXG5cdFxyXG5cdGZ1bmN0aW9uIHNldExvY2tCb2R5KCkge1xyXG5cdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XHJcblx0XHRib2R5RWxlbWVudC5zdHlsZS50b3AgPSBgLSR7cGFnZVl9cHhgO1xyXG5cdH1cclxuXHJcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0Ly8gXHRjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XHJcblx0Ly8gXHRpZiAoIXRhcmdldC5jbG9zZXN0KCcuanMtbW9kYWwnKSkgcmV0dXJuO1xyXG5cclxuXHQvLyBcdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHQvLyBcdGNvbnN0IHRhcmdldFBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG5cdC8vIFx0bGV0IGdldFNjcm9sbFRvcDtcclxuXHQvLyBcdGxldCBmaW5kQ3VycmVudFRhcmdldCA9IG51bGw7XHJcblxyXG5cdC8vIFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0Ly8gXHRpZiAodGFyZ2V0UGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnanMtbW9kYWwnKSkge1xyXG5cdC8vIFx0XHRmaW5kQ3VycmVudFRhcmdldCA9IHRhcmdldFBhcmVudDtcclxuXHQvLyBcdH0gZWxzZSB7XHJcblx0Ly8gXHRcdGZpbmRDdXJyZW50VGFyZ2V0ID0gdGFyZ2V0UGFyZW50LnBhcmVudE5vZGU7XHJcblx0Ly8gXHR9XHJcblxyXG5cdC8vIFx0ZmluZENsYXNzUmVjdXJzaXZlKHRhcmdldCwgJ2pzLW1vZGFsJywgMCk7XHJcblxyXG5cdC8vIFx0Z2V0U2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuXHQvLyBcdGZpbmRDdXJyZW50VGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKCdpcy12aXNpYmxlJyk7XHJcblxyXG5cdC8vIFx0c2V0TG9ja0JvZHkoKTtcclxuXHJcblx0Ly8gXHRjb25zdCBtb2RhbERpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbC1kaWFsb2cnKTtcclxuXHQvLyBcdG1vZGFsRGlhbG9nLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblx0Ly8gXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSk7XHJcblx0Ly8gXHR9KTtcclxuXHJcblx0Ly8gXHRmdW5jdGlvbiBzZXRMb2NrQm9keSgpIHtcclxuXHQvLyBcdFx0Y29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG5cdC8vIFx0XHRib2R5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdib2R5LWxvY2snKTtcclxuXHQvLyBcdFx0Ym9keUVsZW1lbnQuc3R5bGUudG9wID0gYC0ke2dldFNjcm9sbFRvcH1weGA7XHJcblx0Ly8gXHR9XHJcblxyXG5cdC8vIFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsKTtcclxuXHQvLyBcdGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XHJcblx0Ly8gXHRcdGlmICghZmluZEN1cnJlbnRUYXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnaXMtdmlzaWJsZScpKSByZXR1cm47XHJcblx0Ly8gXHRcdGZpbmRDdXJyZW50VGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy12aXNpYmxlJyk7XHJcblx0Ly8gXHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xyXG5cdC8vIFx0XHR3aW5kb3cuc2Nyb2xsVG8oMCwgZ2V0U2Nyb2xsVG9wKTtcclxuXHQvLyBcdH1cclxuXHQvLyB9LCB0cnVlKTtcclxuXHJcblx0Ly8gY29uc3QgZmluZENsYXNzUmVjdXJzaXZlID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZGVwdGgpID0+IHtcclxuXHQvLyAvLyBwYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygnanMtbW9kYWwnKVxyXG5cdC8vIFx0Y29uc29sZS5sb2coJ2RlcHRoOiAnICsgZGVwdGgsIGVsZW1lbnQpO1xyXG5cdC8vIFx0aWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHJldHVybiBlbGVtZW50O1xyXG5cdC8vIFx0ZWxzZSByZXR1cm4gZmluZENsYXNzUmVjdXJzaXZlKGVsZW1lbnQucGFyZW50Tm9kZSwgY2xhc3NOYW1lLCBkZXB0aCArIDEpO1xyXG5cdC8vIH07XHJcblxyXG5cdC8vIHZhciBnZXRDbG9zZXN0ID0gZnVuY3Rpb24oZWxlbSwgc2VsZWN0b3IpIHtcclxuXHQvLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XHJcblx0Ly8gXHRcdGlmIChlbGVtLm1hdGNoZXMoc2VsZWN0b3IpKSByZXR1cm4gZWxlbTtcclxuXHQvLyBcdH1cclxuXHQvLyBcdHJldHVybiBudWxsO1xyXG5cdC8vIH07XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHRhYk1lbnUgPSAoKSA9PiB7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0XHRjb25zdCB0YWJBY3RpY2VCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS10YWJsaXN0LWFjdGl2ZScpO1xyXG5cdFx0Y29uc3QgdGFicyA9IHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXRhYl0nKTtcclxuXHRcdGNvbnN0IHRhYkluZGV4ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xyXG5cclxuXHRcdGlmKHRhcmdldC5jbG9zZXN0KCdbcm9sZT10YWJdJykpIHtcclxuXHRcdFx0dGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XHJcblx0XHRcdHRhYkFjdGljZUJhci5zdHlsZS5sZWZ0ID0gYCR7dGFyZ2V0Lm9mZnNldExlZnR9cHhgO1xyXG5cdFx0XHR0YWJzLmZvckVhY2godGFiID0+IHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKSk7XHJcblx0XHRcclxuXHRcdFx0dGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJwYW5lbF0nKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG5cdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblx0XHRcdFx0aWYodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jykpe1xyXG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2hpZGRlbicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fSwgdHJ1ZSk7XHJcbn07XHJcblxyXG5cclxuLy8gdmFyIGlzU2Nyb2xsaW5nO1xyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGV2ZW50KSA9PiB7XHJcbi8vIFx0aWYoaXNTY3JvbGxpbmcpIHdpbmRvdy5jbGVhclRpbWVvdXQoaXNTY3JvbGxpbmcpO1xyXG4vLyBcdGlzU2Nyb2xsaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4vLyBcdFx0c3RpY2t5VG9nZ2xlKCk7XHJcbi8vIFx0fSwgNTApO1xyXG4vLyB9KTtcclxuXHJcblxyXG4vLyBUT0RPOiBwb3N0LWhlYWTsnZggb2Zmc2V0LXRvcOq5jOyngCDrjZTtlbTshJwg66eI7KeE6rCS7J2EIOyjvOyWtOyVvFxyXG5leHBvcnQgY29uc3Qgc3RpY2t5RWxlbWVudCA9ICh7dGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MsIGlzSGVhZGVyfSkgPT4ge1xyXG5cdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHRjb25zdCBtYWluRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKTtcclxuXHRjb25zdCBzdGlja3lFbGVtZW50ID0gbWFpbkVsZW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbGVtZW50KTtcclxuXHRsZXQgc3RpY2t5RWxlbWVudEhlaWdodCA9IHN0aWNreUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG5cdGxldCBpc1Njcm9sbGluZztcclxuXHRcclxuXHRpZighc3RpY2t5RWxlbWVudCkgcmV0dXJuO1xyXG5cclxuXHQvL2lmKCFpc092ZXIpIHN0aWNreUVsZW1lbnRIZWlnaHQgPSAwO1xyXG5cclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xyXG5cdFx0aXNTY3JvbGxpbmcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlzU2Nyb2xsaW5nKTtcclxuXHRcdGlzU2Nyb2xsaW5nID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdHN0aWNreUVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuXHRcdH0sIDYwKTtcclxuXHR9KTtcclxuXHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcclxuXHRcdGlzU2Nyb2xsaW5nICYmIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpc1Njcm9sbGluZyk7XHJcblx0XHRpc1Njcm9sbGluZyA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG5cdFx0XHRpZih3aW5kb3cucGFnZVlPZmZzZXQgPiBzdGlja3lFbGVtZW50Lm9mZnNldFRvcCArIHN0aWNreUVsZW1lbnRIZWlnaHQpe1xyXG5cdFx0XHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5hZGQoYWRkQ2xhc3MpO1xyXG5cdFx0XHRcdGlzSGVhZGVyICYmIChtYWluRWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gc3RpY2t5RWxlbWVudEhlaWdodCArICdweCcpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoYWRkQ2xhc3MpO1xyXG5cdFx0XHRcdC8vIGlzSGVhZGVyICYmIChtYWluRWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gJzBweCcpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCA2MCk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBleHBvcnQgY29uc3Qgc3RpY2t5SGVhZGVyRWxlbWVudCA9ICh0YXJnZXRFbGVtZW50LCBhZGRDbGFzcykgPT4ge1xyXG4vLyBcdHN0aWNreUVsZW1lbnQoe3RhcmdldEVsZW1lbnQsIGFkZENsYXNzLCB0cnVlfSk7XHJcbi8vIH07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHBhcmFsbGF4ID0gKHRhcmdldEVsZW1lbnQpID0+IHtcclxuXHRjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldEVsZW1lbnQpO1xyXG5cdGlmKCF0YXJnZXQpIHJldHVybjtcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0dGFyZ2V0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZyh3aW5kb3cucGFnZVlPZmZzZXQsIGVsZW1lbnQub2Zmc2V0VG9wKTtcclxuXHRcdFx0bGV0IHJhdGUgPSB3aW5kb3cucGFnZVlPZmZzZXQgKiAtMC4yIC0gNjAwO1xyXG5cdFx0XHRsZXQgYWFhID0gKHdpbmRvdy5wYWdlWU9mZnNldCAtIGVsZW1lbnQub2Zmc2V0VG9wKSAqIC0xLjU7IC8vIHNjcm9sbGVkID0gd2luZG93LnBhZ2VZT2Zmc2V0XHJcblx0XHRcdC8vbGV0IGJiYiA9IGFhYSA+IDAgPyAtYWFhIDogYWFhO1xyXG5cdFx0XHRlbGVtZW50LnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9ICdjZW50ZXIgJyArIGFhYSArICdweCc7IFxyXG5cdFx0XHQvLyBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsICcrcmF0ZSsncHgsIDBweCknO1xyXG5cdFx0XHQvLyBEYXRhVHJhbnNmZXJJdGVtTGlzdC5yYXRlXHJcblx0XHR9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzdGlja3lIZWFkZXIgPSAoKSA9PiB7XHJcblx0Y29uc3QgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuXHRsZXQgbGFzdFNjcm9sbFRvcCA9IDA7XHJcblx0XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShoYXNTY3JvbGxlZCk7XHJcblx0fSk7XHJcblxyXG5cdGZ1bmN0aW9uIGhhc1Njcm9sbGVkKCkge1xyXG5cdFx0aWYod2luZG93LnBhZ2VZT2Zmc2V0ID4gbGFzdFNjcm9sbFRvcCkge1xyXG5cdFx0XHRoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdi11cCcpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGVhZGVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduYXYtdXAnKTtcclxuXHRcdH1cclxuXHRcdGxhc3RTY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcblx0fVxyXG59O1xyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZW50ZXJUYXJnZXQgPSAodGFyZ2V0KSA9PiB7XHJcblx0Y29uc3QgaG92ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xyXG5cdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHRpZighaG92ZXJFbGVtZW50KSByZXR1cm47XHJcblxyXG5cdGNvbnN0IGlzTmF2aWdhdGlvbiA9IGhvdmVyRWxlbWVudCA9PT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24gbGknKTtcclxuXHJcblx0aG92ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcblx0XHRob3ZlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuXHRcdGhvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xyXG5cdFx0aXNOYXZpZ2F0aW9uICYmIGJvZHlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNob3duJyk7XHJcblxyXG5cdFx0aG92ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcblx0XHRcdGhvdmVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuXHRcdFx0aG92ZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWV4cGFuZGVkJyk7XHJcblxyXG5cdFx0XHRpc05hdmlnYXRpb24gJiYgYm9keUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2hvd24nKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBldmVudFRvZ2dsZSA9ICgpID0+IHtcclxuXHRjb25zdCB0b2dnbGVFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1hY2NvcmRpb24nKTtcclxuXHRpZighdG9nZ2xlRWxlbWVudHMpIHJldHVybjtcclxuXHJcblx0bGV0IHRvZ2dsZUVsZW1lbnROZXh0O1xyXG5cdHRvZ2dsZUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblx0XHR0b2dnbGVFbGVtZW50TmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0ZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtdmlzaWJsZScpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhlbGVtZW50KTtcclxuXHRcdFx0Ly8gaWYoZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XHJcblx0XHRcdC8vIFx0YWxlcnQoKTtcclxuXHRcdFx0Ly8gfVxyXG5cdFx0fSk7XHJcblx0XHR0b2dnbGVFbGVtZW50TmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpKTtcclxuXHR9KTtcclxufTtcclxuXHJcblxyXG5jb25zdCB0b2dnbGVFdmVudCA9IGZ1bmN0aW9uKHRhcmdldCwgdG9nZ2xlKSB7XHJcblx0Y29uc3QgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcclxuXHRjb25zdCB0b2dnbGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0b2dnbGUpO1xyXG5cclxuXHR0YXJnZXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG5cdFx0dGFyZ2V0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcclxuXHRcdHRvZ2dsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldEVsZW1lbnQpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuXHRcdFx0aWYoZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XHJcblx0XHRcdFx0ZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuLy8gXHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbi8vIFx0Y29uc3QgdGFyZ2V0TmV4dEVsZW1lbnQgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4vLyBcdGNvbnN0IGlzVGFyZ2V0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5qcy1hY2NvcmRpb24nKTtcclxuLy8gXHRpZiAoIWlzVGFyZ2V0KSByZXR1cm47XHJcbi8vIFx0Ly8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCkg66GcIO2GteydvC5cclxuXHJcbi8vIFx0aWYoaXNUYXJnZXQpIHtcclxuLy8gXHRcdHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuLy8gXHRcdHRhcmdldE5leHRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcclxuLy8gXHR9XHJcbi8vIH0pO1xyXG5cclxuLy8gY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXHJcbi8vIFRPRE86IO2GoOq4gCDslYjsl5Ag7Yag6riAIOydtOuypO2KuCDsobTsnqwg7IucXHJcbi8vIFRPRE86IOuPhO2BkOuovO2KuOqwgCDslYTri4jrnbwgZXZlbnQudGFyZ2V0LnBhcmVudCDqsIAg7JWE64uMIOqyg+ydhCDtgbTrpq3tlojsnYQg65WMIOuLpOuLueyVvCDtlZjrgpgiLCJpbXBvcnQgeyBjaGVja0FsbGNoZWNrYm94IH0gZnJvbSAnLi9pbnB1dCc7XG5pbXBvcnQgeyBlbnRlclRhcmdldCwgc3RpY2t5SGVhZGVyLCBtb2RhbCwgZXZlbnRUb2dnbGUgfSBmcm9tICcuL2V2ZW50JztcblxuY29uc3Qgcm91dGVyID0gZnVuY3Rpb24oKSB7XG5cdGNvbnN0IHZpZXcgPSBudWxsIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3Jyk7XG5cblx0Y29uc3Qgcm91dGVQYWdlID0gKCkgPT4ge1xuXG5cdFx0bGV0IHsgaGFzaCB9ID0gd2luZG93LmxvY2F0aW9uO1xuXHRcdGNvbnN0IHBhZ2UgPSBoYXNoID8gYC92aWV3cy8ke2hhc2guc3Vic3RyaW5nKDEpfS5odG1sYCA6ICcvdmlld3MvaG9tZS5odG1sJztcblx0XHRmZXRjaChwYWdlKVxuXHRcdFx0LnRoZW4ocmVzcG9uc2UgPT4ge1xuXHRcdFx0XHQvLyA0MDQgfHwgNTAwXG5cdFx0XHRcdGlmKHJlc3BvbnNlLm9rKSByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuXHRcdFx0XHRlbHNlIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XHRcblx0XHRcdH0pXG5cdFx0XHQudGhlbihodG1sID0+IHtcblx0XHRcdFx0dmlldy5pbm5lckhUTUwgPSBodG1sO1xuXG5cdFx0XHRcdGNoZWNrQWxsY2hlY2tib3goe1xuXHRcdFx0XHRcdGNoZWNrQWxsRWxlbWVudDogJy5qcy1jaGVjay1hbGwnLCBcblx0XHRcdFx0XHRjaGVja0VsZW1lbnRzOiAnLmpzLWNoZWNrJ1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBzdGlja3lIZWFkZXIoKTtcblx0XHRcdFx0bW9kYWwoKTtcblx0XHRcdFx0ZXZlbnRUb2dnbGUoKTtcblxuXHRcdFx0XHRlbnRlclRhcmdldCgnLmpzLWhvdmVyLXRyaWdnZXInKTtcblx0XHRcdFx0ZW50ZXJUYXJnZXQoJy5oZWFkZXItdXNlci1ub3RpZmljYXRpb24nKTtcblx0XHRcdFx0ZW50ZXJUYXJnZXQoJy5oZWFkZXItdXNlci1hY2NvdW50Jyk7XG5cblx0XHRcdFx0Y29uc3Qgc2Nyb2xsVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcblx0XHRcdFx0c2Nyb2xsVGFyZ2V0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRjb25zdCBpc0NvbnRhaW5lZFdpbmRvd0hlaWdodCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0XHRcdFx0XHRpZihpc0NvbnRhaW5lZFdpbmRvd0hlaWdodCkge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zY3JvbGxlZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG5cdFx0XHRcdFx0c2Nyb2xsVGFyZ2V0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHdpbmRvdy5wYWdlWU9mZnNldCwgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApO1xuXHRcdFx0XHRcdFx0Y29uc3QgcGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdFx0XHRcdFx0XHRjb25zdCBpc1Njcm9sbGVkID0gcGFnZVkgPiBwYWdlWSArIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gd2luZG93LmlubmVySGVpZ2h0ICsgNTA7XG5cdFx0XHRcdFx0XHRpZihpc1Njcm9sbGVkKXtcblx0XHRcdFx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zY3JvbGxlZCcpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRjb25zdCBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3Vyc29yJyk7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50ID0+IHtcblx0XHRcdFx0XHRjb25zdCB4ID0gZXZlbnQuY2xpZW50WDtcblx0XHRcdFx0XHRjb25zdCB5ID0gZXZlbnQuY2xpZW50WTtcblx0XHRcdFx0XHQvLyBjdXJzb3Iuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3ggLSAxNX1weCwgJHt5IC0gMTV9cHhgO1xuXHRcdFx0XHRcdGN1cnNvci5zdHlsZS5sZWZ0ID0gYCR7eH1weGA7XG5cdFx0XHRcdFx0Y3Vyc29yLnN0eWxlLnRvcCA9IGAke3l9cHhgO1xuXHRcdFx0XHR9LCBmYWxzZSk7XG5cblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRcdFx0Y3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZCcpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2V4cGFuZCcpO1xuXHRcdFx0XHRcdH0sIDUwMCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGVycm9yID0+IGNvbnNvbGUud2Fybigncm91dGVyOiAnLCBlcnJvcikpO1xuXG5cdFx0Ly8gZ29nb1xuXHRcdGNvbnN0IHNsYXNoZWRIYXNoID0gYC8ke2hhc2guc3Vic3RyaW5nKDEpfWA7XG5cdFx0Y29uc29sZS5sb2coc2xhc2hlZEhhc2gsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwgd2luZG93LmxvY2F0aW9uLmhpc3RvcnkpO1xuXHRcdC8vIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9IHNsYXNoZWRIYXNoO1xuXG5cdH07XG5cblx0cm91dGVQYWdlKCk7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgcm91dGVQYWdlKTtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCAoKSA9PiB7XG5cdFx0aWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24tdG9nZ2xlJykuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSkge1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24tdG9nZ2xlJykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbi10b2dnbGUnKS5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuXHRcdH1cblx0fSk7XG59O1xuXG4vLyB7XG4vLyBcdG1ldGhvZDogJ1BPU1QnLFxuLy8gXHRib2R5OiAndGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnTXkgYXdlc29tZSBuZXcgYXJ0aWNsZScpICsgJyZib2R5PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1RoaXMgaXMgdGhlIHRleHQgb2YgbXkgYXJ0aWNsZScpLFxuLy8gXHRoZWFkZXI6IHtcbi8vIFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4vLyBcdH0sXG4vLyBcdHJlZmVycmVyOiAnbm8tcmVmZXJyZXInXG4vLyB9XG4vLyBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4vLyBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKTtcbi8vIHZpZXcuaW5uZXJIVE1MID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xuLy8gcmVzcG9uc2UudGV4dCgpIC8vIHJlc3BvbnNlLmpzb24oKVxuLy8gdG9Mb3dlckNhc2UoKSDtlbTso7zquLBcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuXG4vKlxuXHRjb25zdCBSb3V0ZXIgPSAobmFtZSwgcm91dGVzKSA9PiB7XG5cdFx0cmV0dXJuIHsgbmFtZTogbmFtZSwgcm91dGVzOiByb3V0ZXMgfVxuXHR9O1xuXHR2YXIgYWN0aXZlUm91dGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaHJlZl0nKSk7XG5cdGFjdGl2ZVJvdXRlcy5mb3JFYWNoKChyb3V0ZSkge1xuXHRcdHJvdXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmF2aWdhdGUpO1xuXHR9KTtcblx0Y29uc3QgbXlGaXJzdFJvdXRlciA9IG5ldyBSb3V0ZXIoJ215Rmlyc3RSb3V0ZXInLCBbXG5cdFx0eyBwYXRoOiAnLycsIG5hbWU6ICdpbmRleCcgfSxcblx0XSk7XG5cdGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Y29uc3Qgcm91dGUgPSBmaW5kQ3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzBdLnZhbHVlO1xuXHRcdGNvbnN0IHJvdXRlSW5mbyA9IG15Rmlyc3RSb3V0ZXIucm91dGVzLmZpbmQociA9PiByLnBhdGggPT09IHJvdXRlKTtcblx0XHRpZighcm91dGVJbmZvKSB7XG5cdFx0XHQvL3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsICdlcnJvcicpO1xuXHRcdFx0dmlldy5pbm5lckhUTUwgPSAnTm8gcm91dGUgZXhpc3RzIHdpdGggdGhpcyBwYXRoJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJycsIHJvdXRlSW5mby5wYXRoKTtcblx0XHRcdGZldGNoKGAvdmlld3MvJHtyb3V0ZUluZm8ubmFtZX0uaHRtbGApXG5cdFx0XHRcdC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuXHRcdFx0XHQudGhlbihodG1sID0+IHZpZXcuaW5uZXJIVE1MID0gaHRtbClcblx0XHRcdFx0LmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gZmV0Y2ggcGFnZTogJywgZXJyb3IpKTtcblx0XHR9XG5cdH1cbiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0ICcuL3N0eWxlc2hlZXRzL3N0eWxlLnNjc3MnO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4vamF2YXNjcmlwdHMvcm91dGVyJztcclxuaW1wb3J0IHsgdGFiTWVudSwgc3RpY2t5RWxlbWVudCwgcGFyYWxsYXggfSBmcm9tICcuL2phdmFzY3JpcHRzL2V2ZW50LmpzJztcclxuaW1wb3J0IHsgYXR0YWNoRmlsZSwgaW5wdXROdW1iZXIgfSBmcm9tICcuL2phdmFzY3JpcHRzL2lucHV0JztcclxuaW1wb3J0IHsgbG9hZGVyLCBjaGVja0Jyb3dzZXIsIGFkanVzdFRvcFBhZGRpbmcgfSBmcm9tICcuL2phdmFzY3JpcHRzL2xvYWQnOyAvLyBsb2FkU3Bpbm5lclxyXG5cclxuY29uc3QgZXZlbnRUb1RvcCA9ICgpID0+IHtcclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHRcdGlmICh0YXJnZXQuY2xvc2VzdCgnLmpzLXRvLXRvcCcpKSB7XHJcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuXHJcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdGFyZ2V0Lm5hbWU7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBpZih3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDo4MDBweCknKS5tYXRjaGVzKSB7fVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuXHRpZih3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09ICcvJykge1xyXG5cdFx0Y29uc29sZS5sb2coJ3RoaXMgaXMgaG9tZSBwYWdlLicpO1xyXG5cdH1cclxuXHQvLyBjb25zdCB0b2RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8nKTtcclxuXHQvLyBjb25zdCB0b2RvTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b2RvLWxpc3QnKTtcclxuXHQvLyBjb25zdCB0b2RvTGlzdElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8taW5wdXQnKTtcclxuXHQvLyBjb25zdCB0b2RvU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8tc3VibWl0Jyk7XHJcblx0Ly8gY29uc3QgdG9kb0NsZWFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZG8tY2xlYXInKTtcclxuXHQvLyBsZXQgdG9kb0l0ZW1zID0gIFtdO1xyXG5cclxuXHQvLyBmdW5jdGlvbiByZW5kZXJUb2RvKHRleHQpIHtcclxuXHQvLyBcdGNvbnN0IGl0ZW0gPSB7IGlkOiB0b2RvSXRlbXMubGVuZ3RoICsgMSwgdGV4dDogdGV4dCB9O1xyXG5cclxuXHQvLyBcdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHQvLyBcdGNvbnN0IHRvZG9EZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHQvLyBcdC8vIHRvZG9EZWxldGUuY2xhc3NMaXN0LmFkZCgnZ2hvc3QtYnV0dG9uJyk7XHJcblx0Ly8gXHR0b2RvRGVsZXRlLnNldEF0dHJpYnV0ZSgndHlwZScsJ2J1dHRvbicpO1xyXG5cdC8vIFx0dG9kb0RlbGV0ZS5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJpY29uLWNsb3NlXCIgLz4nO1xyXG5cclxuXHQvLyBcdGNvbnN0IHRvZG9DaGVjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcblx0Ly8gXHRjb25zdCB0b2RvQ2hlY2tMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcblx0Ly8gXHR0b2RvQ2hlY2suc2V0QXR0cmlidXRlKCd0eXBlJywgJ2NoZWNrYm94Jyk7XHJcblx0Ly8gXHR0b2RvQ2hlY2suc2V0QXR0cmlidXRlKCdpZCcsIGl0ZW0uaWQpO1xyXG5cdC8vIFx0dG9kb0NoZWNrTGFiZWwuaW5uZXJUZXh0ID0gYCR7aXRlbS5pZH0gOjogJHt0ZXh0fWA7XHJcblx0Ly8gXHR0b2RvQ2hlY2tMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGl0ZW0uaWQpO1xyXG5cclxuXHQvLyBcdGxpLmFwcGVuZENoaWxkKHRvZG9EZWxldGUpO1xyXG5cdC8vIFx0bGkuYXBwZW5kQ2hpbGQodG9kb0NoZWNrKTtcclxuXHQvLyBcdGxpLmFwcGVuZENoaWxkKHRvZG9DaGVja0xhYmVsKTtcclxuXHJcblx0Ly8gXHR0b2RvTGlzdC5hcHBlbmRDaGlsZChsaSk7XHJcblx0Ly8gXHR0b2RvSXRlbXMucHVzaChpdGVtKTtcclxuXHQvLyBcdC8vIOyytO2BrOuwleyKpCDsg4Htg5wg7KCA7J6l7JWI65CoXHJcblxyXG5cdC8vIFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RvZG9JdGVtcycsIEpTT04uc3RyaW5naWZ5KHRvZG9JdGVtcykpO1xyXG5cdC8vIFx0dG9kb0xpc3RJbnB1dC52YWx1ZSA9ICcnO1xyXG5cclxuXHQvLyBcdHRvZG9EZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkZWxldGVUb2RvKTtcclxuXHJcblx0Ly8gXHRmdW5jdGlvbiBkZWxldGVUb2RvKCkge1xyXG5cdC8vIFx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblx0Ly8gXHRcdHRhcmdldC5wYXJlbnROb2RlLnJlbW92ZSgpO1xyXG5cdC8vIFx0XHRjb25zdCBkZWxldGVkSXRlbXMgPSB0b2RvSXRlbXMuZmlsdGVyKGl0ZW0gPT4ge1xyXG5cdC8vIFx0XHRcdHJldHVybiBwYXJzZUludCh0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLmlkKSAhPT0gaXRlbS5pZDtcclxuXHQvLyBcdFx0fSk7XHJcblx0Ly8gXHRcdHRvZG9JdGVtcyA9IGRlbGV0ZWRJdGVtcztcclxuXHRcdFx0XHJcblx0Ly8gXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvSXRlbXMnLCBKU09OLnN0cmluZ2lmeSh0b2RvSXRlbXMpKTtcclxuXHQvLyBcdH1cclxuXHQvLyB9XHJcblxyXG5cdC8vIHRvZG9DbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHQvLyBcdHRvZG9MaXN0LmlubmVySFRNTCA9ICcnO1xyXG5cdC8vIFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3RvZG9JdGVtcycpO1xyXG5cdC8vIH0pO1xyXG5cclxuXHJcblx0Ly8gdG9kby5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldmVudCA9PiB7XHJcblx0Ly8gXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdC8vIFx0aWYodG9kb0xpc3RJbnB1dC52YWx1ZS5sZW5ndGggPCAxKSByZXR1cm4gYWxlcnQoJ+yeheugpe2VtOyjvOyEuOyaqScpO1xyXG5cdC8vIFx0cmVuZGVyVG9kbyh0b2RvTGlzdElucHV0LnZhbHVlKTtcclxuXHQvLyBcdC8vIHRvZG9MaXN0LmlubmVySFRNTCArPSBgPGxpPjxpbnB1dCBpZD1hYiB0eXBlPWNoZWNrYm94PjxsYWJlbCBmb3I9YWI+JHt0b2RvTGlzdElucHV0LnZhbHVlfTwvbGFiZWw+PC9saT5gO1xyXG5cdC8vIH0pO1xyXG5cclxuXHQvLyBjb25zdCBnZXRMb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0xpc3RJdGVtcycpO1xyXG5cdC8vIGlmKGdldExvY2FsU3RvcmFnZSl7XHJcblx0Ly8gXHRjb25zdCBhYmMgPSBKU09OLnBhcnNlKGdldExvY2FsU3RvcmFnZSk7XHJcblx0Ly8gXHRhYmMuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcclxuXHQvLyBcdFx0cmVuZGVyVG9kbyhpdGVtLnRleHQpO1xyXG5cdC8vIFx0fSk7XHJcblx0Ly8gfVxyXG5cclxuXHRyb3V0ZXIoKTtcclxuXHJcblx0bG9hZGVyKCk7XHJcblx0Y2hlY2tCcm93c2VyKCk7XHJcblxyXG5cdGF0dGFjaEZpbGUoKTtcclxuXHJcblx0dGFiTWVudSgpO1xyXG5cdGlucHV0TnVtYmVyKCk7XHJcblxyXG5cdGV2ZW50VG9Ub3AoKTtcclxuXHJcblx0c2V0R3JhcGgoKTtcclxuXHJcblx0YWRqdXN0VG9wUGFkZGluZygpO1xyXG5cclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIChldmVudCkgPT4ge1xyXG5cdFx0aWYoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy1zZWFyY2hiYXInKSkge1xyXG5cdFx0XHRldmVudC50YXJnZXQucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0XHR9XHJcblx0fSwgdHJ1ZSk7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIChldmVudCkgPT4ge1xyXG5cdFx0aWYoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy1zZWFyY2hiYXInKSkge1xyXG5cdFx0XHRldmVudC50YXJnZXQucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdH1cclxuXHR9LCB0cnVlKTtcclxuXHJcblxyXG5cdGNvbnN0IHNheUhlbGxvID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblx0XHRyZWplY3QoJ1VuYWJsZSB0byBzYXkgaGkuJyk7XHJcblxyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJlc29sdmUoJ0hlbGxvLCBXb3JsZCcpO1xyXG5cdFx0fSwgNTAwMCk7XHJcblx0fSk7XHJcblx0c2F5SGVsbG8udGhlbihyZXNvbHZlID0+IHtcclxuXHRcdGNvbnNvbGUubG9nKCdyZXMnLCByZXNvbHZlKTtcclxuXHR9KS5jYXRjaChlcnJvciA9PiB7XHJcblx0XHRjb25zb2xlLndhcm4oZXJyb3IpO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBQcm9taXNlLmFsbChbXHJcblx0Ly8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJyksXHJcblx0Ly8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzJylcclxuXHQvLyBdKVxyXG5cdC8vIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZXMpIHtcclxuXHQvLyBcdHJldHVybiByZXNwb25zZXMubWFwKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdC8vIFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG5cdC8vIFx0fSk7XHJcblxyXG5cclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG5cdFx0aWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1oZWFkJykpIHJldHVybjtcclxuXHRcdHN0aWNreUVsZW1lbnQoJy5wb3N0LWhlYWQnLCAnaXMtc3RpY2t5JywgdHJ1ZSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoZXZlbnQpID0+IHtcclxuXHQvLyBcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHQvLyBcdGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuXHQvLyBcdGNvbnN0IGhhc0hvdmVyQ2xhc3MgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLWhvdmVyLXRyaWdnZXInKTtcclxuXHQvLyBcdGlmKCFoYXNIb3ZlckNsYXNzKSByZXR1cm47XHJcblxyXG5cdC8vIFx0Y29uc3QgaXNOYXZpZ2F0aW9uID0gdGFyZ2V0LmNsb3Nlc3QoJy5uYXZpZ2F0aW9uIGxpJyk7XHJcblxyXG5cdC8vIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcblx0Ly8gXHR0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZXhwYW5kZWQnKTtcclxuXHJcblx0Ly8gXHRpc05hdmlnYXRpb24gJiYgYm9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2hvd24nKTtcclxuXHJcblx0Ly8gXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG5cdC8vIFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcblx0Ly8gXHRcdHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1leHBhbmRlZCcpO1xyXG5cclxuXHQvLyBcdFx0aXNOYXZpZ2F0aW9uICYmIGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNob3duJyk7XHJcblx0Ly8gXHR9LCB0cnVlKTtcclxuXHJcblx0Ly8gfSwgdHJ1ZSk7XHJcblxyXG5cclxuXHRjb25zdCBjbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtY2xvc2UnKTtcclxuXHRjbG9zZUVsZW1lbnQuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcblx0XHRcdGlmIChldmVudC50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ25vdGljZScpKSB7XHJcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1jbG9zZWQtdG9wYmFubmVyJyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59KTtcclxuXHJcbmNvbnN0IHNldEdyYXBoID0gKCkgPT4ge1xyXG5cdGNvbnN0IGdyYXBoSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ3JhcGgtaXRlbScpO1xyXG5cdGlmKCFncmFwaEl0ZW1zKSByZXR1cm47XHJcblxyXG5cdGxldCBncmFwaEl0ZW1WYWx1ZTtcclxuXHRsZXQgZ3JhcGhJdGVtQmFyO1xyXG5cdGxldCBncmFwaFZhbHVlO1xyXG5cclxuXHRncmFwaEl0ZW1zLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuXHRcdGdyYXBoSXRlbUJhciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tYmFyJyk7XHJcblx0XHRncmFwaEl0ZW1WYWx1ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tdmFsdWUnKTtcclxuXHJcblx0XHRncmFwaFZhbHVlID0gcGFyc2VJbnQoZ3JhcGhJdGVtVmFsdWUuaW5uZXJIVE1MKTtcclxuXHJcblx0XHQoZnVuY3Rpb24gc2V0R3JhcGgoKSB7XHJcblx0XHRcdGdyYXBoSXRlbUJhci5zdHlsZS5oZWlnaHQgPSBncmFwaFZhbHVlICsgJ3B4JztcclxuXHRcdFx0Z3JhcGhJdGVtVmFsdWUuc3R5bGUuYm90dG9tID0gZ3JhcGhWYWx1ZSArICdweCc7XHJcblx0XHR9KSgpO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuLy8gZG9jdW1lbnQuZm9ybXMuaWRcclxuZnVuY3Rpb24gbG9naW5Gb3JtVmFsaWRhdGlvbigpIHtcclxuXHRjb25zdCBoZWxwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRleHRmaWVsZC1oZWxwZXInKTtcclxuXHRoZWxwZXJzLmZvckVhY2goaGVscGVyID0+IHtcclxuXHRcdGhlbHBlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdH0pO1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xyXG5cdFx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cdFx0Y29uc3QgbG9naW5FbWFpbCA9IGRvY3VtZW50LmxvZ2luLmVtYWlsO1xyXG5cdFx0Y29uc3QgbG9naW5QYXNzd29yZCA9IGRvY3VtZW50LmxvZ2luLnBhc3N3b3JkO1xyXG5cdFx0Y29uc3QgaXNQYXNzd29yZCA9IHRhcmdldCA9PT0gbG9naW5QYXNzd29yZDtcclxuXHRcdGNvbnN0IGlzRW1wdHlFbWFpbCA9IGxvZ2luRW1haWwudmFsdWUgPT09IG51bGwgfHwgbG9naW5FbWFpbC52YWx1ZSA9PT0gJyc7XHJcblxyXG5cdFx0Ly8g7J2066mU7J287J20IGludmFsaWQg7J28IOuVjCBoZWxwZXIg67O07Jes7KO86riwXHJcblx0XHQvLyDruYTrsIDrsojtmLkgaW52YWxpZCDsnbwg65WMIGhlbHBlciDrs7Tsl6zso7zquLBcclxuXHRcdC8vIOuqqOuRkCB2YWxpZCDsnbwg65WMIHN1Ym1pdFxyXG5cdFx0aWYgKGlzUGFzc3dvcmQpIHtcclxuXHRcdFx0Y29uc29sZS5sb2cobG9naW5QYXNzd29yZCwgbG9naW5QYXNzd29yZC52YWx1ZS5sZW5ndGgpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGlzRW1wdHlFbWFpbCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnZW1wdHknKTtcclxuXHRcdFx0Ly8gRklYTUU6IHRhc3JnZXRcclxuXHRcdFx0Y29uc29sZS5sb2codGFyZ2V0Lm5leHRFbGVtZW50U2libGluZyk7XHJcblx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGlmIChsb2dpblBhc3N3b3JkLnZhbHVlLmxlbmd0aCA8IDgpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ2F0IGxlYXN0IDggbGVuZ3RoJyk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0pO1xyXG59XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldmVudCA9PiB7XHJcblx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cdGNvbnN0IGlzU3VibWl0TG9naW4gPSB0YXJnZXQgPT09IGRvY3VtZW50LmxvZ2luO1xyXG5cdGlmIChpc1N1Ym1pdExvZ2luKSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0bG9naW5Gb3JtVmFsaWRhdGlvbigpO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuLypcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuXHRpZihldmVudC50YXJnZXQuY2xvc2VzdCgnLnRvZG8tY29udHJvbC1yZW1vdmUnKSl7XHJcblx0XHR0b2RvTGlzdC5pbm5lckhUTUwgPSAnJztcclxuXHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2RvTGlzdEl0ZW1zMScpO1xyXG5cdH1cclxuXHRjb25zdCBpdGVtID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5qcy10b2RvIGlucHV0Jyk7XHJcblx0aWYoaXRlbSkge1xyXG5cdFx0aWYoaXRlbS5jaGVja2VkKSB7XHJcblx0XHRcdGl0ZW0ucGFyZW50Tm9kZS5jbGFzc05hbWUgPSAnY29tcGxldGVkJztcclxuXHRcdFx0aXRlbS5jaGVja2VkID0gdHJ1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGl0ZW0ucGFyZW50Tm9kZS5jbGFzc05hbWUgPSAnJztcclxuXHRcdFx0aXRlbS5jaGVja2VkID0gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb0xpc3RJdGVtczEnLCB0b2RvTGlzdC5pbm5lckhUTUwpO1xyXG5cdH1cclxufSk7XHJcbiovXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFRvZGF5RGF0ZSA9ICgpID0+IHtcclxuXHRjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XHJcblx0Y29uc3QgeWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7IC8vIHRvU3RyaW5nKCkucGFkU3RhcnRcclxuXHRjb25zdCBtb250aCA9IFN0cmluZyh0b2RheS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcclxuXHRjb25zdCBkYXRlID0gU3RyaW5nKHRvZGF5LmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcclxuXHRjb25zdCBkYXkgPSB0b2RheS5nZXREYXkoKTsgLy8g7JuUIDogMFxyXG5cclxuXHRjb25zdCBob3VycyA9IHRvZGF5LmdldEhvdXJzKCk7XHJcblx0Y29uc3QgbWludXRlcyA9IHRvZGF5LmdldE1pbnV0ZXMoKTtcclxuXHQvLyBjb25zdCBzZWNvbmRzID0gdG9kYXkuZ2V0U2Vjb25kcygpO1xyXG5cdGNvbnN0IGFtcG0gPSBob3VycyA8IDEyID8gJ2FtJyA6ICdwbSc7XHJcblxyXG5cdC8vIGxldCB0aGVCaWdEYXkgPSBuZXcgRGF0ZShcIkp1bHkgMSwgMTk5OVwiKTtcclxuXHQvLyBsZXQgc2FtZUFzQmlnRGF5ID0gbmV3IERhdGUoKTtcclxuXHQvLyBzYW1lQXNCaWdEYXkuc2V0VGltZSh0aGVCaWdEYXkuZ2V0VGltZSgpKTtcclxuXHJcblx0LypcclxuXHRjb25zdCBkYXRlU3RyaW5nID0gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKS5zcGxpdCgnLicpO1xyXG5cdGNvbnN0IFt5ZWFyLCBtb250aCwgZGF5XSA9IGRhdGVTdHJpbmc7XHJcblx0Y29uc29sZS5sb2coZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKSk7IC8vIDE5ODDrhYQgMeyblCAz7J28IOuqqeyalOydvFxyXG5cdGNvbnNvbGUubG9nKGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCkpOyAvLyDsmKTsoIQgMToyODozNVxyXG5cdGNvbnNvbGUubG9nKGRhdGUudG9Mb2NhbGVTdHJpbmcoKSk7IC8vIDE5ODDrhYQgMeyblCAz7J28IOuqqeyalOydvCDsmKTsoIQgMToyODozNVxyXG5cdCovXHJcbn07IiwiZXhwb3J0IGNvbnN0IGxvYWRlciA9ICgpID0+IHtcclxuXHRjb25zdCBib2R5RWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XHJcblx0Y29uc3QgbG9hZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sb2FkaW5nJyk7XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdGxvYWRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtaGlkZGVuJyk7XHJcblx0XHRcdGJvZHlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHktbG9jaycpO1xyXG5cdFx0fSwgMCk7XHJcblx0fSk7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0Ym9keUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XHJcblx0fSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2hlY2tCcm93c2VyID0gKCkgPT4ge1xyXG5cdGNvbnN0IEJyb3dzZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJyb3dzZXInKTtcclxuXHRsZXQgYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XHJcblx0aWYgKGFnZW50LmluZGV4T2YoJ21zaWUnKSA+IC0xIHx8IGFnZW50LmluZGV4T2YoJ3RyaWRlbnQnKSA+IC0xKSB7XHJcblx0XHRCcm93c2VyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHR9IGVsc2UgaWYgKGFnZW50LmluZGV4T2YoJ2Nocm9tZScpICE9PSAtMSkge1xyXG5cdFx0Y29uc29sZS5sb2coYWdlbnQsICftgazroawnKTtcclxuXHR9XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdvb2dsZUFuYWx5dGljcyA9ICgpID0+IHtcclxuXHQvLyA8c2NyaXB0IGFzeW5jIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtODM1MzEyMzktMVwiPjwvc2NyaXB0PlxyXG5cdC8vIHdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdO1xyXG5cdC8vIGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO31cclxuXHQvLyBndGFnKCdqcycsIG5ldyBEYXRlKCkpO1xyXG5cdC8vIGd0YWcoJ2NvbmZpZycsICdVQS04MzUzMTIzOS0xJyk7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGFkanVzdFRvcFBhZGRpbmcgPSAoKSA9PiB7XHJcblx0Y29uc3QgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuXHRjb25zdCBpc0ZpeGVkSGVhZGVyID0gZ2V0Q29tcHV0ZWRTdHlsZShoZWFkZXJFbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcclxuXHRjb25zdCBtYWluRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcclxuXHJcblx0ZnVuY3Rpb24gYWRkUGFkZGluZygpIHtcclxuXHRcdGlmIChpc0ZpeGVkSGVhZGVyKSB7XHJcblx0XHRcdG1haW5FbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IGhlYWRlckVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgJ3B4JztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1haW5FbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IDAgKyAncHgnO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhZGRQYWRkaW5nKCk7XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShhZGRQYWRkaW5nKTtcclxuXHR9KTtcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xyXG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFkZFBhZGRpbmcpO1xyXG5cdH0pO1xyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=