!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i(i.s=0)}([function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,o){function a(e){try{c(n.next(e))}catch(e){o(e)}}function l(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,l)}c((n=n.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var i,n,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,n&&(r=2&o[0]?n.return:o[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,o[1])).done)return r;switch(n=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{i=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),i(1);var a=o(i(2)),l=i(4),c=i(5),u=o(i(6)),s=o(i(18)),d=i(10),_=o(i(23));function f(){var e,t;return n(this,void 0,void 0,(function(){var i,n,o,l;return r(this,(function(r){switch(r.label){case 0:return[4,a.default()];case 1:return r.sent(),(i=document.querySelector(".about-book-inner"))&&setTimeout((function(){_.default.map((function(e){i.innerHTML+='\n          <article class="bookitem">\n          <figure class="bookitem-cover">\n            <--\n            <img src='+e.imgSrc+" alt="+e.title+'>\n            --\x3e\n          </figure>\n          <h3 class="bookitem-name">\n            <span role="img" aria-label="">📙</span> '+e.title+'\n            <small class="bookitem-description">구글 최고의 혁신 전문가가 찾아낸 비즈니스 설계와 검증의 방법론</small>\n          </h3>\n          <hr />\n          <p class="bookitem-byline">'+(e.author||"정보가 없습니다")+'</p>\n          <time class="bookitem-publishedyear">'+(e.publishedDate||"정보가 없습니다")+"</time>\n        </article>"}))}),200),s.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).initialize(),s.default.file(),s.default.textarea(),s.default.number(),u.default.modal({selector:".js-modal"}).initialize(),u.default.toggleClass({selector:".js-toggle"}).initialize(),u.default.enterTarget({selector:".js-hover-trigger"}),u.default.tabMenu(),u.default.closeParentElement({selector:".js-close"}),u.default.stickyElement({targetElement:".js-post-head",addClass:"is-sticky-post-head",position:"bottom"}),u.default.scrollAnimation(),(f=document.querySelectorAll(".js-graph .graph-item"))&&f.forEach((function(e){var t=e.querySelector(".graph-item-bar"),i=e.querySelector(".graph-item-value");if(t&&i){var n=parseInt(i.innerText);t.style.height=n+"px",i.style.bottom=n+"px"}})),c.carousel(),function(){var e=document.querySelectorAll(".js-view-password");if(0===e.length)return;e.forEach((function(e){return e.addEventListener("click",(function(){var t,i;return function(e){var t,i,n="password"===(null===(t=e)||void 0===t?void 0:t.getAttribute("type"))?"text":"password";null===(i=e)||void 0===i||i.setAttribute("type",n)}(null===(i=null===(t=e)||void 0===t?void 0:t.parentNode)||void 0===i?void 0:i.querySelector("input"))}))}))}(),d=document.querySelector(".js-comment-write"),document.querySelectorAll(".js-comment-textfield").forEach((function(e){return e.addEventListener("focus",(function(){d.classList.add("is-focused")}))})),n=document.querySelector(".js-display-list"),o=document.querySelector(".js-display-grid"),l=document.querySelector(".profile-body"),null===(e=n)||void 0===e||e.addEventListener("click",(function(){var e,t,i;null===(e=n)||void 0===e||e.classList.add("is-selected"),null===(t=o)||void 0===t||t.classList.remove("is-selected"),null===(i=l)||void 0===i||i.classList.add("list")})),null===(t=o)||void 0===t||t.addEventListener("click",(function(){var e,t,i;null===(e=n)||void 0===e||e.classList.remove("is-selected"),null===(t=o)||void 0===t||t.classList.add("is-selected"),null===(i=l)||void 0===i||i.classList.remove("list")})),[2]}var d,f}))}))}document.addEventListener("readystatechange",(function(e){var t=e.target.readyState;"loading"===t?console.log("loading..."):"interactive"===t?console.log("initLoader"):"complete"===t&&console.log("initApp")})),window.addEventListener("unload",(function(){return console.log("unload event")})),window.addEventListener("hashchange",f),window.addEventListener("hashchange",(function(){t=document.querySelector(".js-navbar-toggle"),t&&t.classList.contains("is-active")&&(t.classList.remove("is-active"),null===(e=t.nextElementSibling)||void 0===e||e.classList.remove("is-visible"));var e,t})),document.addEventListener("DOMContentLoaded",(function(){l.detectBrowser(),l.initializeLoader(),f(),c.setDarkmode(),u.default.toggleClass({selector:".js-navbar-toggle"}).initialize(),u.default.toTop({selector:".js-to-top"}),u.default.stickyElement({targetElement:".js-header",addClass:"is-sticky-header",position:"top"}),window.addEventListener("scroll",d.throttle((function(){var e=document.querySelector(".post"),t=document.querySelector(".post-head-progress");if(!e||!t)return;var i=window.pageYOffset/(e.scrollHeight-window.innerHeight)*100+"%";t.style.width=i})),!0)}))},function(e,t,i){},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,o){function a(e){try{c(n.next(e))}catch(e){o(e)}}function l(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,l)}c((n=n.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var i,n,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,n&&(r=2&o[0]?n.return:o[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,o[1])).done)return r;switch(n=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{i=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};Object.defineProperty(t,"__esModule",{value:!0});i(3),window.location.pathname;t.default=function(){return n(void 0,void 0,void 0,(function(){var e,t;return r(this,(function(i){switch(i.label){case 0:return(e=document.getElementById("view"))?(t=window.location.hash.substring(1),[4,fetch(t?"/views/"+t+".html":"/views/design.html").then((function(e){return e.text()})).then((function(t){return e.innerHTML=t})).catch((function(e){return console.warn("router: ",e)}))]):[2];case 1:return i.sent(),window.scrollTo(0,0),[2]}}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pushBrowserHistory=function(e,t,i){void 0===e&&(e={}),void 0===t&&(t=""),void 0===i&&(i=""),history.pushState(e,t,i)},t.backHistory=function(){}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initializeLoader=function(){document.addEventListener("DOMContentLoaded",(function(){document.body.classList.add("body-lock")})),window.addEventListener("load",(function(){var e=document.querySelector(".js-loader");if(!e)return;document.body.classList.remove("body-lock"),e.hidden=!0}))},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase(),i=t.indexOf("msie")>-1||t.indexOf("trident")>-1;e.hidden=!i}};t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return i(e)};i(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}function i(e){var t=document.body,i="fixed"===getComputedStyle(e).position;t.style.marginTop=i?e.clientHeight+"px":0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),i=e.querySelectorAll(".slider-viewer > button"),n=e.querySelector(".slider-arrows-prev"),r=e.querySelector(".slider-arrows-next"),o=e.querySelectorAll(".slider-dots-dot");if(t&&i&&n&&r&&o){var a=t.offsetWidth,l=0;i.forEach((function(e){return l+=e.offsetWidth})),r.addEventListener("click",(function(){t.scrollLeft+=100})),n.addEventListener("click",(function(){t.scrollLeft-=100})),o.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",a)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(e.addEventListener("click",(function(){document.body.classList.toggle("theme-dark");var t=document.body.classList.contains("theme-dark");e.querySelector("input").checked=t,t?localStorage.setItem("theme","theme-dark"):localStorage.removeItem("theme")})),function(){var t=localStorage.getItem("theme");if(!t)return;document.body.classList.add(t);var i=document.body.classList.contains("theme-dark");e.querySelector("input").checked=i}())}},function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=n(i(7)),o=n(i(8)),a=n(i(9)),l=n(i(11)),c=n(i(12)),u=n(i(13)),s=n(i(14)),d=n(i(15)),_=n(i(16)),f=n(i(17));t.default={toggleClass:r.default,enterTarget:o.default,modal:l.default,tabMenu:a.default,toTop:c.default,stickyElement:u.default,scrollAnimation:s.default,scrollspy:f.default,closeParentElement:d.default,customCursor:_.default}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",initialize:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(i){i.preventDefault(),i.stopPropagation(),e.toggle(t),e.triggers.forEach((function(t){i.target===t||e.remove(t)}))}))}),!1),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.remove(t)}))})))},toggle:function(e){var t,i=null===(t=e)||void 0===t?void 0:t.nextElementSibling;i&&(e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS)),i.classList.toggle(this.ACTIVE_CLASS2),i.addEventListener("click",(function(e){return e.stopPropagation()})))},remove:function(e){e.classList.remove(this.ACTIVE_CLASS),e.setAttribute("aria-expanded","true"),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)},clickOutbound:function(){}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t,i=e.selector;null===(t=document.querySelectorAll(i))||void 0===t||t.forEach((function(e){e.addEventListener("mouseenter",(function(){return function(e){var t=e.classList.contains("navbar-menu-item");e.setAttribute("aria-expanded","true"),t&&document.body.classList.add("is-shown")}(e)})),e.addEventListener("mouseleave",(function(){return function(e){var t=e.classList.contains("navbar-menu-item");e.setAttribute("aria-expanded","false"),t&&document.body.classList.remove("is-shown")}(e)}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default=function(){var e,t,i=document.querySelector(".profile-tablist-indicator"),r=null===(t=null===(e=i)||void 0===e?void 0:e.parentNode)||void 0===t?void 0:t.querySelector("[role=tab]");if(i&&r){var o=getComputedStyle(r).width;i.style.width=o,document.addEventListener("resize",(function(){return n.throttle(function(e,t){setTimeout((function(){e.style.width=t}),100)}(i,o))})),document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),r=t.parentNode.parentNode.querySelectorAll("[role=tabpanel]"),o=t.getAttribute("data-index");n&&t.closest("[role=tab]")&&(i.style.left=t.offsetLeft+"px",i.style.width=getComputedStyle(t).width,n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),r.forEach((function(e){e.classList.add("hidden"),e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&(e.classList.remove("hidden"),e.setAttribute("aria-hidden","hidden"))})))}),!0)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=function(e){var t;return function(){t&&window.cancelAnimationFrame(t),t=window.requestAnimationFrame((function(){return e()}))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3);t.default=function(e){var t=e.selector;return{modalTriggers:document.querySelectorAll(t),modalContainer:document.querySelector("#modal"),initialize:function(){var e=this;this.modalTriggers&&(document.removeEventListener("click",this.backHistory),this.modalTriggers.forEach((function(t){return t.addEventListener("click",(function(i){i.stopPropagation(),i.preventDefault();var r=t.dataset.modal;fetch("/views/"+r+".html").then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(t){var i,o,a,l;if(e.modalContainer&&(e.modalContainer.innerHTML=t,e.showModal(window.pageYOffset),n.pushBrowserHistory({},"",r),document.body.classList.contains("is-modal-visible"))){var c=e.modalContainer.querySelector(".js-modal-close");null===(i=c)||void 0===i||i.addEventListener("click",(function(e){return e.stopPropagation()})),null===(a=null===(o=e.modalContainer)||void 0===o?void 0:o.querySelector(".modal-dialog"))||void 0===a||a.addEventListener("click",(function(e){return e.stopPropagation()})),null===(l=c)||void 0===l||l.addEventListener("click",e.backHistory),e.modalContainer.addEventListener("click",e.backHistory),window.addEventListener("popstate",(function(){return e.clearModal(e.modalContainer,pageYOffset)})),document.addEventListener("keydown",(function(t){27===t.keyCode&&e.backHistory()}),!0)}})).catch((function(e){return console.warn("modal Error")}))}))})))},showModal:function(e){document.body.classList.add("is-modal-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+e+"px"},clearModal:function(e,t){document.body.classList.remove("is-modal-visible"),document.body.classList.remove("body-lock"),e.innerHTML="",window.scrollTo(0,t)},backHistory:function(){history.back()}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,i=document.querySelector(t);i&&i.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0)}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default=function(e){var t=e.targetElement,i=e.addClass,r=e.position,o=document.querySelector(t);if(o){var a=o.offsetHeight;window.addEventListener("scroll",n.throttle((function(){var e=o.offsetTop,t=o.offsetTop+a;window.pageYOffset>("top"===r?e:t)?document.body.classList.add(i):document.body.classList.remove(i)})),!1)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default=function(){var e=document.querySelectorAll(".js-scroll-animation");if(e){var t="is-scrolled";e.forEach((function(e){e.getBoundingClientRect().top<=window.innerHeight&&e.classList.add(t)})),window.addEventListener("scroll",n.throttle((function(){e.forEach((function(e){e.getBoundingClientRect().top+.5*e.clientHeight<=window.innerHeight&&e.classList.add(t)}))})),!1)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,i=document.querySelectorAll(t);0!==i.length&&i.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-loader-spinner");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return i(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return i(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function i(e,t){var i=t.cursorElement,n=e.clientX,r=e.clientY;i.style.left=n+"px",i.style.top=r+"px"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default=function(e){var t=e.menusSelector,i=e.sectionsSelector,r=document.querySelectorAll(t),o=document.querySelectorAll(i);r&&o&&(o.forEach((function(e,t){e.addEventListener("click",(function(e){e.preventDefault();var i=r[t].offsetTop;window.scrollTo(0,i)}))})),window.addEventListener("scroll",n.throttle((function(){r.forEach((function(e,t){e.offsetTop<=window.pageYOffset+200&&(o.forEach((function(e){return e.classList.remove("is-active")})),o[t].classList.add("is-active"))}))})),!1))}},function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=n(i(19)),o=n(i(20)),a=n(i(21)),l=n(i(22));t.default={checkbox:r.default,textarea:o.default,file:a.default,number:l.default}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,i=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(i),initialize:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckedAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckedEach(e.checkItems,e.checkAll)}))})))},setCheckedEach:function(e,t){var i=Array.from(e),n=i.every((function(e){return e.checked})),r=i.some((function(e){return e.checked}))&&!n;t.checked=n,t.indeterminate=r,t.dataset.indeterminate=r},setCheckedAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),i=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=i+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,i=e.target;if(!i&&"textarea"===i.nodeName.toLowerCase()){var r=document.querySelector(".textfield-byte b");if(r){var o=(null===(t=i)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;r.innerText=o,o>30?i.parentNode.classList.add("is-invalid"):i.parentNode.classList.remove("is-invalid"),n(i)}}}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,i=document.querySelector(".js-file-attachment-list"),n=document.querySelector(".js-file-attachment-helper");if(!t||!i||!n)return;n.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,n,r='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,n=t>=1024&&t<1048576,t<1024?t+"bytes":n?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><i class="icon-close"></i></button>\n\t\t\t</a>';i.innerHTML+=r}))}(e)}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t=e.target;t.closest(".js-number-input")&&document.addEventListener("keyup",(function(){var e=/(^0+)/.test(t.value),i=Number(t.value)>=300,n=t.value.length>0;e&&(t.value=0);n&&(t.value=t.value.slice(0,3));i&&(t.value=300)}))}))};var n=document.querySelector(".js-input-test");if(n){n.addEventListener("keypress",(function(e){var t=e.which||e.keyCode;!(32===t)&&(t<48||t>57)&&e.preventDefault()}));var r=n.value||"";n.addEventListener("input",(function(e){var t=e.target;/^[0-9\s]*$/.test(t.value)?r=t.value:t.value=r}))}document.addEventListener("click",(function(e){var t=e.target,i=t.parentNode.querySelector(".js-quantity-input"),n=t.parentNode.querySelector(".js-quantity-decrement"),r=t.parentNode.querySelector(".js-quantity-increment");if(t.closest(".js-quantity-decrement")&&(--i.value,i.value<=0&&t.setAttribute("disabled","true"),i.value<10&&r.removeAttribute("disabled")),t.closest(".js-quantity-increment")){if(10===i.value)return;++i.value,i.value>=10&&t.setAttribute("disabled","true"),i.value>0&&n.removeAttribute("disabled")}}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=[{publishedDate:"",title:"스틱",engTitle:"",author:"",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:"",title:"사용자 스토리 맵 만들기",engTitle:"",author:"",subTitle:"아이디어를 올바른 제품으로 만드는 여정",imgSrc:"https://image.aladin.co.kr/product/17458/18/cover500/8966262325_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:"",title:"비지니스 불패의 법칙",engTitle:"",author:"",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:"",title:"불공평하고 불완전한 네덜란드 디자인 여행",engTitle:"",author:"",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/254/63/cover500/8970593837_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:"",title:"글짜씨 16 : 타입 디자인",engTitle:"",author:"",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:1972,title:"다른 방식으로 보기",engTitle:"The Way of Seeing",author:"존 버거",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:1949,title:"스기우라 고헤이 잡지 디자인 반세기",engTitle:"",author:"",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/59/2/cover500/8989420350_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:1936,title:"기술복제시대의 예술작품(제 2판)",engTitle:"Das Kunstwerk im Zeitalter seiner technischen Reproduzierbarkeit",author:"발터 벤야민",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"한글 레터링 자료집 1950-1985",engTitle:"",author:"프로파간다",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/4865/76/cover500/8998143224_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2012,title:"헬무트 뉴튼 사진집",engTitle:"Helmut Newton Work",author:"헬무트 뉴튼",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:"레이아웃보다 아이디어"},{publishedDate:1981,title:"이제껏 배운 그래픽 디자인 규칙은 다 잊어라. 이 책에 실린 것까지",engTitle:".Forget All the Rules You Ever Learned About Graphic Design, Including the Ones in this Book",author:"밥 길",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/10995/72/cover500/8994207791_1.jpgg","":"",__1:"",__2:"",__3:""},{publishedDate:2017,title:"한글 타이포그래피 한글 서체 디자인 전문지 2350, ISSUE #1 Oct. 20172350press",engTitle:"",author:"2350press",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:1951,title:"내 문장이 그렇게 이상한가요?",engTitle:"",author:"김정선",subTitle:"내가 쓴 글, 내가 다듬는 법",imgSrc:"https://image.aladin.co.kr/product/7492/3/cover500/k752434117_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2015,title:"타이포잔치 2017, 5회 국제 타이포그래피 비엔날레 - 몸과 타이포그래피",engTitle:"Typojanchi 2017, The 5th International Typography Biennale - Body and Typography",author:"타이포잔치",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:1981,title:"한글의 글자표현",engTitle:"",author:"김진평",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/18417/35/cover500/k492534252_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2016,title:"모리사와 최정호 폰트: 한글 폰트의 DNA",engTitle:"Morisawa Choi Jeong-ho Fonts: DNA of Hangul Fonts",author:"(주) 모리사와",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2013,title:"그래픽 26호 2013.3 한글 타입과 레터링",engTitle:"",author:"프로파간다",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:0,title:"한글 디자인 교과서",engTitle:"",author:"이용제, 안상수, 한재준",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2005,title:"마이크로 타이포그래피",engTitle:"Das Detail in der Typografie",author:"요스트 호훌리, 워크룸 프레스 김형진",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/5047/55/cover500/8994207473_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"시각디자인: 좋은 것에 담긴 감각과 생각",engTitle:"Critica portatile al visual design. Da Gutenberg ai social network",author:"리카르도 팔치넬리, 윤병언",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/8652/38/cover500/k622535294_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"자신을 브랜딩하는 방법",engTitle:"",author:"CA 편집부, 이지은",subTitle:"크리에이터의 가치를 높이는 사용 설명서",imgSrc:"https://image.aladin.co.kr/product/3642/56/cover500/8997225170_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2017,title:"모임꼴 2호",engTitle:"",author:"활자공간",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2016,title:"섞어짜기 - 나만의 타이포그래피",engTitle:"",author:"문장현, 정재완, 심우진, 이경수, 최성민",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2016,title:"모임꼴 창간호",engTitle:"",author:"이용제, 권진희, 최종원",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2010,title:"비넬리의 디자인 원칙",engTitle:"The Vignelli Canon",author:"마시모 비넬리, 박효신",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/2589/80/letslook/8970596747_b.jpg","":"",__1:"",__2:"",__3:"/ 객관화된 주관을 듣고 싶었기에 너무 고마운 책이었다."},{publishedDate:2011,title:"그래픽 디자인의 요소",engTitle:"The Elements of Graphic Design",author:"알렉스 화이트, 안상락, 윤지선",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/2393/55/cover500/8997716158_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2012,title:"로고 라이프",engTitle:"Logo Life",author:"론 판 데르 플루흐트",subTitle:"로고는 살아있다. 세계 100대 로고의 탄생과 성장 스토리",imgSrc:"https://image.aladin.co.kr/product/6570/31/cover500/k132433857_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2005,title:"비주얼 그래머",engTitle:"Visual Grammar",author:"크리스티안 르보",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2011,title:"폰트의 비밀",engTitle:"",author:"고바야시 아키라",subTitle:"브랜드의 로고는 왜 고급스러워 보일까?",imgSrc:"https://image.aladin.co.kr/product/3025/48/cover500/8970845054_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2015,title:"마이크로인터랙션",engTitle:"Microinteractions",author:"댄 새퍼, 정승녁, 인사이트",subTitle:"디테일에 강한 인터랙션 디자인 ㅣ UX insight 시리즈",imgSrc:"https://image.aladin.co.kr/product/5878/21/cover500/8966261191_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2013,title:"고 Go : 칩 키드의 그래픽 디자인 가이드",engTitle:"Go: A Kidd's Guide to Graphic Design",author:"칩 키드, 이종 출판사",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/5005/64/cover500/8979291930_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:1982,title:"편집 디자인",engTitle:"Editing by design, 2nd Edition",author:"잰 화이트",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/3184/36/cover500/8970597034_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2015,title:"텍스트와 타이포그래피",engTitle:"Shaping Text",author:"얀 미덴도르프",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/5564/61/cover500/8970597964_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2015,title:"Do it! 프런트엔드 웹 디자인 입문",engTitle:"",author:"고경희",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/13415/72/cover500/k142532408_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2013,title:"디자이너의 서체이야기",engTitle:"",author:"지콜론북",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/2624/50/cover500/8998656051_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2013,title:"디자인력",engTitle:"デザインセンスを身につける",author:"우지 도모코",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/2509/9/cover500/8970596771_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2015,title:"커버 - 북디자이너의 표지 이야기",engTitle:"Cover",author:"피터 멘델선드",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/6283/66/cover500/896196240x_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"시작, 인포그래픽",engTitle:"pictogram x diagram = infographic たのしい インフォグラフィック入門",author:"사쿠라다 준",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/4438/15/cover500/8970597484_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2009,title:"타이포그래피 불변의 법칙 100가지",engTitle:"Typography essentials : 100 design principles for working with type",author:"아이나 살츠",subTitle:"타이포그래피로 디자인을 업그레이드 하라",imgSrc:"https://image.aladin.co.kr/product/751/0/cover500/8979301987_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2010,title:"타이포그래피 들여다보기",engTitle:"Thinking with type, rivised edition",author:"앨런 립튼 / 김성학 옮김",subTitle:"타이포그래피 역사에서 미래까지, 이론에서 기술까지",imgSrc:"https://image.aladin.co.kr/product/3315/0/cover500/8997716328_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2010,title:"타이포그래피의 탄생",engTitle:"From Gutenberg to Opentype",author:"로빈 도드",subTitle:"구텐베르크부터 디지털 폰트까지",imgSrc:"https://image.aladin.co.kr/product/647/6/cover500/8993941130_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2010,title:"허브 루발린",engTitle:"Herb Lubalin: Art Director, Graphic Designer and Typographer",author:"앨런 페콜릭",subTitle:"아트디렉터, 타이포그래퍼, 그래픽 디자이너",imgSrc:"https://image.aladin.co.kr/product/687/47/cover500/8992607512_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"디자이너의 흥미로운 물건들, 취향DESIGNER'S FAVORITE STUFF김선미, 장민",engTitle:"",author:"김선미, 장민",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2009,title:"수전 손택의 일기와 노트수전 손택, 데이비드 리프 / 못 읽겠다. 읽다가 말았당",engTitle:"",author:"수전 손택, 데이비드 리프",subTitle:"",imgSrc:"/ 못 읽겠다. 읽다가 말았당","":"",__1:"",__2:"",__3:""},{publishedDate:2009,title:"디자이너가 꼭 알아야 할 타이포그래피",engTitle:"Type rules! : the designer's guide to professional typography",author:"아이린 스트리즈버 / 디자인하우스",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/476/22/cover500/8970415289_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"One Page 인포그래픽 사용설명서, 메타포",engTitle:"",author:"우석진",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/4375/67/cover500/8998001039_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2013,title:"크리에이터의 즐겨찾기",engTitle:"Creator's Bookmarks",author:"지콜론북 편집부",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/2388/93/cover500/8998656000_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2008,title:"얀 치홀트, 타이포그래피의 거장. 그의 삶과 작품 그리고 유산",engTitle:"JAN TSCHICHOLD, Structure and Content for Screenwriters",author:"시즈 드 종, 알스톤 퍼바스, 마틴 르 콜트레, 리처드 B. 더블데이, 한스 라이하르트",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/769/81/cover500/8992607539_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2005,title:"영혼을 잃지 않는 디자이너 되기",engTitle:"How to be a graphic designer, without losing your soul",author:"아드리안 쇼네시 / 김형진 유진민 옮김",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/88/26/cover500/8983713267_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2008,title:"그리드Grids개빈 앰브로즈, 폴 해리스",engTitle:"",author:"개빈 앰브로즈, 폴 해리스",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2008,title:"그래픽 디자인 : 새로운 기초",engTitle:"Graphic Design: The New Basics",author:"엘런 럽튼, 제니퍼 콜 필립스 / 원유홍 옮김",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/430/19/cover500/8992607350_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:1948,title:"문장강화文章講話",engTitle:"",author:"이태준",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2004,title:"타이포그래피 천일야화",engTitle:"",author:"원유홍, 서승연",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/20517/46/cover500/8970595112_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:1994,title:"한번은,",engTitle:"Einmal",author:"빔 벤더스",subTitle:"빔 벤더스의 사진 그리고 이야기들",imgSrc:"https://image.aladin.co.kr/product/1253/72/cover500/8954615406_2.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:1981,title:"",engTitle:"",author:"에밀 루더",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:0,title:"타이포그래피 에세이",engTitle:"양을 훔친 당신에게 필요한 타이포그래피 지침서",author:"에릭 슈피커만 & E, M 진저",subTitle:"양을 훔친 당신에게 필요한 타이포그래피 지침서",imgSrc:"https://image.aladin.co.kr/product/4766/34/cover500/8970597573_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2014,title:"Do it! 자바스크립트+제이쿼리 입문 정인용",engTitle:"",author:"정인용",subTitle:"",imgSrc:"","":"",__1:"",__2:"",__3:""},{publishedDate:2013,title:"Do it! HTML5 + CSS3 웹 표준의 정석",engTitle:"",author:"고경희",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/22267/44/cover500/k832636825_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:2004,title:"그리드 디자인",engTitle:"Grid Systems: Principles of Organizing Type",author:"킴벌리 일램",subTitle:"효율적인 타이포그래피 레이아웃의 원리",imgSrc:"https://image.aladin.co.kr/product/59/92/cover500/8995724404_1.jpg","":"",__1:"",__2:"",__3:""},{publishedDate:1935,title:"타이포그라픽 디자인",engTitle:"Typographische Gestaltung",author:"얀 치홀트",subTitle:"",imgSrc:"https://image.aladin.co.kr/product/3627/50/cover500/8970597239_2.jpg","":"",__1:"",__2:"",__3:""}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,