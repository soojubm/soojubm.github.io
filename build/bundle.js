!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=o(n(2)),i=n(3),s=n(4),c=n(5),a=n(6),l=o(n(7)),u=o(n(18)),d=n(23);window.addEventListener("beforeunload",(function(){})),window.addEventListener("unload",(function(){return console.log("unload EVENT")})),window.addEventListener("offline",(function(){document.querySelector(".js-offline").style.display="block"}));var f=function(){r.default().then((function(){var e,t=d.validity.isEmail("faf");console.log("isNumber",t),l.default.modal({selector:".js-modal"}).setEvent(),u.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),l.default.toggleClass({selector:".js-toggle"}).setEvent(),l.default.enterTarget({selector:".js-hover-trigger"}),l.default.tabMenu(),l.default.close({selector:".js-close"}),l.default.toTop({selector:".js-to-top"}),l.default.scrollAnimation(),l.default.scrollspy({menusSelector:".js-section",sectionsSelector:".newneek-navbar-menu-item"}),u.default.file(),u.default.textarea(),u.default.number(),s.setGraph(),a.countDownClock(20,"days"),c.carousel(),function(){var e,t=document.querySelectorAll(".js-view-password");null===(e=t)||void 0===e||e.forEach((function(e){return e.addEventListener("click",(function(){var t,n,o,r=null===(t=e.parentNode)||void 0===t?void 0:t.querySelector("input"),i="password"===(null===(n=r)||void 0===n?void 0:n.getAttribute("type"))?"text":"password";null===(o=r)||void 0===o||o.setAttribute("type",i)}))}))}(),null===(e=document.querySelector(".js-copy"))||void 0===e||e.addEventListener("click",(function(){return e="fafaf",t=document.createElement("textarea"),document.body.appendChild(t),t.value=e,t.select(),document.execCommand("copy"),document.body.removeChild(t),void alert('Î≥µÏÇ¨ ÏôÑÎ£å! Ïù¥Ï†ú "Î∂ôÏó¨ÎÑ£Í∏∞" Ìï¥Ï£ºÏÑ∏Ïöî.üòâ');var e,t}));var n=document.querySelector(".js-input-test");if(n){n.addEventListener("keypress",(function(e){var t=e.which||e.keyCode;32!=t&&(t<48||t>57)&&e.preventDefault()}));var o=n.value||"";n.addEventListener("input",(function(e){var t=e.target;/^[0-9\s]*$/.test(t.value)?o=t.value:t.value=o}))}var r,i=document.querySelector(".js-display-list"),f=document.querySelector(".js-display-grid"),v=document.querySelector(".profile-body");i&&f&&v&&(i.addEventListener("click",(function(){i.classList.add("is-selected"),f.classList.remove("is-selected"),v.classList.add("list")})),f.addEventListener("click",(function(){i.classList.remove("is-selected"),f.classList.add("is-selected"),v.classList.remove("list")}))),r=document.querySelector(".js-comment-write"),document.querySelectorAll(".js-comment-textfield").forEach((function(e){return e.addEventListener("focus",(function(){r.classList.add("is-focused")}))}))}))};function v(){var e,t,n=document.querySelector(".js-header");["#design",""].includes(window.location.hash)?null===(e=n)||void 0===e||e.classList.add("is-white"):null===(t=n)||void 0===t||t.classList.remove("is-white")}function m(){var e,t,n,o,r,i,s=document.querySelector(".navbar-burger");null===(e=s)||void 0===e||e.classList.remove("is-active"),null===(n=null===(t=s)||void 0===t?void 0:t.nextElementSibling)||void 0===n||n.classList.remove("is-visible"),o=window.location.hash,r=document.body,i="page-"+(""===o?"design":o.substring(1)),r.className="",r.classList.add(i),v()}window.addEventListener("hashchange",f),window.addEventListener("hashchange",m),window.addEventListener("hashchange",v),document.addEventListener("DOMContentLoaded",(function(){m(),i.loader(),i.detectBrowser(),c.setDarkmode(),l.default.toggleClass({selector:".js-navbar-toggle"}).setEvent(),f(),window.addEventListener("scroll",(function(){window.innerHeight+window.pageYOffset>=document.body.offsetHeight&&console.log("detect bottom"),l.default.stickyElement({targetElement:".js-post-head",addClass:"is-sticky-post-head"}),l.default.stickyElement({targetElement:".js-header",addClass:"is-sticky-header"})}));window.addEventListener("scroll",(function(){var e=document.querySelector(".post"),t=document.querySelector(".post-head-progress");if(e&&t){var n=window.pageYOffset/(e.scrollHeight-window.innerHeight)*100+"%";t.style.width=n}}),!0)})),document.addEventListener("submit",(function(e){return e.preventDefault()}))},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=window.location.hash,t=e?"/views/"+e.substring(1)+".html":"/views/design.html";return console.log(history.state),fetch(t).then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(e){var t=document.getElementById("view");t&&(t.innerHTML=e,window.scrollTo(0,0))})).catch((function(e){return console.warn("router: ",e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loader=function(){var e=document.querySelector(".js-loader");if(e){var t=document.body;document.addEventListener("DOMContentLoaded",(function(){t.classList.add("body-lock")})),window.addEventListener("load",(function(){setTimeout((function(){e.classList.add("is-hidden"),t.classList.remove("body-lock")}),0)}))}},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?(e.style.display="block",console.log(t)):-1!==t.indexOf("chrome")&&console.log(t,"ÌÅ¨Î°¨")}};function o(e){var t=document.body;"fixed"===getComputedStyle(e).position?t.style.marginTop=e.clientHeight+"px":t.style.marginTop=0}t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return o(e)};o(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGraph=function(){var e=document.querySelectorAll(".js-graph .graph-item");e&&e.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var o=parseInt(n.innerText);t.style.height=o+"px",n.style.bottom=o+"px"}}))}},function(e,t,n){"use strict";function o(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),o=e.querySelector(".slider-arrows-prev"),r=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&o&&r&&i){var s=t.offsetWidth,c=0;n.forEach((function(e){return c+=e.offsetWidth})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",s)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",o))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.countDownClock=function(e,t){void 0===e&&(e=100),void 0===t&&(t="seconds");var n=document.querySelector(".js-days"),o=document.querySelector(".js-hours"),r=document.querySelector(".js-minutes"),i=document.querySelector(".js-seconds");function s(e){var t=Date.now()+1e3*e,s=setInterval((function(){var e=Math.round((t-Date.now())/1e3);e<=0?clearInterval(s):n&&o&&r&&i&&(n.innerHTML=""+Math.floor(e/86400),o.innerText=""+Math.floor(e%86400/3600),r.innerText=""+Math.floor(e%86400%3600/60),i.innerText=""+(e%60<10?"0"+e%60:e%60))}),1e3)}n&&function(t){switch(t){case"seconds":return s(e);case"minutes":return s(60*e);case"hours":return s(60*e*60);case"days":s(60*e*60*24)}}(t)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=o(n(9)),s=o(n(10)),c=o(n(11)),a=o(n(12)),l=o(n(13)),u=o(n(14)),d=o(n(15)),f=o(n(16)),v=o(n(17));t.default={toggleClass:r.default,enterTarget:i.default,modal:c.default,tabMenu:s.default,toTop:a.default,stickyElement:l.default,scrollAnimation:u.default,scrollspy:v.default,close:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{init:function(){},triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",setEvent:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(n){var o;n.preventDefault(),n.stopPropagation();var r=null===(o=t)||void 0===o?void 0:o.nextElementSibling;r&&(e.toggleClassTrigger(t),e.toggleClassTarget(r),e.triggers.forEach((function(t){n.target!==t&&e.removeAllClass(t)})))}))})),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.removeAllClass(t)}))})))},toggleClassTrigger:function(e){e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS))},toggleClassTarget:function(e){e.classList.toggle(this.ACTIVE_CLASS2),e.addEventListener("click",(function(e){return e.stopPropagation()}))},removeAllClass:function(e){e.setAttribute("aria-expanded","true"),e.classList.remove(this.ACTIVE_CLASS),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,o=document.querySelectorAll(t);o&&o.forEach((function(e){var t=e===document.querySelector(".js-navbar .navbar-menu-item.js-hover-trigger");e.addEventListener("mouseenter",(function(){e.setAttribute("aria-expanded","true"),e.classList.add("is-expanded"),t&&n.classList.add("is-shown"),e.addEventListener("mouseleave",(function(){return e.setAttribute("aria-expanded","false"),e.classList.remove("is-expanded"),void(t&&n.classList.remove("is-shown"))}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index"),r=document.querySelector(".profile-tablist-active");n&&r&&t.closest("[role=tab]")&&(r.style.left=t.offsetLeft+"px",n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach((function(e){e.setAttribute("aria-hidden","true"),e.classList.add("hidden"),e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&(e.setAttribute("aria-hidden","hidden"),e.classList.remove("hidden"))})))}),!0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{initialize:function(){},modals:document.querySelectorAll(t),modalContainer:document.querySelector("#modal"),setEvent:function(){var e=this;document.removeEventListener("click",this.backHistory),this.modals&&this.modals.forEach((function(t){return t.addEventListener("click",(function(n){n.stopPropagation(),n.preventDefault();var o=t.dataset.modal;fetch("/views/"+o+".html").then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(n){var r,i,s,c,a;if(e.modalContainer){var l=window.pageYOffset;document.body.classList.remove("is-modal-visible"),e.modalContainer.innerHTML=n,e.setModal(l),e.setHistory(o);var u=document.body.classList.contains("is-modal-visible");u&&(null===(r=document.querySelector(".js-modal-close"))||void 0===r||r.addEventListener("click",(function(e){return e.stopPropagation()})),null===(i=document.querySelector(".js-modal-close"))||void 0===i||i.addEventListener("click",e.backHistory),null===(s=document.querySelector(".modal-dim"))||void 0===s||s.addEventListener("click",e.backHistory)),window.addEventListener("popstate",(function(){u&&e.clearModal(e.modalContainer,l)}));var d=t.querySelector(".modal-dialog");null===(c=d)||void 0===c||c.addEventListener("click",(function(e){return e.stopPropagation()})),null===(a=d)||void 0===a||a.addEventListener("click",(function(e){return e.stopPropagation()}))}})).catch((function(e){return console.warn("modal Error")}))}))}))},setModal:function(e){document.body.classList.add("is-modal-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+e+"px"},clearModal:function(e,t){document.body.classList.remove("is-modal-visible"),document.body.classList.remove("body-lock"),e.innerHTML="",window.scrollTo(0,t)},setHistory:function(e){var t=e;history.pushState({name:"tester"},"dd",t)},backHistory:function(){history.back()}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0),window.location.hash=n.name||n.href}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,o=document.querySelector(t);if(o){var r,i=o.offsetHeight;window.addEventListener("resize",(function(){r&&window.cancelAnimationFrame(r),r=window.requestAnimationFrame((function(){i=o.offsetHeight}))})),window.addEventListener("scroll",(function(){r&&window.cancelAnimationFrame(r),r=window.requestAnimationFrame((function(){window.pageYOffset>o.offsetTop+i?document.body.classList.add(n):document.body.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e,t=document.querySelectorAll(".js-scroll-animation");t&&(t.forEach((function(e){e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){t.forEach((function(t){t.getBoundingClientRect().top+.5*t.clientHeight<=window.innerHeight&&(t.classList.add("is-scrolled"),e&&window.cancelAnimationFrame(e),e=window.requestAnimationFrame((function(){})))}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".loader-object");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,o=e.clientX,r=e.clientY;n.style.left=o+"px",n.style.top=r+"px"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.menusSelector,n=e.sectionsSelector,o=document.querySelectorAll(t),r=document.querySelectorAll(n);o&&r&&(r.forEach((function(e,t){e.addEventListener("click",(function(e){e.preventDefault();var n=o[t].offsetTop;window.scrollTo(0,n)}))})),window.addEventListener("scroll",(function(){o.forEach((function(e,t){e.offsetTop<=window.pageYOffset+200&&(r.forEach((function(e){return e.classList.remove("is-active")})),r[t].classList.add("is-active"))}))})))}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(19)),i=o(n(20)),s=o(n(21)),c=o(n(22));t.default={checkbox:r.default,textarea:i.default,file:s.default,number:c.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),o=n.every((function(e){return e.checked})),r=n.some((function(e){return e.checked}));t.checked=o,t.indeterminate=r&&!o,t.dataset.indeterminate=r&&!o},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,n=e.target;if(!n&&"textarea"===n.nodeName.toLowerCase()){var r=document.querySelector(".textfield-byte b");if(r){var i=(null===(t=n)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;r.innerText=i,i>30?n.parentNode.classList.add("is-invalid"):n.parentNode.classList.remove("is-invalid"),o(n)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("ÌååÏùºÌÉÄÏûÖ jpeg pjpeg png Ï§ë ÌïòÎÇòÍ∞Ä ÏïÑÎãàÏïº~");var t,o,r='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,o=t>=1024&&t<1048576,t<1024?t+"bytes":o?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=r}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,o=n.value.length>0;e&&(n.value=0);o&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t,n=e.target;if(n.closest(".js-variation-decrement")){if((t=n.parentNode.querySelector(".js-variation-input")).value<=0)return n.classList.add("is-disabled"),void n.setAttribute("disabled","true");--t.value}if(n.closest(".js-variation-increment")){if((t=n.parentNode.querySelector(".js-variation-input")).value>=10)return n.classList.add("is-disabled"),void n.removeAttribute("disabled");++t.value}}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validity={isRequired:function(e){return""===e||null==e||null!==e&&"object"==typeof e&&!Object.keys(e).length},isNumeric:function(e){return/[0-9]/g.test(e)},isAlphabet:function(e){return/[a-z]/gi.test(e)},isEmail:function(e){return/^[Í∞Ä-Ìû£a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[Í∞Ä-Ìû£A-Z0-9.-]+\.[A-Z]{2,}$/i.test(e.toLowerCase())},isLength:function(e,t){return e.length<t},isLowerCase:function(e){return e===e.toLowerCase()},isNull:function(e){return null===e||0===e.length}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,