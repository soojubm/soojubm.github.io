!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=o(n(2)),i=n(3),c=n(4),s=n(5),a=n(6),l=o(n(7)),u=o(n(18));window.addEventListener("unload",(function(){}));var d=new Set;window.addEventListener("beforeunload",(function(e){d.size&&(e.returnValue="There is pending work. Sure you want to leave?")})),window.addEventListener("offline",(function(){var e=document.querySelector(".js-offline");e&&(e.style.display="block")}));var f=function(){r.default().then((function(){l.default.modal({selector:".js-modal"}).setEvent(),u.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),l.default.toggleClass({selector:".js-toggle"}).setEvent(),l.default.enterTarget({selector:".js-hover-trigger"}),l.default.tabMenu(),l.default.close({selector:".js-close"}),l.default.toTop({selector:".js-to-top"}),l.default.scrollAnimation(),u.default.file(),u.default.textarea(),u.default.number(),l.default.scrollspy(),c.setGraph(),a.countDownClock(20,"days"),s.carousel(),document.addEventListener("scroll",(function(){var e,t,n,o,r=null===(e=document.querySelector(".dictionary"))||void 0===e?void 0:e.getBoundingClientRect().bottom,i=(null===(t=document.querySelector(".newneek-subscribe"))||void 0===t?void 0:t.getBoundingClientRect().bottom)+2e3;window.pageYOffset>r&&window.pageYOffset<i?null===(n=document.querySelector(".newneek-banner"))||void 0===n||n.classList.add("is-up"):null===(o=document.querySelector(".newneek-banner"))||void 0===o||o.classList.remove("is-up")})),window.addEventListener("scroll",(function(){var e=.005*window.pageYOffset;console.log(e),window.scrollTop<1200&&(document.querySelector(".newneek-hero h1").style.transform="rotate(-4deg) scale("+e+")");var t=document.querySelectorAll(".js-section"),n=document.querySelectorAll(".newneek-navbar-menu-item");t&&n&&t.forEach((function(e,t){e.offsetTop<=window.pageYOffset&&(n.forEach((function(e){return e.classList.remove("is-active")})),n[t].classList.add("is-active"))}))}));var e=new Date,t=new Date("April 16, 2020").getTime()-e.getTime();t=Math.floor(t/864e5);var n=document.querySelector(".dday");n&&n.innerText;var o=document.querySelector(".js-display-list"),r=document.querySelector(".js-display-grid"),i=document.querySelector(".profile-body");o&&r&&i&&(o.addEventListener("click",(function(){o.classList.add("is-selected"),r.classList.remove("is-selected"),i.classList.add("list")})),r.addEventListener("click",(function(){o.classList.remove("is-selected"),r.classList.add("is-selected"),i.classList.remove("list")})));var d,f;d=document.querySelector(".js-comment-write"),f=document.querySelectorAll(".js-comment-textfield"),(d||f)&&f.forEach((function(e){return e.addEventListener("focus",(function(){d&&d.classList.add("is-focused")}))}))}))};function v(){var e=document.querySelector(".header");if(e){["#design","#contact"].includes(window.location.hash)?e.classList.add("is-white"):e.classList.remove("is-white")}}window.addEventListener("hashchange",f),window.addEventListener("hashchange",(function(){var e,t,n=document.querySelector(".navbar-burger");if(!n)return;n.classList.remove("is-active"),null===(t=null===(e=n)||void 0===e?void 0:e.nextElementSibling)||void 0===t||t.classList.remove("is-visible")})),window.addEventListener("hashchange",v),document.addEventListener("DOMContentLoaded",(function(){i.loader(),i.detectBrowser(),v(),s.setDarkmode(),l.default.toggleClass({selector:".js-navbar-toggle"}).setEvent(),f();window.addEventListener("scroll",(function(){l.default.stickyElement({targetElement:".post-head",addClass:"is-sticky"}),l.default.stickyElement({targetElement:".js-navbar",addClass:"is-sticky-navbar"})})),window.addEventListener("scroll",(function(){var e=document.querySelector(".post-head-progress");if(e){var t=window.pageYOffset/(document.body.scrollHeight-window.innerHeight)*100+"%";e.style.width=t}}),!0)})),document.addEventListener("submit",(function(e){return e.preventDefault()}))},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=window.location.hash,t=e?"/views/"+e.substring(1)+".html":"/views/profile.html";return fetch(t).then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(e){var t=document.getElementById("view");t&&(t.innerHTML=e,window.scrollTo(0,0))})).catch((function(e){return console.warn("router: ",e)}))}},function(e,t,n){"use strict";function o(e){var t=document.body;"fixed"===getComputedStyle(e).position?t.style.marginTop=e.clientHeight+"px":t.style.marginTop=0}Object.defineProperty(t,"__esModule",{value:!0}),t.loader=function(){var e=document.querySelector(".js-loading");if(e){var t=document.body;document.addEventListener("DOMContentLoaded",(function(){t.classList.add("body-lock")})),window.addEventListener("load",(function(){setTimeout((function(){e.classList.add("is-hidden"),t.classList.remove("body-lock")}),0)}))}},t.detectBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?(e.style.display="block",console.log(t)):-1!==t.indexOf("chrome")&&console.log(t,"크롬")}},t.googleAnalytics=function(){},t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return o(e)};o(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGraph=function(){var e=document.querySelectorAll(".js-graph .graph-item");e&&e.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var o=parseInt(n.innerText);t.style.height=o+"px",n.style.bottom=o+"px"}}))}},function(e,t,n){"use strict";function o(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),o=e.querySelector(".slider-arrows-prev"),r=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&o&&r&&i){var c=t.offsetWidth,s=0;n.forEach((function(e){return s+=e.offsetWidth})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",c)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",o))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.countDownClock=function(e,t){void 0===e&&(e=100),void 0===t&&(t="seconds");var n=document.querySelector(".js-days"),o=document.querySelector(".js-hours"),r=document.querySelector(".js-minutes"),i=document.querySelector(".js-seconds");function c(e){var t=Date.now()+1e3*e,c=setInterval((function(){var e=Math.round((t-Date.now())/1e3);e<=0?clearInterval(c):n&&o&&r&&i&&(n.innerHTML=""+Math.floor(e/86400),o.innerText=""+Math.floor(e%86400/3600),r.innerText=""+Math.floor(e%86400%3600/60),i.innerText=""+(e%60<10?"0"+e%60:e%60))}),1e3)}n&&function(t){switch(t){case"seconds":return c(e);case"minutes":return c(60*e);case"hours":return c(60*e*60);case"days":c(60*e*60*24)}}(t)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=o(n(9)),c=o(n(10)),s=o(n(11)),a=o(n(12)),l=o(n(13)),u=o(n(14)),d=o(n(15)),f=o(n(16)),v=o(n(17));t.default={toggleClass:r.default,enterTarget:i.default,modal:s.default,tabMenu:c.default,toTop:a.default,stickyElement:l.default,scrollAnimation:u.default,scrollspy:v.default,close:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{triggers:document.querySelectorAll(t),ACTIVE_CLASS:"is-active",ACTIVE_CLASS2:"is-visible",setEvent:function(){var e=this;this.triggers&&(this.triggers.forEach((function(t){return t.addEventListener("click",(function(n){var o;n.preventDefault(),n.stopPropagation();var r=null===(o=t)||void 0===o?void 0:o.nextElementSibling;r&&(e.toggleClassTrigger(t),e.toggleClassTarget(r),e.triggers.forEach((function(t){n.target!==t&&e.removeAllClass(t)})))}))})),document.body.addEventListener("click",(function(){return e.triggers.forEach((function(t){return e.removeAllClass(t)}))})))},toggleClassTrigger:function(e){e.classList.toggle(this.ACTIVE_CLASS),e.setAttribute("aria-expanded",""+e.classList.contains(this.ACTIVE_CLASS))},toggleClassTarget:function(e){e.classList.toggle(this.ACTIVE_CLASS2),e.addEventListener("click",(function(e){return e.stopPropagation()}))},removeAllClass:function(e){e.setAttribute("aria-expanded","true"),e.classList.remove(this.ACTIVE_CLASS),e.nextElementSibling.classList.remove(this.ACTIVE_CLASS2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,o=document.querySelectorAll(t);o&&o.forEach((function(e){var t=e===document.querySelector(".js-navbar .navbar-menu-item");e.addEventListener("mouseenter",(function(){e.setAttribute("aria-expanded","true"),e.classList.add("is-expanded"),t&&n.classList.add("is-shown"),e.addEventListener("mouseleave",(function(){return e.setAttribute("aria-expanded","false"),e.classList.remove("is-expanded"),void(t&&n.classList.remove("is-shown"))}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index"),r=document.querySelector(".profile-tablist-active");n&&r&&t.closest("[role=tab]")&&(r.style.left=t.offsetLeft+"px",n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach((function(e){e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")})))}),!0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector;return{modals:document.querySelectorAll(t),modalDialog:document.querySelector(".modal-dialog"),pageY:0,setEvent:function(){var e,t=this;this.modals&&(this.modals.forEach((function(e){return e.addEventListener("click",(function(n){var o,r;n.stopPropagation(),n.preventDefault();var i=e.nextElementSibling,c=null===(o=i)||void 0===o?void 0:o.querySelector(".js-modal-close");i&&c&&(t.pageY=window.pageYOffset,t.showModal(i),document.addEventListener("click",(function(){return t.closeModal(i)})),null===(r=c)||void 0===r||r.addEventListener("click",(function(){return t.closeModal(i)})))}))})),null===(e=this.modalDialog)||void 0===e||e.addEventListener("click",(function(e){return e.stopPropagation()})))},showModal:function(e){var t;null===(t=e)||void 0===t||t.classList.add("is-visible"),this.lockBody(this.pageY)},closeModal:function(e){var t,n;(null===(t=e)||void 0===t?void 0:t.classList.contains("is-visible"))&&(null===(n=e)||void 0===n||n.classList.remove("is-visible"),this.unlockBody(this.pageY))},lockBody:function(e){document.body.classList.add("body-lock"),document.body.style.top="-"+e+"px"},unlockBody:function(e){document.body.classList.remove("body-lock"),window.scrollTo(0,e)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0),window.location.hash=n.name||n.href}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,o=document.body,r=document.querySelector(t);if(r){var i,c=r.offsetHeight;window.addEventListener("resize",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){c=r.offsetHeight}))})),window.addEventListener("scroll",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){window.pageYOffset>r.offsetTop+c?o.classList.add(n):o.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelectorAll(".js-scroll-animation");console.log(e);var t;e&&(e.forEach((function(e){e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){e.forEach((function(e){console.log(window.pageYOffset,e.getBoundingClientRect().top),e.getBoundingClientRect().top+.5*e.clientHeight<=window.innerHeight&&(e.classList.add("is-scrolled"),t&&window.cancelAnimationFrame(t),t=window.requestAnimationFrame((function(){})))}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".loading-object");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,o=e.clientX,r=e.clientY;n.style.left=o+"px",n.style.top=r+"px"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){window.addEventListener("scroll",(function(){}))}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(19)),i=o(n(20)),c=o(n(21)),s=o(n(22));t.default={checkbox:r.default,textarea:i.default,file:c.default,number:s.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),o=n.every((function(e){return e.checked})),r=n.some((function(e){return e.checked}));t.checked=o,t.indeterminate=r&&!o,t.dataset.indeterminate=r&&!o},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,n=e.target;if(!n&&"textarea"===n.nodeName.toLowerCase()){var r=document.querySelector(".textfield-byte b");if(r){var i=(null===(t=n)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;r.innerText=i,i>30?n.parentNode.classList.add("is-invalid"):n.parentNode.classList.remove("is-invalid"),o(n)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,o,r='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,o=t>=1024&&t<1048576,t<1024?t+"bytes":o?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=r}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,o=n.value.length>0;e&&(n.value=0);o&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t,n=e.target;if(n.closest(".js-variation-decrement")){if((t=n.parentNode.querySelector(".js-variation-input")).value<=0)return n.classList.add("is-disabled"),void n.setAttribute("disabled","true");--t.value}if(n.closest(".js-variation-increment")){if((t=n.parentNode.querySelector(".js-variation-input")).value>=10)return n.classList.add("is-disabled"),void n.removeAttribute("disabled");++t.value}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,