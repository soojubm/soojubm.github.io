!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=o(n(2)),i=n(3),c=n(4),s=n(5),a=n(6),l=o(n(7)),u=o(n(17));function d(){r.default().then((function(){i.adjustTopPadding();var e=document.querySelector(".js-display-list"),t=document.querySelector(".js-display-grid"),n=document.querySelector(".profile-body");e&&t&&n&&(e.addEventListener("click",(function(o){e.classList.add("is-selected"),t.classList.remove("is-selected"),n.classList.add("list")})),t.addEventListener("click",(function(o){e.classList.remove("is-selected"),t.classList.add("is-selected"),n.classList.remove("list")})));var o,r;o=document.querySelector(".js-comment-write"),r=document.querySelectorAll(".js-comment-textfield"),(o||r)&&r.forEach((function(e){return e.addEventListener("focus",(function(){o&&o.classList.add("is-focused")}))})),c.setGraph(),a.countDownClock(20,"days"),s.carousel(),u.default.checkbox({checkAllSelector:".js-checkall",checkSelector:".js-check"}).setEvent(),l.default.toggleClass({selector:".js-toggle"}),l.default.modal({selector:".js-modal"}),l.default.enterTarget({selector:".js-hover-trigger"}),l.default.tabMenu(),l.default.close({selector:".js-close"}),l.default.toTop({selector:".js-to-top"}),l.default.scrollAnimation(),l.default.customCursor(),u.default.file(),u.default.textarea(),u.default.number();var d=document.querySelector(".header");if(d){["#design","#contact"].includes(window.location.hash)?d.classList.add("--white"):d.classList.remove("--white");window.addEventListener("scroll",(function(){l.default.stickyElement({targetElement:".post-head",addClass:"is-sticky"})})),window.addEventListener("scroll",(function(){var e=document.querySelector(".post-head-progress");if(e){var t=window.pageYOffset/(document.body.scrollHeight-window.innerHeight)*100+"%";e.style.width=t}}),!0)}}))}window.addEventListener("offline",(function(){var e=document.querySelector(".js-offline");e&&(e.style.display="block")})),window.addEventListener("hashchange",d),window.addEventListener("hashchange",(function(){var e,t,n=document.querySelector(".navbar-burger");if(!n)return;n.classList.remove("is-active"),null===(t=null===(e=n)||void 0===e?void 0:e.nextElementSibling)||void 0===t||t.classList.remove("is-visible")})),document.addEventListener("DOMContentLoaded",(function(){i.loader(),i.checkBrowser(),s.setDarkmode(),d()})),document.addEventListener("submit",(function(e){return e.preventDefault()}))},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=window.location.hash,t=e?"/views/"+e.substring(1)+".html":"/views/profile.html";return fetch(t).then((function(e){return e.ok?e.text():Promise.reject(e)})).then((function(e){var t=document.getElementById("view");t&&(t.innerHTML=e)})).catch((function(e){return console.warn("router: ",e)}))}},function(e,t,n){"use strict";function o(e){var t=document.body;"fixed"===getComputedStyle(e).position?t.style.marginTop=e.clientHeight+"px":t.style.marginTop=0}Object.defineProperty(t,"__esModule",{value:!0}),t.loader=function(){var e=document.querySelector(".js-loading");if(e){var t=document.body;document.addEventListener("DOMContentLoaded",(function(){t.classList.add("body-lock")})),window.addEventListener("load",(function(){setTimeout((function(){e.classList.add("is-hidden"),t.classList.remove("body-lock")}),0)}))}},t.checkBrowser=function(){var e=document.querySelector(".js-browser");if(e){var t=navigator.userAgent.toLowerCase();t.indexOf("msie")>-1||t.indexOf("trident")>-1?(e.style.display="block",console.log(t)):-1!==t.indexOf("chrome")&&console.log(t,"크롬")}},t.googleAnalytics=function(){},t.adjustTopPadding=function(){var e=document.querySelector(".js-navbar");if(e){var t=function(){return o(e)};o(e),window.addEventListener("scroll",(function(){return requestAnimationFrame(t)})),window.addEventListener("resize",(function(){return requestAnimationFrame(t)}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGraph=function(){var e=document.querySelectorAll(".js-graph .graph-item");e&&e.forEach((function(e){var t=e.querySelector(".graph-item-bar"),n=e.querySelector(".graph-item-value");if(t&&n){var o=parseInt(n.innerText);t.style.height=o+"px",n.style.bottom=o+"px"}}))}},function(e,t,n){"use strict";function o(){document.body.classList.toggle("darkmode"),document.body.classList.contains("darkmode")?localStorage.setItem("theme","darkmode"):localStorage.removeItem("theme")}Object.defineProperty(t,"__esModule",{value:!0}),t.carousel=function(){var e=document.querySelector(".slider");if(e){var t=e.querySelector(".slider-viewer"),n=e.querySelectorAll(".slider-viewer > button"),o=e.querySelector(".slider-arrows-prev"),r=e.querySelector(".slider-arrows-next"),i=e.querySelectorAll(".slider-dots-dot");if(t&&n&&o&&r&&i){var c=t.offsetWidth,s=0;n.forEach((function(e){return s+=e.offsetWidth})),r.addEventListener("click",(function(){if(!t)return;t.scrollLeft+=100})),o.addEventListener("click",(function(){if(!t)return;t.scrollLeft-=100})),i.forEach((function(e){return e.addEventListener("click",(function(){}))})),t.addEventListener("scroll",(function(){var e=t.scrollLeft;console.log("scroll-left",e,"offset-width",c)}))}}},t.setDarkmode=function(){var e=document.querySelector(".js-darkmode");e&&(!function(){var e=localStorage.getItem("theme");if(!e)return;document.body.classList.add(e)}(),e.addEventListener("click",o))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.countDownClock=function(e,t){void 0===e&&(e=100),void 0===t&&(t="seconds");var n=document.querySelector(".js-days"),o=document.querySelector(".js-hours"),r=document.querySelector(".js-minutes"),i=document.querySelector(".js-seconds");function c(e){var t=Date.now()+1e3*e,c=setInterval((function(){var e=Math.round((t-Date.now())/1e3);e<=0?clearInterval(c):n&&o&&r&&i&&(n.innerHTML=""+Math.floor(e/86400),o.innerText=""+Math.floor(e%86400/3600),r.innerText=""+Math.floor(e%86400%3600/60),i.innerText=""+(e%60<10?"0"+e%60:e%60))}),1e3)}n&&function(t){switch(t){case"seconds":return c(e);case"minutes":return c(60*e);case"hours":return c(60*e*60);case"days":c(60*e*60*24)}}(t)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=o(n(9)),c=o(n(10)),s=o(n(11)),a=o(n(12)),l=o(n(13)),u=o(n(14)),d=o(n(15)),f=o(n(16));t.default={toggleClass:r.default,enterTarget:i.default,modal:s.default,tabMenu:c.default,toTop:a.default,stickyElement:l.default,scrollAnimation:u.default,close:d.default,customCursor:f.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e.classList.toggle("is-active"),e.setAttribute("aria-expanded",""+e.classList.contains("is-active"))},r=function(e){e.classList.toggle("is-visible"),e.addEventListener("click",(function(e){return e.stopPropagation()}))},i=function(e){e.setAttribute("aria-expanded","true"),e.classList.remove("is-active"),e.nextElementSibling.classList.remove("is-visible")};t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&(n.forEach((function(e){return e.addEventListener("click",(function(t){var c;t.stopPropagation(),o(e);var s=null===(c=e)||void 0===c?void 0:c.nextElementSibling;s&&(r(s),n.forEach((function(e){t.target!==e&&i(e)})))}))})),document.body.addEventListener("click",(function(){return n.forEach((function(e){return i(e)}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.body,o=document.querySelectorAll(t);o&&o.forEach((function(e){var t=e===document.querySelector(".js-navbar .navbar-menu-item");e.addEventListener("mouseenter",(function(){e.setAttribute("aria-expanded","true"),e.classList.add("is-expanded"),t&&n.classList.add("is-shown"),e.addEventListener("mouseleave",(function(){return e.setAttribute("aria-expanded","false"),e.classList.remove("is-expanded"),void(t&&n.classList.remove("is-shown"))}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("click",(function(e){var t=e.target,n=t.parentNode.querySelectorAll("[role=tab]"),o=t.getAttribute("data-index"),r=document.querySelector(".profile-tablist-active");n&&r&&t.closest("[role=tab]")&&(r.style.left=t.offsetLeft+"px",n.forEach((function(e){return e.setAttribute("aria-selected","false")})),t.setAttribute("aria-selected","true"),t.parentNode.parentNode.querySelectorAll("[role=tabpanel]").forEach((function(e){e.setAttribute("aria-hidden","true"),o===e.getAttribute("data-index")&&e.setAttribute("aria-hidden","hidden")})))}),!0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);if(n){var o=0;n.forEach((function(e){return e.addEventListener("click",(function(t){var n,i;t.stopPropagation(),t.preventDefault();var c=e.nextElementSibling,s=null===(n=c)||void 0===n?void 0:n.querySelector(".js-modal-close");o=window.pageYOffset,function(e){var t;null===(t=e)||void 0===t||t.classList.add("is-visible"),document.body.classList.add("body-lock"),document.body.style.top="-"+o+"px"}(c),document.addEventListener("click",(function(){return r(c)})),null===(i=s)||void 0===i||i.addEventListener("click",(function(){return r(c)}))}))})),document.querySelectorAll(".modal-dialog").forEach((function(e){return e.addEventListener("click",(function(e){return e.stopPropagation()}))}))}function r(e){var t,n;(null===(t=e)||void 0===t?void 0:t.classList.contains("is-visible"))&&(null===(n=e)||void 0===n||n.classList.remove("is-visible"),document.body.classList.remove("body-lock"),function(e){window.scrollTo(0,e)}(o))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelector(t);n&&n.addEventListener("click",(function(e){e.preventDefault(),window.scrollTo(0,0),window.location.hash=n.name||n.href}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.targetElement,n=e.addClass,o=document.body,r=document.querySelector(t);if(r){var i,c=r.offsetHeight;window.addEventListener("resize",(function(){i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){c=r.offsetHeight}))})),window.addEventListener("scroll",(function(){console.log(c),i&&window.cancelAnimationFrame(i),i=window.requestAnimationFrame((function(){window.pageYOffset>r.offsetTop+c?o.classList.add(n):o.classList.remove(n)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelectorAll(".js-scroll-animation");e&&(e.forEach((function(e){e.getBoundingClientRect().bottom<=window.innerHeight&&e.classList.add("is-scrolled")})),window.addEventListener("scroll",(function(){e.forEach((function(e){var t=window.pageYOffset,n=t>t+e.getBoundingClientRect().top-window.innerHeight+50;console.log(e.getBoundingClientRect().bottom,window.innerHeight),n&&e.classList.add("is-scrolled")}))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.selector,n=document.querySelectorAll(t);n&&n.forEach((function(e){return e.addEventListener("click",(function(){e.parentNode.hidden=!0}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".loading-object");if(e){var t=document.querySelectorAll("button, a");t&&(document.addEventListener("DOMContentLoaded",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("mousemove",(function(t){return n(t,{cursorElement:e})})),document.addEventListener("click",(function(){return function(e){var t=e.cursorElement;t.classList.add("expand"),setTimeout((function(){t.classList.remove("expand")}),500)}({cursorElement:e})})),e.classList.add("is-default"),t.forEach((function(t){return t.addEventListener("mouseleave",(function(){e.classList.remove("is-clickable")}))})),t.forEach((function(t){return t.addEventListener("mouseenter",(function(){e.classList.add("is-clickable")}))})))}function n(e,t){var n=t.cursorElement,o=e.clientX,r=e.clientY;n.style.left=o+"px",n.style.top=r+"px"}}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(18)),i=o(n(19)),c=o(n(20)),s=o(n(21));t.default={checkbox:r.default,textarea:i.default,file:c.default,number:s.default}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t=e.checkAllSelector,n=e.checkSelector;return{checkAll:document.querySelector(t),checkItems:document.querySelectorAll(n),setEvent:function(){var e=this;this.checkAll&&this.checkItems&&(this.checkAll.addEventListener("change",(function(){return e.setCheckAll(e.checkItems,e.checkAll)})),this.checkItems.forEach((function(t){t.addEventListener("change",(function(){return e.setCheckEach(e.checkItems,e.checkAll)}))})))},setCheckEach:function(e,t){var n=Array.from(e),o=n.every((function(e){return e.checked})),r=n.some((function(e){return e.checked}));t.checked=o,t.indeterminate=r&&!o,t.dataset.indeterminate=r&&!o},setCheckAll:function(e,t){e.forEach((function(e){e.checked=t.checked,t.indeterminate=!1,t.dataset.indeterminate=!1}))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e.style.height="inherit";var t=window.getComputedStyle(e),n=e.scrollHeight+parseInt(t.getPropertyValue("border-top-width"));e.style.height=n+"px"};t.default=function(){document.addEventListener("input",(function(e){var t,n=e.target;if(!n&&"textarea"===n.nodeName.toLowerCase()){var r=document.querySelector(".textfield-byte b");if(r){var i=(null===(t=n)||void 0===t?void 0:t.value.replace(/[\0-\x7f]|([0-\u07ff]|(.))/g,"$&$1$2").length)||0;r.innerText=i,i>30?n.parentNode.classList.add("is-invalid"):n.parentNode.classList.remove("is-invalid"),o(n)}}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-file-input");e&&e.addEventListener("change",(function(){return function(e){var t=e.files,n=document.querySelector(".js-file-attachment-list"),o=document.querySelector(".js-file-attachment-helper");if(!t||!n||!o)return;o.style.display=0!==t.length?"none":"block",Array.from(t).forEach((function(e){if(!function(e){if(["image/jpeg","image/gif","image/png"].indexOf(e.type)>-1)return!0}(e))return alert("파일타입 jpeg pjpeg png 중 하나가 아니야~");var t,o,r='\n\t\t\t<a class="file-attachment-item" href="">\n\t\t\t\t<figure class="file-attachment-item-image"><img src='+window.URL.createObjectURL(e)+" alt="+e.name+'></figure>\n\t\t\t\t<b class="file-attachment-item-name" href="#">'+e.name+'</b>\n\t\t\t\t<small class="file-attachment-item-size" >'+(t=e.size,o=t>=1024&&t<1048576,t<1024?t+"bytes":o?(t/1024).toFixed(2)+"KB":(t/1048576).toFixed(2)+"MB")+'</small>\n\t\t\t\t<button class="file-attachment-item-delete js-remove-this" type="button"><i class="icon-close"></i></button>\n\t\t\t</a>';n.innerHTML+=r}))}(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){document.addEventListener("keydown",(function(e){var t,n=e.target;n.closest(".js-number-input")&&(document.addEventListener("keyup",(function(){var e=/(^0+)/.test(n.value),t=Number(n.value)>=300,o=n.value.length>0;e&&(n.value=0);o&&(n.value=n.value.slice(0,3));t&&(n.value=300)})),t=e.keyCode,[69,189,187,190].includes(t)&&e.preventDefault())}))},document.addEventListener("click",(function(e){var t,n=e.target;if(n.closest(".js-variation-decrement")){if((t=n.parentNode.querySelector(".js-variation-input")).value<=0)return n.classList.add("is-disabled"),void n.setAttribute("disabled","true");--t.value}if(n.closest(".js-variation-increment")){if((t=n.parentNode.querySelector(".js-variation-input")).value>=10)return n.classList.add("is-disabled"),void n.removeAttribute("disabled");++t.value}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2xvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL3VpLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9zZXREYXJrTW9kZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvY291bnRkb3duLnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9nZ2xlQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2VudGVyVGFyZ2V0LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC90YWJNZW51LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9ldmVudC9tb2RhbC50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvdG9Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3N0aWNreUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L3Njcm9sbEFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvZXZlbnQvY2xvc2UudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2V2ZW50L2N1c3RvbUN1cnNvci50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2phdmFzY3JpcHRzL2lucHV0L2NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL3B1YmxpYy9qYXZhc2NyaXB0cy9pbnB1dC90ZXh0YXJlYS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvZmlsZS50cyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvaW5wdXQvbnVtYmVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsInJvdXRlcl8xIiwibG9hZF8xIiwidWlfMSIsInNldERhcmtNb2RlXzEiLCJjb3VudGRvd25fMSIsImluZGV4XzEiLCJpbmRleF8yIiwidGVtcCIsImRlZmF1bHQiLCJ0aGVuIiwiYWRqdXN0VG9wUGFkZGluZyIsImxpc3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJncmlkIiwid29ya3MiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjb21tZW50V3JpdGUiLCJjb21tZW50VGV4dEZpZWxkIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbGVtZW50Iiwic2V0R3JhcGgiLCJjb3VudERvd25DbG9jayIsImNhcm91c2VsIiwiY2hlY2tib3giLCJjaGVja0FsbFNlbGVjdG9yIiwiY2hlY2tTZWxlY3RvciIsInNldEV2ZW50IiwidG9nZ2xlQ2xhc3MiLCJzZWxlY3RvciIsIm1vZGFsIiwiZW50ZXJUYXJnZXQiLCJ0YWJNZW51IiwiY2xvc2UiLCJ0b1RvcCIsInNjcm9sbEFuaW1hdGlvbiIsImN1c3RvbUN1cnNvciIsImZpbGUiLCJ0ZXh0YXJlYSIsIm51bWJlciIsInBhZ2VIZWFkRWxlbWVudCIsImluY2x1ZGVzIiwid2luZG93IiwibG9jYXRpb24iLCJoYXNoIiwic3RpY2t5RWxlbWVudCIsInRhcmdldEVsZW1lbnQiLCJhZGRDbGFzcyIsInByb2dyZXNzQmFyIiwic2Nyb2xsUGVyY2VudCIsInBhZ2VZT2Zmc2V0IiwiYm9keSIsInNjcm9sbEhlaWdodCIsImlubmVySGVpZ2h0Iiwic3R5bGUiLCJ3aWR0aCIsIm9mZmxpbmVFbGVtZW50IiwiZGlzcGxheSIsIl9hIiwiX2IiLCJuYXZpZ2F0aW9uVHJpZ2dlciIsIm5leHRFbGVtZW50U2libGluZyIsImxvYWRlciIsImNoZWNrQnJvd3NlciIsInNldERhcmttb2RlIiwicHJldmVudERlZmF1bHQiLCJwYWdlIiwic3Vic3RyaW5nIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsIlByb21pc2UiLCJyZWplY3QiLCJodG1sIiwidmlldyIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwic2V0Qm9keU1hcmdpblRvcCIsImhlYWRlckVsZW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJtYXJnaW5Ub3AiLCJjbGllbnRIZWlnaHQiLCJsb2FkZXJFbGVtZW50Iiwic2V0VGltZW91dCIsIkJyb3dzZXJFbGVtZW50IiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwibG9nIiwiZ29vZ2xlQW5hbHl0aWNzIiwiZm4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJncmFwaEl0ZW1zIiwiZ3JhcGhJdGVtQmFyIiwiZ3JhcGhJdGVtVmFsdWUiLCJncmFwaFZhbHVlIiwicGFyc2VJbnQiLCJpbm5lclRleHQiLCJoZWlnaHQiLCJib3R0b20iLCJ0dCIsInRvZ2dsZSIsImNvbnRhaW5zIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjYXRlZ29yeSIsImNhdGVnb3J5TGlzdCIsImNhdGVnb3J5TGlzdFNsaWRlIiwiY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiIsImNhdGVnb3J5TmF2aWdhdGlvbk5leHQiLCJjYXRlZ29yeURvdHMiLCJjYXRlZ29yeUNvbnRhaW5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJzdW0iLCJpdGVtIiwic2Nyb2xsTGVmdCIsImRhcmttb2RlQnV0dG9uIiwibGFzdFRoZW1lIiwiZ2V0SXRlbSIsImxvYWRUaGVtZSIsImZvcm1hdCIsImRheXNFbGVtZW50IiwiaG91cnNFbGVtZW50IiwibWludXRlc0VsZW1lbnQiLCJzZWNvbmRzRWxlbWVudCIsInRpbWVyIiwic2Vjb25kcyIsIkRhdGUiLCJub3ciLCJjb3VudGRvd24iLCJzZXRJbnRlcnZhbCIsInNlY29uZHNMZWZ0IiwiTWF0aCIsInJvdW5kIiwiY2xlYXJJbnRlcnZhbCIsImZsb29yIiwiY29udmVydEZvcm1hdCIsInRvZ2dsZUNsYXNzXzEiLCJlbnRlclRhcmdldF8xIiwidGFiTWVudV8xIiwibW9kYWxfMSIsInRvVG9wXzEiLCJzdGlja3lFbGVtZW50XzEiLCJzY3JvbGxBbmltYXRpb25fMSIsImNsb3NlXzEiLCJjdXN0b21DdXJzb3JfMSIsInRvZ2dsZUNsYXNzVHJpZ2dlciIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZUNsYXNzVGFyZ2V0Iiwic3RvcFByb3BhZ2F0aW9uIiwicmVtb3ZlQWxsQ2xhc3MiLCJ0cmlnZ2VyIiwidHJpZ2dlcnMiLCJ0cmlnZ2VyTmV4dEVsZW1lbnQiLCJ0YXJnZXQiLCJob3ZlckVsZW1lbnRzIiwiaXNOYXZpZ2F0aW9uIiwidGFicyIsInBhcmVudE5vZGUiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsInRhYkFjdGljZUJhciIsImNsb3Nlc3QiLCJsZWZ0Iiwib2Zmc2V0TGVmdCIsInRhYiIsIm1vZGFscyIsInBhZ2VZIiwiY2xvc2VUcmlnZ2VyIiwidG9wIiwic2hvd01vZGFsIiwiY2xvc2VNb2RhbCIsInNjcm9sbFRvIiwic2V0U2Nyb2xsWSIsInRvVG9wRWxlbWVudCIsImhyZWYiLCJpc1Njcm9sbGluZyIsInN0aWNreUVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm9mZnNldFRvcCIsInNjcm9sbFRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlzU2Nyb2xsZWQiLCJjbG9zZUVsZW1lbnRzIiwiaGlkZGVuIiwiY3Vyc29yIiwiaG92ZXJFbGVtZW50Iiwic2V0Q3Vyc29yIiwiY3Vyc29yRWxlbWVudCIsInNldFJpcHBsZSIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJjaGVja2JveF8xIiwidGV4dGFyZWFfMSIsImZpbGVfMSIsIm51bWJlcl8xIiwiY2hlY2tBbGwiLCJjaGVja0l0ZW1zIiwiX3RoaXMiLCJzZXRDaGVja0FsbCIsImNoZWNrSXRlbSIsInNldENoZWNrRWFjaCIsImNoZWNrcyIsIkFycmF5IiwiZnJvbSIsImlzQ2hlY2tlZEV2ZXJ5IiwiZXZlcnkiLCJjaGVja2VkIiwiaXNDaGVja2VkU29tZSIsInNvbWUiLCJpbmRldGVybWluYXRlIiwiZGF0YXNldCIsImF1dG9FeHBhbmQiLCJmaWVsZCIsImNvbXB1dGVkIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm5vZGVOYW1lIiwiYnl0ZUVsZW1lbnQiLCJzdHJpbmdCeXRlTGVuZ3RoIiwicmVwbGFjZSIsImxlbmd0aCIsImZpbGVJbnB1dCIsImZpbGVzIiwiYXR0YWNobWVudExpc3QiLCJhdHRhY2htZW50SGVscGVyIiwidHlwZSIsInZhbGlkRmlsZVR5cGUiLCJhbGVydCIsInNpemUiLCJpc0tpbG9CeXRlcyIsImZpbGVUZW1wbGF0ZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInRvRml4ZWQiLCJhdHRhY2giLCJrZXlDb2RlIiwiaXNGaXJzdFBsYWNlZFplcm8iLCJ0ZXN0IiwiaXNNYXhpbXVtIiwiTnVtYmVyIiwiaXNMZW5ndGgiLCJzbGljZSIsInRhcmdldElucHV0IiwicmVtb3ZlQXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0Is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U0ksaUJBQWlCLFNBQVMsU0FBVUMsR0FDekMsSUFHSWlQLEVBSEEzRixFQUFTdEosRUFBTXNKLE9BSW5CLEdBQUlBLEVBQU9RLFFBQVEsMkJBQTRCLENBRTNDLElBREFtRixFQUFjM0YsRUFBT0ksV0FBVzlKLGNBQWMsd0JBQzlCL0IsT0FMSixFQVVSLE9BSkF5TCxFQUFPckosVUFBVUMsSUFBSSxvQkFDckJvSixFQUFPUCxhQUFhLFdBQVksVUFLbENrRyxFQUFZcFIsTUFFbEIsR0FBSXlMLEVBQU9RLFFBQVEsMkJBQTRCLENBRTNDLElBREFtRixFQUFjM0YsRUFBT0ksV0FBVzlKLGNBQWMsd0JBQzlCL0IsT0FmSixHQW9CUixPQUpBeUwsRUFBT3JKLFVBQVVDLElBQUksb0JBQ3JCb0osRUFBTzRGLGdCQUFnQixjQUt6QkQsRUFBWXBSIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5yZXF1aXJlKFwiLi9zdHlsZXNoZWV0cy9zdHlsZS5zY3NzXCIpO1xuLy8gaW1wb3J0IHBvbHlmaWxsIGZyb20gJy4vamF2YXNjcmlwdHMvcG9seWZpbGwnO1xudmFyIHJvdXRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3JvdXRlclwiKSk7XG52YXIgbG9hZF8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvbG9hZFwiKTtcbnZhciB1aV8xID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdHMvdWlcIik7XG52YXIgc2V0RGFya01vZGVfMSA9IHJlcXVpcmUoXCIuL2phdmFzY3JpcHRzL3NldERhcmtNb2RlXCIpO1xuLy8gaW1wb3J0IHsgZmlsbXMgfSBmcm9tICcuLi92aWV3cy9maWxtcyc7XG52YXIgY291bnRkb3duXzEgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9jb3VudGRvd25cIik7XG52YXIgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9ldmVudC9pbmRleFwiKSk7XG52YXIgaW5kZXhfMiA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9qYXZhc2NyaXB0cy9pbnB1dC9pbmRleFwiKSk7XG4vL2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc05hbWUgKz0gJyBzdXBwb3J0cy1kYXRlJztcbi8vIGlmKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOjgwMHB4KScpLm1hdGNoZXMpIHt9XG4vLyBkaXYuY2xhc3NMaXN0LnJlcGxhY2UoXCJmb29cIiwgXCJiYXJcIik7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2ZmbGluZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtb2ZmbGluZScpO1xuICAgIGlmICghb2ZmbGluZUVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICBvZmZsaW5lRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn0pO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0ZW1wKTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaW5pdGFpbGl6ZVBhZ2UpO1xuZnVuY3Rpb24gaW5pdGFpbGl6ZVBhZ2UoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgbmF2aWdhdGlvblRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2YmFyLWJ1cmdlcicpO1xuICAgIC8vIGNvbnN0IGlzT3BlbmVkTmF2aWdhdGlvbiA9IG5hdmlnYXRpb25UcmlnZ2VyPy5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZScpO1xuICAgIGlmICghbmF2aWdhdGlvblRyaWdnZXIpXG4gICAgICAgIHJldHVybjtcbiAgICBuYXZpZ2F0aW9uVHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICAoX2IgPSAoX2EgPSBuYXZpZ2F0aW9uVHJpZ2dlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHRFbGVtZW50U2libGluZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcbn1cbmZ1bmN0aW9uIHRlbXAoKSB7XG4gICAgcm91dGVyXzEuZGVmYXVsdCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2FkXzEuYWRqdXN0VG9wUGFkZGluZygpO1xuICAgICAgICAvLyBjb25zdCB1aURhdGEgPSBbXG4gICAgICAgIC8vICAgeyBsYWJlbDogJ+yDge2SiCDsg4HshLjtjpjsnbTsp4AnLCBkZXNjcmlwdGlvbiA6JycsIGRhdGUgOicyMDIwLjAxLTAxJywgaHJlZjogJyNwcm9kdWN0JywgdGFnczogWyfquLDtmo0nLCAn65SU7J6Q7J24J10gfSxcbiAgICAgICAgLy8gICB7IGxhYmVsOiAn7IOB7ZKIIOy5tO2KuCcsIGRlc2NyaXB0aW9uIDonJywgZGF0ZSA6JzIwMjAtMDEtMDEnLCBocmVmOiAnI2NhcnQnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9LFxuICAgICAgICAvLyAgIHsgbGFiZWw6ICfroZzqt7jsnbgnLCBkZXNjcmlwdGlvbiA6JycsIGRhdGUgOicyMDIwLTAxLTAxJywgaHJlZjogJyNsb2dpbicsIHRhZ3M6IFsn6riw7ZqNJywgJ+uUlOyekOyduCddIH0sXG4gICAgICAgIC8vICAgeyBsYWJlbDogJ+u5hOuwgOuyiO2YuCDssL7quLAnLCBkZXNjcmlwdGlvbiA6JycsIGRhdGUgOicyMDIwLTAxLTAxJywgaHJlZjogJyNmb3Jnb3QnLCB0YWdzOiBbJ+q4sO2ajScsICfrlJTsnpDsnbgnXSB9XG4gICAgICAgIC8vIF1cbiAgICAgICAgLy8gY29uc3QgY2NjOiBhbnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignLmpzLXVpJyk7XG4gICAgICAgIC8vIGlmKGNjYykge1xuICAgICAgICAvLyAgIGNvbnN0IHRlbXAgPSB1aURhdGEubWFwKGl0ZW0gPT4ge1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coaXRlbSk7XG4gICAgICAgIC8vICAgICBjb25zdCB0dHQgPSBpdGVtLnRhZ3MubWFwKGkgPT4gYDxzcGFuIGNsYXNzPVwidGFnXCI+JHtpfTwvc3Bhbj5gKS5qb2luKCcnKVxuICAgICAgICAvLyAgICAgY29uc3QgdWlUZW1wbGF0ZSA9IGA8YSBjbGFzcz1cImNhcmRcIiBocmVmPVwiJHtpdGVtLmhyZWZ9XCI+XG4gICAgICAgIC8vICAgICAgICAgPGZpZ3VyZSBjbGFzcz1cImNhcmQtdGh1bWJuYWlsXCIgc3R5bGU9XCJmb250LWZhbWlseTonRHVua2VsU2Fucyc7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO1wiPiR7aXRlbS5sYWJlbH08L2ZpZ3VyZT5cbiAgICAgICAgLy8gICAgICAgICA8aDMgY2xhc3M9XCJjYXJkLXRpdGxlXCI+JHtpdGVtLmxhYmVsfTwvaDM+XG4gICAgICAgIC8vICAgICAgICAgPHRpbWUgY2xhc3M9XCJjYXJkLWRhdGVcIj4ke2l0ZW0uZGF0ZX08dGltZT5cbiAgICAgICAgLy8gICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC10YWdzXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgIC8vICAgICAgICAgICAke3R0dH1cbiAgICAgICAgLy8gICAgICAgICA8L2Rpdj5cbiAgICAgICAgLy8gICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2FyZC1tb3JlIGljb24tYnV0dG9uXCIgdHlwZT1cImJ1dHRvblwiPjxpIGNsYXNzPVwiaWNvbi1tb3JlXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAvLyAgICAgICA8L2E+YFxuICAgICAgICAvLyAgICAgcmV0dXJuIHVpVGVtcGxhdGU7XG4gICAgICAgIC8vICAgfSkuam9pbignJylcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyh0ZW1wKTtcbiAgICAgICAgLy8gICBjY2MuaW5uZXJIVE1MID0gdGVtcDtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyDsnoTsi5xcbiAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlzcGxheS1saXN0Jyk7XG4gICAgICAgIHZhciBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRpc3BsYXktZ3JpZCcpO1xuICAgICAgICB2YXIgd29ya3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS1ib2R5Jyk7XG4gICAgICAgIGlmIChsaXN0ICYmIGdyaWQgJiYgd29ya3MpIHtcbiAgICAgICAgICAgIGxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBsaXN0LmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgZ3JpZC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIHdvcmtzLmNsYXNzTGlzdC5hZGQoJ2xpc3QnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgd29ya3MuY2xhc3NMaXN0LnJlbW92ZSgnbGlzdCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvY3VzQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb21tZW50V3JpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY29tbWVudC13cml0ZScpO1xuICAgICAgICAgICAgdmFyIGNvbW1lbnRUZXh0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtY29tbWVudC10ZXh0ZmllbGQnKTtcbiAgICAgICAgICAgIGlmIChjb21tZW50V3JpdGUgfHwgY29tbWVudFRleHRGaWVsZCkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRUZXh0RmllbGQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRXcml0ZSAmJiBjb21tZW50V3JpdGUuY2xhc3NMaXN0LmFkZCgnaXMtZm9jdXNlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9jdXNDb21tZW50KCk7XG4gICAgICAgIHVpXzEuc2V0R3JhcGgoKTtcbiAgICAgICAgY291bnRkb3duXzEuY291bnREb3duQ2xvY2soMjAsICdkYXlzJyk7XG4gICAgICAgIHNldERhcmtNb2RlXzEuY2Fyb3VzZWwoKTtcbiAgICAgICAgaW5kZXhfMi5kZWZhdWx0LmNoZWNrYm94KHsgY2hlY2tBbGxTZWxlY3RvcjogJy5qcy1jaGVja2FsbCcsIGNoZWNrU2VsZWN0b3I6ICcuanMtY2hlY2snIH0pLnNldEV2ZW50KCk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC50b2dnbGVDbGFzcyh7IHNlbGVjdG9yOiAnLmpzLXRvZ2dsZScgfSk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5tb2RhbCh7IHNlbGVjdG9yOiAnLmpzLW1vZGFsJyB9KTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LmVudGVyVGFyZ2V0KHsgc2VsZWN0b3I6ICcuanMtaG92ZXItdHJpZ2dlcicgfSk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC50YWJNZW51KCk7XG4gICAgICAgIGluZGV4XzEuZGVmYXVsdC5jbG9zZSh7IHNlbGVjdG9yOiAnLmpzLWNsb3NlJyB9KTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnRvVG9wKHsgc2VsZWN0b3I6ICcuanMtdG8tdG9wJyB9KTtcbiAgICAgICAgaW5kZXhfMS5kZWZhdWx0LnNjcm9sbEFuaW1hdGlvbigpO1xuICAgICAgICBpbmRleF8xLmRlZmF1bHQuY3VzdG9tQ3Vyc29yKCk7XG4gICAgICAgIGluZGV4XzIuZGVmYXVsdC5maWxlKCk7XG4gICAgICAgIGluZGV4XzIuZGVmYXVsdC50ZXh0YXJlYSgpO1xuICAgICAgICBpbmRleF8yLmRlZmF1bHQubnVtYmVyKCk7XG4gICAgICAgIC8vICEgY2xpY2sg7J2067Kk7Yq4IOyZuOu2gOyXkCDrhKPsnLzri4jquYwg7YyM7Y+t7JeQ7ISc66eMIOyYpOulmC4gZXZlbnQgdW5kZWZpbmVkXG4gICAgICAgIC8vIFRPRE86IOuPhO2BkOuovO2KuOqwgCDslYTri4jrnbwgZXZlbnQudGFyZ2V0LnBhcmVudCDqsIAg7JWE64uMIOqyg+ydhCDtgbTrpq3tlojsnYQg65WMIOuLpOuLueyVvCDtlZjrgphcbiAgICAgICAgLy8gY29uc3QgZmluZENsYXNzUmVjdXJzaXZlID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZGVwdGgpID0+IHtcbiAgICAgICAgLy8gLy8gcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLW1vZGFsJylcbiAgICAgICAgLy8gXHRjb25zb2xlLmxvZygnZGVwdGg6ICcgKyBkZXB0aCwgZWxlbWVudCk7XG4gICAgICAgIC8vIFx0aWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHJldHVybiBlbGVtZW50O1xuICAgICAgICAvLyBcdGVsc2UgcmV0dXJuIGZpbmRDbGFzc1JlY3Vyc2l2ZShlbGVtZW50LnBhcmVudE5vZGUsIGNsYXNzTmFtZSwgZGVwdGggKyAxKTtcbiAgICAgICAgLy8gfTtcbiAgICAgICAgLy8gdmFyIGdldENsb3Nlc3QgPSBmdW5jdGlvbihlbGVtLCBzZWxlY3Rvcikge1xuICAgICAgICAvLyBcdGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG4gICAgICAgIC8vIFx0XHRpZiAoZWxlbS5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIGVsZW07XG4gICAgICAgIC8vIFx0fVxuICAgICAgICAvLyBcdHJldHVybiBudWxsO1xuICAgICAgICAvLyB9O1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhkb2N1bWVudC5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0KTtcbiAgICAgICAgdmFyIHBhZ2VIZWFkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcbiAgICAgICAgaWYgKCFwYWdlSGVhZEVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBwYWdlcyA9IFsnI2Rlc2lnbicsICcjY29udGFjdCddO1xuICAgICAgICB2YXIgaXNXaGl0ZSA9IHBhZ2VzLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcbiAgICAgICAgaWYgKGlzV2hpdGUpIHtcbiAgICAgICAgICAgIHBhZ2VIZWFkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCctLXdoaXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYWdlSGVhZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnLS13aGl0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY3JvbGxQcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmVzc0JhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0LWhlYWQtcHJvZ3Jlc3MnKTtcbiAgICAgICAgICAgIGlmICghcHJvZ3Jlc3NCYXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHNjcm9sbFBlcmNlbnQgPSAod2luZG93LnBhZ2VZT2Zmc2V0IC8gKGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0KSkgKiAxMDAgKyBcIiVcIjtcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gc2Nyb2xsUGVyY2VudDtcbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGluZGV4XzEuZGVmYXVsdC5zdGlja3lFbGVtZW50KHsgdGFyZ2V0RWxlbWVudDogJy5wb3N0LWhlYWQnLCBhZGRDbGFzczogJ2lzLXN0aWNreScgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsUHJvZ3Jlc3MsIHRydWUpO1xuICAgICAgICAvLyB2YXIgaSA9IDA7XG4gICAgICAgIC8vIHZhciBpbWFnZXMgPSBbJ2NvdmVyMS5qcGcnLCdjb3ZlcjIuanBnJ107XG4gICAgICAgIC8vIHZhciBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY292ZXJfaW1hZ2UnKTtcbiAgICAgICAgLy8gLy8gaW1hZ2UuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybCgvaW1nL2NvdmVyMS5qcGcpJyk7XG4gICAgICAgIC8vIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIFx0aW1hZ2VFbGVtZW50LmZhZGVPdXQoMTAwMCwgKCkgPT4ge1xuICAgICAgICAvLyBcdFx0aW1hZ2VFbGVtZW50LmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoJHtpbWFnZXNbaSsrXX0pYCk7XG4gICAgICAgIC8vIFx0XHRpbWFnZUVsZW1lbnQuZmFkZUluKDEwMDApO1xuICAgICAgICAvLyBcdH0pO1xuICAgICAgICAvLyBcdGlmKGkgPT09IGltYWdlcy5sZW5ndGgpIGkgPSAwO1xuICAgICAgICAvLyB9LCA1MDAwKTtcbiAgICB9KTtcbn1cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcG9seWZpbGwoKVxuICAgIGxvYWRfMS5sb2FkZXIoKTtcbiAgICBsb2FkXzEuY2hlY2tCcm93c2VyKCk7XG4gICAgc2V0RGFya01vZGVfMS5zZXREYXJrbW9kZSgpO1xuICAgIHRlbXAoKTtcbiAgICAvLyBjb25zdCBzYXlIZWxsbyA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyBcdHJlamVjdCgnVW5hYmxlIHRvIHNheSBoaS4nKTtcbiAgICAvLyBcdHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vIFx0XHRyZXNvbHZlKCdIZWxsbywgV29ybGQnKTtcbiAgICAvLyBcdH0sIDUwMDApO1xuICAgIC8vIH0pO1xuICAgIC8vIHNheUhlbGxvLnRoZW4ocmVzb2x2ZSA9PiB7XG4gICAgLy8gXHRjb25zb2xlLmxvZygncmVzJywgcmVzb2x2ZSk7XG4gICAgLy8gfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIC8vIFx0Y29uc29sZS53YXJuKGVycm9yKTtcbiAgICAvLyB9KTtcbiAgICAvLyBQcm9taXNlLmFsbChbXG4gICAgLy8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJyksXG4gICAgLy8gXHRmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzJylcbiAgICAvLyBdKVxuICAgIC8vIC50aGVuKHJlc3BvbnNlcyA9PiB7XG4gICAgLy8gXHRyZXR1cm4gcmVzcG9uc2VzLm1hcChyZXNwb25zZSA9PiB7XG4gICAgLy8gXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgLy8gXHR9KTtcbiAgICAvLyDsl7Drj4Trs4Qg6rCQ64+F67OEIOuCmOudvOuzhFxuICAgIC8vIGNvbnN0IGJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCcpO1xuICAgIC8vIGlmKCFib2FyZEVsZW1lbnQpIHJldHVybiBudWxsO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgIC8vIFx0Y29uc3QgZmlsdGVyZWRDb3VudHJ5ID0gZmlsbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5jb3VudHJ5ID09PSAn66+46rWtJyk7XG4gICAgLy8gXHRjb25zb2xlLmxvZyhmaWx0ZXJlZENvdW50cnkpO1xuICAgIC8vIFx0aWYoZXZlbnQudGFyZ2V0Lm5hbWUgPT09ICd1c2EnKSB7XG4gICAgLy8gXHRcdGJvYXJkRWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAvLyBcdFx0ZmlsdGVyZWRDb3VudHJ5Lm1hcChpdGVtID0+IHtcbiAgICAvLyBcdFx0XHRib2FyZEVsZW1lbnQuaW5uZXJIVE1MICs9IGBcbiAgICAvLyBcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1ib2R5XCI+XG4gICAgLy8gXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib2FyZC1oZWFkLXRpdGxlXCI+JHtpdGVtLmlkfTwvZGl2PlxuICAgIC8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5yZWxlYXNlRGF0ZX08L2Rpdj5cbiAgICAvLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0udGl0bGVLb3JlYW59PGRpdj4ke2l0ZW0udGl0bGVFbmdsaXNofTwvZGl2PjwvZGl2PlxuICAgIC8vIFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5kaXJlY3Rvcn08L2Rpdj5cbiAgICAvLyBcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uY291bnRyeX08L2Rpdj5cbiAgICAvLyBcdFx0XHRcdDwvZGl2PmA7XG4gICAgLy8gXHRcdH0pO1xuICAgIC8vIFx0fVxuICAgIC8vIH0pO1xuICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vIFx0ZmlsbXMubWFwKGl0ZW0gPT4ge1xuICAgIC8vIFx0XHRib2FyZEVsZW1lbnQuaW5uZXJIVE1MICs9IGBcbiAgICAvLyBcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWJvZHlcIj5cbiAgICAvLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5pZH08L2Rpdj5cbiAgICAvLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS5yZWxlYXNlRGF0ZX08L2Rpdj5cbiAgICAvLyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYm9hcmQtaGVhZC10aXRsZVwiPiR7aXRlbS50aXRsZUtvcmVhbn08ZGl2PiR7aXRlbS50aXRsZUVuZ2xpc2h9PC9kaXY+PC9kaXY+XG4gICAgLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uZGlyZWN0b3J9PC9kaXY+XG4gICAgLy8gXHRcdFx0PGRpdiBjbGFzcz1cImJvYXJkLWhlYWQtdGl0bGVcIj4ke2l0ZW0uY291bnRyeX08L2Rpdj5cbiAgICAvLyBcdFx0PC9kaXY+YDtcbiAgICAvLyBcdH0pO1xuICAgIC8vIH0sIDIwMCk7XG59KTtcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuLy8gXHQvLyBjb25zdCBoZWxwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRleHRmaWVsZC1oZWxwZXInKTtcbi8vIFx0Ly8gaGVscGVycy5mb3JFYWNoKGhlbHBlciA9PiBoZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XG4vLyBcdC8vIGxldCBsb2dpbkRhdGEgPSB7ZW1haWw6ICcnLCBwYXNzd29yZDogJyd9O1xuLy8gXHRjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gZG9jdW1lbnQubG9naW47XG4vLyBcdGNvbnNvbGUubG9nKGVtYWlsKTtcbi8vIFx0aWYoIWRvY3VtZW50KSByZXR1cm47XG4vLyBcdC8vIGNvbnN0IGlzRW1haWwgPSBldmVudC50YXJnZXQgPT09IGVtYWlsO1xuLy8gXHRjb25zdCBpc1Bhc3N3b3JkID0gZXZlbnQudGFyZ2V0ID09PSBwYXNzd29yZDtcbi8vIFx0Y29uc3QgaGFuZGxlVmFsaWRhdGUgPSAoeyB0YXJnZXQ6IGFueSwgdmFsaWRhdGU6IHZvaWQsIG1lc3NhZ2U6IGFueSB9KSA9PiB7XG4vLyBcdFx0aWYodmFsaWRhdGUpIHtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gJyc7XG4vLyBcdFx0XHR0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4vLyBcdFx0fSBlbHNlIHtcbi8vIFx0XHRcdGlmKCF0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm47XG4vLyBcdFx0XHQvLyBjb25zdCBpZCA9IHRhcmdldC5pZCB8fCB0YXJnZXQubmFtZTtcbi8vIFx0XHRcdC8vIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnZXJyb3ItJyArIGlkKTtcbi8vIFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ID0gbWVzc2FnZTtcbi8vIFx0XHRcdHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4vLyBcdFx0fVxuLy8gXHR9O1xuLy8gXHRpZihpc1Bhc3N3b3JkKSB7XG4vLyBcdFx0aGFuZGxlVmFsaWRhdGUoe1xuLy8gXHRcdFx0dGFyZ2V0OiBwYXNzd29yZCxcbi8vIFx0XHRcdHZhbGlkYXRlOiBpc1Bhc3N3b3JkICYmICEodmFsaWRpdHkuaXNMZW5ndGgocGFzc3dvcmQudmFsdWUsIDgpKSxcbi8vIFx0XHRcdG1lc3NhZ2U6ICfruYTrsIDrsojtmLjrpbwg65iR67CU66GcIOyeheugpe2VtOudvC4nXG4vLyBcdFx0fSk7XG4vLyBcdH1cbi8vIH0pO1xuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50ID0+IHt9LCB0cnVlKTsgLy8gYmx1ciBpcyBub3QgYnViYmxlXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKcGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFpRVUZaTEVOQlFVRTdPenM3TzBGQlJWb3NiME5CUVdsRE8wRkJRMnBETEdsRVFVRnBSRHRCUVVOcVJDeG5SVUZCTkVNN1FVRkROVU1zTWtOQlFUSkZPMEZCUXpORkxIVkRRVUV5UXp0QlFVTXpReXg1UkVGQmFVVTdRVUZIYWtVc01FTkJRVEJETzBGQlF6RkRMSEZFUVVGM1JEdEJRVU40UkN4dlJVRkJOa003UVVGRE4wTXNiMFZCUVRaRE8wRkJSVGRETEhsRVFVRjVSRHRCUVVONlJDeDNSRUZCZDBRN1FVRkRlRVFzZFVOQlFYVkRPMEZCUlhaRExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhUUVVGVExFVkJRVVU3U1VGRGFrTXNTVUZCVFN4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eGhRVUZoTEVOQlFVTXNRMEZCUVR0SlFVTjZSU3hKUVVGSkxFTkJRVU1zWTBGQll6dFJRVUZGTEU5QlFVMDdTVUZGTTBJc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkJPMEZCUTNoRExFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlJVWXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZsQlFWa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVNelF5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEdOQlFXTXNRMEZCUXl4RFFVRkJPMEZCUlhKRUxGTkJRVk1zWTBGQll6czdTVUZEY2tJc1NVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxHZENRVUZuUWl4RFFVRkRMRU5CUVVFN1NVRkRMMFVzYVVaQlFXbEdPMGxCUTJwR0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJN1VVRkJSU3hQUVVGTk8wbEJSVGxDTEdsQ1FVRnBRaXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1NVRkRMME1zV1VGQlFTeHBRa0ZCYVVJc01FTkJRVVVzYTBKQlFXdENMREJEUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkRPMEZCUTNaRkxFTkJRVU03UVVGRlJDeFRRVUZUTEVsQlFVazdTVUZGV0N4blFrRkJVeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEyWXNkVUpCUVdkQ0xFVkJRVVVzUTBGQlFUdFJRVVZzUWl4dFFrRkJiVUk3VVVGRGJrSXNkVWRCUVhWSE8xRkJRM1pITEdsSFFVRnBSenRSUVVOcVJ5eG5SMEZCWjBjN1VVRkRhRWNzYjBkQlFXOUhPMUZCUTNCSExFbEJRVWs3VVVGRFNpeHJSVUZCYTBVN1VVRkRiRVVzV1VGQldUdFJRVU5hTEhORFFVRnpRenRSUVVOMFF5eDVRa0ZCZVVJN1VVRkRla0lzSzBWQlFTdEZPMUZCUXk5RkxDdEVRVUVyUkR0UlFVTXZSQ3g1U2tGQmVVbzdVVUZEZWtvc2IwUkJRVzlFTzFGQlEzQkVMSEZFUVVGeFJEdFJRVU55UkN3clEwRkJLME03VVVGREwwTXNiVUpCUVcxQ08xRkJRMjVDTEdsQ1FVRnBRanRSUVVOcVFpeHBSMEZCYVVjN1VVRkRha2NzWTBGQll6dFJRVU5rTEhsQ1FVRjVRanRSUVVONlFpeG5Ra0ZCWjBJN1VVRkRhRUlzZFVKQlFYVkNPMUZCUTNaQ0xEQkNRVUV3UWp0UlFVTXhRaXhKUVVGSk8xRkJSVW9zUzBGQlN6dFJRVU5NTEVsQlFVMHNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHRSUVVOMlJDeEpRVUZOTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVFN1VVRkRka1FzU1VGQlRTeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlFUdFJRVU55UkN4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUzBGQlN5eEZRVUZGTzFsQlEzcENMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJRU3hMUVVGTE8yZENRVU5zUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0blFrRkRha01zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3WjBKQlEzQkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMWxCUXpkQ0xFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEwWXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRkJMRXRCUVVzN1owSkJRMnhETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzJkQ1FVTndReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRuUWtGRGFrTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdXVUZEYUVNc1EwRkJReXhEUVVGRExFTkJRVUU3VTBGRFNEdFJRVVZFTEVsQlFVMHNXVUZCV1N4SFFVRkhPMWxCUTI1Q0xFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUVR0WlFVTm9SU3hKUVVGTkxHZENRVUZuUWl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZCTzFsQlF6TkZMRWxCUVVrc1dVRkJXU3hKUVVGSkxHZENRVUZuUWl4RlFVRkZPMmRDUVVOd1F5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzI5Q1FVTTVRaXhQUVVGQkxFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVU3ZDBKQlEyaERMRmxCUVZrc1NVRkJTU3haUVVGWkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHR2UWtGRE1VUXNRMEZCUXl4RFFVRkRPMmRDUVVaR0xFTkJSVVVzUTBGRFNDeERRVUZCTzJGQlEwWTdVVUZEU0N4RFFVRkRMRU5CUVVFN1VVRkRSQ3haUVVGWkxFVkJRVVVzUTBGQlFUdFJRVU5rTEdGQlFWRXNSVUZCUlN4RFFVRkJPMUZCUTFZc01FSkJRV01zUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1VVRkRNVUlzYzBKQlFWRXNSVUZCUlN4RFFVRkRPMUZCUlZnc1pVRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEdkQ1FVRm5RaXhGUVVGRkxHTkJRV01zUlVGQlJTeGhRVUZoTEVWQlFVVXNWMEZCVnl4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlFUdFJRVU16Uml4bFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEZsQlFWa3NSVUZCUlN4RFFVRkRMRU5CUVVFN1VVRkZOME1zWlVGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZCTzFGQlEzUkRMR1ZCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlF5eERRVUZCTzFGQlEzQkVMR1ZCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlFUdFJRVU5tTEdWQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUVR0UlFVTjBReXhsUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVUU3VVVGRGRrTXNaVUZCU3l4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGQk8xRkJRM1pDTEdWQlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRVHRSUVVOd1FpeGxRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN1VVRkRXaXhsUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVRTdVVUZEYUVJc1pVRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZCTzFGQlJXUXNhVVJCUVdsRU8xRkJRMnBFTERSRVFVRTBSRHRSUVVNMVJDdzRSRUZCT0VRN1VVRkRPVVFzSzBOQlFTdERPMUZCUXk5RExEUkRRVUUwUXp0UlFVTTFReXc0UkVGQk9FUTdVVUZET1VRc05rVkJRVFpGTzFGQlF6ZEZMRXRCUVVzN1VVRkZUQ3c0UTBGQk9FTTdVVUZET1VNc0swUkJRU3RFTzFGQlF5OUVMRFpEUVVFMlF6dFJRVU0zUXl4TFFVRkxPMUZCUTB3c1owSkJRV2RDTzFGQlEyaENMRXRCUVVzN1VVRkZUQ3hyUlVGQmEwVTdVVUZGYkVVc1NVRkJUU3hsUVVGbExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRSUVVOMFJTeEpRVUZKTEVOQlFVTXNaVUZCWlR0WlFVRkZMRTlCUVUwN1VVRkZOVUlzU1VGQlRTeExRVUZMTEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGNrTXNTVUZCVFN4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8xRkJRM0JFTEVsQlFVa3NUMEZCVHl4RlFVRkZPMWxCUTFnc1pVRkJaU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVFN1UwRkRla003WVVGQlRUdFpRVU5NTEdWQlFXVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzFOQlF6VkRPMUZCUlVRc1NVRkJUU3hqUVVGakxFZEJRVWM3V1VGRGNrSXNTVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8xbEJRemxGTEVsQlFVa3NRMEZCUXl4WFFVRlhPMmRDUVVGRkxFOUJRVTA3V1VGRmVFSXNTVUZCVFN4aFFVRmhMRWRCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhOUVVGSExFTkJRVUU3V1VGRE1VY3NWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzWVVGQllTeERRVUZCTzFGQlEzcERMRU5CUVVNc1EwRkJRVHRSUVVsRUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVU3V1VGRGFFTXNaVUZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhGUVVGRkxHRkJRV0VzUlVGQlJTeFpRVUZaTEVWQlFVVXNVVUZCVVN4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVUU3VVVGRE4wVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRSaXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHTkJRV01zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUVR0UlFVTjJSQ3hoUVVGaE8xRkJRMklzTkVOQlFUUkRPMUZCUXpWRExEWkVRVUUyUkR0UlFVTTNSQ3cwUkVGQk5FUTdVVUZETlVRc01FSkJRVEJDTzFGQlF6RkNMSE5EUVVGelF6dFJRVU4wUXl4cFJVRkJhVVU3VVVGRGFrVXNLMEpCUVN0Q08xRkJReTlDTEU5QlFVODdVVUZEVUN4clEwRkJhME03VVVGRGJFTXNXVUZCV1R0SlFVVmtMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF6dEJRVVZFTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRKUVVNMVF5eGhRVUZoTzBsQlEySXNZVUZCVFN4RlFVRkZMRU5CUVVFN1NVRkRVaXh0UWtGQldTeEZRVUZGTEVOQlFVRTdTVUZEWkN4NVFrRkJWeXhGUVVGRkxFTkJRVUU3U1VGRllpeEpRVUZKTEVWQlFVVXNRMEZCUVR0SlFVTk9MSE5FUVVGelJEdEpRVU4wUkN4blEwRkJaME03U1VGRmFFTXNjMEpCUVhOQ08wbEJRM1JDTERaQ1FVRTJRanRKUVVNM1FpeGhRVUZoTzBsQlEySXNUVUZCVFR0SlFVTk9MRFpDUVVFMlFqdEpRVU0zUWl4blEwRkJaME03U1VGRGFFTXNjMEpCUVhOQ08wbEJRM1JDTEhkQ1FVRjNRanRKUVVONFFpeE5RVUZOTzBsQlIwNHNaMEpCUVdkQ08wbEJRMmhDTEhkRVFVRjNSRHRKUVVONFJDeDFSRUZCZFVRN1NVRkRka1FzUzBGQlN6dEpRVU5NTEhWQ1FVRjFRanRKUVVOMlFpeHpRMEZCYzBNN1NVRkRkRU1zTkVKQlFUUkNPMGxCUXpWQ0xFOUJRVTg3U1VGRlVDeGpRVUZqTzBsQlEyUXNlVVJCUVhsRU8wbEJRM3BFTEdsRFFVRnBRenRKUVVOcVF5eG5SRUZCWjBRN1NVRkRhRVFzZDBWQlFYZEZPMGxCUTNoRkxHbERRVUZwUXp0SlFVTnFReXh4UTBGQmNVTTdTVUZEY2tNc2FVTkJRV2xETzBsQlEycERMR3REUVVGclF6dEpRVU5zUXl4cFEwRkJhVU03U1VGRGFrTXNLMEpCUVN0Q08wbEJReTlDTEhORVFVRnpSRHRKUVVOMFJDd3JSRUZCSzBRN1NVRkRMMFFzT0VaQlFUaEdPMGxCUXpsR0xEUkVRVUUwUkR0SlFVTTFSQ3d5UkVGQk1rUTdTVUZETTBRc1pVRkJaVHRKUVVObUxGRkJRVkU3U1VGRFVpeExRVUZMTzBsQlEwd3NUVUZCVFR0SlFVTk9MSEZDUVVGeFFqdEpRVU55UWl4MVFrRkJkVUk3U1VGRGRrSXNaME5CUVdkRE8wbEJRMmhETERaQ1FVRTJRanRKUVVNM1FpeHZSRUZCYjBRN1NVRkRjRVFzTmtSQlFUWkVPMGxCUXpkRUxEUkdRVUUwUmp0SlFVTTFSaXd3UkVGQk1FUTdTVUZETVVRc2VVUkJRWGxFTzBsQlEzcEVMR0ZCUVdFN1NVRkRZaXhQUVVGUE8wbEJRMUFzVjBGQlZ6dEJRVU5pTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUlVZc1owUkJRV2RFTzBGQlEyaEVMSE5GUVVGelJUdEJRVU4wUlN4blJVRkJaMFU3UVVGRGFFVXNhVVJCUVdsRU8wRkJSV3BFTEN0RFFVRXJRenRCUVVNdlF5eDFRa0ZCZFVJN1FVRkRka0lzZVVKQlFYbENPMEZCUlhwQ0xEaERRVUU0UXp0QlFVTTVReXhwUkVGQmFVUTdRVUZGYWtRc0swVkJRU3RGTzBGQlF5OUZMRzFDUVVGdFFqdEJRVU51UWl4MVJFRkJkVVE3UVVGRGRrUXNLME5CUVN0RE8wRkJReTlETEhWRVFVRjFSRHRCUVVOMlJDeGhRVUZoTzBGQlEySXNORU5CUVRSRE8wRkJRelZETERaRFFVRTJRenRCUVVNM1F5eG5SVUZCWjBVN1FVRkRhRVVzYjBSQlFXOUVPMEZCUTNCRUxHOUVRVUZ2UkR0QlFVTndSQ3gzUkVGQmQwUTdRVUZEZUVRc1RVRkJUVHRCUVVOT0xFMUJRVTA3UVVGRlRpeHZRa0ZCYjBJN1FVRkRjRUlzY1VKQlFYRkNPMEZCUTNKQ0xIVkNRVUYxUWp0QlFVTjJRaXh6UlVGQmMwVTdRVUZEZEVVc1owTkJRV2RETzBGQlEyaERMRkZCUVZFN1FVRkRVaXhMUVVGTE8wRkJSVXdzVFVGQlRUdEJRVVZPTERoRlFVRTRSVHRCUVVNNVJTeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFVRXNTMEZCU3l4SlFVRkpMRTlCUVVFc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGQlJTeEZRVUYwUWl4RFFVRnpRaXhEUVVGRExFTkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8g67mE64+Z6riwIO2VqOyImOuKlCDrpqzthLTsnYQg7ZW07JW87ZWc64ukLiDtlITroZzrr7jsiqTrpbwg67CY7ZmYLlxudmFyIHJvdXRlUGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYWdlID0gaGFzaCA/IFwiL3ZpZXdzL1wiICsgaGFzaC5zdWJzdHJpbmcoMSkgKyBcIi5odG1sXCIgOiAnL3ZpZXdzL3Byb2ZpbGUuaHRtbCc7XG4gICAgcmV0dXJuIGZldGNoKHBhZ2UpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAvLyA0MDQgfHwgNTAwXG4gICAgICAgIGlmIChyZXNwb25zZS5vaylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XG4gICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlldycpO1xuICAgICAgICBpZiAoIXZpZXcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZpZXcuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgLy8gd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgbmFtZTogJ3Rlc3RlcicgfSwgJ2RkJywgaGFzaC5zdWJzdHJpbmcoMSkpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGNvbnNvbGUud2Fybigncm91dGVyOiAnLCBlcnJvcik7IH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJvdXRlUGFnZTtcbi8vIGhhc2gg66eQ6rOgIO2BtOumre2VmOuKlCDsiJzqsITsl5Ag6rCS7J2EIOyVjOyVhOyVvCDtlaguIGRhdGEgYXR0ciBvciBoYXNoXG4vLyBjb25zdCBSb3V0ZXIgPSAobmFtZSwgcm91dGVzKSA9PiB7XG4vLyBcdHJldHVybiB7IG5hbWU6IG5hbWUsIHJvdXRlczogcm91dGVzIH07XG4vLyB9O1xuLy8gdmFyIGFjdGl2ZVJvdXRlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2hyZWZdJykpO1xuLy8gYWN0aXZlUm91dGVzLmZvckVhY2gocm91dGUgPT4gcm91dGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuYXZpZ2F0ZSkpO1xuLy8gY29uc3QgbXlGaXJzdFJvdXRlciA9IG5ldyBSb3V0ZXIoJ215Rmlyc3RSb3V0ZXInLCBbXG4vLyBcdHsgcGF0aDogJy8nLCBuYW1lOiAnaW5kZXgnIH0sXG4vLyBdKTtcbi8vIGNvbnN0IG5hdmlnYXRlID0gKGV2ZW50KSA9PiB7XG4vLyBcdGNvbnN0IHJvdXRlID0gZmluZEN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1swXS52YWx1ZTtcbi8vIFx0Y29uc3Qgcm91dGVJbmZvID0gbXlGaXJzdFJvdXRlci5yb3V0ZXMuZmluZChyID0+IHIucGF0aCA9PT0gcm91dGUpO1xuLy8gXHRpZighcm91dGVJbmZvKSB7XG4vLyBcdFx0Ly93aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCAnZXJyb3InKTtcbi8vIFx0XHR2aWV3LmlubmVySFRNTCA9ICdObyByb3V0ZSBleGlzdHMgd2l0aCB0aGlzIHBhdGgnO1xuLy8gXHR9IGVsc2Uge1xuLy8gXHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IG5hbWU6ICd0ZXN0ZXInIH0sICcnLCByb3V0ZUluZm8ucGF0aCk7XG4vLyBcdFx0ZmV0Y2goYC92aWV3cy8ke3JvdXRlSW5mby5uYW1lfS5odG1sYClcbi8vIFx0XHRcdC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuLy8gXHRcdFx0LnRoZW4oaHRtbCA9PiB2aWV3LmlubmVySFRNTCA9IGh0bWwpXG4vLyBcdFx0XHQuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coJ0ZhaWxlZCB0byBmZXRjaCBwYWdlOiAnLCBlcnJvcikpO1xuLy8gXHR9XG4vLyB9O1xuLy8ge1xuLy8gXHRtZXRob2Q6ICdQT1NUJyxcbi8vIFx0Ym9keTogJ3RpdGxlPScgKyBlbmNvZGVVUklDb21wb25lbnQoJ015IGF3ZXNvbWUgbmV3IGFydGljbGUnKSArICcmYm9keT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdUaGlzIGlzIHRoZSB0ZXh0IG9mIG15IGFydGljbGUnKSxcbi8vIFx0aGVhZGVyOiB7XG4vLyBcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuLy8gXHR9LFxuLy8gXHRyZWZlcnJlcjogJ25vLXJlZmVycmVyJ1xuLy8gfVxuLy8gY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuLy8gY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XG4vLyB2aWV3LmlubmVySFRNTCA9IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoZG9jKTtcbi8vIHJlc3BvbnNlLnRleHQoKSAvLyByZXNwb25zZS5qc29uKClcbi8vIHRvTG93ZXJDYXNlKCkg7ZW07KO86riwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbTkxZEdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpY205MWRHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNPRUpCUVRoQ08wRkJRemxDTEVsQlFVMHNVMEZCVXl4SFFVRkhPMGxCUTFnc1NVRkJRU3d5UWtGQlNTeERRVUZ4UWp0SlFVTXZRaXhKUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0SlFVVXZSU3hQUVVGUExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTTdVMEZEYUVJc1NVRkJTU3hEUVVGRExGVkJRVUVzVVVGQlVUdFJRVU5pTEdGQlFXRTdVVUZEWWl4SlFVRkhMRkZCUVZFc1EwRkJReXhGUVVGRk8xbEJRVVVzVDBGQlR5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN08xbEJRMnhETEU5QlFVOHNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU4wUXl4RFFVRkRMRU5CUVVNN1UwRkRSQ3hKUVVGSkxFTkJRVU1zVlVGQlFTeEpRVUZKTzFGQlExUXNTVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTTNReXhKUVVGSExFTkJRVU1zU1VGQlNUdFpRVUZGTEU5QlFVODdVVUZGYWtJc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEZEVJc2VVVkJRWGxGTzBsQlF6RkZMRU5CUVVNc1EwRkJRenRUUVVORUxFdEJRVXNzUTBGQlF5eFZRVUZCTEV0QlFVc3NTVUZCU1N4UFFVRkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RlFVRXZRaXhEUVVFclFpeERRVUZETEVOQlFVTTdRVUZEYmtRc1EwRkJReXhEUVVGRE8wRkJSVVlzYTBKQlFXVXNVMEZCVXl4RFFVRkRPMEZCUlhwQ0xDdERRVUVyUXp0QlFVTXZReXh4UTBGQmNVTTdRVUZEY2tNc01FTkJRVEJETzBGQlF6RkRMRXRCUVVzN1FVRkRUQ3h6UlVGQmMwVTdRVUZEZEVVc05FVkJRVFJGTzBGQlF6VkZMSE5FUVVGelJEdEJRVU4wUkN4cFEwRkJhVU03UVVGRGFrTXNUVUZCVFR0QlFVTk9MR2REUVVGblF6dEJRVU5vUXl4M1JFRkJkMFE3UVVGRGVFUXNkVVZCUVhWRk8wRkJRM1pGTEc5Q1FVRnZRanRCUVVOd1FpeHBSRUZCYVVRN1FVRkRha1FzZFVSQlFYVkVPMEZCUTNaRUxGbEJRVms3UVVGRFdpeHpSVUZCYzBVN1FVRkRkRVVzTWtOQlFUSkRPMEZCUXpORExEaENRVUU0UWp0QlFVTTVRaXd3UTBGQk1FTTdRVUZETVVNc2IwVkJRVzlGTzBGQlEzQkZMRXRCUVVzN1FVRkRUQ3hMUVVGTE8wRkJSVXdzU1VGQlNUdEJRVU5LTEcxQ1FVRnRRanRCUVVOdVFpeHZTVUZCYjBrN1FVRkRjRWtzWVVGQllUdEJRVU5pTEhWRFFVRjFRenRCUVVOMlF5eE5RVUZOTzBGQlEwNHNNa0pCUVRKQ08wRkJRek5DTEVsQlFVazdRVUZEU2l4clEwRkJhME03UVVGRGJFTXNlVVJCUVhsRU8wRkJRM3BFTEN0RVFVRXJSRHRCUVVNdlJDeHhRMEZCY1VNN1FVRkRja01zYjBKQlFXOUNJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbG9hZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sb2FkaW5nJyk7XG4gICAgaWYgKCFsb2FkZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZCgnYm9keS1sb2NrJyk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbG9hZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XG4gICAgICAgIH0sIDApO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuY2hlY2tCcm93c2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBCcm93c2VyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1icm93c2VyJyk7XG4gICAgaWYgKCFCcm93c2VyRWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdtc2llJykgPiAtMSB8fCB1c2VyQWdlbnQuaW5kZXhPZigndHJpZGVudCcpID4gLTEpIHtcbiAgICAgICAgQnJvd3NlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJBZ2VudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdjaHJvbWUnKSAhPT0gLTEpIHtcbiAgICAgICAgY29uc29sZS5sb2codXNlckFnZW50LCAn7YGs66GsJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZ29vZ2xlQW5hbHl0aWNzID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIDxzY3JpcHQgYXN5bmMgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS04MzUzMTIzOS0xXCI+PC9zY3JpcHQ+XG4gICAgLy8gd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107XG4gICAgLy8gZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fVxuICAgIC8vIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7XG4gICAgLy8gZ3RhZygnY29uZmlnJywgJ1VBLTgzNTMxMjM5LTEnKTtcbn07XG5leHBvcnRzLmFkanVzdFRvcFBhZGRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyJyk7XG4gICAgaWYgKCFoZWFkZXJFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGZuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0Qm9keU1hcmdpblRvcChoZWFkZXJFbGVtZW50KTsgfTtcbiAgICBzZXRCb2R5TWFyZ2luVG9wKGhlYWRlckVsZW1lbnQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pOyB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsgfSk7XG4gICAgLy8g7Iqk7L2U7ZSEXG4gICAgLy8g7ZWo7IiY64qUIOyduOyekOulvCDrsJvripQg6rKD7J20IOyii+uLpC4uLlxuICAgIC8vIOyduO2Si+ydtCDsnojqs6Ag66as7YS07J20IOyeiOuLpC4uLlxufTtcbmZ1bmN0aW9uIHNldEJvZHlNYXJnaW5Ub3AoaGVhZGVyRWxlbWVudCkge1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgaXNGaXhlZEhlYWRlciA9IGdldENvbXB1dGVkU3R5bGUoaGVhZGVyRWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCc7XG4gICAgaWYgKGlzRml4ZWRIZWFkZXIpIHtcbiAgICAgICAgYm9keS5zdHlsZS5tYXJnaW5Ub3AgPSBoZWFkZXJFbGVtZW50LmNsaWVudEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBib2R5LnN0eWxlLm1hcmdpblRvcCA9IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liRzloWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbXh2WVdRdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCWVN4UlFVRkJMRTFCUVUwc1IwRkJSenRKUVVOd1FpeEpRVUZOTEdGQlFXRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzBsQlF6TkVMRWxCUVVrc1EwRkJReXhoUVVGaE8xRkJRVVVzVDBGQlRUdEpRVVZzUWl4SlFVRkJMRzlDUVVGSkxFTkJRV0U3U1VGRmVrSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEd0Q1FVRnJRaXhGUVVGRk8xRkJRelZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzBsQlEycERMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRMFlzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUlVGQlJUdFJRVU01UWl4VlFVRlZMRU5CUVVNN1dVRkRWQ3hoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRaUVVONFF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdFJRVU53UXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFVDeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVVktMRU5CUVVNc1EwRkJRVHRCUVVWWkxGRkJRVUVzV1VGQldTeEhRVUZITzBsQlF6RkNMRWxCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRla1VzU1VGQlNTeERRVUZETEdOQlFXTTdVVUZCUlN4UFFVRk5PMGxCUlROQ0xFbEJRVTBzVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVUU3U1VGRmJrUXNTVUZCU1N4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkRka1VzWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGQk8xRkJRM1JETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3UzBGRGRrSTdVMEZCVFN4SlFVRkpMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkROME1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3UzBGRE4wSTdRVUZEU0N4RFFVRkRMRU5CUVVFN1FVRkZXU3hSUVVGQkxHVkJRV1VzUjBGQlJ6dEpRVU0zUWl3d1JrRkJNRVk3U1VGRE1VWXNOa05CUVRaRE8wbEJRemRETERoRFFVRTRRenRKUVVNNVF5d3dRa0ZCTUVJN1NVRkRNVUlzYlVOQlFXMURPMEZCUTNKRExFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNaMEpCUVdkQ0xFZEJRVWM3U1VGRE9VSXNTVUZCVFN4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0SlFVTXhSQ3hKUVVGSkxFTkJRVU1zWVVGQllUdFJRVUZGTEU5QlFVMDdTVUZGTVVJc1NVRkJUU3hGUVVGRkxFZEJRVWNzWTBGQlRTeFBRVUZCTEdkQ1FVRm5RaXhEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUV2UWl4RFFVRXJRaXhEUVVGQk8wbEJSV2hFTEdkQ1FVRm5RaXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzBsQlF5OUNMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1kwRkJUU3hQUVVGQkxIRkNRVUZ4UWl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGNlFpeERRVUY1UWl4RFFVRkRMRU5CUVVFN1NVRkRiRVVzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZOTEU5QlFVRXNjVUpCUVhGQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFYcENMRU5CUVhsQ0xFTkJRVU1zUTBGQlFUdEpRVVZzUlN4TlFVRk5PMGxCUTA0c2MwSkJRWE5DTzBsQlEzUkNMRzFDUVVGdFFqdEJRVU55UWl4RFFVRkRMRU5CUVVFN1FVRkZSQ3hUUVVGVExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFN1NVRkROMElzU1VGQlFTeHZRa0ZCU1N4RFFVRnJRanRKUVVNNVFpeEpRVUZOTEdGQlFXRXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVzc1QwRkJUeXhEUVVGQk8wbEJSVEZGTEVsQlFVa3NZVUZCWVN4RlFVRkZPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRk5MR0ZCUVdFc1EwRkJReXhaUVVGWkxFOUJRVWtzUTBGQlFUdFJRVU40UkN4UFFVRk5PMHRCUTFBN1NVRkRSQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1FVRkRNVUlzUTBGQlF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0R3JhcGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdyYXBoSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZ3JhcGggLmdyYXBoLWl0ZW0nKTtcbiAgICBpZiAoIWdyYXBoSXRlbXMpXG4gICAgICAgIHJldHVybjtcbiAgICBncmFwaEl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGdyYXBoSXRlbUJhciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tYmFyJyk7XG4gICAgICAgIHZhciBncmFwaEl0ZW1WYWx1ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmdyYXBoLWl0ZW0tdmFsdWUnKTtcbiAgICAgICAgaWYgKCFncmFwaEl0ZW1CYXIgfHwgIWdyYXBoSXRlbVZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ3JhcGhWYWx1ZSA9IHBhcnNlSW50KGdyYXBoSXRlbVZhbHVlLmlubmVyVGV4dCk7XG4gICAgICAgIGdyYXBoSXRlbUJhci5zdHlsZS5oZWlnaHQgPSBncmFwaFZhbHVlICsgXCJweFwiO1xuICAgICAgICBncmFwaEl0ZW1WYWx1ZS5zdHlsZS5ib3R0b20gPSBncmFwaFZhbHVlICsgXCJweFwiO1xuICAgIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRXa3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKMWFTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGaExGRkJRVUVzVVVGQlVTeEhRVUZITzBsQlEzUkNMRWxCUVUwc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkJPMGxCUTNKRkxFbEJRVWtzUTBGQlF5eFZRVUZWTzFGQlFVVXNUMEZCVFR0SlFVVjJRaXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHp0UlFVTjRRaXhKUVVGTkxGbEJRVmtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRmpMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdVVUZETVVVc1NVRkJUU3hqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCWXl4dFFrRkJiVUlzUTBGQlF5eERRVUZCTzFGQlF6bEZMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eGpRVUZqTzFsQlFVVXNUMEZCVFR0UlFVVTFReXhKUVVGTkxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8xRkJSWEpFTEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGTkxGVkJRVlVzVDBGQlNTeERRVUZCTzFGQlF6ZERMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZOTEZWQlFWVXNUMEZCU1N4RFFVRkJPMGxCUTJwRUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhcm91c2VsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYXRlZ29yeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXInKTtcbiAgICBpZiAoIWNhdGVnb3J5KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGNhdGVnb3J5TGlzdCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdmlld2VyJyk7XG4gICAgdmFyIGNhdGVnb3J5TGlzdFNsaWRlID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci12aWV3ZXIgPiBidXR0b24nKTtcbiAgICB2YXIgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLXByZXYnKTtcbiAgICB2YXIgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCA9IGNhdGVnb3J5LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItYXJyb3dzLW5leHQnKTtcbiAgICB2YXIgY2F0ZWdvcnlEb3RzID0gY2F0ZWdvcnkucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1kb3RzLWRvdCcpO1xuICAgIGlmICghY2F0ZWdvcnlMaXN0IHx8ICFjYXRlZ29yeUxpc3RTbGlkZSB8fCAhY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldiB8fCAhY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dCB8fCAhY2F0ZWdvcnlEb3RzKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGNhdGVnb3J5Q29udGFpbmVyV2lkdGggPSBjYXRlZ29yeUxpc3Qub2Zmc2V0V2lkdGg7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgY2F0ZWdvcnlMaXN0U2xpZGUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKHN1bSArPSBpdGVtLm9mZnNldFdpZHRoKTsgfSk7XG4gICAgY2F0ZWdvcnlOYXZpZ2F0aW9uTmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvTmV4dCk7XG4gICAgY2F0ZWdvcnlOYXZpZ2F0aW9uUHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvUHJldik7XG4gICAgY2F0ZWdvcnlEb3RzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IH0pOyB9KTtcbiAgICBjYXRlZ29yeUxpc3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IGNhdGVnb3J5TGlzdC5zY3JvbGxMZWZ0O1xuICAgICAgICBjb25zb2xlLmxvZygnc2Nyb2xsLWxlZnQnLCBzY3JvbGxMZWZ0LCAnb2Zmc2V0LXdpZHRoJywgY2F0ZWdvcnlDb250YWluZXJXaWR0aCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gdG9QcmV2KCkge1xuICAgICAgICBpZiAoIWNhdGVnb3J5TGlzdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2F0ZWdvcnlMaXN0LnNjcm9sbExlZnQgLT0gMTAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b05leHQoKSB7XG4gICAgICAgIGlmICghY2F0ZWdvcnlMaXN0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXRlZ29yeUxpc3Quc2Nyb2xsTGVmdCArPSAxMDA7XG4gICAgICAgIC8vIGlmKHN1bSA+IGNhdGVnb3J5Q29udGFpbmVyV2lkdGgpIHt9XG4gICAgICAgIC8vIGNvbnN0IHR0dCA9IDEwMCArICdweCc7XG4gICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdmlld2VyJykuc3R5bGUudHJhbnNmb3JtICs9ICd0cmFuc2xhdGVYKCcrdHR0KycpJztcbiAgICB9XG59O1xuZXhwb3J0cy5zZXREYXJrbW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGFya21vZGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGFya21vZGUnKTtcbiAgICBpZiAoIWRhcmttb2RlQnV0dG9uKVxuICAgICAgICByZXR1cm47XG4gICAgbG9hZFRoZW1lKCk7XG4gICAgZGFya21vZGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0dCk7XG59O1xuZnVuY3Rpb24gdHQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrbW9kZScpO1xuICAgIHZhciBpc0Rhcmttb2RlID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rhcmttb2RlJyk7XG4gICAgaWYgKGlzRGFya21vZGUpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgJ2Rhcmttb2RlJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGhlbWUnKTtcbiAgICAgICAgLy8gbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9hZFRoZW1lKCkge1xuICAgIHZhciBsYXN0VGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKTtcbiAgICBpZiAoIWxhc3RUaGVtZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChsYXN0VGhlbWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJWMFJHRnlhMDF2WkdVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp6WlhSRVlYSnJUVzlrWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZoTEZGQlFVRXNVVUZCVVN4SFFVRkhPMGxCUTNSQ0xFbEJRVTBzVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3U1VGRGJFUXNTVUZCU1N4RFFVRkRMRkZCUVZFN1VVRkJSU3hQUVVGTk8wbEJSWEpDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWjBKQlFXZENMRU5CUVVNc1EwRkJRVHRKUVVNeFJTeEpRVUZOTEdsQ1FVRnBRaXhIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJZeXg1UWtGQmVVSXNRMEZCUXl4RFFVRkJPMGxCUXpOR0xFbEJRVTBzYzBKQlFYTkNMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8wbEJRelZGTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBsQlF6VkZMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkJPMGxCUld4RkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRWxCUVVrc1EwRkJReXhaUVVGWk8xRkJRVVVzVDBGQlRUdEpRVVYwU0N4SlFVRk5MSE5DUVVGelFpeEhRVUZITEZsQlFWa3NRMEZCUXl4WFFVRlhMRU5CUVVFN1NVRkRka1FzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUlZnc2FVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTU3hKUVVGSkxFOUJRVUVzUTBGQlF5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGNlFpeERRVUY1UWl4RFFVRkRMRU5CUVVFN1NVRkZOVVFzYzBKQlFYTkNMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRM2hFTEhOQ1FVRnpRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdEpRVU40UkN4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR5eEpRVUZKTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4alFVRlBMRU5CUVVNc1EwRkJReXhGUVVFelF5eERRVUV5UXl4RFFVRkRMRU5CUVVFN1NVRkZOVVVzV1VGQldTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU01UWl4SlFVRkJMRzlEUVVGVkxFTkJRV2xDTzFGQlEyNURMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeEZRVUZGTEZWQlFWVXNSVUZCUlN4alFVRmpMRVZCUVVVc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0SlFVTm9SaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVVZHTEZOQlFWTXNUVUZCVFR0UlFVTmlMRWxCUVVrc1EwRkJReXhaUVVGWk8xbEJRVVVzVDBGQlRUdFJRVU42UWl4WlFVRlpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFZEJRVWNzUTBGQlFUdEpRVU5vUXl4RFFVRkRPMGxCUTBRc1UwRkJVeXhOUVVGTk8xRkJRMklzU1VGQlNTeERRVUZETEZsQlFWazdXVUZCUlN4UFFVRk5PMUZCUTNwQ0xGbEJRVmtzUTBGQlF5eFZRVUZWTEVsQlFVa3NSMEZCUnl4RFFVRkJPMUZCUXpsQ0xITkRRVUZ6UXp0UlFVTjBReXd3UWtGQk1FSTdVVUZETVVJc2NVWkJRWEZHTzBsQlEzWkdMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRldTeFJRVUZCTEZkQlFWY3NSMEZCUnp0SlFVTjZRaXhKUVVGTkxHTkJRV01zUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGQk8wbEJRemRFTEVsQlFVa3NRMEZCUXl4alFVRmpPMUZCUVVVc1QwRkJUVHRKUVVVelFpeFRRVUZUTEVWQlFVVXNRMEZCUVR0SlFVTllMR05CUVdNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVUU3UVVGRE9VTXNRMEZCUXl4RFFVRkJPMEZCUlVRc1UwRkJVeXhGUVVGRk8wbEJRMVFzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzBsQlJURkRMRWxCUVUwc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlFUdEpRVU12UkN4SlFVRkpMRlZCUVZVc1JVRkJSVHRSUVVOa0xGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGQk8wdEJRekZETzFOQlFVMDdVVUZEVEN4WlFVRlpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzFGQlEyaERMSGRDUVVGM1FqdExRVU42UWp0QlFVTklMRU5CUVVNN1FVRkZSQ3hUUVVGVExGTkJRVk03U1VGRGFFSXNTVUZCVFN4VFFVRlRMRWRCUVVjc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0SlFVTXZReXhKUVVGSkxFTkJRVU1zVTBGQlV6dFJRVUZGTEU5QlFVMDdTVUZGZEVJc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8wRkJRM2hETEVOQlFVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvdW50RG93bkNsb2NrID0gZnVuY3Rpb24gKG51bWJlciwgZm9ybWF0KSB7XG4gICAgaWYgKG51bWJlciA9PT0gdm9pZCAwKSB7IG51bWJlciA9IDEwMDsgfVxuICAgIGlmIChmb3JtYXQgPT09IHZvaWQgMCkgeyBmb3JtYXQgPSAnc2Vjb25kcyc7IH1cbiAgICB2YXIgZGF5c0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGF5cycpO1xuICAgIHZhciBob3Vyc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaG91cnMnKTtcbiAgICB2YXIgbWludXRlc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWludXRlcycpO1xuICAgIHZhciBzZWNvbmRzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zZWNvbmRzJyk7XG4gICAgaWYgKCFkYXlzRWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnZlcnRGb3JtYXQoZm9ybWF0KTtcbiAgICBmdW5jdGlvbiBjb252ZXJ0Rm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVyKG51bWJlcik7XG4gICAgICAgICAgICBjYXNlICdtaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZXIobnVtYmVyICogNjApO1xuICAgICAgICAgICAgY2FzZSAnaG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcihudW1iZXIgKiA2MCAqIDYwKTtcbiAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcihudW1iZXIgKiA2MCAqIDYwICogMjQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRpbWVyKHNlY29uZHMpIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciB0aGVuID0gbm93ICsgc2Vjb25kcyAqIDEwMDA7XG4gICAgICAgIHZhciBjb3VudGRvd24gPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2Vjb25kc0xlZnQgPSBNYXRoLnJvdW5kKCh0aGVuIC0gRGF0ZS5ub3coKSkgLyAxMDAwKTtcbiAgICAgICAgICAgIGlmIChzZWNvbmRzTGVmdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjb3VudGRvd24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGF5c0VsZW1lbnQgfHwgIWhvdXJzRWxlbWVudCB8fCAhbWludXRlc0VsZW1lbnQgfHwgIXNlY29uZHNFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRheXNFbGVtZW50LmlubmVySFRNTCA9IFwiXCIgKyBNYXRoLmZsb29yKHNlY29uZHNMZWZ0IC8gODY0MDApO1xuICAgICAgICAgICAgaG91cnNFbGVtZW50LmlubmVyVGV4dCA9IFwiXCIgKyBNYXRoLmZsb29yKChzZWNvbmRzTGVmdCAlIDg2NDAwKSAvIDM2MDApO1xuICAgICAgICAgICAgbWludXRlc0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIiArIE1hdGguZmxvb3IoKChzZWNvbmRzTGVmdCAlIDg2NDAwKSAlIDM2MDApIC8gNjApO1xuICAgICAgICAgICAgc2Vjb25kc0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIiArIChzZWNvbmRzTGVmdCAlIDYwIDwgMTAgPyBcIjBcIiArIHNlY29uZHNMZWZ0ICUgNjAgOiBzZWNvbmRzTGVmdCAlIDYwKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOTFiblJrYjNkdUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWTI5MWJuUmtiM2R1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRV0VzVVVGQlFTeGpRVUZqTEVkQlFVY3NWVUZCUXl4TlFVRlpMRVZCUVVVc1RVRkJhMEk3U1VGQmFFTXNkVUpCUVVFc1JVRkJRU3haUVVGWk8wbEJRVVVzZFVKQlFVRXNSVUZCUVN4clFrRkJhMEk3U1VGRE4wUXNTVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5eFZRVUZWTEVOQlFVTXNRMEZCUVR0SlFVTnVSU3hKUVVGTkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRmpMRmRCUVZjc1EwRkJReXhEUVVGQk8wbEJRM0pGTEVsQlFVMHNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV01zWVVGQllTeERRVUZETEVOQlFVRTdTVUZEZWtVc1NVRkJUU3hqUVVGakxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRKUVVONlJTeEpRVUZKTEVOQlFVTXNWMEZCVnp0UlFVRkZMRTlCUVUwN1NVRkZlRUlzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUlhKQ0xGTkJRVk1zWVVGQllTeERRVUZETEUxQlFVMDdVVUZETTBJc1VVRkJVU3hOUVVGTkxFVkJRVVU3V1VGRFpDeExRVUZMTEZOQlFWTTdaMEpCUTFvc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdXVUZEZEVJc1MwRkJTeXhUUVVGVE8yZENRVU5hTEU5QlFVOHNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFpRVU16UWl4TFFVRkxMRTlCUVU4N1owSkJRMVlzVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFpRVU5vUXl4TFFVRkxMRTFCUVUwN1owSkJRMVFzVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVRTdVMEZEZEVNN1NVRkRTQ3hEUVVGRE8wbEJSVVFzVTBGQlV5eExRVUZMTEVOQlFVTXNUMEZCVHp0UlFVTndRaXhKUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVFN1VVRkRkRUlzU1VGQlRTeEpRVUZKTEVkQlFVY3NSMEZCUnl4SFFVRkhMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVUU3VVVGRGFrTXNTVUZCVFN4VFFVRlRMRWRCUVVjc1YwRkJWeXhEUVVGRE8xbEJRelZDTEVsQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVRTdXVUZETVVRc1NVRkJTU3hYUVVGWExFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTndRaXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdaMEpCUTNoQ0xFOUJRVTA3WVVGRFVEdFpRVU5FTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVsQlFVa3NRMEZCUXl4alFVRmpPMmRDUVVGRkxFOUJRVTA3V1VGREwwVXNWMEZCVnl4RFFVRkRMRk5CUVZNc1IwRkJSeXhMUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJSeXhEUVVGQk8xbEJRelZFTEZsQlFWa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlJ5eERRVUZCTzFsQlEzUkZMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGSExFTkJRVUU3V1VGREwwVXNZMEZCWXl4RFFVRkRMRk5CUVZNc1IwRkJSeXhOUVVGSExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGSkxGZEJRVmNzUjBGQlJ5eEZRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1IwRkJSeXhGUVVGRkxFTkJRVVVzUTBGQlFUdFJRVU51Unl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3U1VGRFZpeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdG9nZ2xlQ2xhc3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90b2dnbGVDbGFzc1wiKSk7XG52YXIgZW50ZXJUYXJnZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lbnRlclRhcmdldFwiKSk7XG52YXIgdGFiTWVudV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RhYk1lbnVcIikpO1xudmFyIG1vZGFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kYWxcIikpO1xudmFyIHRvVG9wXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG9Ub3BcIikpO1xudmFyIHN0aWNreUVsZW1lbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdGlja3lFbGVtZW50XCIpKTtcbnZhciBzY3JvbGxBbmltYXRpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxBbmltYXRpb25cIikpO1xudmFyIGNsb3NlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY2xvc2VcIikpO1xudmFyIGN1c3RvbUN1cnNvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2N1c3RvbUN1cnNvclwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzXzEuZGVmYXVsdCxcbiAgICBlbnRlclRhcmdldDogZW50ZXJUYXJnZXRfMS5kZWZhdWx0LFxuICAgIG1vZGFsOiBtb2RhbF8xLmRlZmF1bHQsXG4gICAgdGFiTWVudTogdGFiTWVudV8xLmRlZmF1bHQsXG4gICAgdG9Ub3A6IHRvVG9wXzEuZGVmYXVsdCxcbiAgICBzdGlja3lFbGVtZW50OiBzdGlja3lFbGVtZW50XzEuZGVmYXVsdCxcbiAgICBzY3JvbGxBbmltYXRpb246IHNjcm9sbEFuaW1hdGlvbl8xLmRlZmF1bHQsXG4gICAgY2xvc2U6IGNsb3NlXzEuZGVmYXVsdCxcbiAgICBjdXN0b21DdXJzb3I6IGN1c3RvbUN1cnNvcl8xLmRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRGhFUVVGMVF6dEJRVU4yUXl3NFJFRkJkVU03UVVGRGRrTXNjMFJCUVN0Q08wRkJReTlDTEd0RVFVRXlRanRCUVVNelFpeHJSRUZCTWtJN1FVRkRNMElzYTBWQlFUSkRPMEZCUXpORExITkZRVUVyUXp0QlFVTXZReXhyUkVGQk1rSTdRVUZETTBJc1owVkJRWGxETzBGQlJYcERMR3RDUVVGbE8wbEJRMklzVjBGQlZ5eDFRa0ZCUVR0SlFVTllMRmRCUVZjc2RVSkJRVUU3U1VGRFdDeExRVUZMTEdsQ1FVRkJPMGxCUTB3c1QwRkJUeXh0UWtGQlFUdEpRVU5RTEV0QlFVc3NhVUpCUVVFN1NVRkRUQ3hoUVVGaExIbENRVUZCTzBsQlEySXNaVUZCWlN3eVFrRkJRVHRKUVVObUxFdEJRVXNzYVVKQlFVRTdTVUZEVEN4WlFVRlpMSGRDUVVGQk8wTkJRMklzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHNlbGVjdG9yXG52YXIgdG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdHJpZ2dlciA9IF9hLnNlbGVjdG9yO1xuICAgIHZhciB0cmlnZ2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlcik7XG4gICAgaWYgKCF0cmlnZ2VycylcbiAgICAgICAgcmV0dXJuO1xuICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3NUcmlnZ2VyKGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHRyaWdnZXJOZXh0RWxlbWVudCA9IChfYSA9IGVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAoIXRyaWdnZXJOZXh0RWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0b2dnbGVDbGFzc1RhcmdldCh0cmlnZ2VyTmV4dEVsZW1lbnQpO1xuICAgICAgICAgICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICByZW1vdmVBbGxDbGFzcyhlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikgeyByZXR1cm4gcmVtb3ZlQWxsQ2xhc3ModHJpZ2dlcik7IH0pOyB9KTtcbn07XG52YXIgdG9nZ2xlQ2xhc3NUcmlnZ2VyID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJcIiArIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSk7XG59O1xudmFyIHRvZ2dsZUNsYXNzVGFyZ2V0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XG59O1xudmFyIHJlbW92ZUFsbENsYXNzID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy12aXNpYmxlJyk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9nZ2xlQ2xhc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkRzluWjJ4bFEyeGhjM011YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBiMmRuYkdWRGJHRnpjeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVbEJMRmRCUVZjN1FVRkRXQ3hKUVVGTkxGZEJRVmNzUjBGQlJ5eFZRVUZETEVWQlFXZERPMUZCUVRsQ0xIRkNRVUZwUWp0SlFVTjBReXhKUVVGTkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdTVUZEYmtRc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZOTzBsQlJYSkNMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzFGQlEzUkNMRTlCUVVFc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGQkxFdEJRVXM3TzFsQlEzSkRMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlFUdFpRVVYyUWl4clFrRkJhMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0WlFVa3pRaXhKUVVGTkxHdENRVUZyUWl4SFFVRkhMRTFCUVVFc1QwRkJUeXd3UTBGQlJTeHJRa0ZCYVVNc1EwRkJRVHRaUVVOeVJTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q08yZENRVUZGTEU5QlFVMDdXVUZETDBJc2FVSkJRV2xDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdFpRVVZ5UXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR6dG5Ra0ZEZEVJc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeExRVUZMTEU5QlFVODdiMEpCUVVVc1QwRkJUVHRuUWtGRGNFTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8xbEJRM3BDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTBvc1EwRkJReXhEUVVGRE8wbEJaa1lzUTBGbFJTeERRVU5JTEVOQlFVRTdTVUZGUkN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hqUVVGTkxFOUJRVUVzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRTlCUVU4c1NVRkJTU3hQUVVGQkxHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCZGtJc1EwRkJkVUlzUTBGQlF5eEZRVUZ3UkN4RFFVRnZSQ3hEUVVGRExFTkJRVUU3UVVGRGNrY3NRMEZCUXl4RFFVRkJPMEZCUlVRc1NVRkJUU3hyUWtGQmEwSXNSMEZCUnl4VlFVRkJMRTlCUVU4N1NVRkRhRU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3U1VGRGNrTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVVzUzBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVWNzUTBGQlF5eERRVUZCTzBGQlEzSkdMRU5CUVVNc1EwRkJRVHRCUVVWRUxFbEJRVTBzYVVKQlFXbENMRWRCUVVjc1ZVRkJRU3hQUVVGUE8wbEJReTlDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlEzUkRMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJRU3hMUVVGTExFbEJRVWtzVDBGQlFTeExRVUZMTEVOQlFVTXNaVUZCWlN4RlFVRkZMRVZCUVhaQ0xFTkJRWFZDTEVOQlFVTXNRMEZCUVR0QlFVTnlSU3hEUVVGRExFTkJRVUU3UVVGRlJDeEpRVUZOTEdOQlFXTXNSMEZCUnl4VlFVRkJMRTlCUVU4N1NVRkROVUlzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRE4wTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdTVUZGY2tNc1QwRkJUeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVRTdRVUZETTBRc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNWMEZCVnl4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW50ZXJUYXJnZXQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBob3ZlckVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpO1xuICAgIGlmICghaG92ZXJFbGVtZW50cylcbiAgICAgICAgcmV0dXJuO1xuICAgIGhvdmVyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAvLyB0b2RvXG4gICAgICAgIHZhciBpc05hdmlnYXRpb24gPSBlbGVtZW50ID09PSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbmF2YmFyIC5uYXZiYXItbWVudS1pdGVtJyk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVudGVyRXZlbnQoKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxlYXZlRXZlbnQoKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBlbnRlckV2ZW50KCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1leHBhbmRlZCcpO1xuICAgICAgICAgICAgaXNOYXZpZ2F0aW9uICYmIGJvZHkuY2xhc3NMaXN0LmFkZCgnaXMtc2hvd24nKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsZWF2ZUV2ZW50KCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgIGlzTmF2aWdhdGlvbiAmJiBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNob3duJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBlbnRlclRhcmdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpXNTBaWEpVWVhKblpYUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKbGJuUmxjbFJoY21kbGRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEZWQlFVTXNSVUZCSzBJN1VVRkJOMElzYjBKQlFXZENPMGxCUXpkQ0xFbEJRVUVzYjBKQlFVa3NRMEZCWVR0SlFVTjZRaXhKUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdTVUZEZGtRc1NVRkJTU3hEUVVGRExHRkJRV0U3VVVGQlJTeFBRVUZOTzBsQlJURkNMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTzFGQlF6TkNMRTlCUVU4N1VVRkRVQ3hKUVVGTkxGbEJRVmtzUjBGQlJ5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RFFVRkJPMUZCUlhaR0xFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGNrTXNWVUZCVlN4RlFVRkZMRU5CUVVFN1dVRkRXaXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hGUVVGRkxHTkJRVTBzVDBGQlFTeFZRVUZWTEVWQlFVVXNSVUZCV2l4RFFVRlpMRU5CUVVNc1EwRkJRVHRSUVVNMVJDeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVVkdMRk5CUVZNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVU0zUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTndReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGFFUXNRMEZCUXp0UlFVTkVMRk5CUVZNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlFUdFpRVU01UXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0WlFVTjJReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUU3VVVGRGJrUXNRMEZCUXp0SlFVTklMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1YwRkJWeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIOumrO2Mqe2GoOunge2VmOq4lFxudmFyIHRhYk1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIHRhYnMgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJdJyk7XG4gICAgICAgIHZhciB0YWJJbmRleCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcbiAgICAgICAgdmFyIHRhYkFjdGljZUJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLXRhYmxpc3QtYWN0aXZlJyk7XG4gICAgICAgIGlmICghdGFicyB8fCAhdGFiQWN0aWNlQmFyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJ1tyb2xlPXRhYl0nKSkge1xuICAgICAgICAgICAgLy8gY29uc3QgdGFyZ2V0V2lkdGggPSB0YXJnZXQuZ2V0U3R5cXFcbiAgICAgICAgICAgIHRhYkFjdGljZUJhci5zdHlsZS5sZWZ0ID0gdGFyZ2V0Lm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICB0YWJzLmZvckVhY2goZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpOyB9KTtcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT10YWJwYW5lbF0nKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgdHJ1ZSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gdGFiTWVudTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHRmlUV1Z1ZFM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJblJoWWsxbGJuVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeFRRVUZUTzBGQlExUXNTVUZCVFN4UFFVRlBMRWRCUVVjN1NVRkRaQ3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUTNaQ0xFOUJRVThzUlVGRFVDeFZRVUZCTEV0QlFVczdVVUZEU3l4SlFVRkJMSEZDUVVGTkxFTkJRV1U3VVVGRE4wSXNTVUZCVFN4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdFJRVU0zUkN4SlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkJPMUZCUTJ4RUxFbEJRVTBzV1VGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVdNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUVR0UlFVVnVSaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1R0WlFVRkZMRTlCUVUwN1VVRkZiRU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRk8xbEJRMmhETEhORFFVRnpRenRaUVVWMFF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJUU3hOUVVGTkxFTkJRVU1zVlVGQlZTeFBRVUZKTEVOQlFVRTdXVUZEYkVRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVkQlFVY3NTVUZCU1N4UFFVRkJMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RlFVRXhReXhEUVVFd1F5eERRVUZETEVOQlFVRTdXVUZETDBRc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVFN1dVRkZOVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4UFFVRlBPMmRDUVVNNVJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdG5Ra0ZETTBNc1NVRkJTU3hSUVVGUkxFdEJRVXNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSVHR2UWtGRGJrUXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhoUVVGaExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVRTdhVUpCUXpsRE8xbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdVMEZEU0R0SlFVTklMRU5CUVVNc1JVRkRSQ3hKUVVGSkxFTkJRMHdzUTBGQlFUdEJRVU5JTEVOQlFVTXNRMEZCUVR0QlFVVkVMR3RDUVVGbExFOUJRVThzUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtb2RhbCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0cmlnZ2VyID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlcik7XG4gICAgaWYgKCFtb2RhbHMpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgcGFnZVkgPSAwO1xuICAgIG1vZGFscy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RhbCkge1xuICAgICAgICByZXR1cm4gbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgbmV4dEVsZW1lbnRTaWJsaW5nID0gbW9kYWwubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgdmFyIGNsb3NlVHJpZ2dlciA9IChfYSA9IG5leHRFbGVtZW50U2libGluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3IoJy5qcy1tb2RhbC1jbG9zZScpO1xuICAgICAgICAgICAgcGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICBzaG93TW9kYWwobmV4dEVsZW1lbnRTaWJsaW5nKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xvc2VNb2RhbChuZXh0RWxlbWVudFNpYmxpbmcpOyB9KTtcbiAgICAgICAgICAgIChfYiA9IGNsb3NlVHJpZ2dlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xvc2VNb2RhbChuZXh0RWxlbWVudFNpYmxpbmcpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIG1vZGFsRGlhbG9nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsLWRpYWxvZycpO1xuICAgIG1vZGFsRGlhbG9nLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyB9KTsgfSk7XG4gICAgZnVuY3Rpb24gc2hvd01vZGFsKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBlbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xhc3NMaXN0LmFkZCgnaXMtdmlzaWJsZScpO1xuICAgICAgICBsb2NrQm9keSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZU1vZGFsKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGlzT3BlbmVkID0gKF9hID0gZWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5jb250YWlucygnaXMtdmlzaWJsZScpO1xuICAgICAgICBpZiAoIWlzT3BlbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAoX2IgPSBlbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuICAgICAgICB1bmxvY2tCb2R5KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvY2tCb2R5KCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2JvZHktbG9jaycpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IFwiLVwiICsgcGFnZVkgKyBcInB4XCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVubG9ja0JvZHkoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYm9keS1sb2NrJyk7XG4gICAgICAgIHNldFNjcm9sbFkocGFnZVkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRTY3JvbGxZKHBhZ2VZKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBwYWdlWSk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1vZGFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYlc5a1lXd3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKdGIyUmhiQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFWRkJMRWxCUVUwc1MwRkJTeXhIUVVGSExGVkJRVU1zUlVGQlowTTdVVUZCT1VJc2NVSkJRV2xDTzBsQlEyaERMRWxCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdEpRVU5xUkN4SlFVRkpMRU5CUVVNc1RVRkJUVHRSUVVGRkxFOUJRVTA3U1VGRmJrSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJSV0lzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRXRCUVVzN1VVRkRiRUlzVDBGQlFTeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3pzN1dVRkRia01zUzBGQlN5eERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkJPMWxCUTNaQ0xFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUVR0WlFVVmtMRWxCUVVFc05rTkJRV3RDTEVOQlFWVTdXVUZEY0VNc1NVRkJUU3haUVVGWkxGTkJRVWNzYTBKQlFXdENMREJEUVVGRkxHRkJRV0VzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGQk8xbEJRM3BGTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGQk8xbEJSVEZDTEZOQlFWTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZCTzFsQlJUZENMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1kwRkJUU3hQUVVGQkxGVkJRVlVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhGUVVFNVFpeERRVUU0UWl4RFFVRkRMRU5CUVVFN1dVRkRlRVVzVFVGQlFTeFpRVUZaTERCRFFVRkZMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4alFVRk5MRTlCUVVFc1ZVRkJWU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRVZCUVRsQ0xFTkJRVGhDTEVWQlFVTTdVVUZETDBVc1EwRkJReXhEUVVGRE8wbEJXa1lzUTBGWlJTeERRVU5JTEVOQlFVRTdTVUZGUkN4SlFVRk5MRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVUU3U1VGRE9VUXNWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFOUJRVThzU1VGQlNTeFBRVUZCTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCUVN4TFFVRkxMRWxCUVVrc1QwRkJRU3hMUVVGTExFTkJRVU1zWlVGQlpTeEZRVUZGTEVWQlFYWkNMRU5CUVhWQ0xFTkJRVU1zUlVGQmJrVXNRMEZCYlVVc1EwRkJReXhEUVVGQk8wbEJSVzVITEZOQlFWTXNVMEZCVXl4RFFVRkRMRTlCUVU4N08xRkJRM2hDTEUxQlFVRXNUMEZCVHl3d1EwRkJSU3hUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NSVUZCUXp0UlFVTndReXhSUVVGUkxFVkJRVVVzUTBGQlFUdEpRVU5hTEVOQlFVTTdTVUZEUkN4VFFVRlRMRlZCUVZVc1EwRkJReXhQUVVGUE96dFJRVU42UWl4SlFVRk5MRkZCUVZFc1UwRkJSeXhQUVVGUExEQkRRVUZGTEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VVVGRE1VUXNTVUZCU1N4RFFVRkRMRkZCUVZFN1dVRkJSU3hQUVVGTk8xRkJSWEpDTEUxQlFVRXNUMEZCVHl3d1EwRkJSU3hUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NSVUZCUXp0UlFVTjJReXhWUVVGVkxFVkJRVVVzUTBGQlFUdEpRVU5rTEVOQlFVTTdTVUZGUkN4VFFVRlRMRkZCUVZFN1VVRkRaaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRGVFTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVa3NTMEZCU3l4UFFVRkpMRU5CUVVFN1NVRkRla01zUTBGQlF6dEpRVVZFTEZOQlFWTXNWVUZCVlR0UlFVTnFRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3VVVGRE0wTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wbEJRMjVDTEVOQlFVTTdTVUZGUkN4VFFVRlRMRlZCUVZVc1EwRkJReXhMUVVGTE8xRkJRM1pDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZCTzBsQlF6TkNMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGRlJDeHJRa0ZCWlN4TFFVRkxMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0b1RvcCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0YXJnZXQgPSBfYS5zZWxlY3RvcjtcbiAgICB2YXIgdG9Ub3BFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICAgIGlmICghdG9Ub3BFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdG9Ub3BFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSB0b1RvcEVsZW1lbnQubmFtZSB8fCB0b1RvcEVsZW1lbnQuaHJlZjtcbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB0b1RvcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHOVViM0F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SjBiMVJ2Y0M1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVVNc1JVRkJLMEk3VVVGQk4wSXNiMEpCUVdkQ08wbEJReTlDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRV3RDTEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUTNCRkxFbEJRVWtzUTBGQlF5eFpRVUZaTzFGQlFVVXNUMEZCVFR0SlFVVjZRaXhaUVVGWkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVUVzUzBGQlN6dFJRVU14UXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVUU3VVVGRGRFSXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZGY2tJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrc1NVRkJTU3haUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZCTzBsQlF5OUVMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZCTzBGQlJVUXNhMEpCUVdVc1MwRkJTeXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzdGlja3lFbGVtZW50ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRhcmdldEVsZW1lbnQgPSBfYS50YXJnZXRFbGVtZW50LCBhZGRDbGFzcyA9IF9hLmFkZENsYXNzO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgc3RpY2t5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWxlbWVudCk7XG4gICAgaWYgKCFzdGlja3lFbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIHN0aWNreUVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB2YXIgaXNTY3JvbGxpbmc7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNTY3JvbGxpbmcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlzU2Nyb2xsaW5nKTtcbiAgICAgICAgaXNTY3JvbGxpbmcgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0aWNreUVsZW1lbnRIZWlnaHQgPSBzdGlja3lFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coc3RpY2t5RWxlbWVudEhlaWdodCk7IC8vIDEzM1xuICAgICAgICBpc1Njcm9sbGluZyAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaXNTY3JvbGxpbmcpO1xuICAgICAgICBpc1Njcm9sbGluZyA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHN0aWNreUVsZW1lbnQub2Zmc2V0VG9wICsgc3RpY2t5RWxlbWVudEhlaWdodCkge1xuICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoYWRkQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4vLyB2YXIgaXNTY3JvbGxpbmc7XG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGV2ZW50KSA9PiB7XG4vLyBcdGlmKGlzU2Nyb2xsaW5nKSB3aW5kb3cuY2xlYXJUaW1lb3V0KGlzU2Nyb2xsaW5nKTtcbi8vIFx0aXNTY3JvbGxpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4vLyBcdFx0c3RpY2t5VG9nZ2xlKCk7XG4vLyBcdH0sIDUwKTtcbi8vIH0pO1xuLy8gZXhwb3J0IGNvbnN0IHN0aWNreUhlYWRlckVsZW1lbnQgPSAodGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MpID0+IHtcbi8vIFx0c3RpY2t5RWxlbWVudCh7dGFyZ2V0RWxlbWVudCwgYWRkQ2xhc3MsIHRydWV9KTtcbi8vIH07XG4vLyBjb25zdCBzdGlja3lIZWFkZXIgPSAoKSA9PiB7XG4vLyBcdGNvbnN0IGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XG4vLyBcdGxldCBsYXN0U2Nyb2xsVG9wID0gMDtcbi8vIFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcbi8vIFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaGFzU2Nyb2xsZWQpO1xuLy8gXHR9KTtcbi8vIFx0ZnVuY3Rpb24gaGFzU2Nyb2xsZWQoKSB7XG4vLyBcdFx0aWYod2luZG93LnBhZ2VZT2Zmc2V0ID4gbGFzdFNjcm9sbFRvcCkge1xuLy8gXHRcdFx0aGVhZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduYXYtdXAnKTtcbi8vIFx0XHR9IGVsc2Uge1xuLy8gXHRcdFx0aGVhZGVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduYXYtdXAnKTtcbi8vIFx0XHR9XG4vLyBcdFx0bGFzdFNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbi8vIFx0fVxuLy8gfTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0aWNreUVsZW1lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljM1JwWTJ0NVJXeGxiV1Z1ZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbk4wYVdOcmVVVnNaVzFsYm5RdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4SlFVRk5MR0ZCUVdFc1IwRkJSeXhWUVVGRExFVkJRVEpDTzFGQlFYcENMR2REUVVGaExFVkJRVVVzYzBKQlFWRTdTVUZEZEVNc1NVRkJRU3h2UWtGQlNTeERRVUZoTzBsQlEzcENMRWxCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVFN1NVRkRNMFFzU1VGQlNTeERRVUZETEdGQlFXRTdVVUZCUlN4UFFVRk5PMGxCUlRGQ0xFbEJRVWtzYlVKQlFXMUNMRWRCUVVjc1lVRkJZU3hEUVVGRExGbEJRVmtzUTBGQlFUdEpRVU53UkN4SlFVRkpMRmRCUVZjc1EwRkJRVHRKUVVWbUxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGFFTXNWMEZCVnl4SlFVRkpMRTFCUVUwc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRSUVVOMlJDeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMSEZDUVVGeFFpeERRVUZETzFsQlEzcERMRzFDUVVGdFFpeEhRVUZITEdGQlFXRXNRMEZCUXl4WlFVRlpMRU5CUVVFN1VVRkRiRVFzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEU2l4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVWR0xFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGFFTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkJMRU5CUVVNc1RVRkJUVHRSUVVOMlF5eFhRVUZYTEVsQlFVa3NUVUZCVFN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMUZCUTNaRUxGZEJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03V1VGRGVrTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhIUVVGSExHRkJRV0VzUTBGQlF5eFRRVUZUTEVkQlFVY3NiVUpCUVcxQ0xFVkJRVVU3WjBKQlEzUkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMkZCUXpkQ08ybENRVUZOTzJkQ1FVTk1MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMkZCUTJoRE8xRkJRMGdzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEU2l4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xFTkJRVU1zUTBGQlFUdEJRVVZFTEcxQ1FVRnRRanRCUVVOdVFpeHBSRUZCYVVRN1FVRkRha1FzY1VSQlFYRkVPMEZCUTNKRUxIZERRVUYzUXp0QlFVTjRReXh2UWtGQmIwSTdRVUZEY0VJc1YwRkJWenRCUVVOWUxFMUJRVTA3UVVGRlRpeHZSVUZCYjBVN1FVRkRjRVVzYlVSQlFXMUVPMEZCUTI1RUxFdEJRVXM3UVVGRlRDd3JRa0ZCSzBJN1FVRkRMMElzTkVSQlFUUkVPMEZCUXpWRUxEQkNRVUV3UWp0QlFVVXhRaXcyUTBGQk5rTTdRVUZETjBNc2QwTkJRWGRETzBGQlEzaERMRTlCUVU4N1FVRkZVQ3cwUWtGQk5FSTdRVUZETlVJc05rTkJRVFpETzBGQlF6ZERMRFJEUVVFMFF6dEJRVU0xUXl4aFFVRmhPMEZCUTJJc0swTkJRU3RETzBGQlF5OURMRTFCUVUwN1FVRkRUaXgzUTBGQmQwTTdRVUZEZUVNc1MwRkJTenRCUVVOTUxFdEJRVXM3UVVGRlRDeHJRa0ZCWlN4aFFVRmhMRU5CUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBldmVudFNjcm9sbEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2Nyb2xsVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNjcm9sbC1hbmltYXRpb24nKTtcbiAgICBpZiAoIXNjcm9sbFRhcmdldClcbiAgICAgICAgcmV0dXJuO1xuICAgIHNjcm9sbFRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBpc1Njcm9sbGVkID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBpZiAoIWlzU2Nyb2xsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2Nyb2xsZWQnKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzY3JvbGxUYXJnZXQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHBhZ2VZT2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIGlzU2Nyb2xsZWQgPSBwYWdlWU9mZnNldCA+IHBhZ2VZT2Zmc2V0ICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgKyA1MDtcbiAgICAgICAgICAgIC8vIGNvbnN0IGlzU2Nyb2xsZWQgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICghaXNTY3JvbGxlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNjcm9sbGVkJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV2ZW50U2Nyb2xsQW5pbWF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJOeWIyeHNRVzVwYldGMGFXOXVMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaWMyTnliMnhzUVc1cGJXRjBhVzl1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeHZRa0ZCYjBJc1IwRkJSenRKUVVNelFpeEpRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdEpRVU4wUlN4SlFVRkpMRU5CUVVNc1dVRkJXVHRSUVVGRkxFOUJRVTA3U1VGRmVrSXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFOUJRVTg3VVVGRE1VSXNTVUZCVFN4VlFVRlZMRWRCUVVjc1QwRkJUeXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNc1RVRkJUU3hKUVVGSkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVRTdVVUZETDBVc1NVRkJTU3hEUVVGRExGVkJRVlU3V1VGQlJTeFBRVUZOTzFGQlJYWkNMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMGxCUTNSRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlJVWXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlR0UlFVTm9ReXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNUMEZCVHp0WlFVTnNRaXhKUVVGQkxHZERRVUZYTEVOQlFWYzdXVUZET1VJc1NVRkJUU3hWUVVGVkxFZEJRVWNzVjBGQlZ5eEhRVUZITEZkQlFWY3NSMEZCUnl4UFFVRlBMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdXVUZETlVjc2JVWkJRVzFHTzFsQlEyNUdMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRaUVVOMlJTeEpRVUZKTEVOQlFVTXNWVUZCVlR0blFrRkJSU3hQUVVGTk8xbEJSWFpDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzFGQlEzUkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRMG9zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkRMRU5CUVVFN1FVRkZSQ3hyUWtGQlpTeHZRa0ZCYjBJc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2xvc2UgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX2Euc2VsZWN0b3I7XG4gICAgdmFyIGNsb3NlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldCk7XG4gICAgaWYgKCFjbG9zZUVsZW1lbnRzKVxuICAgICAgICByZXR1cm47XG4gICAgY2xvc2VFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAvLyBpc0hpZGRlbiA9IEhUTUxFbGVtZW50LmhpZGRlblxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyeHZjMlV1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SmpiRzl6WlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVWxCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVVNc1JVRkJLMEk3VVVGQk4wSXNiMEpCUVdkQ08wbEJReTlDTEVsQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCYTBJc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRGVFVXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1VVRkJSU3hQUVVGTk8wbEJSVEZDTEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hQUVVGUE8xRkJRek5DTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTnNRaXhQUVVGUExFTkJRVU1zVlVGQlZ5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVFN1dVRkRMME1zWjBOQlFXZERPMUZCUTJ4RExFTkJRVU1zUTBGQlF6dEpRVWhHTEVOQlIwVXNRMEZEU0N4RFFVRkJPMEZCUTBnc1EwRkJReXhEUVVGQk8wRkJSVVFzYTBKQlFXVXNTMEZCU3l4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY3VzdG9tQ3Vyc29yID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGluZy1vYmplY3QnKTtcbiAgICBpZiAoIWN1cnNvcilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBob3ZlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24sIGEnKTtcbiAgICBpZiAoIWhvdmVyRWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIHNldEN1cnNvcihldmVudCwgeyBjdXJzb3JFbGVtZW50OiBjdXJzb3IgfSk7IH0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gc2V0Q3Vyc29yKGV2ZW50LCB7IGN1cnNvckVsZW1lbnQ6IGN1cnNvciB9KTsgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRSaXBwbGUoeyBjdXJzb3JFbGVtZW50OiBjdXJzb3IgfSk7IH0pO1xuICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdpcy1kZWZhdWx0Jyk7XG4gICAgaG92ZXJFbGVtZW50LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWNsaWNrYWJsZScpO1xuICAgIH0pOyB9KTtcbiAgICBob3ZlckVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZCgnaXMtY2xpY2thYmxlJyk7XG4gICAgfSk7IH0pO1xuICAgIGZ1bmN0aW9uIHNldEN1cnNvcihldmVudCwgX2EpIHtcbiAgICAgICAgdmFyIGN1cnNvciA9IF9hLmN1cnNvckVsZW1lbnQ7XG4gICAgICAgIHZhciB4ID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgdmFyIHkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICBjdXJzb3Iuc3R5bGUubGVmdCA9IHggKyBcInB4XCI7XG4gICAgICAgIGN1cnNvci5zdHlsZS50b3AgPSB5ICsgXCJweFwiO1xuICAgICAgICAvLyBjdXJzb3Iuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3ggLSAxNX1weCwgJHt5IC0gMTV9cHhgO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRSaXBwbGUoX2EpIHtcbiAgICAgICAgdmFyIGN1cnNvciA9IF9hLmN1cnNvckVsZW1lbnQ7XG4gICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdleHBhbmQnKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kJyk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGN1c3RvbUN1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkzVnpkRzl0UTNWeWMyOXlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVkzVnpkRzl0UTNWeWMyOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFN4WlFVRlpMRWRCUVVjN1NVRkRia0lzU1VGQlRTeE5RVUZOTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJZeXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMGxCUTNSRkxFbEJRVWNzUTBGQlF5eE5RVUZOTzFGQlFVVXNUMEZCVHp0SlFVVndRaXhKUVVGTkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRV01zVjBGQlZ5eERRVUZETEVOQlFVTTdTVUZEZWtVc1NVRkJSeXhEUVVGRExGbEJRVms3VVVGQlJTeFBRVUZQTzBsQlJYcENMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeFZRVUZCTEV0QlFVc3NTVUZCU1N4UFFVRkJMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeGhRVUZoTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJNME1zUTBGQk1rTXNRMEZCUXl4RFFVRkRPMGxCUTNCSExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhYUVVGWExFVkJRVVVzVlVGQlFTeExRVUZMTEVsQlFVa3NUMEZCUVN4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzWVVGQllTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVRORExFTkJRVEpETEVOQlFVTXNRMEZCUXp0SlFVTTNSaXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxHTkJRVTBzVDBGQlFTeFRRVUZUTEVOQlFVTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQmNFTXNRMEZCYjBNc1EwRkJReXhEUVVGRE8wbEJSUzlGTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzBsQlEyNURMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeFBRVUZQTEVsQlFVa3NUMEZCUVN4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZPMUZCUTNSRkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wbEJRM3BETEVOQlFVTXNRMEZCUXl4RlFVWTRRaXhEUVVVNVFpeERRVUZETEVOQlFVTTdTVUZEU2l4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVDBGQlR5eEpRVUZKTEU5QlFVRXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZsQlFWa3NSVUZCUlR0UlFVTjBSU3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRKUVVOMFF5eERRVUZETEVOQlFVTXNSVUZHT0VJc1EwRkZPVUlzUTBGQlF5eERRVUZETzBsQlJVb3NVMEZCVXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVGhDTzFsQlFUVkNMSGxDUVVGeFFqdFJRVU5vUkN4SlFVRk5MRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzFGQlEzaENMRWxCUVUwc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTTdVVUZGZUVJc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVMHNRMEZCUXl4UFFVRkpMRU5CUVVNN1VVRkROMElzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVUwc1EwRkJReXhQUVVGSkxFTkJRVU03VVVGRE5VSXNhVVZCUVdsRk8wbEJRMnBGTEVOQlFVTTdTVUZGUml4VFFVRlRMRk5CUVZNc1EwRkJReXhGUVVGNVFqdFpRVUYyUWl4NVFrRkJjVUk3VVVGRGVrTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZETDBJc1ZVRkJWU3hEUVVGRE8xbEJRMVlzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRGJrTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRMVFzUTBGQlF6dEJRVU5HTEVOQlFVTXNRMEZCUXp0QlFVVkdMR3RDUVVGbExGbEJRVmtzUTBGQlF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjaGVja2JveF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NoZWNrYm94XCIpKTtcbnZhciB0ZXh0YXJlYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RleHRhcmVhXCIpKTtcbnZhciBmaWxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZmlsZVwiKSk7XG52YXIgbnVtYmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbnVtYmVyXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBjaGVja2JveDogY2hlY2tib3hfMS5kZWZhdWx0LFxuICAgIHRleHRhcmVhOiB0ZXh0YXJlYV8xLmRlZmF1bHQsXG4gICAgZmlsZTogZmlsZV8xLmRlZmF1bHQsXG4gICAgbnVtYmVyOiBudW1iZXJfMS5kZWZhdWx0LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQkxIZEVRVUZwUXp0QlFVTnFReXgzUkVGQmFVTTdRVUZEYWtNc1owUkJRWGxDTzBGQlEzcENMRzlFUVVFMlFqdEJRVVUzUWl4clFrRkJaVHRKUVVOaUxGRkJRVkVzYjBKQlFVRTdTVUZEVWl4UlFVRlJMRzlDUVVGQk8wbEJRMUlzU1VGQlNTeG5Ra0ZCUVR0SlFVTktMRTFCUVUwc2EwSkJRVUU3UTBGRFVDeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNoZWNrYm94ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGNoZWNrQWxsU2VsZWN0b3IgPSBfYS5jaGVja0FsbFNlbGVjdG9yLCBjaGVja1NlbGVjdG9yID0gX2EuY2hlY2tTZWxlY3RvcjtcbiAgICByZXR1cm4gKHtcbiAgICAgICAgY2hlY2tBbGw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2hlY2tBbGxTZWxlY3RvciksXG4gICAgICAgIGNoZWNrSXRlbXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hlY2tTZWxlY3RvciksXG4gICAgICAgIHNldEV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWxsIHx8ICF0aGlzLmNoZWNrSXRlbXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jaGVja0FsbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZXRDaGVja0FsbChfdGhpcy5jaGVja0l0ZW1zLCBfdGhpcy5jaGVja0FsbCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5jaGVja0l0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGNoZWNrSXRlbSkge1xuICAgICAgICAgICAgICAgIGNoZWNrSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZXRDaGVja0VhY2goX3RoaXMuY2hlY2tJdGVtcywgX3RoaXMuY2hlY2tBbGwpOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRDaGVja0VhY2g6IGZ1bmN0aW9uIChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xuICAgICAgICAgICAgdmFyIGNoZWNrcyA9IEFycmF5LmZyb20oY2hlY2tJdGVtcyk7XG4gICAgICAgICAgICB2YXIgaXNDaGVja2VkRXZlcnkgPSBjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrSXRlbSkgeyByZXR1cm4gY2hlY2tJdGVtLmNoZWNrZWQ7IH0pO1xuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZFNvbWUgPSBjaGVja3Muc29tZShmdW5jdGlvbiAoY2hlY2tJdGVtKSB7IHJldHVybiBjaGVja0l0ZW0uY2hlY2tlZDsgfSk7XG4gICAgICAgICAgICBjaGVja0FsbC5jaGVja2VkID0gaXNDaGVja2VkRXZlcnk7XG4gICAgICAgICAgICBjaGVja0FsbC5pbmRldGVybWluYXRlID0gaXNDaGVja2VkU29tZSAmJiAhaXNDaGVja2VkRXZlcnk7XG4gICAgICAgICAgICBjaGVja0FsbC5kYXRhc2V0LmluZGV0ZXJtaW5hdGUgPSBpc0NoZWNrZWRTb21lICYmICFpc0NoZWNrZWRFdmVyeTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q2hlY2tBbGw6IGZ1bmN0aW9uIChjaGVja0l0ZW1zLCBjaGVja0FsbCkge1xuICAgICAgICAgICAgY2hlY2tJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGVja0l0ZW0pIHtcbiAgICAgICAgICAgICAgICBjaGVja0l0ZW0uY2hlY2tlZCA9IGNoZWNrQWxsLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgY2hlY2tBbGwuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNoZWNrQWxsLmRhdGFzZXQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tib3g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMmhsWTJ0aWIzZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKamFHVmphMkp2ZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVXRCTEVsQlFVMHNVVUZCVVN4SFFVRkhMRlZCUVVNc1JVRkJPRU03VVVGQk5VTXNjME5CUVdkQ0xFVkJRVVVzWjBOQlFXRTdTVUZCYTBJc1QwRkJRU3hEUVVGRE8xRkJRM0JGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RFFVRkRPMUZCUTJ4RUxGVkJRVlVzUlVGQlJTeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllTeERRVUZETzFGQlEzQkVMRkZCUVZFN1dVRkJVaXhwUWtGUFF6dFpRVTVETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdaMEpCUVVVc1QwRkJUVHRaUVVVNVF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4alFVRk5MRTlCUVVFc1MwRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQmFFUXNRMEZCWjBRc1EwRkJReXhEUVVGQk8xbEJRMmhITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVTBGQlV6dG5Ra0ZETDBJc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hqUVVGTkxFOUJRVUVzUzBGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFdEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCYWtRc1EwRkJhVVFzUTBGQlF5eERRVUZCTzFsQlF5OUdMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRMG9zUTBGQlF6dFJRVU5FTEZsQlFWa3NSVUZCV2l4VlFVRmhMRlZCUVZVc1JVRkJSU3hSUVVGUk8xbEJReTlDTEVsQlFVMHNUVUZCVFN4SFFVRjFRaXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkJPMWxCUTNwRUxFbEJRVTBzWTBGQll5eEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJRU3hUUVVGVExFbEJRVWtzVDBGQlFTeFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRnFRaXhEUVVGcFFpeERRVUZETEVOQlFVRTdXVUZEYmtVc1NVRkJUU3hoUVVGaExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkJMRk5CUVZNc1NVRkJTU3hQUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlFXcENMRU5CUVdsQ0xFTkJRVU1zUTBGQlFUdFpRVVZxUlN4UlFVRlJMRU5CUVVNc1QwRkJUeXhIUVVGSExHTkJRV01zUTBGQlFUdFpRVU5xUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hIUVVGSExHRkJRV0VzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUVR0WlFVTjZSQ3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNSMEZCUnl4aFFVRmhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVUU3VVVGRGJrVXNRMEZCUXp0UlFVTkVMRmRCUVZjc1dVRkJReXhWUVVGVkxFVkJRVVVzVVVGQlVUdFpRVU01UWl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzVTBGQlV6dG5Ra0ZETVVJc1UwRkJVeXhEUVVGRExFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkJPMmRDUVVOd1F5eFJRVUZSTEVOQlFVTXNZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJRVHRuUWtGRE9VSXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZCTzFsQlEzaERMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRMG9zUTBGQlF6dExRVU5HTEVOQlFVTTdRVUV6UW0xRkxFTkJNa0p1UlN4RFFVRkJPMEZCUlVZc2EwSkJRV1VzVVVGQlVTeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlucHV0VGV4dGFyZWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdGFnTmFtZeqzvCBub2RlTmFtZeydgCDthY3siqTtirgg64W465Oc66W8IOqwgeqwgSB1bmRlZmluZWTsmYAgI3RleHQg67CY7ZmY7ZWc64ukLlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGlzVGV4dGFyZWEgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJztcbiAgICAgICAgaWYgKCFpc1RleHRhcmVhKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgQllURV9NQVhJTVVNID0gMzA7XG4gICAgICAgIHZhciBieXRlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0ZmllbGQtYnl0ZSBiJyk7XG4gICAgICAgIGlmICghYnl0ZUVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzdHJpbmdCeXRlTGVuZ3RoID0gKChfYSA9IHRhcmdldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlLnJlcGxhY2UoL1tcXDAtXFx4N2ZdfChbMC1cXHUwN2ZmXXwoLikpL2csICckJiQxJDInKS5sZW5ndGgpIHx8IDA7IC8vIHx8IDAg7J6E7IucXG4gICAgICAgIGJ5dGVFbGVtZW50LmlubmVyVGV4dCA9IHN0cmluZ0J5dGVMZW5ndGg7XG4gICAgICAgIHZhciBpc01heGltdW0gPSBzdHJpbmdCeXRlTGVuZ3RoID4gQllURV9NQVhJTVVNO1xuICAgICAgICBpZiAoaXNNYXhpbXVtKSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXV0b0V4cGFuZCh0YXJnZXQpO1xuICAgIH0pO1xufTtcbnZhciBhdXRvRXhwYW5kID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgZmllbGQuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xuICAgIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZpZWxkKTtcbiAgICB2YXIgaGVpZ2h0ID0gZmllbGQuc2Nyb2xsSGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICBmaWVsZC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5wdXRUZXh0YXJlYTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVjRkR0Z5WldFdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUowWlhoMFlYSmxZUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVUwc1lVRkJZU3hIUVVGSE8wbEJRM0JDTEhWRVFVRjFSRHRKUVVOMlJDeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFVRXNTMEZCU3pzN1VVRkRPVUlzU1VGQlFTeHhRa0ZCVFN4RFFVRmxPMUZCUXpkQ0xFbEJRVWtzVFVGQlRUdFpRVUZGTEU5QlFVMDdVVUZGYkVJc1NVRkJUU3hWUVVGVkxFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1MwRkJTeXhWUVVGVkxFTkJRVUU3VVVGREwwUXNTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkJSU3hQUVVGTk8xRkJSWFpDTEVsQlFVMHNXVUZCV1N4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVWMlFpeEpRVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGakxHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1VVRkROVVVzU1VGQlNTeERRVUZETEZkQlFWYzdXVUZCUlN4UFFVRk5PMUZCUlhoQ0xFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1QwRkJRU3hOUVVGTkxEQkRRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc05rSkJRVFpDTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1MwRkJTU3hEUVVGRExFTkJRVUVzUTBGQlF5eFZRVUZWTzFGQlF6bEhMRmRCUVZjc1EwRkJReXhUUVVGVExFZEJRVWNzWjBKQlFXZENMRU5CUVVFN1VVRkZlRU1zU1VGQlRTeFRRVUZUTEVkQlFVY3NaMEpCUVdkQ0xFZEJRVWNzV1VGQldTeERRVUZCTzFGQlEycEVMRWxCUVVrc1UwRkJVeXhGUVVGRk8xbEJRMklzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFOQlF6bERPMkZCUVUwN1dVRkRUQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VTBGRGFrUTdVVUZGUkN4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRGNFSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhEUVVGRExFTkJRVUU3UVVGRlJDeEpRVUZOTEZWQlFWVXNSMEZCUnl4VlFVRkJMRXRCUVVzN1NVRkRkRUlzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGQk8wbEJSVGxDTEVsQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVNdlF5eEpRVUZOTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRek5HTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGTkxFMUJRVTBzVDBGQlNTeERRVUZCTzBGQlEzQkRMRU5CUVVNc1EwRkJRVHRCUVVWRUxHdENRVUZsTEdGQlFXRXNRMEZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVE9ETzog7Jes65+s67KIIOuwmOuzte2VtOyEnCDsmKzroLjsnYQg65WMIGZpbGVsaXN0IOuIhOyggeuQmOuKlOyngD9cbi8vIFRPRE86IOuPmeydvO2VnCDtjIzsnbzsnYQg7JeF66Gc65OcIO2WiOydhCDrlYwg7LK07YGsLCDsgq3soJztlojsnYQg65WMIGZpbGVMaXN07JeQ7IScIOyCreygnCwgZmlsZUlucHV0LmZpbGVz64qUIOyMk+ydtOyngCDslYrsnYwuXG52YXIgYXR0YWNoRmlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtaW5wdXQnKTtcbiAgICBpZiAoIWZpbGVJbnB1dClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIGNvbnN0IGZpbGVTdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1zdWJtaXQnKTtcbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gYXR0YWNoKGZpbGVJbnB1dCk7IH0pO1xufTtcbmZ1bmN0aW9uIGF0dGFjaChmaWxlSW5wdXQpIHtcbiAgICB2YXIgZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XG4gICAgdmFyIGF0dGFjaG1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbGUtYXR0YWNobWVudC1saXN0Jyk7XG4gICAgdmFyIGF0dGFjaG1lbnRIZWxwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmlsZS1hdHRhY2htZW50LWhlbHBlcicpO1xuICAgIGlmICghZmlsZXMgfHwgIWF0dGFjaG1lbnRMaXN0IHx8ICFhdHRhY2htZW50SGVscGVyKVxuICAgICAgICByZXR1cm47XG4gICAgYXR0YWNobWVudEhlbHBlci5zdHlsZS5kaXNwbGF5ID0gZmlsZXMubGVuZ3RoICE9PSAwID8gJ25vbmUnIDogJ2Jsb2NrJztcbiAgICBBcnJheS5mcm9tKGZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIGlmICghdmFsaWRGaWxlVHlwZShmaWxlKSlcbiAgICAgICAgICAgIHJldHVybiBhbGVydCgn7YyM7J287YOA7J6FIGpwZWcgcGpwZWcgcG5nIOykkSDtlZjrgpjqsIAg7JWE64uI7JW8ficpO1xuICAgICAgICB2YXIgZmlsZVRlbXBsYXRlID0gXCJcXG5cXHRcXHRcXHQ8YSBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW1cXFwiIGhyZWY9XFxcIlxcXCI+XFxuXFx0XFx0XFx0XFx0PGZpZ3VyZSBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0taW1hZ2VcXFwiPjxpbWcgc3JjPVwiICsgd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSkgKyBcIiBhbHQ9XCIgKyBmaWxlLm5hbWUgKyBcIj48L2ZpZ3VyZT5cXG5cXHRcXHRcXHRcXHQ8YiBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0tbmFtZVxcXCIgaHJlZj1cXFwiI1xcXCI+XCIgKyBmaWxlLm5hbWUgKyBcIjwvYj5cXG5cXHRcXHRcXHRcXHQ8c21hbGwgY2xhc3M9XFxcImZpbGUtYXR0YWNobWVudC1pdGVtLXNpemVcXFwiID5cIiArIHJldHVybkZpbGVTaXplKGZpbGUuc2l6ZSkgKyBcIjwvc21hbGw+XFxuXFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwiZmlsZS1hdHRhY2htZW50LWl0ZW0tZGVsZXRlIGpzLXJlbW92ZS10aGlzXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPjxpIGNsYXNzPVxcXCJpY29uLWNsb3NlXFxcIj48L2k+PC9idXR0b24+XFxuXFx0XFx0XFx0PC9hPlwiO1xuICAgICAgICBhdHRhY2htZW50TGlzdC5pbm5lckhUTUwgKz0gZmlsZVRlbXBsYXRlO1xuICAgICAgICAvLyBhdHRhY2htZW50TGlzdC5hcHBlbmQoZmlsZVRlbXBsYXRlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHZhbGlkRmlsZVR5cGUoZmlsZSkge1xuICAgIHZhciBmaWxlVHlwZXMgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJywgJ2ltYWdlL3BuZyddO1xuICAgIHZhciBpc1ZhbGlkID0gZmlsZVR5cGVzLmluZGV4T2YoZmlsZS50eXBlKSA+IC0xO1xuICAgIC8vIGNvbnN0IGlzVmFsaWQgPSBmaWxlVHlwZXMuaW5jbHVkZXMoZmlsZS50eXBlKTtcbiAgICBpZiAoaXNWYWxpZClcbiAgICAgICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByZXR1cm5GaWxlU2l6ZShzaXplKSB7XG4gICAgdmFyIGlzQnl0ZXMgPSBzaXplIDwgMTAyNDtcbiAgICB2YXIgaXNLaWxvQnl0ZXMgPSBzaXplID49IDEwMjQgJiYgc2l6ZSA8IDEwNDg1NzY7XG4gICAgaWYgKGlzQnl0ZXMpXG4gICAgICAgIHJldHVybiBzaXplICsgXCJieXRlc1wiO1xuICAgIGVsc2UgaWYgKGlzS2lsb0J5dGVzKVxuICAgICAgICByZXR1cm4gKHNpemUgLyAxMDI0KS50b0ZpeGVkKDIpICsgXCJLQlwiO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIChzaXplIC8gMTA0ODU3NikudG9GaXhlZCgyKSArIFwiTUJcIjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGF0dGFjaEZpbGU7XG4vLyBmaWxlU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuLy8gXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gXHRmaWxlTGlzdC5mb3JFYWNoKGZpbGUgPT4ge1xuLy8gXHRcdHNlbmRGaWxlKGZpbGUpO1xuLy8gXHR9KTtcbi8vIH0pO1xuLy8gZnVuY3Rpb24gdmFsaWRGaWxlU2l6ZShmaWxlKSB7XG4vLyBcdGF0dGFjaGVkZmlsZXMgPSBmaWxlLmZpbGVzO1xuLy8gXHRpZihhdHRhY2hlZGZpbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuLy8gXHRpZihhdHRhY2hlZGZpbGVzWzBdLnNpemUgPiA3NSAqIDEwMjQpIHtcbi8vIFx0XHRmaWxlSW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1RoZSBzZWxlY3RlZCBmaWxlIG11c3Qgbm90IGJlIGxhcmdlciB0aGFuIDc1IGtCJyk7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyBcdGZpbGVJbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4vLyB9XG4vLyBmdW5jdGlvbiBzZW5kRmlsZShmaWxlKSB7XG4vLyBcdGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4vLyBcdGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbi8vIFx0Zm9ybURhdGEuc2V0KCdmaWxlJywgZmlsZSk7XG4vLyBcdHJlcXVlc3Qub3BlbigncG9zdCcsICcnKTtcbi8vIFx0cmVxdWVzdC5zZW5kKGZvcm1EYXRhKTtcbi8vIH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVptbHNaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkltWnBiR1V1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3gxUTBGQmRVTTdRVUZEZGtNc05FVkJRVFJGTzBGQlF6VkZMRWxCUVUwc1ZVRkJWU3hIUVVGSE8wbEJRMnBDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVzFDTEdkQ1FVRm5RaXhEUVVGRExFTkJRVUU3U1VGRE5VVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1VVRkJSU3hQUVVGTk8wbEJRM1JDTEdkRlFVRm5SVHRKUVVOb1JTeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEdOQlFVMHNUMEZCUVN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRV3BDTEVOQlFXbENMRU5CUVVNc1EwRkJRVHRCUVVNdlJDeERRVUZETEVOQlFVRTdRVUZGUkN4VFFVRlRMRTFCUVUwc1EwRkJReXhUUVVFeVFqdEpRVU5xUXl4SlFVRkJMSFZDUVVGTExFTkJRV003U1VGRE0wSXNTVUZCVFN4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQll5d3dRa0ZCTUVJc1EwRkJReXhEUVVGQk8wbEJRM1JHTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCWXl3MFFrRkJORUlzUTBGQlF5eERRVUZCTzBsQlF6RkdMRWxCUVVrc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eGpRVUZqTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VVVGQlJTeFBRVUZOTzBsQlJURkVMR2RDUVVGblFpeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZCTzBsQlJYUkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTVHRSUVVNMVFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETEdkRFFVRm5ReXhEUVVGRExFTkJRVUU3VVVGRmVFVXNTVUZCVFN4WlFVRlpMRWRCUVVjc2VVaEJSV2xETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZSTEVsQlFVa3NRMEZCUXl4SlFVRkpMRGhGUVVOMlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4clJVRkRZaXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4eFNrRkZha1VzUTBGQlFUdFJRVVZLTEdOQlFXTXNRMEZCUXl4VFFVRlRMRWxCUVVrc1dVRkJXU3hEUVVGQk8xRkJRM2hETEhWRFFVRjFRenRKUVVONlF5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExHRkJRV0VzUTBGQlF5eEpRVUZKTzBsQlEzcENMRWxCUVUwc1UwRkJVeXhIUVVGSExFTkJRVU1zV1VGQldTeEZRVUZGTEZkQlFWY3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRVHRKUVVNeFJDeEpRVUZOTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOcVJDeHBSRUZCYVVRN1NVRkZha1FzU1VGQlNTeFBRVUZQTzFGQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVFN1FVRkRNVUlzUTBGQlF6dEJRVVZFTEZOQlFWTXNZMEZCWXl4RFFVRkRMRWxCUVVrN1NVRkRNVUlzU1VGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRVHRKUVVNelFpeEpRVUZOTEZkQlFWY3NSMEZCUnl4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVRTdTVUZGYkVRc1NVRkJTU3hQUVVGUE8xRkJRVVVzVDBGQlZTeEpRVUZKTEZWQlFVOHNRMEZCUVR0VFFVTTNRaXhKUVVGSkxGZEJRVmM3VVVGQlJTeFBRVUZWTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU1N4RFFVRkJPenRSUVVOMlJDeFBRVUZWTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU1N4RFFVRkJPMEZCUTJoRUxFTkJRVU03UVVGRlJDeHJRa0ZCWlN4VlFVRlZMRU5CUVVFN1FVRkZla0lzY1VSQlFYRkVPMEZCUTNKRUxESkNRVUV5UWp0QlFVTXpRaXc0UWtGQk9FSTdRVUZET1VJc2IwSkJRVzlDTzBGQlEzQkNMRTlCUVU4N1FVRkRVQ3hOUVVGTk8wRkJSVTRzYVVOQlFXbERPMEZCUTJwRExDdENRVUVyUWp0QlFVTXZRaXd3UTBGQk1FTTdRVUZGTVVNc01rTkJRVEpETzBGQlF6TkRMRzlHUVVGdlJqdEJRVU53Uml4WlFVRlpPMEZCUTFvc1MwRkJTenRCUVVOTUxHOURRVUZ2UXp0QlFVTndReXhKUVVGSk8wRkJSVW9zTkVKQlFUUkNPMEZCUXpWQ0xHOURRVUZ2UXp0QlFVTndReXg1UTBGQmVVTTdRVUZGZWtNc0swSkJRU3RDTzBGQlF5OUNMRFpDUVVFMlFqdEJRVU0zUWl3eVFrRkJNa0k3UVVGRE0wSXNTVUZCU1NKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlucHV0TnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXlkb3duOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleWRvd24gLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzOiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2tleXByZXNzIC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXl1cDogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdrZXl1cCAtIGtleWNvZGU6ICcsIGV2ZW50LmtleUNvZGUpO1xuICAgIC8vIH0pO1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2NoYW5nZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyBcdGNvbnNvbGUubG9nKCdjaGFuZ2UgLSBrZXljb2RlOiAnLCBldmVudC5rZXlDb2RlKTtcbiAgICAvLyB9KTtcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2lucHV0OiAnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIC8vIFx0Y29uc29sZS5sb2coJ2lucHV0IC0ga2V5Y29kZTogJywgZXZlbnQua2V5Q29kZSk7XG4gICAgLy8gfSk7XG4gICAgLy8g67Cp7Zal7YKk66GcIOyhsOygiO2VoCDrlYwgbWluIG1heCDsobDqsbTsl5Ag6rG466aw64ukLlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIGlzTnVtYmVySW5wdXQgPSB0YXJnZXQuY2xvc2VzdCgnLmpzLW51bWJlci1pbnB1dCcpO1xuICAgICAgICBpZiAoIWlzTnVtYmVySW5wdXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgc2V0TGltaXROdW1iZXIpO1xuICAgICAgICBzZXRJbnB1dE9ubHlOdW1iZXJzKCk7XG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0T25seU51bWJlcnMoKSB7XG4gICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgICAgICAgICB2YXIga2V5Q29kZXMgPSBbNjksIDE4OSwgMTg3LCAxOTBdO1xuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBrZXlDb2Rlcy5pbmNsdWRlcyhrZXlDb2RlKTtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKVxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyB0YXJnZXQudmFsdWUubGVuZ3RoID09PSAwICYmIGtleUNvZGUgPT09IDQ4ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID49IDQ4IHx8IGtleUNvZGUgPD0gNTcgfHwgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDY5ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBrZXlDb2RlID09PSAxODkgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGtleUNvZGUgPT09IDE4NyAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8ga2V5Q29kZSA9PT0gMTkwICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0TGltaXROdW1iZXIoKSB7XG4gICAgICAgICAgICB2YXIgTUFYSU1VTSA9IDMwMDtcbiAgICAgICAgICAgIHZhciBNSU5JTVVOID0gMDtcbiAgICAgICAgICAgIHZhciBpc0ZpcnN0UGxhY2VkWmVybyA9IC8oXjArKS8udGVzdCh0YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgdmFyIGlzTWF4aW11bSA9IE51bWJlcih0YXJnZXQudmFsdWUpID49IE1BWElNVU07XG4gICAgICAgICAgICB2YXIgaXNMZW5ndGggPSB0YXJnZXQudmFsdWUubGVuZ3RoID4gTUlOSU1VTjtcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0UGxhY2VkWmVybylcbiAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSBNSU5JTVVOO1xuICAgICAgICAgICAgaWYgKGlzTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IHRhcmdldC52YWx1ZS5zbGljZSgwLCAzKTtcbiAgICAgICAgICAgIGlmIChpc01heGltdW0pXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gTUFYSU1VTTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlucHV0TnVtYmVyO1xuLy8gZXhwb3J0IGNvbnN0IGlucHV0VmFyaWF0aW9uID0gKCkgPT4ge1xuLy8gXHRjb25zdCB2YXJpYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uJyk7XG4vLyBcdGNvbnN0IGlucHV0ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5wdXQnKTtcbi8vIFx0Y29uc3QgZGVjcmVtZW50ID0gdmFyaWF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50Jyk7XG4vLyBcdGNvbnN0IGluY3JlbWVudCA9IHZhcmlhdGlvbi5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWluY3JlbWVudCcpO1xuLy8gXHRsZXQgdmFsdWUgPSBpbnB1dC52YWx1ZTtcbi8vIFx0Y29uc3QgTUlOX1ZBTFVFID0gMDtcbi8vIFx0Y29uc3QgTUFYX1ZBTFVFID0gMTA7XG4vLyBcdGxldFx0aXNNaW5pbXVuO1xuLy8gXHRsZXQgaXNNYXhpbXVtO1xuLy8gXHQvLyBjb25zdFx0aXNNaW5pbXVuID0gTnVtYmVyKHZhbHVlKSA8PSBNSU5fVkFMVUU7XG4vLyBcdC8vIGNvbnN0IGlzTWF4aW11bSA9IE51bWJlcih2YWx1ZSkgPj0gTUFYX1ZBTFVFO1xuLy8gXHQvLyBpZihpc01pbmltdW4pIHNldERpc2FibGVEZWNyZW1lbnQoKTtcbi8vIFx0Ly8gaWYoaXNNYXhpbXVtKSBzZXREaXNhYmxlSWVjcmVtZW50KCk7XG4vLyBcdGRlY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0XHRpZihpc01pbmltdW4pIHtcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdFx0cmV0dXJuO1xuLy8gXHRcdH1cbi8vIFx0XHRpZighaXNNYXhpbXVtKSB7XG4vLyBcdFx0XHRpbmNyZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHR9XG4vLyBcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpIC0gMTtcbi8vIFx0fSk7XG4vLyBcdGluY3JlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbi8vIFx0XHRpc01pbmltdW4gPSBOdW1iZXIodmFsdWUpIDw9IE1JTl9WQUxVRTtcbi8vIFx0XHRpc01heGltdW0gPSBOdW1iZXIodmFsdWUpID49IE1BWF9WQUxVRTtcbi8vIFx0XHRjb25zb2xlLmxvZyhpc01pbmltdW4sIGlzTWF4aW11bSwgdmFsdWUpO1xuLy8gXHRcdGlmKGlzTWF4aW11bSkge1xuLy8gXHRcdFx0aW5jcmVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRpc2FibGVkJyk7XG4vLyBcdFx0XHRyZXR1cm47XG4vLyBcdFx0fVxuLy8gXHRcdGlmKCFpc01pbmltdW4pIHtcbi8vIFx0XHRcdGRlY3JlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xuLy8gXHRcdH1cbi8vIFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSkgKyAxO1xuLy8gXHR9KTtcbi8vIFx0ZnVuY3Rpb24gc2V0RGlzYWJsZURlY3JlbWVudCgpIHtcbi8vIFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHRyZXR1cm47XG4vLyBcdH1cbi8vIFx0ZnVuY3Rpb24gc2V0RGlzYWJsZUllY3JlbWVudCgpIHtcbi8vIFx0XHRkZWNyZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbi8vIFx0XHRyZXR1cm47XG4vLyBcdH1cbi8vIH07XG4vLyB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiB2YWx1ZTtcbi8vIHZhbHVlIDwgMSA/IHZhbHVlID0gMSA6ICcnO1xuLy8gdmFsdWUtLTtcbi8vIHBhcnNlSW50IHZzIE51bWJlclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIHZhciBNSU5fVkFMVUUgPSAwO1xuICAgIHZhciBNQVhfVkFMVUUgPSAxMDtcbiAgICB2YXIgdGFyZ2V0SW5wdXQ7XG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuanMtdmFyaWF0aW9uLWRlY3JlbWVudCcpKSB7XG4gICAgICAgIHRhcmdldElucHV0ID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbnB1dCcpO1xuICAgICAgICBpZiAodGFyZ2V0SW5wdXQudmFsdWUgPD0gTUlOX1ZBTFVFKSB7XG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIC8vIHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24taW5jcmVtZW50JykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKVxuICAgICAgICAgICAgLy8gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1pbmNyZW1lbnQnKS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAtLXRhcmdldElucHV0LnZhbHVlO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5qcy12YXJpYXRpb24taW5jcmVtZW50JykpIHtcbiAgICAgICAgdGFyZ2V0SW5wdXQgPSB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtdmFyaWF0aW9uLWlucHV0Jyk7XG4gICAgICAgIGlmICh0YXJnZXRJbnB1dC52YWx1ZSA+PSBNQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIC8vIHRhcmdldC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy12YXJpYXRpb24tZGVjcmVtZW50JykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZGlzYWJsZWQnKVxuICAgICAgICAgICAgLy8gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLXZhcmlhdGlvbi1kZWNyZW1lbnQnKS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICArK3RhcmdldElucHV0LnZhbHVlO1xuICAgIH1cbn0pO1xuLy8gZnVuY3Rpb24gc2V0U3RyaW5nQnl0ZXMoKSB7fVxuLy8gZXhwb3J0IGNvbnN0IGlucHV0ID0ge1xuLy8gXHR0ZXh0YXJlYTogaW5wdXRUZXh0YXJlYSgpLFxuLy8gXHRudW1iZXI6IGlucHV0TnVtYmVyKClcbi8vIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liblZ0WW1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYm5WdFltVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFN4WFFVRlhMRWRCUVVjN1NVRkRiRUlzYjBSQlFXOUVPMGxCUTNCRUxHbEVRVUZwUkR0SlFVTnFSQ3h6UkVGQmMwUTdTVUZEZEVRc1RVRkJUVHRKUVVOT0xIRkVRVUZ4UkR0SlFVTnlSQ3hyUkVGQmEwUTdTVUZEYkVRc2RVUkJRWFZFTzBsQlEzWkVMRTFCUVUwN1NVRkRUaXhyUkVGQmEwUTdTVUZEYkVRc0swTkJRU3RETzBsQlF5OURMRzlFUVVGdlJEdEpRVU53UkN4TlFVRk5PMGxCUTA0c2JVUkJRVzFFTzBsQlEyNUVMR2RFUVVGblJEdEpRVU5vUkN4eFJFRkJjVVE3U1VGRGNrUXNUVUZCVFR0SlFVTk9MR3RFUVVGclJEdEpRVU5zUkN3clEwRkJLME03U1VGREwwTXNiMFJCUVc5RU8wbEJRM0JFTEUxQlFVMDdTVUZGVGl3NFFrRkJPRUk3U1VGRE9VSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4VlFVRkJMRXRCUVVzN1VVRkRhRU1zU1VGQlFTeHhRa0ZCVFN4RFFVRmxPMUZCUlRkQ0xFbEJRVTBzWVVGQllTeEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0UlFVTjRSQ3hKUVVGSkxFTkJRVU1zWVVGQllUdFpRVUZGTEU5QlFVMDdVVUZGTVVJc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlFUdFJRVU5zUkN4dFFrRkJiVUlzUlVGQlJTeERRVUZCTzFGQlJYSkNMRk5CUVZNc2JVSkJRVzFDTzFsQlEyeENMRWxCUVVFc2RVSkJRVThzUTBGQlZUdFpRVU42UWl4SlFVRk5MRkZCUVZFc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGQk8xbEJRM0JETEVsQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdXVUZETVVNc1NVRkJTU3hQUVVGUE8yZENRVUZGTEV0QlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRVHRaUVVOdVF5eDVSVUZCZVVVN1dVRkRla1VzTkVSQlFUUkVPMWxCUXpWRUxEUkRRVUUwUXp0WlFVTTFReXcyUTBGQk5rTTdXVUZETjBNc05rTkJRVFpETzFsQlF6ZERMRFpEUVVFMlF6dFJRVU12UXl4RFFVRkRPMUZCUTBRc1UwRkJVeXhqUVVGak8xbEJRM0pDTEVsQlFVMHNUMEZCVHl4SFFVRkhMRWRCUVVjc1EwRkJRVHRaUVVOdVFpeEpRVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVFN1dVRkRha0lzU1VGQlRTeHBRa0ZCYVVJc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRaUVVOd1JDeEpRVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEU5QlFVOHNRMEZCUVR0WlFVTnFSQ3hKUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVUU3V1VGRk9VTXNTVUZCU1N4cFFrRkJhVUk3WjBKQlFVVXNUVUZCVFN4RFFVRkRMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVUU3V1VGRE4wTXNTVUZCU1N4UlFVRlJPMmRDUVVGRkxFMUJRVTBzUTBGQlF5eExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUTNKRUxFbEJRVWtzVTBGQlV6dG5Ra0ZCUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlFUdFJRVU4yUXl4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeERRVUZETEVOQlFVRTdRVUZGUkN4clFrRkJaU3hYUVVGWExFTkJRVUU3UVVGRk1VSXNkME5CUVhkRE8wRkJRM2hETERoRVFVRTRSRHRCUVVNNVJDeHBSVUZCYVVVN1FVRkRha1VzZVVWQlFYbEZPMEZCUTNwRkxIbEZRVUY1UlR0QlFVVjZSU3cwUWtGQk5FSTdRVUZETlVJc2QwSkJRWGRDTzBGQlEzaENMSGxDUVVGNVFqdEJRVU42UWl4clFrRkJhMEk3UVVGRGJFSXNhMEpCUVd0Q08wRkJRMnhDTEc5RVFVRnZSRHRCUVVOd1JDeHZSRUZCYjBRN1FVRkZjRVFzTWtOQlFUSkRPMEZCUXpORExESkRRVUV5UXp0QlFVVXpReXhyUkVGQmEwUTdRVUZEYkVRc05FTkJRVFJETzBGQlF6VkRMRFJEUVVFMFF6dEJRVU0xUXl4dlFrRkJiMEk3UVVGRGNFSXNOa05CUVRaRE8wRkJRemRETEdGQlFXRTdRVUZEWWl4TlFVRk5PMEZCUTA0c2NVSkJRWEZDTzBGQlEzSkNMR2RFUVVGblJEdEJRVU5vUkN4TlFVRk5PMEZCUlU0c0swSkJRU3RDTzBGQlF5OUNMRTlCUVU4N1FVRkRVQ3hyUkVGQmEwUTdRVUZEYkVRc05FTkJRVFJETzBGQlF6VkRMRFJEUVVFMFF6dEJRVU0xUXl3NFEwRkJPRU03UVVGRE9VTXNiMEpCUVc5Q08wRkJRM0JDTERaRFFVRTJRenRCUVVNM1F5eGhRVUZoTzBGQlEySXNUVUZCVFR0QlFVTk9MSEZDUVVGeFFqdEJRVU55UWl4blJFRkJaMFE3UVVGRGFFUXNUVUZCVFR0QlFVVk9MQ3RDUVVFclFqdEJRVU12UWl4UFFVRlBPMEZCUlZBc2IwTkJRVzlETzBGQlEzQkRMRFJEUVVFMFF6dEJRVU0xUXl4WlFVRlpPMEZCUTFvc1MwRkJTenRCUVVOTUxHOURRVUZ2UXp0QlFVTndReXcwUTBGQk5FTTdRVUZETlVNc1dVRkJXVHRCUVVOYUxFdEJRVXM3UVVGRFRDeExRVUZMTzBGQlJVd3NiME5CUVc5RE8wRkJRM0JETERoQ1FVRTRRanRCUVVNNVFpeFhRVUZYTzBGQlJWZ3NjVUpCUVhGQ08wRkJRM0pDTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCUVN4TFFVRkxPMGxCUXpsQ0xFbEJRVUVzY1VKQlFVMHNRMEZCWlR0SlFVTTNRaXhKUVVGTkxGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEYmtJc1NVRkJUU3hUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZCTzBsQlEzQkNMRWxCUVVrc1YwRkJWeXhEUVVGQk8wbEJSV1lzU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVWQlFVVTdVVUZETjBNc1YwRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVOQlFVRTdVVUZEY0VVc1NVRkJTU3hYUVVGWExFTkJRVU1zUzBGQlN5eEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTnNReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRaUVVOdVF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdFpRVU4yUXl3MlJrRkJOa1k3V1VGRE4wWXNlVVpCUVhsR08xbEJRM3BHTEU5QlFVMDdVMEZEVUR0UlFVTkVMRVZCUVVVc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlFUdExRVU53UWp0SlFVTkVMRWxCUVVrc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhGUVVGRk8xRkJRemRETEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGQk8xRkJRM0JGTEVsQlFVa3NWMEZCVnl4RFFVRkRMRXRCUVVzc1NVRkJTU3hUUVVGVExFVkJRVVU3V1VGRGJFTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdXVUZEYmtNc1RVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0WlFVVnNReXcyUmtGQk5rWTdXVUZETjBZc2VVWkJRWGxHTzFsQlEzcEdMRTlCUVUwN1UwRkRVRHRSUVVORUxFVkJRVVVzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUVR0TFFVTndRanRCUVVOSUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlJVWXNLMEpCUVN0Q08wRkJSUzlDTEhsQ1FVRjVRanRCUVVONlFpdzRRa0ZCT0VJN1FVRkRPVUlzZVVKQlFYbENPMEZCUTNwQ0xFdEJRVXNpZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=